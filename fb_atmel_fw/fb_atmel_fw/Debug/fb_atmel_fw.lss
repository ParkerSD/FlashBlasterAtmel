
fb_atmel_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f30  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000004  20000000  00001f30  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020004  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020004  2**0
                  CONTENTS
  4 .bss          000000a8  20000004  00001f34  00020004  2**2
                  ALLOC
  5 .stack        0000c004  200000ac  00001fdc  00020004  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020032  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002be93  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004004  00000000  00000000  0004bf1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000fd59  00000000  00000000  0004ff22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cc8  00000000  00000000  0005fc7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000010d0  00000000  00000000  00060943  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002b433  00000000  00000000  00061a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017ec0  00000000  00000000  0008ce46  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e4b3f  00000000  00000000  000a4d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002198  00000000  00000000  00189848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 c0 00 20 e9 02 00 00 e5 02 00 00 e5 02 00 00     ... ............
      10:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      2c:	e5 02 00 00 e5 02 00 00 00 00 00 00 e5 02 00 00     ................
      3c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      4c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      5c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      6c:	51 12 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     Q...............
      7c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      8c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      9c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      ac:	e5 02 00 00 e5 02 00 00 29 10 00 00 3d 10 00 00     ........)...=...
      bc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      cc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
      dc:	e5 02 00 00 e5 02 00 00 e5 02 00 00 00 00 00 00     ................
	...
      f4:	a1 11 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     104:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     114:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     124:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     134:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     144:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     154:	e5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     190:	00 00 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1a0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1b0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1c0:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     1d0:	e5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
	...
     20c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     21c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     22c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     23c:	e5 02 00 00 00 00 00 00 e5 02 00 00 e5 02 00 00     ................
     24c:	e5 02 00 00 e5 02 00 00 e5 02 00 00 e5 02 00 00     ................
     25c:	e5 02 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000004 	.word	0x20000004
     280:	00000000 	.word	0x00000000
     284:	00001f30 	.word	0x00001f30

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00001f30 	.word	0x00001f30
     2c4:	20000008 	.word	0x20000008
     2c8:	00001f30 	.word	0x00001f30
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
#include "driver_init.h"
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	SWD_GPIO_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000769 	.word	0x00000769
     2e0:	000007d5 	.word	0x000007d5

000002e4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2e4:	e7fe      	b.n	2e4 <Dummy_Handler>
	...

000002e8 <Reset_Handler>:
{
     2e8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x74>)
     2ec:	4a1c      	ldr	r2, [pc, #112]	; (360 <Reset_Handler+0x78>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d010      	beq.n	314 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f2:	4b1c      	ldr	r3, [pc, #112]	; (364 <Reset_Handler+0x7c>)
     2f4:	4a19      	ldr	r2, [pc, #100]	; (35c <Reset_Handler+0x74>)
     2f6:	429a      	cmp	r2, r3
     2f8:	d20c      	bcs.n	314 <Reset_Handler+0x2c>
     2fa:	3b01      	subs	r3, #1
     2fc:	1a9b      	subs	r3, r3, r2
     2fe:	f023 0303 	bic.w	r3, r3, #3
     302:	3304      	adds	r3, #4
     304:	4413      	add	r3, r2
     306:	4916      	ldr	r1, [pc, #88]	; (360 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     308:	f851 0b04 	ldr.w	r0, [r1], #4
     30c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     310:	429a      	cmp	r2, r3
     312:	d1f9      	bne.n	308 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     314:	4b14      	ldr	r3, [pc, #80]	; (368 <Reset_Handler+0x80>)
     316:	4a15      	ldr	r2, [pc, #84]	; (36c <Reset_Handler+0x84>)
     318:	429a      	cmp	r2, r3
     31a:	d20a      	bcs.n	332 <Reset_Handler+0x4a>
     31c:	3b01      	subs	r3, #1
     31e:	1a9b      	subs	r3, r3, r2
     320:	f023 0303 	bic.w	r3, r3, #3
     324:	3304      	adds	r3, #4
     326:	4413      	add	r3, r2
                *pDest++ = 0;
     328:	2100      	movs	r1, #0
     32a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     32e:	4293      	cmp	r3, r2
     330:	d1fb      	bne.n	32a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     332:	4b0f      	ldr	r3, [pc, #60]	; (370 <Reset_Handler+0x88>)
     334:	4a0f      	ldr	r2, [pc, #60]	; (374 <Reset_Handler+0x8c>)
     336:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     33c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     340:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     350:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x90>)
     352:	4798      	blx	r3
        main();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x94>)
     356:	4798      	blx	r3
     358:	e7fe      	b.n	358 <Reset_Handler+0x70>
     35a:	bf00      	nop
     35c:	20000000 	.word	0x20000000
     360:	00001f30 	.word	0x00001f30
     364:	20000004 	.word	0x20000004
     368:	200000ac 	.word	0x200000ac
     36c:	20000004 	.word	0x20000004
     370:	e000ed00 	.word	0xe000ed00
     374:	00000000 	.word	0x00000000
     378:	00001d25 	.word	0x00001d25
     37c:	000016d1 	.word	0x000016d1

00000380 <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     380:	4a02      	ldr	r2, [pc, #8]	; (38c <FLASH_0_CLOCK_init+0xc>)
     382:	6913      	ldr	r3, [r2, #16]
     384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     388:	6113      	str	r3, [r2, #16]
     38a:	4770      	bx	lr
     38c:	40000800 	.word	0x40000800

00000390 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     390:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     392:	4b03      	ldr	r3, [pc, #12]	; (3a0 <FLASH_0_init+0x10>)
     394:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     396:	4903      	ldr	r1, [pc, #12]	; (3a4 <FLASH_0_init+0x14>)
     398:	4803      	ldr	r0, [pc, #12]	; (3a8 <FLASH_0_init+0x18>)
     39a:	4b04      	ldr	r3, [pc, #16]	; (3ac <FLASH_0_init+0x1c>)
     39c:	4798      	blx	r3
     39e:	bd08      	pop	{r3, pc}
     3a0:	00000381 	.word	0x00000381
     3a4:	41004000 	.word	0x41004000
     3a8:	20000034 	.word	0x20000034
     3ac:	0000095d 	.word	0x0000095d

000003b0 <QUAD_SPI_0_PORT_init>:
}

void QUAD_SPI_0_PORT_init(void)
{
     3b0:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b2:	4b5a      	ldr	r3, [pc, #360]	; (51c <QUAD_SPI_0_PORT_init+0x16c>)
     3b4:	f44f 6500 	mov.w	r5, #2048	; 0x800
     3b8:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3bc:	4a58      	ldr	r2, [pc, #352]	; (520 <QUAD_SPI_0_PORT_init+0x170>)
     3be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3c2:	4858      	ldr	r0, [pc, #352]	; (524 <QUAD_SPI_0_PORT_init+0x174>)
     3c4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3c8:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     3cc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3d0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d4:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3dc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3e4:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e8:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3ec:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3f4:	f44f 7280 	mov.w	r2, #256	; 0x100
     3f8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3fa:	494b      	ldr	r1, [pc, #300]	; (528 <QUAD_SPI_0_PORT_init+0x178>)
     3fc:	6299      	str	r1, [r3, #40]	; 0x28
     3fe:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     402:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     404:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     406:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     40a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     40e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     412:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     416:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     41a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     41e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     422:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     426:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     42a:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     42e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     432:	f44f 7200 	mov.w	r2, #512	; 0x200
     436:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     438:	f501 7180 	add.w	r1, r1, #256	; 0x100
     43c:	6299      	str	r1, [r3, #40]	; 0x28
     43e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     440:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     442:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     446:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     44a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     44e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     452:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     456:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     45a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     45e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     462:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     466:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     46e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     472:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     474:	4a2d      	ldr	r2, [pc, #180]	; (52c <QUAD_SPI_0_PORT_init+0x17c>)
     476:	629a      	str	r2, [r3, #40]	; 0x28
     478:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     47a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     47c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     480:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     484:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     488:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     48c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     490:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     494:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     498:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     49c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4a0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4a8:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4aa:	4a21      	ldr	r2, [pc, #132]	; (530 <QUAD_SPI_0_PORT_init+0x180>)
     4ac:	629a      	str	r2, [r3, #40]	; 0x28
     4ae:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4b0:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4b2:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     4b6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4ba:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4be:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4c6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ca:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ce:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4d2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4d6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4de:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4e2:	4a14      	ldr	r2, [pc, #80]	; (534 <QUAD_SPI_0_PORT_init+0x184>)
     4e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4e8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4ec:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     4f0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4f4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4f8:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     4fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     500:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     504:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     508:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     50c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     510:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     514:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     518:	bc30      	pop	{r4, r5}
     51a:	4770      	bx	lr
     51c:	41008000 	.word	0x41008000
     520:	40020800 	.word	0x40020800
     524:	c0020000 	.word	0xc0020000
     528:	40000100 	.word	0x40000100
     52c:	40000400 	.word	0x40000400
     530:	40000800 	.word	0x40000800
     534:	40020400 	.word	0x40020400

00000538 <QUAD_SPI_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     538:	4b06      	ldr	r3, [pc, #24]	; (554 <QUAD_SPI_0_CLOCK_init+0x1c>)
     53a:	691a      	ldr	r2, [r3, #16]
     53c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     540:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     542:	691a      	ldr	r2, [r3, #16]
     544:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     548:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     54a:	69da      	ldr	r2, [r3, #28]
     54c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     550:	61da      	str	r2, [r3, #28]
     552:	4770      	bx	lr
     554:	40000800 	.word	0x40000800

00000558 <QUAD_SPI_0_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QUAD_SPI_0_init(void)
{
     558:	b508      	push	{r3, lr}
	QUAD_SPI_0_CLOCK_init();
     55a:	4b04      	ldr	r3, [pc, #16]	; (56c <QUAD_SPI_0_init+0x14>)
     55c:	4798      	blx	r3
	qspi_sync_init(&QUAD_SPI_0, QSPI);
     55e:	4904      	ldr	r1, [pc, #16]	; (570 <QUAD_SPI_0_init+0x18>)
     560:	4804      	ldr	r0, [pc, #16]	; (574 <QUAD_SPI_0_init+0x1c>)
     562:	4b05      	ldr	r3, [pc, #20]	; (578 <QUAD_SPI_0_init+0x20>)
     564:	4798      	blx	r3
	QUAD_SPI_0_PORT_init();
     566:	4b05      	ldr	r3, [pc, #20]	; (57c <QUAD_SPI_0_init+0x24>)
     568:	4798      	blx	r3
     56a:	bd08      	pop	{r3, pc}
     56c:	00000539 	.word	0x00000539
     570:	42003400 	.word	0x42003400
     574:	2000006c 	.word	0x2000006c
     578:	00000bb9 	.word	0x00000bb9
     57c:	000003b1 	.word	0x000003b1

00000580 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     580:	4b28      	ldr	r3, [pc, #160]	; (624 <SPI_0_PORT_init+0xa4>)
     582:	2210      	movs	r2, #16
     584:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     586:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     588:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     58c:	629a      	str	r2, [r3, #40]	; 0x28
     58e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     592:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     594:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     598:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     59c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ac:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5b4:	2220      	movs	r2, #32
     5b6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5b8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5be:	629a      	str	r2, [r3, #40]	; 0x28
     5c0:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     5c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ca:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5d6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5da:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5de:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5e2:	2240      	movs	r2, #64	; 0x40
     5e4:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5ea:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     5ee:	629a      	str	r2, [r3, #40]	; 0x28
     5f0:	4a0d      	ldr	r2, [pc, #52]	; (628 <SPI_0_PORT_init+0xa8>)
     5f2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5f4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     5f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     600:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     608:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     610:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     614:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     618:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     620:	4770      	bx	lr
     622:	bf00      	nop
     624:	41008000 	.word	0x41008000
     628:	c0020000 	.word	0xc0020000

0000062c <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     62c:	4b06      	ldr	r3, [pc, #24]	; (648 <SPI_0_CLOCK_init+0x1c>)
     62e:	2240      	movs	r2, #64	; 0x40
     630:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     634:	2243      	movs	r2, #67	; 0x43
     636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     63a:	4a04      	ldr	r2, [pc, #16]	; (64c <SPI_0_CLOCK_init+0x20>)
     63c:	6953      	ldr	r3, [r2, #20]
     63e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     642:	6153      	str	r3, [r2, #20]
     644:	4770      	bx	lr
     646:	bf00      	nop
     648:	40001c00 	.word	0x40001c00
     64c:	40000800 	.word	0x40000800

00000650 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     650:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     652:	4b04      	ldr	r3, [pc, #16]	; (664 <SPI_0_init+0x14>)
     654:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     656:	4904      	ldr	r1, [pc, #16]	; (668 <SPI_0_init+0x18>)
     658:	4804      	ldr	r0, [pc, #16]	; (66c <SPI_0_init+0x1c>)
     65a:	4b05      	ldr	r3, [pc, #20]	; (670 <SPI_0_init+0x20>)
     65c:	4798      	blx	r3
	SPI_0_PORT_init();
     65e:	4b05      	ldr	r3, [pc, #20]	; (674 <SPI_0_init+0x24>)
     660:	4798      	blx	r3
     662:	bd08      	pop	{r3, pc}
     664:	0000062d 	.word	0x0000062d
     668:	40003000 	.word	0x40003000
     66c:	20000054 	.word	0x20000054
     670:	00000c41 	.word	0x00000c41
     674:	00000581 	.word	0x00000581

00000678 <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     678:	4b16      	ldr	r3, [pc, #88]	; (6d4 <I2C_0_PORT_init+0x5c>)
     67a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     67e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     686:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     68a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     68e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     696:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     69a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     69e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6a6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     6aa:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     6b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6ca:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     6d2:	4770      	bx	lr
     6d4:	41008000 	.word	0x41008000

000006d8 <I2C_0_CLOCK_init>:
     6d8:	4b06      	ldr	r3, [pc, #24]	; (6f4 <I2C_0_CLOCK_init+0x1c>)
     6da:	2240      	movs	r2, #64	; 0x40
     6dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     6e0:	2243      	movs	r2, #67	; 0x43
     6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     6e6:	4a04      	ldr	r2, [pc, #16]	; (6f8 <I2C_0_CLOCK_init+0x20>)
     6e8:	6993      	ldr	r3, [r2, #24]
     6ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     6ee:	6193      	str	r3, [r2, #24]
     6f0:	4770      	bx	lr
     6f2:	bf00      	nop
     6f4:	40001c00 	.word	0x40001c00
     6f8:	40000800 	.word	0x40000800

000006fc <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     6fc:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     6fe:	4b04      	ldr	r3, [pc, #16]	; (710 <I2C_0_init+0x14>)
     700:	4798      	blx	r3
	i2c_s_sync_init(&I2C_0, SERCOM3);
     702:	4904      	ldr	r1, [pc, #16]	; (714 <I2C_0_init+0x18>)
     704:	4804      	ldr	r0, [pc, #16]	; (718 <I2C_0_init+0x1c>)
     706:	4b05      	ldr	r3, [pc, #20]	; (71c <I2C_0_init+0x20>)
     708:	4798      	blx	r3
	I2C_0_PORT_init();
     70a:	4b05      	ldr	r3, [pc, #20]	; (720 <I2C_0_init+0x24>)
     70c:	4798      	blx	r3
     70e:	bd08      	pop	{r3, pc}
     710:	000006d9 	.word	0x000006d9
     714:	41014000 	.word	0x41014000
     718:	20000070 	.word	0x20000070
     71c:	00000a79 	.word	0x00000a79
     720:	00000679 	.word	0x00000679

00000724 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     724:	4a02      	ldr	r2, [pc, #8]	; (730 <WDT_0_CLOCK_init+0xc>)
     726:	6953      	ldr	r3, [r2, #20]
     728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     72c:	6153      	str	r3, [r2, #20]
     72e:	4770      	bx	lr
     730:	40000800 	.word	0x40000800

00000734 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     734:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     736:	4b06      	ldr	r3, [pc, #24]	; (750 <WDT_0_init+0x1c>)
     738:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     73a:	2248      	movs	r2, #72	; 0x48
     73c:	4905      	ldr	r1, [pc, #20]	; (754 <WDT_0_init+0x20>)
     73e:	2001      	movs	r0, #1
     740:	4b05      	ldr	r3, [pc, #20]	; (758 <WDT_0_init+0x24>)
     742:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     744:	4805      	ldr	r0, [pc, #20]	; (75c <WDT_0_init+0x28>)
     746:	4b06      	ldr	r3, [pc, #24]	; (760 <WDT_0_init+0x2c>)
     748:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     74a:	4b06      	ldr	r3, [pc, #24]	; (764 <WDT_0_init+0x30>)
     74c:	4798      	blx	r3
     74e:	bd08      	pop	{r3, pc}
     750:	00000725 	.word	0x00000725
     754:	00001d6c 	.word	0x00001d6c
     758:	00000eb1 	.word	0x00000eb1
     75c:	20000050 	.word	0x20000050
     760:	40002000 	.word	0x40002000
     764:	00001665 	.word	0x00001665

00000768 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     768:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     76a:	4b0b      	ldr	r3, [pc, #44]	; (798 <system_init+0x30>)
     76c:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     76e:	4b0b      	ldr	r3, [pc, #44]	; (79c <system_init+0x34>)
     770:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     772:	4a0b      	ldr	r2, [pc, #44]	; (7a0 <system_init+0x38>)
     774:	6953      	ldr	r3, [r2, #20]
     776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     77a:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     77c:	4b09      	ldr	r3, [pc, #36]	; (7a4 <system_init+0x3c>)
     77e:	4798      	blx	r3
     780:	4602      	mov	r2, r0
     782:	4909      	ldr	r1, [pc, #36]	; (7a8 <system_init+0x40>)
     784:	4809      	ldr	r0, [pc, #36]	; (7ac <system_init+0x44>)
     786:	4b0a      	ldr	r3, [pc, #40]	; (7b0 <system_init+0x48>)
     788:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     78a:	4b0a      	ldr	r3, [pc, #40]	; (7b4 <system_init+0x4c>)
     78c:	4798      	blx	r3

	I2C_0_init();
     78e:	4b0a      	ldr	r3, [pc, #40]	; (7b8 <system_init+0x50>)
     790:	4798      	blx	r3

	WDT_0_init();
     792:	4b0a      	ldr	r3, [pc, #40]	; (7bc <system_init+0x54>)
     794:	4798      	blx	r3
     796:	bd08      	pop	{r3, pc}
     798:	00000f19 	.word	0x00000f19
     79c:	00000391 	.word	0x00000391
     7a0:	40000800 	.word	0x40000800
     7a4:	0000124d 	.word	0x0000124d
     7a8:	40002400 	.word	0x40002400
     7ac:	2000007c 	.word	0x2000007c
     7b0:	00000e75 	.word	0x00000e75
     7b4:	00000651 	.word	0x00000651
     7b8:	000006fd 	.word	0x000006fd
     7bc:	00000735 	.word	0x00000735

000007c0 <nor_flash_qspi_init>:
}


void nor_flash_qspi_init(void)
{
     7c0:	b508      	push	{r3, lr}
	QUAD_SPI_0_init();
     7c2:	4b02      	ldr	r3, [pc, #8]	; (7cc <nor_flash_qspi_init+0xc>)
     7c4:	4798      	blx	r3
	spi_nor_flash_init();
     7c6:	4b02      	ldr	r3, [pc, #8]	; (7d0 <nor_flash_qspi_init+0x10>)
     7c8:	4798      	blx	r3
     7ca:	bd08      	pop	{r3, pc}
     7cc:	00000559 	.word	0x00000559
     7d0:	00001cf5 	.word	0x00001cf5

000007d4 <SWD_GPIO_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7d4:	4b1e      	ldr	r3, [pc, #120]	; (850 <SWD_GPIO_init+0x7c>)
     7d6:	2101      	movs	r1, #1
     7d8:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7da:	4a1e      	ldr	r2, [pc, #120]	; (854 <SWD_GPIO_init+0x80>)
     7dc:	629a      	str	r2, [r3, #40]	; 0x28
     7de:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7e2:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7e4:	6199      	str	r1, [r3, #24]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7e6:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
     7ea:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     7ee:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7f2:	2102      	movs	r1, #2
     7f4:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7f6:	4818      	ldr	r0, [pc, #96]	; (858 <SWD_GPIO_init+0x84>)
     7f8:	6298      	str	r0, [r3, #40]	; 0x28
     7fa:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7fc:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7fe:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
     802:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     806:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     80a:	2108      	movs	r1, #8
     80c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     810:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     814:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     818:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     81c:	490f      	ldr	r1, [pc, #60]	; (85c <SWD_GPIO_init+0x88>)
     81e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     822:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
     826:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     82a:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     82e:	2104      	movs	r1, #4
     830:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     834:	3002      	adds	r0, #2
     836:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     83a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     83e:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     842:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
     846:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     84a:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
     84e:	4770      	bx	lr
     850:	41008000 	.word	0x41008000
     854:	40000001 	.word	0x40000001
     858:	40000002 	.word	0x40000002
     85c:	c0020000 	.word	0xc0020000

00000860 <SWD_tx>:
	timer_start(&TIMER_0);
}


void SWD_tx(uint8_t* buffer, uint16_t length) //SPI MOSI
{	
     860:	b570      	push	{r4, r5, r6, lr}
     862:	b082      	sub	sp, #8
     864:	4605      	mov	r5, r0
     866:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     868:	4b09      	ldr	r3, [pc, #36]	; (890 <SWD_tx+0x30>)
     86a:	2201      	movs	r2, #1
     86c:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     86e:	2202      	movs	r2, #2
     870:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(MOSI_EN, true);
	gpio_set_pin_level(MISO_EN, false);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     872:	4c08      	ldr	r4, [pc, #32]	; (894 <SWD_tx+0x34>)
     874:	a901      	add	r1, sp, #4
     876:	4620      	mov	r0, r4
     878:	4b07      	ldr	r3, [pc, #28]	; (898 <SWD_tx+0x38>)
     87a:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     87c:	4620      	mov	r0, r4
     87e:	4b07      	ldr	r3, [pc, #28]	; (89c <SWD_tx+0x3c>)
     880:	4798      	blx	r3
	io_write(io, buffer, length);
     882:	4632      	mov	r2, r6
     884:	4629      	mov	r1, r5
     886:	9801      	ldr	r0, [sp, #4]
     888:	4b05      	ldr	r3, [pc, #20]	; (8a0 <SWD_tx+0x40>)
     88a:	4798      	blx	r3
}
     88c:	b002      	add	sp, #8
     88e:	bd70      	pop	{r4, r5, r6, pc}
     890:	41008000 	.word	0x41008000
     894:	20000054 	.word	0x20000054
     898:	00000d71 	.word	0x00000d71
     89c:	00000c91 	.word	0x00000c91
     8a0:	00000b59 	.word	0x00000b59

000008a4 <SWD_rx>:

void SWD_rx(uint8_t* buffer, uint16_t length) //SPI MISO
{
     8a4:	b570      	push	{r4, r5, r6, lr}
     8a6:	b082      	sub	sp, #8
     8a8:	4605      	mov	r5, r0
     8aa:	460e      	mov	r6, r1
     8ac:	4b09      	ldr	r3, [pc, #36]	; (8d4 <SWD_rx+0x30>)
     8ae:	2201      	movs	r2, #1
     8b0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8b2:	2202      	movs	r2, #2
     8b4:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(MOSI_EN, false);
	gpio_set_pin_level(MISO_EN, true);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     8b6:	4c08      	ldr	r4, [pc, #32]	; (8d8 <SWD_rx+0x34>)
     8b8:	a901      	add	r1, sp, #4
     8ba:	4620      	mov	r0, r4
     8bc:	4b07      	ldr	r3, [pc, #28]	; (8dc <SWD_rx+0x38>)
     8be:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     8c0:	4620      	mov	r0, r4
     8c2:	4b07      	ldr	r3, [pc, #28]	; (8e0 <SWD_rx+0x3c>)
     8c4:	4798      	blx	r3
	io_read(io, buffer, length);
     8c6:	4632      	mov	r2, r6
     8c8:	4629      	mov	r1, r5
     8ca:	9801      	ldr	r0, [sp, #4]
     8cc:	4b05      	ldr	r3, [pc, #20]	; (8e4 <SWD_rx+0x40>)
     8ce:	4798      	blx	r3
}
     8d0:	b002      	add	sp, #8
     8d2:	bd70      	pop	{r4, r5, r6, pc}
     8d4:	41008000 	.word	0x41008000
     8d8:	20000054 	.word	0x20000054
     8dc:	00000d71 	.word	0x00000d71
     8e0:	00000c91 	.word	0x00000c91
     8e4:	00000b89 	.word	0x00000b89

000008e8 <I2C_read>:
	spi_m_sync_enable(&SPI_0);
	_spi_m_sync_trans(&SPI_0.dev, &spi_istruct);//(struct _spi_m_sync_dev *dev, const struct spi_msg *msg);
}

void I2C_read(uint8_t* buffer, uint16_t length)
{
     8e8:	b570      	push	{r4, r5, r6, lr}
     8ea:	b082      	sub	sp, #8
     8ec:	4605      	mov	r5, r0
     8ee:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     8f0:	4c09      	ldr	r4, [pc, #36]	; (918 <I2C_read+0x30>)
     8f2:	a901      	add	r1, sp, #4
     8f4:	4620      	mov	r0, r4
     8f6:	4b09      	ldr	r3, [pc, #36]	; (91c <I2C_read+0x34>)
     8f8:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     8fa:	2110      	movs	r1, #16
     8fc:	4620      	mov	r0, r4
     8fe:	4b08      	ldr	r3, [pc, #32]	; (920 <I2C_read+0x38>)
     900:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     902:	4620      	mov	r0, r4
     904:	4b07      	ldr	r3, [pc, #28]	; (924 <I2C_read+0x3c>)
     906:	4798      	blx	r3

	io_read(io, buffer, length);
     908:	4632      	mov	r2, r6
     90a:	4629      	mov	r1, r5
     90c:	9801      	ldr	r0, [sp, #4]
     90e:	4b06      	ldr	r3, [pc, #24]	; (928 <I2C_read+0x40>)
     910:	4798      	blx	r3
}
     912:	b002      	add	sp, #8
     914:	bd70      	pop	{r4, r5, r6, pc}
     916:	bf00      	nop
     918:	20000070 	.word	0x20000070
     91c:	00000b2d 	.word	0x00000b2d
     920:	00000ac1 	.word	0x00000ac1
     924:	00000b05 	.word	0x00000b05
     928:	00000b89 	.word	0x00000b89

0000092c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     92c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     930:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     932:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     934:	f3bf 8f5f 	dmb	sy
     938:	4770      	bx	lr

0000093a <atomic_leave_critical>:
     93a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     93e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     940:	f383 8810 	msr	PRIMASK, r3
     944:	4770      	bx	lr

00000946 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     946:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     948:	6943      	ldr	r3, [r0, #20]
     94a:	b103      	cbz	r3, 94e <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     94c:	4798      	blx	r3
     94e:	bd08      	pop	{r3, pc}

00000950 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     950:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     952:	6983      	ldr	r3, [r0, #24]
     954:	b103      	cbz	r3, 958 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     956:	4798      	blx	r3
     958:	bd08      	pop	{r3, pc}
	...

0000095c <flash_init>:
{
     95c:	b538      	push	{r3, r4, r5, lr}
     95e:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     960:	4604      	mov	r4, r0
     962:	b190      	cbz	r0, 98a <flash_init+0x2e>
     964:	1c08      	adds	r0, r1, #0
     966:	bf18      	it	ne
     968:	2001      	movne	r0, #1
     96a:	2238      	movs	r2, #56	; 0x38
     96c:	4908      	ldr	r1, [pc, #32]	; (990 <flash_init+0x34>)
     96e:	4b09      	ldr	r3, [pc, #36]	; (994 <flash_init+0x38>)
     970:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     972:	4629      	mov	r1, r5
     974:	4620      	mov	r0, r4
     976:	4b08      	ldr	r3, [pc, #32]	; (998 <flash_init+0x3c>)
     978:	4798      	blx	r3
	if (rc) {
     97a:	4603      	mov	r3, r0
     97c:	b918      	cbnz	r0, 986 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     97e:	4a07      	ldr	r2, [pc, #28]	; (99c <flash_init+0x40>)
     980:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     982:	4a07      	ldr	r2, [pc, #28]	; (9a0 <flash_init+0x44>)
     984:	6062      	str	r2, [r4, #4]
}
     986:	4618      	mov	r0, r3
     988:	bd38      	pop	{r3, r4, r5, pc}
     98a:	2000      	movs	r0, #0
     98c:	e7ed      	b.n	96a <flash_init+0xe>
     98e:	bf00      	nop
     990:	00001d88 	.word	0x00001d88
     994:	00000eb1 	.word	0x00000eb1
     998:	00000fb1 	.word	0x00000fb1
     99c:	00000947 	.word	0x00000947
     9a0:	00000951 	.word	0x00000951

000009a4 <i2c_s_sync_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_sync_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     9a8:	460f      	mov	r7, r1
     9aa:	4690      	mov	r8, r2
	uint16_t                      offset = 0;
	struct i2c_s_sync_descriptor *descr  = CONTAINER_OF(io, struct i2c_s_sync_descriptor, io);

	ASSERT(io && buf && length);
     9ac:	4604      	mov	r4, r0
     9ae:	b320      	cbz	r0, 9fa <i2c_s_sync_write+0x56>
     9b0:	b329      	cbz	r1, 9fe <i2c_s_sync_write+0x5a>
     9b2:	1c10      	adds	r0, r2, #0
     9b4:	bf18      	it	ne
     9b6:	2001      	movne	r0, #1
     9b8:	22b6      	movs	r2, #182	; 0xb6
     9ba:	4912      	ldr	r1, [pc, #72]	; (a04 <i2c_s_sync_write+0x60>)
     9bc:	4b12      	ldr	r3, [pc, #72]	; (a08 <i2c_s_sync_write+0x64>)
     9be:	4798      	blx	r3

	while (!_i2c_s_sync_is_byte_sent(&descr->device))
     9c0:	3c04      	subs	r4, #4
     9c2:	4d12      	ldr	r5, [pc, #72]	; (a0c <i2c_s_sync_write+0x68>)
     9c4:	4620      	mov	r0, r4
     9c6:	47a8      	blx	r5
     9c8:	2800      	cmp	r0, #0
     9ca:	d0fb      	beq.n	9c4 <i2c_s_sync_write+0x20>
     9cc:	3f01      	subs	r7, #1
     9ce:	2600      	movs	r6, #0
		;
	do {
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     9d0:	f8df 9040 	ldr.w	r9, [pc, #64]	; a14 <i2c_s_sync_write+0x70>
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     9d4:	4d0d      	ldr	r5, [pc, #52]	; (a0c <i2c_s_sync_write+0x68>)
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     9d6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     9da:	4620      	mov	r0, r4
     9dc:	47c8      	blx	r9
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     9de:	4620      	mov	r0, r4
     9e0:	47a8      	blx	r5
     9e2:	2800      	cmp	r0, #0
     9e4:	d0fb      	beq.n	9de <i2c_s_sync_write+0x3a>
			;
	} while (++offset < length);
     9e6:	3601      	adds	r6, #1
     9e8:	b2b6      	uxth	r6, r6
     9ea:	45b0      	cmp	r8, r6
     9ec:	d8f3      	bhi.n	9d6 <i2c_s_sync_write+0x32>

	/* To ensure no more data needs to be sent */
	_i2c_s_sync_clear_data_ready_flag(&descr->device);
     9ee:	4620      	mov	r0, r4
     9f0:	4b07      	ldr	r3, [pc, #28]	; (a10 <i2c_s_sync_write+0x6c>)
     9f2:	4798      	blx	r3

	return (int32_t)offset;
}
     9f4:	4630      	mov	r0, r6
     9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     9fa:	2000      	movs	r0, #0
     9fc:	e7dc      	b.n	9b8 <i2c_s_sync_write+0x14>
     9fe:	2000      	movs	r0, #0
     a00:	e7da      	b.n	9b8 <i2c_s_sync_write+0x14>
     a02:	bf00      	nop
     a04:	00001da0 	.word	0x00001da0
     a08:	00000eb1 	.word	0x00000eb1
     a0c:	00001443 	.word	0x00001443
     a10:	00001457 	.word	0x00001457
     a14:	00001435 	.word	0x00001435

00000a18 <i2c_s_sync_read>:
{
     a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a1c:	460f      	mov	r7, r1
     a1e:	4690      	mov	r8, r2
	ASSERT(io && buf && length);
     a20:	4604      	mov	r4, r0
     a22:	b1e0      	cbz	r0, a5e <i2c_s_sync_read+0x46>
     a24:	b1e9      	cbz	r1, a62 <i2c_s_sync_read+0x4a>
     a26:	1c10      	adds	r0, r2, #0
     a28:	bf18      	it	ne
     a2a:	2001      	movne	r0, #1
     a2c:	229c      	movs	r2, #156	; 0x9c
     a2e:	490e      	ldr	r1, [pc, #56]	; (a68 <i2c_s_sync_read+0x50>)
     a30:	4b0e      	ldr	r3, [pc, #56]	; (a6c <i2c_s_sync_read+0x54>)
     a32:	4798      	blx	r3
     a34:	3f01      	subs	r7, #1
	uint16_t                      offset = 0;
     a36:	2600      	movs	r6, #0
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     a38:	3c04      	subs	r4, #4
     a3a:	4d0d      	ldr	r5, [pc, #52]	; (a70 <i2c_s_sync_read+0x58>)
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     a3c:	f8df 9034 	ldr.w	r9, [pc, #52]	; a74 <i2c_s_sync_read+0x5c>
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     a40:	4620      	mov	r0, r4
     a42:	47a8      	blx	r5
     a44:	2800      	cmp	r0, #0
     a46:	d0fb      	beq.n	a40 <i2c_s_sync_read+0x28>
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     a48:	4620      	mov	r0, r4
     a4a:	47c8      	blx	r9
     a4c:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     a50:	3601      	adds	r6, #1
     a52:	b2b6      	uxth	r6, r6
     a54:	45b0      	cmp	r8, r6
     a56:	d8f3      	bhi.n	a40 <i2c_s_sync_read+0x28>
}
     a58:	4630      	mov	r0, r6
     a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     a5e:	2000      	movs	r0, #0
     a60:	e7e4      	b.n	a2c <i2c_s_sync_read+0x14>
     a62:	2000      	movs	r0, #0
     a64:	e7e2      	b.n	a2c <i2c_s_sync_read+0x14>
     a66:	bf00      	nop
     a68:	00001da0 	.word	0x00001da0
     a6c:	00000eb1 	.word	0x00000eb1
     a70:	0000144d 	.word	0x0000144d
     a74:	0000143b 	.word	0x0000143b

00000a78 <i2c_s_sync_init>:
{
     a78:	b538      	push	{r3, r4, r5, lr}
     a7a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     a7c:	4604      	mov	r4, r0
     a7e:	b190      	cbz	r0, aa6 <i2c_s_sync_init+0x2e>
     a80:	1c08      	adds	r0, r1, #0
     a82:	bf18      	it	ne
     a84:	2001      	movne	r0, #1
     a86:	2235      	movs	r2, #53	; 0x35
     a88:	4908      	ldr	r1, [pc, #32]	; (aac <i2c_s_sync_init+0x34>)
     a8a:	4b09      	ldr	r3, [pc, #36]	; (ab0 <i2c_s_sync_init+0x38>)
     a8c:	4798      	blx	r3
	init_status = _i2c_s_sync_init(&descr->device, hw);
     a8e:	4629      	mov	r1, r5
     a90:	4620      	mov	r0, r4
     a92:	4b08      	ldr	r3, [pc, #32]	; (ab4 <i2c_s_sync_init+0x3c>)
     a94:	4798      	blx	r3
	if (init_status) {
     a96:	4603      	mov	r3, r0
     a98:	b918      	cbnz	r0, aa2 <i2c_s_sync_init+0x2a>
	descr->io.read  = i2c_s_sync_read;
     a9a:	4a07      	ldr	r2, [pc, #28]	; (ab8 <i2c_s_sync_init+0x40>)
     a9c:	60a2      	str	r2, [r4, #8]
	descr->io.write = i2c_s_sync_write;
     a9e:	4a07      	ldr	r2, [pc, #28]	; (abc <i2c_s_sync_init+0x44>)
     aa0:	6062      	str	r2, [r4, #4]
}
     aa2:	4618      	mov	r0, r3
     aa4:	bd38      	pop	{r3, r4, r5, pc}
     aa6:	2000      	movs	r0, #0
     aa8:	e7ed      	b.n	a86 <i2c_s_sync_init+0xe>
     aaa:	bf00      	nop
     aac:	00001da0 	.word	0x00001da0
     ab0:	00000eb1 	.word	0x00000eb1
     ab4:	000013d1 	.word	0x000013d1
     ab8:	00000a19 	.word	0x00000a19
     abc:	000009a5 	.word	0x000009a5

00000ac0 <i2c_s_sync_set_addr>:
{
     ac0:	b538      	push	{r3, r4, r5, lr}
     ac2:	460d      	mov	r5, r1
	ASSERT(descr);
     ac4:	4604      	mov	r4, r0
     ac6:	2251      	movs	r2, #81	; 0x51
     ac8:	490a      	ldr	r1, [pc, #40]	; (af4 <i2c_s_sync_set_addr+0x34>)
     aca:	3000      	adds	r0, #0
     acc:	bf18      	it	ne
     ace:	2001      	movne	r0, #1
     ad0:	4b09      	ldr	r3, [pc, #36]	; (af8 <i2c_s_sync_set_addr+0x38>)
     ad2:	4798      	blx	r3
	if (!_i2c_s_sync_is_10bit_addressing_on(&descr->device)) {
     ad4:	4620      	mov	r0, r4
     ad6:	4b09      	ldr	r3, [pc, #36]	; (afc <i2c_s_sync_set_addr+0x3c>)
     ad8:	4798      	blx	r3
     ada:	b120      	cbz	r0, ae6 <i2c_s_sync_set_addr+0x26>
	return _i2c_s_sync_set_address(&descr->device, address);
     adc:	4629      	mov	r1, r5
     ade:	4620      	mov	r0, r4
     ae0:	4b07      	ldr	r3, [pc, #28]	; (b00 <i2c_s_sync_set_addr+0x40>)
     ae2:	4798      	blx	r3
}
     ae4:	bd38      	pop	{r3, r4, r5, pc}
		return _i2c_s_sync_set_address(&descr->device, address & 0x7F);
     ae6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
     aea:	4620      	mov	r0, r4
     aec:	4b04      	ldr	r3, [pc, #16]	; (b00 <i2c_s_sync_set_addr+0x40>)
     aee:	4798      	blx	r3
     af0:	bd38      	pop	{r3, r4, r5, pc}
     af2:	bf00      	nop
     af4:	00001da0 	.word	0x00001da0
     af8:	00000eb1 	.word	0x00000eb1
     afc:	0000141b 	.word	0x0000141b
     b00:	00001425 	.word	0x00001425

00000b04 <i2c_s_sync_enable>:
{
     b04:	b510      	push	{r4, lr}
	ASSERT(descr);
     b06:	4604      	mov	r4, r0
     b08:	225f      	movs	r2, #95	; 0x5f
     b0a:	4905      	ldr	r1, [pc, #20]	; (b20 <i2c_s_sync_enable+0x1c>)
     b0c:	3000      	adds	r0, #0
     b0e:	bf18      	it	ne
     b10:	2001      	movne	r0, #1
     b12:	4b04      	ldr	r3, [pc, #16]	; (b24 <i2c_s_sync_enable+0x20>)
     b14:	4798      	blx	r3
	return _i2c_s_sync_enable(&descr->device);
     b16:	4620      	mov	r0, r4
     b18:	4b03      	ldr	r3, [pc, #12]	; (b28 <i2c_s_sync_enable+0x24>)
     b1a:	4798      	blx	r3
}
     b1c:	bd10      	pop	{r4, pc}
     b1e:	bf00      	nop
     b20:	00001da0 	.word	0x00001da0
     b24:	00000eb1 	.word	0x00000eb1
     b28:	00001405 	.word	0x00001405

00000b2c <i2c_s_sync_get_io_descriptor>:
{
     b2c:	b538      	push	{r3, r4, r5, lr}
     b2e:	460d      	mov	r5, r1
	ASSERT(descr && io);
     b30:	4604      	mov	r4, r0
     b32:	b150      	cbz	r0, b4a <i2c_s_sync_get_io_descriptor+0x1e>
     b34:	1c08      	adds	r0, r1, #0
     b36:	bf18      	it	ne
     b38:	2001      	movne	r0, #1
     b3a:	2273      	movs	r2, #115	; 0x73
     b3c:	4904      	ldr	r1, [pc, #16]	; (b50 <i2c_s_sync_get_io_descriptor+0x24>)
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <i2c_s_sync_get_io_descriptor+0x28>)
     b40:	4798      	blx	r3
	*io = &descr->io;
     b42:	3404      	adds	r4, #4
     b44:	602c      	str	r4, [r5, #0]
}
     b46:	2000      	movs	r0, #0
     b48:	bd38      	pop	{r3, r4, r5, pc}
     b4a:	2000      	movs	r0, #0
     b4c:	e7f5      	b.n	b3a <i2c_s_sync_get_io_descriptor+0xe>
     b4e:	bf00      	nop
     b50:	00001da0 	.word	0x00001da0
     b54:	00000eb1 	.word	0x00000eb1

00000b58 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     b58:	b570      	push	{r4, r5, r6, lr}
     b5a:	460d      	mov	r5, r1
     b5c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b5e:	4604      	mov	r4, r0
     b60:	b160      	cbz	r0, b7c <io_write+0x24>
     b62:	1c08      	adds	r0, r1, #0
     b64:	bf18      	it	ne
     b66:	2001      	movne	r0, #1
     b68:	2234      	movs	r2, #52	; 0x34
     b6a:	4905      	ldr	r1, [pc, #20]	; (b80 <io_write+0x28>)
     b6c:	4b05      	ldr	r3, [pc, #20]	; (b84 <io_write+0x2c>)
     b6e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     b70:	6823      	ldr	r3, [r4, #0]
     b72:	4632      	mov	r2, r6
     b74:	4629      	mov	r1, r5
     b76:	4620      	mov	r0, r4
     b78:	4798      	blx	r3
}
     b7a:	bd70      	pop	{r4, r5, r6, pc}
     b7c:	2000      	movs	r0, #0
     b7e:	e7f3      	b.n	b68 <io_write+0x10>
     b80:	00001dbc 	.word	0x00001dbc
     b84:	00000eb1 	.word	0x00000eb1

00000b88 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     b88:	b570      	push	{r4, r5, r6, lr}
     b8a:	460d      	mov	r5, r1
     b8c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b8e:	4604      	mov	r4, r0
     b90:	b160      	cbz	r0, bac <io_read+0x24>
     b92:	1c08      	adds	r0, r1, #0
     b94:	bf18      	it	ne
     b96:	2001      	movne	r0, #1
     b98:	223d      	movs	r2, #61	; 0x3d
     b9a:	4905      	ldr	r1, [pc, #20]	; (bb0 <io_read+0x28>)
     b9c:	4b05      	ldr	r3, [pc, #20]	; (bb4 <io_read+0x2c>)
     b9e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     ba0:	6863      	ldr	r3, [r4, #4]
     ba2:	4632      	mov	r2, r6
     ba4:	4629      	mov	r1, r5
     ba6:	4620      	mov	r0, r4
     ba8:	4798      	blx	r3
}
     baa:	bd70      	pop	{r4, r5, r6, pc}
     bac:	2000      	movs	r0, #0
     bae:	e7f3      	b.n	b98 <io_read+0x10>
     bb0:	00001dbc 	.word	0x00001dbc
     bb4:	00000eb1 	.word	0x00000eb1

00000bb8 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
     bb8:	b538      	push	{r3, r4, r5, lr}
     bba:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
     bbc:	4605      	mov	r5, r0
     bbe:	b158      	cbz	r0, bd8 <qspi_sync_init+0x20>
     bc0:	1c08      	adds	r0, r1, #0
     bc2:	bf18      	it	ne
     bc4:	2001      	movne	r0, #1
     bc6:	2231      	movs	r2, #49	; 0x31
     bc8:	4904      	ldr	r1, [pc, #16]	; (bdc <qspi_sync_init+0x24>)
     bca:	4b05      	ldr	r3, [pc, #20]	; (be0 <qspi_sync_init+0x28>)
     bcc:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
     bce:	4621      	mov	r1, r4
     bd0:	4628      	mov	r0, r5
     bd2:	4b04      	ldr	r3, [pc, #16]	; (be4 <qspi_sync_init+0x2c>)
     bd4:	4798      	blx	r3
}
     bd6:	bd38      	pop	{r3, r4, r5, pc}
     bd8:	2000      	movs	r0, #0
     bda:	e7f4      	b.n	bc6 <qspi_sync_init+0xe>
     bdc:	00001dd0 	.word	0x00001dd0
     be0:	00000eb1 	.word	0x00000eb1
     be4:	00001085 	.word	0x00001085

00000be8 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
     be8:	b510      	push	{r4, lr}
	ASSERT(qspi);
     bea:	4604      	mov	r4, r0
     bec:	223f      	movs	r2, #63	; 0x3f
     bee:	4905      	ldr	r1, [pc, #20]	; (c04 <qspi_sync_enable+0x1c>)
     bf0:	3000      	adds	r0, #0
     bf2:	bf18      	it	ne
     bf4:	2001      	movne	r0, #1
     bf6:	4b04      	ldr	r3, [pc, #16]	; (c08 <qspi_sync_enable+0x20>)
     bf8:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
     bfa:	4620      	mov	r0, r4
     bfc:	4b03      	ldr	r3, [pc, #12]	; (c0c <qspi_sync_enable+0x24>)
     bfe:	4798      	blx	r3
}
     c00:	bd10      	pop	{r4, pc}
     c02:	bf00      	nop
     c04:	00001dd0 	.word	0x00001dd0
     c08:	00000eb1 	.word	0x00000eb1
     c0c:	000010bd 	.word	0x000010bd

00000c10 <qspi_sync_serial_run_command>:

	return _qspi_sync_disable(&qspi->dev);
}

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
     c10:	b538      	push	{r3, r4, r5, lr}
     c12:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
     c14:	4605      	mov	r5, r0
     c16:	b158      	cbz	r0, c30 <qspi_sync_serial_run_command+0x20>
     c18:	1c08      	adds	r0, r1, #0
     c1a:	bf18      	it	ne
     c1c:	2001      	movne	r0, #1
     c1e:	224d      	movs	r2, #77	; 0x4d
     c20:	4904      	ldr	r1, [pc, #16]	; (c34 <qspi_sync_serial_run_command+0x24>)
     c22:	4b05      	ldr	r3, [pc, #20]	; (c38 <qspi_sync_serial_run_command+0x28>)
     c24:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
     c26:	4621      	mov	r1, r4
     c28:	4628      	mov	r0, r5
     c2a:	4b04      	ldr	r3, [pc, #16]	; (c3c <qspi_sync_serial_run_command+0x2c>)
     c2c:	4798      	blx	r3
}
     c2e:	bd38      	pop	{r3, r4, r5, pc}
     c30:	2000      	movs	r0, #0
     c32:	e7f4      	b.n	c1e <qspi_sync_serial_run_command+0xe>
     c34:	00001dd0 	.word	0x00001dd0
     c38:	00000eb1 	.word	0x00000eb1
     c3c:	000010c9 	.word	0x000010c9

00000c40 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     c40:	b538      	push	{r3, r4, r5, lr}
     c42:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     c44:	4604      	mov	r4, r0
     c46:	b1b8      	cbz	r0, c78 <spi_m_sync_init+0x38>
     c48:	1c08      	adds	r0, r1, #0
     c4a:	bf18      	it	ne
     c4c:	2001      	movne	r0, #1
     c4e:	2240      	movs	r2, #64	; 0x40
     c50:	490a      	ldr	r1, [pc, #40]	; (c7c <spi_m_sync_init+0x3c>)
     c52:	4b0b      	ldr	r3, [pc, #44]	; (c80 <spi_m_sync_init+0x40>)
     c54:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     c56:	4620      	mov	r0, r4
     c58:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     c5c:	4629      	mov	r1, r5
     c5e:	4b09      	ldr	r3, [pc, #36]	; (c84 <spi_m_sync_init+0x44>)
     c60:	4798      	blx	r3

	if (rc < 0) {
     c62:	2800      	cmp	r0, #0
     c64:	db07      	blt.n	c76 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     c6a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     c6c:	4b06      	ldr	r3, [pc, #24]	; (c88 <spi_m_sync_init+0x48>)
     c6e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     c70:	4b06      	ldr	r3, [pc, #24]	; (c8c <spi_m_sync_init+0x4c>)
     c72:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     c74:	2000      	movs	r0, #0
}
     c76:	bd38      	pop	{r3, r4, r5, pc}
     c78:	2000      	movs	r0, #0
     c7a:	e7e8      	b.n	c4e <spi_m_sync_init+0xe>
     c7c:	00001dec 	.word	0x00001dec
     c80:	00000eb1 	.word	0x00000eb1
     c84:	00001461 	.word	0x00001461
     c88:	00000d35 	.word	0x00000d35
     c8c:	00000cf9 	.word	0x00000cf9

00000c90 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     c90:	b510      	push	{r4, lr}
	ASSERT(spi);
     c92:	4604      	mov	r4, r0
     c94:	2257      	movs	r2, #87	; 0x57
     c96:	4905      	ldr	r1, [pc, #20]	; (cac <spi_m_sync_enable+0x1c>)
     c98:	3000      	adds	r0, #0
     c9a:	bf18      	it	ne
     c9c:	2001      	movne	r0, #1
     c9e:	4b04      	ldr	r3, [pc, #16]	; (cb0 <spi_m_sync_enable+0x20>)
     ca0:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     ca2:	1d20      	adds	r0, r4, #4
     ca4:	4b03      	ldr	r3, [pc, #12]	; (cb4 <spi_m_sync_enable+0x24>)
     ca6:	4798      	blx	r3
     ca8:	bd10      	pop	{r4, pc}
     caa:	bf00      	nop
     cac:	00001dec 	.word	0x00001dec
     cb0:	00000eb1 	.word	0x00000eb1
     cb4:	00001555 	.word	0x00001555

00000cb8 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     cb8:	b530      	push	{r4, r5, lr}
     cba:	b085      	sub	sp, #20
     cbc:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     cbe:	4605      	mov	r5, r0
     cc0:	b190      	cbz	r0, ce8 <spi_m_sync_transfer+0x30>
     cc2:	1c08      	adds	r0, r1, #0
     cc4:	bf18      	it	ne
     cc6:	2001      	movne	r0, #1
     cc8:	22b3      	movs	r2, #179	; 0xb3
     cca:	4908      	ldr	r1, [pc, #32]	; (cec <spi_m_sync_transfer+0x34>)
     ccc:	4b08      	ldr	r3, [pc, #32]	; (cf0 <spi_m_sync_transfer+0x38>)
     cce:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     cd0:	6823      	ldr	r3, [r4, #0]
     cd2:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     cd4:	6863      	ldr	r3, [r4, #4]
     cd6:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     cd8:	68a3      	ldr	r3, [r4, #8]
     cda:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     cdc:	a901      	add	r1, sp, #4
     cde:	1d28      	adds	r0, r5, #4
     ce0:	4b04      	ldr	r3, [pc, #16]	; (cf4 <spi_m_sync_transfer+0x3c>)
     ce2:	4798      	blx	r3
}
     ce4:	b005      	add	sp, #20
     ce6:	bd30      	pop	{r4, r5, pc}
     ce8:	2000      	movs	r0, #0
     cea:	e7ed      	b.n	cc8 <spi_m_sync_transfer+0x10>
     cec:	00001dec 	.word	0x00001dec
     cf0:	00000eb1 	.word	0x00000eb1
     cf4:	00001585 	.word	0x00001585

00000cf8 <_spi_m_sync_io_write>:
{
     cf8:	b570      	push	{r4, r5, r6, lr}
     cfa:	b084      	sub	sp, #16
     cfc:	460e      	mov	r6, r1
     cfe:	4615      	mov	r5, r2
	ASSERT(io);
     d00:	4604      	mov	r4, r0
     d02:	22a3      	movs	r2, #163	; 0xa3
     d04:	4908      	ldr	r1, [pc, #32]	; (d28 <_spi_m_sync_io_write+0x30>)
     d06:	3000      	adds	r0, #0
     d08:	bf18      	it	ne
     d0a:	2001      	movne	r0, #1
     d0c:	4b07      	ldr	r3, [pc, #28]	; (d2c <_spi_m_sync_io_write+0x34>)
     d0e:	4798      	blx	r3
	xfer.rxbuf = 0;
     d10:	2300      	movs	r3, #0
     d12:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     d14:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     d16:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     d18:	a901      	add	r1, sp, #4
     d1a:	f1a4 000c 	sub.w	r0, r4, #12
     d1e:	4b04      	ldr	r3, [pc, #16]	; (d30 <_spi_m_sync_io_write+0x38>)
     d20:	4798      	blx	r3
}
     d22:	b004      	add	sp, #16
     d24:	bd70      	pop	{r4, r5, r6, pc}
     d26:	bf00      	nop
     d28:	00001dec 	.word	0x00001dec
     d2c:	00000eb1 	.word	0x00000eb1
     d30:	00000cb9 	.word	0x00000cb9

00000d34 <_spi_m_sync_io_read>:
{
     d34:	b570      	push	{r4, r5, r6, lr}
     d36:	b084      	sub	sp, #16
     d38:	460e      	mov	r6, r1
     d3a:	4615      	mov	r5, r2
	ASSERT(io);
     d3c:	4604      	mov	r4, r0
     d3e:	2287      	movs	r2, #135	; 0x87
     d40:	4908      	ldr	r1, [pc, #32]	; (d64 <_spi_m_sync_io_read+0x30>)
     d42:	3000      	adds	r0, #0
     d44:	bf18      	it	ne
     d46:	2001      	movne	r0, #1
     d48:	4b07      	ldr	r3, [pc, #28]	; (d68 <_spi_m_sync_io_read+0x34>)
     d4a:	4798      	blx	r3
	xfer.rxbuf = buf;
     d4c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     d4e:	2300      	movs	r3, #0
     d50:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     d52:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     d54:	a901      	add	r1, sp, #4
     d56:	f1a4 000c 	sub.w	r0, r4, #12
     d5a:	4b04      	ldr	r3, [pc, #16]	; (d6c <_spi_m_sync_io_read+0x38>)
     d5c:	4798      	blx	r3
}
     d5e:	b004      	add	sp, #16
     d60:	bd70      	pop	{r4, r5, r6, pc}
     d62:	bf00      	nop
     d64:	00001dec 	.word	0x00001dec
     d68:	00000eb1 	.word	0x00000eb1
     d6c:	00000cb9 	.word	0x00000cb9

00000d70 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     d70:	b538      	push	{r3, r4, r5, lr}
     d72:	460d      	mov	r5, r1
	ASSERT(spi && io);
     d74:	4604      	mov	r4, r0
     d76:	b150      	cbz	r0, d8e <spi_m_sync_get_io_descriptor+0x1e>
     d78:	1c08      	adds	r0, r1, #0
     d7a:	bf18      	it	ne
     d7c:	2001      	movne	r0, #1
     d7e:	22bd      	movs	r2, #189	; 0xbd
     d80:	4904      	ldr	r1, [pc, #16]	; (d94 <spi_m_sync_get_io_descriptor+0x24>)
     d82:	4b05      	ldr	r3, [pc, #20]	; (d98 <spi_m_sync_get_io_descriptor+0x28>)
     d84:	4798      	blx	r3
	*io = &spi->io;
     d86:	340c      	adds	r4, #12
     d88:	602c      	str	r4, [r5, #0]
	return 0;
}
     d8a:	2000      	movs	r0, #0
     d8c:	bd38      	pop	{r3, r4, r5, pc}
     d8e:	2000      	movs	r0, #0
     d90:	e7f5      	b.n	d7e <spi_m_sync_get_io_descriptor+0xe>
     d92:	bf00      	nop
     d94:	00001dec 	.word	0x00001dec
     d98:	00000eb1 	.word	0x00000eb1

00000d9c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d9e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     da0:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     da2:	b12f      	cbz	r7, db0 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     da4:	688d      	ldr	r5, [r1, #8]
     da6:	463c      	mov	r4, r7
     da8:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     daa:	f1c2 0e01 	rsb	lr, r2, #1
     dae:	e00b      	b.n	dc8 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     db0:	4b0e      	ldr	r3, [pc, #56]	; (dec <timer_add_timer_task+0x50>)
     db2:	4798      	blx	r3
		return;
     db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     db6:	4473      	add	r3, lr
     db8:	68a0      	ldr	r0, [r4, #8]
     dba:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     dbc:	42ab      	cmp	r3, r5
     dbe:	d20a      	bcs.n	dd6 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     dc0:	6823      	ldr	r3, [r4, #0]
     dc2:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     dc4:	b153      	cbz	r3, ddc <timer_add_timer_task+0x40>
     dc6:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     dc8:	6863      	ldr	r3, [r4, #4]
     dca:	4293      	cmp	r3, r2
     dcc:	d8f3      	bhi.n	db6 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     dce:	68a0      	ldr	r0, [r4, #8]
     dd0:	4403      	add	r3, r0
     dd2:	1a9b      	subs	r3, r3, r2
     dd4:	e7f2      	b.n	dbc <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     dd6:	42a7      	cmp	r7, r4
     dd8:	d004      	beq.n	de4 <timer_add_timer_task+0x48>
     dda:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     ddc:	4620      	mov	r0, r4
     dde:	4b04      	ldr	r3, [pc, #16]	; (df0 <timer_add_timer_task+0x54>)
     de0:	4798      	blx	r3
     de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     de4:	4660      	mov	r0, ip
     de6:	4b01      	ldr	r3, [pc, #4]	; (dec <timer_add_timer_task+0x50>)
     de8:	4798      	blx	r3
     dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dec:	00000ed9 	.word	0x00000ed9
     df0:	00000f05 	.word	0x00000f05

00000df4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     df8:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     dfa:	6907      	ldr	r7, [r0, #16]
     dfc:	3701      	adds	r7, #1
     dfe:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     e00:	7e03      	ldrb	r3, [r0, #24]
     e02:	f013 0f01 	tst.w	r3, #1
     e06:	d113      	bne.n	e30 <timer_process_counted+0x3c>
     e08:	7e03      	ldrb	r3, [r0, #24]
     e0a:	f013 0f02 	tst.w	r3, #2
     e0e:	d10f      	bne.n	e30 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     e10:	b354      	cbz	r4, e68 <timer_process_counted+0x74>
     e12:	6863      	ldr	r3, [r4, #4]
     e14:	1afb      	subs	r3, r7, r3
     e16:	68a2      	ldr	r2, [r4, #8]
     e18:	4293      	cmp	r3, r2
     e1a:	d307      	bcc.n	e2c <timer_process_counted+0x38>
     e1c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     e1e:	f100 0814 	add.w	r8, r0, #20
     e22:	f8df 9048 	ldr.w	r9, [pc, #72]	; e6c <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     e26:	f8df a048 	ldr.w	sl, [pc, #72]	; e70 <timer_process_counted+0x7c>
     e2a:	e012      	b.n	e52 <timer_process_counted+0x5e>
     e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     e30:	7e03      	ldrb	r3, [r0, #24]
     e32:	f043 0302 	orr.w	r3, r3, #2
     e36:	7603      	strb	r3, [r0, #24]
		return;
     e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e3c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     e3e:	68e3      	ldr	r3, [r4, #12]
     e40:	4620      	mov	r0, r4
     e42:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     e44:	b185      	cbz	r5, e68 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     e46:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     e48:	686b      	ldr	r3, [r5, #4]
     e4a:	1afb      	subs	r3, r7, r3
     e4c:	68aa      	ldr	r2, [r5, #8]
     e4e:	4293      	cmp	r3, r2
     e50:	d30a      	bcc.n	e68 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     e52:	4640      	mov	r0, r8
     e54:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     e56:	7c23      	ldrb	r3, [r4, #16]
     e58:	2b01      	cmp	r3, #1
     e5a:	d1ef      	bne.n	e3c <timer_process_counted+0x48>
			tmp->time_label = time;
     e5c:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     e5e:	463a      	mov	r2, r7
     e60:	4621      	mov	r1, r4
     e62:	4640      	mov	r0, r8
     e64:	47d0      	blx	sl
     e66:	e7e9      	b.n	e3c <timer_process_counted+0x48>
     e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e6c:	00000f0d 	.word	0x00000f0d
     e70:	00000d9d 	.word	0x00000d9d

00000e74 <timer_init>:
{
     e74:	b538      	push	{r3, r4, r5, lr}
     e76:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     e78:	4604      	mov	r4, r0
     e7a:	b178      	cbz	r0, e9c <timer_init+0x28>
     e7c:	1c08      	adds	r0, r1, #0
     e7e:	bf18      	it	ne
     e80:	2001      	movne	r0, #1
     e82:	223b      	movs	r2, #59	; 0x3b
     e84:	4906      	ldr	r1, [pc, #24]	; (ea0 <timer_init+0x2c>)
     e86:	4b07      	ldr	r3, [pc, #28]	; (ea4 <timer_init+0x30>)
     e88:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     e8a:	4629      	mov	r1, r5
     e8c:	4620      	mov	r0, r4
     e8e:	4b06      	ldr	r3, [pc, #24]	; (ea8 <timer_init+0x34>)
     e90:	4798      	blx	r3
	descr->time                           = 0;
     e92:	2000      	movs	r0, #0
     e94:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     e96:	4b05      	ldr	r3, [pc, #20]	; (eac <timer_init+0x38>)
     e98:	6023      	str	r3, [r4, #0]
}
     e9a:	bd38      	pop	{r3, r4, r5, pc}
     e9c:	2000      	movs	r0, #0
     e9e:	e7f0      	b.n	e82 <timer_init+0xe>
     ea0:	00001e08 	.word	0x00001e08
     ea4:	00000eb1 	.word	0x00000eb1
     ea8:	000011e5 	.word	0x000011e5
     eac:	00000df5 	.word	0x00000df5

00000eb0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     eb0:	b900      	cbnz	r0, eb4 <assert+0x4>
		__asm("BKPT #0");
     eb2:	be00      	bkpt	0x0000
     eb4:	4770      	bx	lr

00000eb6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     eb6:	6803      	ldr	r3, [r0, #0]
     eb8:	b14b      	cbz	r3, ece <is_list_element+0x18>
		if (it == element) {
     eba:	428b      	cmp	r3, r1
     ebc:	d009      	beq.n	ed2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     ebe:	681b      	ldr	r3, [r3, #0]
     ec0:	b11b      	cbz	r3, eca <is_list_element+0x14>
		if (it == element) {
     ec2:	4299      	cmp	r1, r3
     ec4:	d1fb      	bne.n	ebe <is_list_element+0x8>
			return true;
     ec6:	2001      	movs	r0, #1
		}
	}

	return false;
}
     ec8:	4770      	bx	lr
	return false;
     eca:	2000      	movs	r0, #0
     ecc:	4770      	bx	lr
     ece:	2000      	movs	r0, #0
     ed0:	4770      	bx	lr
			return true;
     ed2:	2001      	movs	r0, #1
     ed4:	4770      	bx	lr
	...

00000ed8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     ed8:	b538      	push	{r3, r4, r5, lr}
     eda:	4604      	mov	r4, r0
     edc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     ede:	4b06      	ldr	r3, [pc, #24]	; (ef8 <list_insert_as_head+0x20>)
     ee0:	4798      	blx	r3
     ee2:	f080 0001 	eor.w	r0, r0, #1
     ee6:	2239      	movs	r2, #57	; 0x39
     ee8:	4904      	ldr	r1, [pc, #16]	; (efc <list_insert_as_head+0x24>)
     eea:	b2c0      	uxtb	r0, r0
     eec:	4b04      	ldr	r3, [pc, #16]	; (f00 <list_insert_as_head+0x28>)
     eee:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     ef0:	6823      	ldr	r3, [r4, #0]
     ef2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     ef4:	6025      	str	r5, [r4, #0]
     ef6:	bd38      	pop	{r3, r4, r5, pc}
     ef8:	00000eb7 	.word	0x00000eb7
     efc:	00001e20 	.word	0x00001e20
     f00:	00000eb1 	.word	0x00000eb1

00000f04 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     f04:	6803      	ldr	r3, [r0, #0]
     f06:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     f08:	6001      	str	r1, [r0, #0]
     f0a:	4770      	bx	lr

00000f0c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     f0c:	6803      	ldr	r3, [r0, #0]
     f0e:	b10b      	cbz	r3, f14 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     f10:	681a      	ldr	r2, [r3, #0]
     f12:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     f14:	4618      	mov	r0, r3
     f16:	4770      	bx	lr

00000f18 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f18:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     f1a:	4a08      	ldr	r2, [pc, #32]	; (f3c <_init_chip+0x24>)
     f1c:	8813      	ldrh	r3, [r2, #0]
     f1e:	b29b      	uxth	r3, r3
     f20:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     f22:	4b07      	ldr	r3, [pc, #28]	; (f40 <_init_chip+0x28>)
     f24:	4798      	blx	r3
	_oscctrl_init_sources();
     f26:	4b07      	ldr	r3, [pc, #28]	; (f44 <_init_chip+0x2c>)
     f28:	4798      	blx	r3
	_mclk_init();
     f2a:	4b07      	ldr	r3, [pc, #28]	; (f48 <_init_chip+0x30>)
     f2c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     f2e:	4b07      	ldr	r3, [pc, #28]	; (f4c <_init_chip+0x34>)
     f30:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f32:	f640 70ff 	movw	r0, #4095	; 0xfff
     f36:	4b06      	ldr	r3, [pc, #24]	; (f50 <_init_chip+0x38>)
     f38:	4798      	blx	r3
     f3a:	bd08      	pop	{r3, pc}
     f3c:	41004000 	.word	0x41004000
     f40:	00001051 	.word	0x00001051
     f44:	00001065 	.word	0x00001065
     f48:	00000f79 	.word	0x00000f79
     f4c:	00001081 	.word	0x00001081
     f50:	00000f55 	.word	0x00000f55

00000f54 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     f54:	f010 0f01 	tst.w	r0, #1
     f58:	d008      	beq.n	f6c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     f5a:	4a05      	ldr	r2, [pc, #20]	; (f70 <_gclk_init_generators_by_fref+0x1c>)
     f5c:	4b05      	ldr	r3, [pc, #20]	; (f74 <_gclk_init_generators_by_fref+0x20>)
     f5e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     f60:	4619      	mov	r1, r3
     f62:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     f66:	684b      	ldr	r3, [r1, #4]
     f68:	4213      	tst	r3, r2
     f6a:	d1fc      	bne.n	f66 <_gclk_init_generators_by_fref+0x12>
     f6c:	4770      	bx	lr
     f6e:	bf00      	nop
     f70:	00010101 	.word	0x00010101
     f74:	40001c00 	.word	0x40001c00

00000f78 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     f78:	2201      	movs	r2, #1
     f7a:	4b01      	ldr	r3, [pc, #4]	; (f80 <_mclk_init+0x8>)
     f7c:	715a      	strb	r2, [r3, #5]
     f7e:	4770      	bx	lr
     f80:	40000800 	.word	0x40000800

00000f84 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
     f84:	b508      	push	{r3, lr}
	void *const hw = device->hw;
     f86:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
     f88:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
     f8a:	f012 0f01 	tst.w	r2, #1
     f8e:	d005      	beq.n	f9c <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
     f90:	2201      	movs	r2, #1
     f92:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
     f94:	6803      	ldr	r3, [r0, #0]
     f96:	b153      	cbz	r3, fae <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
     f98:	4798      	blx	r3
     f9a:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
     f9c:	8a1a      	ldrh	r2, [r3, #16]
     f9e:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
     fa0:	b12a      	cbz	r2, fae <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
     fa2:	f240 225e 	movw	r2, #606	; 0x25e
     fa6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
     fa8:	6843      	ldr	r3, [r0, #4]
     faa:	b103      	cbz	r3, fae <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
     fac:	4798      	blx	r3
     fae:	bd08      	pop	{r3, pc}

00000fb0 <_flash_init>:
{
     fb0:	b538      	push	{r3, r4, r5, lr}
     fb2:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     fb4:	4605      	mov	r5, r0
     fb6:	b350      	cbz	r0, 100e <_flash_init+0x5e>
     fb8:	4816      	ldr	r0, [pc, #88]	; (1014 <_flash_init+0x64>)
     fba:	4281      	cmp	r1, r0
     fbc:	bf14      	ite	ne
     fbe:	2000      	movne	r0, #0
     fc0:	2001      	moveq	r0, #1
     fc2:	224b      	movs	r2, #75	; 0x4b
     fc4:	4914      	ldr	r1, [pc, #80]	; (1018 <_flash_init+0x68>)
     fc6:	4b15      	ldr	r3, [pc, #84]	; (101c <_flash_init+0x6c>)
     fc8:	4798      	blx	r3
	device->hw = hw;
     fca:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
     fcc:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
     fce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
     fd2:	049b      	lsls	r3, r3, #18
     fd4:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
     fd6:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
     fd8:	4b11      	ldr	r3, [pc, #68]	; (1020 <_flash_init+0x70>)
     fda:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fdc:	4b11      	ldr	r3, [pc, #68]	; (1024 <_flash_init+0x74>)
     fde:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     fe2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     fe6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fea:	f3bf 8f6f 	isb	sy
     fee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     ff6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     ffa:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ffe:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    1002:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1006:	6019      	str	r1, [r3, #0]
    1008:	601a      	str	r2, [r3, #0]
}
    100a:	2000      	movs	r0, #0
    100c:	bd38      	pop	{r3, r4, r5, pc}
    100e:	2000      	movs	r0, #0
    1010:	e7d7      	b.n	fc2 <_flash_init+0x12>
    1012:	bf00      	nop
    1014:	41004000 	.word	0x41004000
    1018:	00001e40 	.word	0x00001e40
    101c:	00000eb1 	.word	0x00000eb1
    1020:	20000020 	.word	0x20000020
    1024:	e000e100 	.word	0xe000e100

00001028 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1028:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    102a:	4b02      	ldr	r3, [pc, #8]	; (1034 <NVMCTRL_0_Handler+0xc>)
    102c:	6818      	ldr	r0, [r3, #0]
    102e:	4b02      	ldr	r3, [pc, #8]	; (1038 <NVMCTRL_0_Handler+0x10>)
    1030:	4798      	blx	r3
    1032:	bd08      	pop	{r3, pc}
    1034:	20000020 	.word	0x20000020
    1038:	00000f85 	.word	0x00000f85

0000103c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    103c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    103e:	4b02      	ldr	r3, [pc, #8]	; (1048 <NVMCTRL_1_Handler+0xc>)
    1040:	6818      	ldr	r0, [r3, #0]
    1042:	4b02      	ldr	r3, [pc, #8]	; (104c <NVMCTRL_1_Handler+0x10>)
    1044:	4798      	blx	r3
    1046:	bd08      	pop	{r3, pc}
    1048:	20000020 	.word	0x20000020
    104c:	00000f85 	.word	0x00000f85

00001050 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1050:	4b03      	ldr	r3, [pc, #12]	; (1060 <_osc32kctrl_init_sources+0x10>)
    1052:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    1054:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1058:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    105a:	2201      	movs	r2, #1
    105c:	741a      	strb	r2, [r3, #16]
    105e:	4770      	bx	lr
    1060:	40001400 	.word	0x40001400

00001064 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    1064:	4a04      	ldr	r2, [pc, #16]	; (1078 <_oscctrl_init_sources+0x14>)
    1066:	4b05      	ldr	r3, [pc, #20]	; (107c <_oscctrl_init_sources+0x18>)
    1068:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    106a:	461a      	mov	r2, r3
    106c:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    106e:	f013 0f02 	tst.w	r3, #2
    1072:	d0fb      	beq.n	106c <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    1074:	4770      	bx	lr
    1076:	bf00      	nop
    1078:	03002606 	.word	0x03002606
    107c:	40001000 	.word	0x40001000

00001080 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    1080:	4770      	bx	lr
	...

00001084 <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    1084:	b538      	push	{r3, r4, r5, lr}
    1086:	460c      	mov	r4, r1
	ASSERT(dev && hw);
    1088:	4605      	mov	r5, r0
    108a:	b180      	cbz	r0, 10ae <_qspi_sync_init+0x2a>
    108c:	1c08      	adds	r0, r1, #0
    108e:	bf18      	it	ne
    1090:	2001      	movne	r0, #1
    1092:	2240      	movs	r2, #64	; 0x40
    1094:	4907      	ldr	r1, [pc, #28]	; (10b4 <_qspi_sync_init+0x30>)
    1096:	4b08      	ldr	r3, [pc, #32]	; (10b8 <_qspi_sync_init+0x34>)
    1098:	4798      	blx	r3
	dev->prvt = hw;
    109a:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    109c:	2301      	movs	r3, #1
    109e:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    10a0:	2311      	movs	r3, #17
    10a2:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    10a4:	f44f 7300 	mov.w	r3, #512	; 0x200
    10a8:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
    10aa:	2000      	movs	r0, #0
    10ac:	bd38      	pop	{r3, r4, r5, pc}
    10ae:	2000      	movs	r0, #0
    10b0:	e7ef      	b.n	1092 <_qspi_sync_init+0xe>
    10b2:	bf00      	nop
    10b4:	00001e60 	.word	0x00001e60
    10b8:	00000eb1 	.word	0x00000eb1

000010bc <_qspi_sync_enable>:
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    10bc:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    10be:	2202      	movs	r2, #2
    10c0:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    10c2:	2000      	movs	r0, #0
    10c4:	4770      	bx	lr
	...

000010c8 <_qspi_sync_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    10c8:	b570      	push	{r4, r5, r6, lr}
    10ca:	4605      	mov	r5, r0
    10cc:	460c      	mov	r4, r1
	void *hw = dev->prvt;
    10ce:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
    10d0:	780a      	ldrb	r2, [r1, #0]
    10d2:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    10d6:	bf1c      	itt	ne
    10d8:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    10da:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
    10dc:	780a      	ldrb	r2, [r1, #0]
    10de:	f012 0f10 	tst.w	r2, #16
    10e2:	d005      	beq.n	10f0 <_qspi_sync_serial_run_command+0x28>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    10e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    10e6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    10ea:	7922      	ldrb	r2, [r4, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    10ec:	430a      	orrs	r2, r1
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    10ee:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
    10f0:	7822      	ldrb	r2, [r4, #0]
    10f2:	f012 0f40 	tst.w	r2, #64	; 0x40
    10f6:	d006      	beq.n	1106 <_qspi_sync_serial_run_command+0x3e>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    10f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    10fa:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    10fe:	7961      	ldrb	r1, [r4, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    1100:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    1104:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    1106:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    1108:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_sync_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
    110a:	7823      	ldrb	r3, [r4, #0]
    110c:	f013 0f80 	tst.w	r3, #128	; 0x80
    1110:	d10c      	bne.n	112c <_qspi_sync_serial_run_command+0x64>
		_qspi_sync_run_transfer(dev, cmd);
	}

	_qspi_end_transfer(dev->prvt);
    1112:	682b      	ldr	r3, [r5, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    1114:	4a1f      	ldr	r2, [pc, #124]	; (1194 <_qspi_sync_serial_run_command+0xcc>)
    1116:	601a      	str	r2, [r3, #0]

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    1118:	682a      	ldr	r2, [r5, #0]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    111a:	69d3      	ldr	r3, [r2, #28]
    111c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1120:	d0fb      	beq.n	111a <_qspi_sync_serial_run_command+0x52>
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    1122:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1126:	61d3      	str	r3, [r2, #28]
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
	return ERR_NONE;
}
    1128:	2000      	movs	r0, #0
    112a:	bd70      	pop	{r4, r5, r6, pc}
	void *   hw       = dev->prvt;
    112c:	6829      	ldr	r1, [r5, #0]
	if (cmd->inst_frame.bits.addr_en)
    112e:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
    1132:	bf1a      	itte	ne
    1134:	68a2      	ldrne	r2, [r4, #8]
    1136:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    113a:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
    113e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    1140:	6923      	ldr	r3, [r4, #16]
    1142:	b1ab      	cbz	r3, 1170 <_qspi_sync_serial_run_command+0xa8>
    1144:	2001      	movs	r0, #1
    1146:	2282      	movs	r2, #130	; 0x82
    1148:	4913      	ldr	r1, [pc, #76]	; (1198 <_qspi_sync_serial_run_command+0xd0>)
    114a:	4b14      	ldr	r3, [pc, #80]	; (119c <_qspi_sync_serial_run_command+0xd4>)
    114c:	4798      	blx	r3
	if (cmd->tx_buf) {
    114e:	6923      	ldr	r3, [r4, #16]
    1150:	b19b      	cbz	r3, 117a <_qspi_sync_serial_run_command+0xb2>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    1152:	68e0      	ldr	r0, [r4, #12]
	while (count--) {
    1154:	b138      	cbz	r0, 1166 <_qspi_sync_serial_run_command+0x9e>
    1156:	1e72      	subs	r2, r6, #1
    1158:	4418      	add	r0, r3
		*dst++ = *src++;
    115a:	f813 1b01 	ldrb.w	r1, [r3], #1
    115e:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (count--) {
    1162:	4283      	cmp	r3, r0
    1164:	d1f9      	bne.n	115a <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
    1166:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    116a:	f3bf 8f6f 	isb	sy
    116e:	e7d0      	b.n	1112 <_qspi_sync_serial_run_command+0x4a>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    1170:	6960      	ldr	r0, [r4, #20]
    1172:	3000      	adds	r0, #0
    1174:	bf18      	it	ne
    1176:	2001      	movne	r0, #1
    1178:	e7e5      	b.n	1146 <_qspi_sync_serial_run_command+0x7e>
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    117a:	6963      	ldr	r3, [r4, #20]
    117c:	68e1      	ldr	r1, [r4, #12]
	while (count--) {
    117e:	2900      	cmp	r1, #0
    1180:	d0f1      	beq.n	1166 <_qspi_sync_serial_run_command+0x9e>
    1182:	3b01      	subs	r3, #1
    1184:	4431      	add	r1, r6
		*dst++ = *src++;
    1186:	f816 2b01 	ldrb.w	r2, [r6], #1
    118a:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (count--) {
    118e:	42b1      	cmp	r1, r6
    1190:	d1f9      	bne.n	1186 <_qspi_sync_serial_run_command+0xbe>
    1192:	e7e8      	b.n	1166 <_qspi_sync_serial_run_command+0x9e>
    1194:	01000002 	.word	0x01000002
    1198:	00001e60 	.word	0x00001e60
    119c:	00000eb1 	.word	0x00000eb1

000011a0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    11a0:	b500      	push	{lr}
    11a2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    11a4:	4b0d      	ldr	r3, [pc, #52]	; (11dc <RAMECC_Handler+0x3c>)
    11a6:	789b      	ldrb	r3, [r3, #2]
    11a8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    11aa:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    11ac:	9b01      	ldr	r3, [sp, #4]
    11ae:	f013 0f02 	tst.w	r3, #2
    11b2:	d006      	beq.n	11c2 <RAMECC_Handler+0x22>
    11b4:	4b0a      	ldr	r3, [pc, #40]	; (11e0 <RAMECC_Handler+0x40>)
    11b6:	681b      	ldr	r3, [r3, #0]
    11b8:	b11b      	cbz	r3, 11c2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    11ba:	4a08      	ldr	r2, [pc, #32]	; (11dc <RAMECC_Handler+0x3c>)
    11bc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    11be:	4798      	blx	r3
    11c0:	e009      	b.n	11d6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    11c2:	9b01      	ldr	r3, [sp, #4]
    11c4:	f013 0f01 	tst.w	r3, #1
    11c8:	d005      	beq.n	11d6 <RAMECC_Handler+0x36>
    11ca:	4b05      	ldr	r3, [pc, #20]	; (11e0 <RAMECC_Handler+0x40>)
    11cc:	685b      	ldr	r3, [r3, #4]
    11ce:	b113      	cbz	r3, 11d6 <RAMECC_Handler+0x36>
    11d0:	4a02      	ldr	r2, [pc, #8]	; (11dc <RAMECC_Handler+0x3c>)
    11d2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    11d4:	4798      	blx	r3
	} else {
		return;
	}
}
    11d6:	b003      	add	sp, #12
    11d8:	f85d fb04 	ldr.w	pc, [sp], #4
    11dc:	41020000 	.word	0x41020000
    11e0:	20000098 	.word	0x20000098

000011e4 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    11e4:	b538      	push	{r3, r4, r5, lr}
    11e6:	460c      	mov	r4, r1
	ASSERT(dev);
    11e8:	4605      	mov	r5, r0
    11ea:	2230      	movs	r2, #48	; 0x30
    11ec:	4914      	ldr	r1, [pc, #80]	; (1240 <_timer_init+0x5c>)
    11ee:	3000      	adds	r0, #0
    11f0:	bf18      	it	ne
    11f2:	2001      	movne	r0, #1
    11f4:	4b13      	ldr	r3, [pc, #76]	; (1244 <_timer_init+0x60>)
    11f6:	4798      	blx	r3

	dev->hw = hw;
    11f8:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    11fa:	2301      	movs	r3, #1
    11fc:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    11fe:	f248 0203 	movw	r2, #32771	; 0x8003
    1202:	6923      	ldr	r3, [r4, #16]
    1204:	4213      	tst	r3, r2
    1206:	d1fc      	bne.n	1202 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1208:	68eb      	ldr	r3, [r5, #12]
    120a:	691a      	ldr	r2, [r3, #16]
    120c:	f012 0f01 	tst.w	r2, #1
    1210:	d1fb      	bne.n	120a <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1212:	f248 0280 	movw	r2, #32896	; 0x8080
    1216:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1218:	f248 0103 	movw	r1, #32771	; 0x8003
    121c:	691a      	ldr	r2, [r3, #16]
    121e:	420a      	tst	r2, r1
    1220:	d1fc      	bne.n	121c <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1222:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1224:	2320      	movs	r3, #32
    1226:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1228:	6913      	ldr	r3, [r2, #16]
    122a:	f013 0f60 	tst.w	r3, #96	; 0x60
    122e:	d1fb      	bne.n	1228 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1230:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1232:	f44f 7280 	mov.w	r2, #256	; 0x100
    1236:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    1238:	4b03      	ldr	r3, [pc, #12]	; (1248 <_timer_init+0x64>)
    123a:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    123c:	2000      	movs	r0, #0
    123e:	bd38      	pop	{r3, r4, r5, pc}
    1240:	00001e78 	.word	0x00001e78
    1244:	00000eb1 	.word	0x00000eb1
    1248:	20000024 	.word	0x20000024

0000124c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    124c:	2000      	movs	r0, #0
    124e:	4770      	bx	lr

00001250 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1250:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1252:	4b08      	ldr	r3, [pc, #32]	; (1274 <RTC_Handler+0x24>)
    1254:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1256:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1258:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    125a:	f413 7f80 	tst.w	r3, #256	; 0x100
    125e:	d007      	beq.n	1270 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    1260:	6823      	ldr	r3, [r4, #0]
    1262:	b10b      	cbz	r3, 1268 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1264:	4620      	mov	r0, r4
    1266:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1268:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    126a:	f44f 7280 	mov.w	r2, #256	; 0x100
    126e:	819a      	strh	r2, [r3, #12]
    1270:	bd10      	pop	{r4, pc}
    1272:	bf00      	nop
    1274:	20000024 	.word	0x20000024

00001278 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1278:	b470      	push	{r4, r5, r6}
    127a:	b087      	sub	sp, #28
    127c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    127e:	466c      	mov	r4, sp
    1280:	4d0c      	ldr	r5, [pc, #48]	; (12b4 <_sercom_get_hardware_index+0x3c>)
    1282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1286:	e895 0003 	ldmia.w	r5, {r0, r1}
    128a:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    128e:	9b00      	ldr	r3, [sp, #0]
    1290:	42b3      	cmp	r3, r6
    1292:	d00c      	beq.n	12ae <_sercom_get_hardware_index+0x36>
    1294:	4632      	mov	r2, r6
    1296:	2001      	movs	r0, #1
    1298:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    129c:	4293      	cmp	r3, r2
    129e:	d007      	beq.n	12b0 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12a0:	3001      	adds	r0, #1
    12a2:	2806      	cmp	r0, #6
    12a4:	d1f8      	bne.n	1298 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    12a6:	2000      	movs	r0, #0
}
    12a8:	b007      	add	sp, #28
    12aa:	bc70      	pop	{r4, r5, r6}
    12ac:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    12ae:	2000      	movs	r0, #0
			return i;
    12b0:	b2c0      	uxtb	r0, r0
    12b2:	e7f9      	b.n	12a8 <_sercom_get_hardware_index+0x30>
    12b4:	00001e90 	.word	0x00001e90

000012b8 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    12b8:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    12ba:	f013 0f01 	tst.w	r3, #1
    12be:	d109      	bne.n	12d4 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    12c0:	6803      	ldr	r3, [r0, #0]
    12c2:	f043 0302 	orr.w	r3, r3, #2
    12c6:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12c8:	69c3      	ldr	r3, [r0, #28]
    12ca:	f013 0f03 	tst.w	r3, #3
    12ce:	d1fb      	bne.n	12c8 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    12d0:	2000      	movs	r0, #0
    12d2:	4770      	bx	lr
		return ERR_BUSY;
    12d4:	f06f 0003 	mvn.w	r0, #3
}
    12d8:	4770      	bx	lr
	...

000012dc <_i2c_s_init>:
{
    12dc:	b510      	push	{r4, lr}
    12de:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    12e0:	4b1d      	ldr	r3, [pc, #116]	; (1358 <_i2c_s_init+0x7c>)
    12e2:	4798      	blx	r3
		if (_i2css[i].number == sercom_offset) {
    12e4:	2803      	cmp	r0, #3
    12e6:	d008      	beq.n	12fa <_i2c_s_init+0x1e>
	ASSERT(false);
    12e8:	f240 72b7 	movw	r2, #1975	; 0x7b7
    12ec:	491b      	ldr	r1, [pc, #108]	; (135c <_i2c_s_init+0x80>)
    12ee:	2000      	movs	r0, #0
    12f0:	4b1b      	ldr	r3, [pc, #108]	; (1360 <_i2c_s_init+0x84>)
    12f2:	4798      	blx	r3
		return ERR_INVALID_ARG;
    12f4:	f06f 000c 	mvn.w	r0, #12
}
    12f8:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    12fa:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    12fc:	f013 0f01 	tst.w	r3, #1
    1300:	d119      	bne.n	1336 <_i2c_s_init+0x5a>
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1302:	69e3      	ldr	r3, [r4, #28]
    1304:	f013 0f03 	tst.w	r3, #3
    1308:	d1fb      	bne.n	1302 <_i2c_s_init+0x26>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    130a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    130c:	f013 0f02 	tst.w	r3, #2
    1310:	d00b      	beq.n	132a <_i2c_s_init+0x4e>
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1312:	6823      	ldr	r3, [r4, #0]
    1314:	f023 0302 	bic.w	r3, r3, #2
    1318:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    131a:	69e3      	ldr	r3, [r4, #28]
    131c:	f013 0f03 	tst.w	r3, #3
    1320:	d1fb      	bne.n	131a <_i2c_s_init+0x3e>
    1322:	69e3      	ldr	r3, [r4, #28]
    1324:	f013 0f02 	tst.w	r3, #2
    1328:	d1fb      	bne.n	1322 <_i2c_s_init+0x46>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    132a:	2311      	movs	r3, #17
    132c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    132e:	69e3      	ldr	r3, [r4, #28]
    1330:	f013 0f03 	tst.w	r3, #3
    1334:	d1fb      	bne.n	132e <_i2c_s_init+0x52>
    1336:	69e3      	ldr	r3, [r4, #28]
    1338:	f013 0f01 	tst.w	r3, #1
    133c:	d1fb      	bne.n	1336 <_i2c_s_init+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    133e:	4b09      	ldr	r3, [pc, #36]	; (1364 <_i2c_s_init+0x88>)
    1340:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1342:	69e3      	ldr	r3, [r4, #28]
    1344:	f013 0f03 	tst.w	r3, #3
    1348:	d1fb      	bne.n	1342 <_i2c_s_init+0x66>
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    134a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    134e:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    1350:	2320      	movs	r3, #32
    1352:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    1354:	2000      	movs	r0, #0
    1356:	bd10      	pop	{r4, pc}
    1358:	00001279 	.word	0x00001279
    135c:	00001ec0 	.word	0x00001ec0
    1360:	00000eb1 	.word	0x00000eb1
    1364:	00200010 	.word	0x00200010

00001368 <_i2c_s_set_address>:
{
    1368:	b570      	push	{r4, r5, r6, lr}
    136a:	b082      	sub	sp, #8
    136c:	4604      	mov	r4, r0
    136e:	460e      	mov	r6, r1
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1370:	69e3      	ldr	r3, [r4, #28]
    1372:	f013 0f03 	tst.w	r3, #3
    1376:	d1fb      	bne.n	1370 <_i2c_s_set_address+0x8>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    1378:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_I2CS_CTRLA_ENABLE) >> SERCOM_I2CS_CTRLA_ENABLE_Pos;
    137a:	f3c5 0540 	ubfx	r5, r5, #1, #1
	CRITICAL_SECTION_ENTER()
    137e:	a801      	add	r0, sp, #4
    1380:	4b11      	ldr	r3, [pc, #68]	; (13c8 <_i2c_s_set_address+0x60>)
    1382:	4798      	blx	r3
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1384:	6823      	ldr	r3, [r4, #0]
    1386:	f023 0302 	bic.w	r3, r3, #2
    138a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    138c:	69e3      	ldr	r3, [r4, #28]
    138e:	f013 0f03 	tst.w	r3, #3
    1392:	d1fb      	bne.n	138c <_i2c_s_set_address+0x24>
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1394:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CS_ADDR_ADDR_Msk;
    1396:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    139a:	f023 0306 	bic.w	r3, r3, #6
	tmp |= SERCOM_I2CS_ADDR_ADDR(data);
    139e:	f240 71fe 	movw	r1, #2046	; 0x7fe
    13a2:	ea01 0146 	and.w	r1, r1, r6, lsl #1
    13a6:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CS.ADDR.reg = tmp;
    13a8:	6261      	str	r1, [r4, #36]	; 0x24
	CRITICAL_SECTION_LEAVE()
    13aa:	a801      	add	r0, sp, #4
    13ac:	4b07      	ldr	r3, [pc, #28]	; (13cc <_i2c_s_set_address+0x64>)
    13ae:	4798      	blx	r3
	if (enabled) {
    13b0:	b13d      	cbz	r5, 13c2 <_i2c_s_set_address+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    13b2:	6823      	ldr	r3, [r4, #0]
    13b4:	f043 0302 	orr.w	r3, r3, #2
    13b8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    13ba:	69e3      	ldr	r3, [r4, #28]
    13bc:	f013 0f03 	tst.w	r3, #3
    13c0:	d1fb      	bne.n	13ba <_i2c_s_set_address+0x52>
}
    13c2:	2000      	movs	r0, #0
    13c4:	b002      	add	sp, #8
    13c6:	bd70      	pop	{r4, r5, r6, pc}
    13c8:	0000092d 	.word	0x0000092d
    13cc:	0000093b 	.word	0x0000093b

000013d0 <_i2c_s_sync_init>:
{
    13d0:	b538      	push	{r3, r4, r5, lr}
    13d2:	460c      	mov	r4, r1
	ASSERT(device);
    13d4:	4605      	mov	r5, r0
    13d6:	f240 62a6 	movw	r2, #1702	; 0x6a6
    13da:	4907      	ldr	r1, [pc, #28]	; (13f8 <_i2c_s_sync_init+0x28>)
    13dc:	3000      	adds	r0, #0
    13de:	bf18      	it	ne
    13e0:	2001      	movne	r0, #1
    13e2:	4b06      	ldr	r3, [pc, #24]	; (13fc <_i2c_s_sync_init+0x2c>)
    13e4:	4798      	blx	r3
	status = _i2c_s_init(hw);
    13e6:	4620      	mov	r0, r4
    13e8:	4b05      	ldr	r3, [pc, #20]	; (1400 <_i2c_s_sync_init+0x30>)
    13ea:	4798      	blx	r3
	if (status) {
    13ec:	4603      	mov	r3, r0
    13ee:	b900      	cbnz	r0, 13f2 <_i2c_s_sync_init+0x22>
	device->hw = hw;
    13f0:	602c      	str	r4, [r5, #0]
}
    13f2:	4618      	mov	r0, r3
    13f4:	bd38      	pop	{r3, r4, r5, pc}
    13f6:	bf00      	nop
    13f8:	00001ec0 	.word	0x00001ec0
    13fc:	00000eb1 	.word	0x00000eb1
    1400:	000012dd 	.word	0x000012dd

00001404 <_i2c_s_sync_enable>:
	hri_sercomi2cs_set_CTRLA_ENABLE_bit(device->hw);
    1404:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1406:	6813      	ldr	r3, [r2, #0]
    1408:	f043 0302 	orr.w	r3, r3, #2
    140c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    140e:	69d3      	ldr	r3, [r2, #28]
    1410:	f013 0f03 	tst.w	r3, #3
    1414:	d1fb      	bne.n	140e <_i2c_s_sync_enable+0xa>
}
    1416:	2000      	movs	r0, #0
    1418:	4770      	bx	lr

0000141a <_i2c_s_sync_is_10bit_addressing_on>:
	return hri_sercomi2cs_get_ADDR_TENBITEN_bit(device->hw);
    141a:	6803      	ldr	r3, [r0, #0]
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    141c:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    141e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    1422:	4770      	bx	lr

00001424 <_i2c_s_sync_set_address>:
{
    1424:	b508      	push	{r3, lr}
	return _i2c_s_set_address(device->hw, address);
    1426:	6800      	ldr	r0, [r0, #0]
    1428:	4b01      	ldr	r3, [pc, #4]	; (1430 <_i2c_s_sync_set_address+0xc>)
    142a:	4798      	blx	r3
}
    142c:	bd08      	pop	{r3, pc}
    142e:	bf00      	nop
    1430:	00001369 	.word	0x00001369

00001434 <_i2c_s_sync_write_byte>:
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    1434:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    1436:	6299      	str	r1, [r3, #40]	; 0x28
    1438:	4770      	bx	lr

0000143a <_i2c_s_sync_read_byte>:
	return hri_sercomi2cs_read_DATA_reg(device->hw);
    143a:	6803      	ldr	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->I2CS.DATA.reg;
    143c:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    143e:	b2c0      	uxtb	r0, r0
    1440:	4770      	bx	lr

00001442 <_i2c_s_sync_is_byte_sent>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1442:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) >> SERCOM_I2CS_INTFLAG_DRDY_Pos;
    1444:	7e18      	ldrb	r0, [r3, #24]
}
    1446:	f3c0 0080 	ubfx	r0, r0, #2, #1
    144a:	4770      	bx	lr

0000144c <_i2c_s_sync_is_byte_received>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    144c:	6803      	ldr	r3, [r0, #0]
    144e:	7e18      	ldrb	r0, [r3, #24]
}
    1450:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1454:	4770      	bx	lr

00001456 <_i2c_s_sync_clear_data_ready_flag>:
	hri_sercomi2cs_clear_INTFLAG_DRDY_bit(device->hw);
    1456:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_DRDY;
    1458:	2204      	movs	r2, #4
    145a:	761a      	strb	r2, [r3, #24]
}
    145c:	2000      	movs	r0, #0
    145e:	4770      	bx	lr

00001460 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1460:	b538      	push	{r3, r4, r5, lr}
    1462:	4605      	mov	r5, r0
    1464:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1466:	4608      	mov	r0, r1
    1468:	4b36      	ldr	r3, [pc, #216]	; (1544 <_spi_m_sync_init+0xe4>)
    146a:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    146c:	b160      	cbz	r0, 1488 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    146e:	2d00      	cmp	r5, #0
    1470:	d055      	beq.n	151e <_spi_m_sync_init+0xbe>
    1472:	f640 123c 	movw	r2, #2364	; 0x93c
    1476:	4934      	ldr	r1, [pc, #208]	; (1548 <_spi_m_sync_init+0xe8>)
    1478:	1c20      	adds	r0, r4, #0
    147a:	bf18      	it	ne
    147c:	2001      	movne	r0, #1
    147e:	4b33      	ldr	r3, [pc, #204]	; (154c <_spi_m_sync_init+0xec>)
    1480:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1482:	f06f 000c 	mvn.w	r0, #12
    1486:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1488:	2d00      	cmp	r5, #0
    148a:	d151      	bne.n	1530 <_spi_m_sync_init+0xd0>
    148c:	f640 123c 	movw	r2, #2364	; 0x93c
    1490:	492d      	ldr	r1, [pc, #180]	; (1548 <_spi_m_sync_init+0xe8>)
    1492:	2000      	movs	r0, #0
    1494:	4b2d      	ldr	r3, [pc, #180]	; (154c <_spi_m_sync_init+0xec>)
    1496:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1498:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    149a:	f013 0f01 	tst.w	r3, #1
    149e:	d119      	bne.n	14d4 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    14a0:	69e3      	ldr	r3, [r4, #28]
    14a2:	f013 0f03 	tst.w	r3, #3
    14a6:	d1fb      	bne.n	14a0 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    14a8:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    14aa:	f013 0f02 	tst.w	r3, #2
    14ae:	d00b      	beq.n	14c8 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    14b0:	6823      	ldr	r3, [r4, #0]
    14b2:	f023 0302 	bic.w	r3, r3, #2
    14b6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    14b8:	69e3      	ldr	r3, [r4, #28]
    14ba:	f013 0f03 	tst.w	r3, #3
    14be:	d1fb      	bne.n	14b8 <_spi_m_sync_init+0x58>
    14c0:	69e3      	ldr	r3, [r4, #28]
    14c2:	f013 0f02 	tst.w	r3, #2
    14c6:	d1fb      	bne.n	14c0 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    14c8:	230d      	movs	r3, #13
    14ca:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    14cc:	69e3      	ldr	r3, [r4, #28]
    14ce:	f013 0f03 	tst.w	r3, #3
    14d2:	d1fb      	bne.n	14cc <_spi_m_sync_init+0x6c>
    14d4:	69e3      	ldr	r3, [r4, #28]
    14d6:	f013 0f01 	tst.w	r3, #1
    14da:	d1fb      	bne.n	14d4 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    14dc:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    14de:	f640 1206 	movw	r2, #2310	; 0x906
    14e2:	4919      	ldr	r1, [pc, #100]	; (1548 <_spi_m_sync_init+0xe8>)
    14e4:	1c20      	adds	r0, r4, #0
    14e6:	bf18      	it	ne
    14e8:	2001      	movne	r0, #1
    14ea:	4b18      	ldr	r3, [pc, #96]	; (154c <_spi_m_sync_init+0xec>)
    14ec:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    14ee:	4b18      	ldr	r3, [pc, #96]	; (1550 <_spi_m_sync_init+0xf0>)
    14f0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    14f2:	69e3      	ldr	r3, [r4, #28]
    14f4:	f013 0f03 	tst.w	r3, #3
    14f8:	d1fb      	bne.n	14f2 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    14fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    14fe:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1500:	69e3      	ldr	r3, [r4, #28]
    1502:	f013 0f17 	tst.w	r3, #23
    1506:	d1fb      	bne.n	1500 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1508:	2377      	movs	r3, #119	; 0x77
    150a:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    150c:	2000      	movs	r0, #0
    150e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1512:	2301      	movs	r3, #1
    1514:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1516:	f240 13ff 	movw	r3, #511	; 0x1ff
    151a:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    151c:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    151e:	f640 123c 	movw	r2, #2364	; 0x93c
    1522:	4909      	ldr	r1, [pc, #36]	; (1548 <_spi_m_sync_init+0xe8>)
    1524:	2000      	movs	r0, #0
    1526:	4b09      	ldr	r3, [pc, #36]	; (154c <_spi_m_sync_init+0xec>)
    1528:	4798      	blx	r3
		return ERR_INVALID_ARG;
    152a:	f06f 000c 	mvn.w	r0, #12
    152e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1530:	f640 123c 	movw	r2, #2364	; 0x93c
    1534:	4904      	ldr	r1, [pc, #16]	; (1548 <_spi_m_sync_init+0xe8>)
    1536:	1c20      	adds	r0, r4, #0
    1538:	bf18      	it	ne
    153a:	2001      	movne	r0, #1
    153c:	4b03      	ldr	r3, [pc, #12]	; (154c <_spi_m_sync_init+0xec>)
    153e:	4798      	blx	r3
    1540:	e7aa      	b.n	1498 <_spi_m_sync_init+0x38>
    1542:	bf00      	nop
    1544:	00001279 	.word	0x00001279
    1548:	00001ec0 	.word	0x00001ec0
    154c:	00000eb1 	.word	0x00000eb1
    1550:	4020000c 	.word	0x4020000c

00001554 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1554:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1556:	4604      	mov	r4, r0
    1558:	b160      	cbz	r0, 1574 <_spi_m_sync_enable+0x20>
    155a:	6800      	ldr	r0, [r0, #0]
    155c:	3000      	adds	r0, #0
    155e:	bf18      	it	ne
    1560:	2001      	movne	r0, #1
    1562:	f640 129b 	movw	r2, #2459	; 0x99b
    1566:	4904      	ldr	r1, [pc, #16]	; (1578 <_spi_m_sync_enable+0x24>)
    1568:	4b04      	ldr	r3, [pc, #16]	; (157c <_spi_m_sync_enable+0x28>)
    156a:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    156c:	6820      	ldr	r0, [r4, #0]
    156e:	4b04      	ldr	r3, [pc, #16]	; (1580 <_spi_m_sync_enable+0x2c>)
    1570:	4798      	blx	r3
}
    1572:	bd10      	pop	{r4, pc}
    1574:	2000      	movs	r0, #0
    1576:	e7f4      	b.n	1562 <_spi_m_sync_enable+0xe>
    1578:	00001ec0 	.word	0x00001ec0
    157c:	00000eb1 	.word	0x00000eb1
    1580:	000012b9 	.word	0x000012b9

00001584 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1588:	4681      	mov	r9, r0
    158a:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    158c:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    158e:	f8d1 8000 	ldr.w	r8, [r1]
    1592:	684d      	ldr	r5, [r1, #4]
    1594:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    1596:	b1a8      	cbz	r0, 15c4 <_spi_m_sync_trans+0x40>
    1598:	1c20      	adds	r0, r4, #0
    159a:	bf18      	it	ne
    159c:	2001      	movne	r0, #1
    159e:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    15a2:	492e      	ldr	r1, [pc, #184]	; (165c <_spi_m_sync_trans+0xd8>)
    15a4:	4b2e      	ldr	r3, [pc, #184]	; (1660 <_spi_m_sync_trans+0xdc>)
    15a6:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    15a8:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    15aa:	f013 0f07 	tst.w	r3, #7
    15ae:	d134      	bne.n	161a <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15b0:	69e0      	ldr	r0, [r4, #28]
    15b2:	f010 0003 	ands.w	r0, r0, #3
    15b6:	d1fb      	bne.n	15b0 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    15b8:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    15ba:	f013 0f02 	tst.w	r3, #2
    15be:	d030      	beq.n	1622 <_spi_m_sync_trans+0x9e>
    15c0:	4602      	mov	r2, r0
    15c2:	e008      	b.n	15d6 <_spi_m_sync_trans+0x52>
    15c4:	2000      	movs	r0, #0
    15c6:	e7ea      	b.n	159e <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    15c8:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    15ca:	f013 0f80 	tst.w	r3, #128	; 0x80
    15ce:	d112      	bne.n	15f6 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    15d0:	68b3      	ldr	r3, [r6, #8]
    15d2:	4283      	cmp	r3, r0
    15d4:	d91e      	bls.n	1614 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    15d6:	7e23      	ldrb	r3, [r4, #24]
    15d8:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    15da:	f013 0f04 	tst.w	r3, #4
    15de:	d024      	beq.n	162a <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    15e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    15e2:	2d00      	cmp	r5, #0
    15e4:	d0f0      	beq.n	15c8 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    15e6:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    15e8:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    15ea:	bf91      	iteee	ls
    15ec:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    15ee:	0a09      	lsrhi	r1, r1, #8
    15f0:	7069      	strbhi	r1, [r5, #1]
    15f2:	3502      	addhi	r5, #2
    15f4:	e7e8      	b.n	15c8 <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    15f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    15fa:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    15fc:	2380      	movs	r3, #128	; 0x80
    15fe:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1600:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1604:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1606:	f013 0f03 	tst.w	r3, #3
    160a:	d0fb      	beq.n	1604 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    160c:	2303      	movs	r3, #3
    160e:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    1610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1614:	4293      	cmp	r3, r2
    1616:	d8de      	bhi.n	15d6 <_spi_m_sync_trans+0x52>
    1618:	e7f4      	b.n	1604 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    161a:	f06f 0003 	mvn.w	r0, #3
    161e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    1622:	f06f 0013 	mvn.w	r0, #19
    1626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    162a:	4290      	cmp	r0, r2
    162c:	d8cd      	bhi.n	15ca <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    162e:	f013 0f01 	tst.w	r3, #1
    1632:	d0ca      	beq.n	15ca <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1634:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    1638:	f1b8 0f00 	cmp.w	r8, #0
    163c:	d00b      	beq.n	1656 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    163e:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    1642:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    1644:	bf91      	iteee	ls
    1646:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    164a:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    164e:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    1652:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    1656:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1658:	62a1      	str	r1, [r4, #40]	; 0x28
    165a:	e7b6      	b.n	15ca <_spi_m_sync_trans+0x46>
    165c:	00001ec0 	.word	0x00001ec0
    1660:	00000eb1 	.word	0x00000eb1

00001664 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    1664:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1666:	4604      	mov	r4, r0
    1668:	b330      	cbz	r0, 16b8 <_wdt_init+0x54>
    166a:	6800      	ldr	r0, [r0, #0]
    166c:	3000      	adds	r0, #0
    166e:	bf18      	it	ne
    1670:	2001      	movne	r0, #1
    1672:	2250      	movs	r2, #80	; 0x50
    1674:	4914      	ldr	r1, [pc, #80]	; (16c8 <_wdt_init+0x64>)
    1676:	4b15      	ldr	r3, [pc, #84]	; (16cc <_wdt_init+0x68>)
    1678:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    167a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    167c:	689a      	ldr	r2, [r3, #8]
    167e:	f012 0f0e 	tst.w	r2, #14
    1682:	d1fb      	bne.n	167c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1684:	781a      	ldrb	r2, [r3, #0]
    1686:	09d2      	lsrs	r2, r2, #7
    1688:	d118      	bne.n	16bc <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    168a:	689a      	ldr	r2, [r3, #8]
    168c:	f012 0f0e 	tst.w	r2, #14
    1690:	d1fb      	bne.n	168a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1692:	781a      	ldrb	r2, [r3, #0]
    1694:	f012 0f02 	tst.w	r2, #2
    1698:	d113      	bne.n	16c2 <_wdt_init+0x5e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    169a:	781a      	ldrb	r2, [r3, #0]
    169c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    16a0:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    16a2:	689a      	ldr	r2, [r3, #8]
    16a4:	f012 0f0e 	tst.w	r2, #14
    16a8:	d1fb      	bne.n	16a2 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    16aa:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    16ac:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    16ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    16b2:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    16b4:	2000      	movs	r0, #0
    16b6:	bd10      	pop	{r4, pc}
    16b8:	2000      	movs	r0, #0
    16ba:	e7da      	b.n	1672 <_wdt_init+0xe>
		return ERR_DENIED;
    16bc:	f06f 0010 	mvn.w	r0, #16
    16c0:	bd10      	pop	{r4, pc}
    16c2:	f06f 0010 	mvn.w	r0, #16
}
    16c6:	bd10      	pop	{r4, pc}
    16c8:	00001edc 	.word	0x00001edc
    16cc:	00000eb1 	.word	0x00000eb1

000016d0 <main>:
#include "hpl_spi.h"
#include "swd.h"


int main(void)
{
    16d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    16d4:	b089      	sub	sp, #36	; 0x24
    16d6:	af00      	add	r7, sp, #0
	atmel_start_init();
    16d8:	4b33      	ldr	r3, [pc, #204]	; (17a8 <main+0xd8>)
    16da:	4798      	blx	r3
	
	uint8_t i2c_buf[RX_LENGTH]; 
	uint8_t rst_cmd[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00}; // min of 50 bits clocked with swdio high
    16dc:	4a33      	ldr	r2, [pc, #204]	; (17ac <main+0xdc>)
    16de:	f107 030c 	add.w	r3, r7, #12
    16e2:	e892 0003 	ldmia.w	r2, {r0, r1}
    16e6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t swd_rx_buf[5];
	
	while (1) 
	{
		I2C_read(i2c_buf, RX_LENGTH);
    16ea:	4d31      	ldr	r5, [pc, #196]	; (17b0 <main+0xe0>)
		
		nor_flash_qspi_init();
    16ec:	4c31      	ldr	r4, [pc, #196]	; (17b4 <main+0xe4>)
				uint32_t data_len = i2c_buf[6] << 24 | i2c_buf[7] << 16 | i2c_buf[8] << 8 | i2c_buf[9];
				
				//TODO: if data length is bigger than RAM program in chunks
				
				uint8_t qspi_buff[data_len];
				spi_nor_flash_read(SPI_NOR_FLASH_0, qspi_buff, data_addr, data_len); // TODO: test that data is being received
    16ee:	4e32      	ldr	r6, [pc, #200]	; (17b8 <main+0xe8>)
    16f0:	e000      	b.n	16f4 <main+0x24>
    16f2:	46c5      	mov	sp, r8
		I2C_read(i2c_buf, RX_LENGTH);
    16f4:	210a      	movs	r1, #10
    16f6:	f107 0014 	add.w	r0, r7, #20
    16fa:	47a8      	blx	r5
		nor_flash_qspi_init();
    16fc:	47a0      	blx	r4
		if(i2c_buf[0] == 0xCC) //start byte CC 
    16fe:	7d3b      	ldrb	r3, [r7, #20]
    1700:	2bcc      	cmp	r3, #204	; 0xcc
    1702:	d1f7      	bne.n	16f4 <main+0x24>
			if(i2c_buf[1] == 0xBB) //target cmd BB
    1704:	7d7b      	ldrb	r3, [r7, #21]
    1706:	2bbb      	cmp	r3, #187	; 0xbb
    1708:	d1f4      	bne.n	16f4 <main+0x24>
			{
    170a:	46e8      	mov	r8, sp
				uint32_t data_addr = i2c_buf[2] << 24 | i2c_buf[3] << 16 | i2c_buf[4] << 8 | i2c_buf[5];
    170c:	7dbb      	ldrb	r3, [r7, #22]
    170e:	7dfa      	ldrb	r2, [r7, #23]
    1710:	0412      	lsls	r2, r2, #16
    1712:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    1716:	7e7b      	ldrb	r3, [r7, #25]
    1718:	431a      	orrs	r2, r3
    171a:	7e38      	ldrb	r0, [r7, #24]
				uint32_t data_len = i2c_buf[6] << 24 | i2c_buf[7] << 16 | i2c_buf[8] << 8 | i2c_buf[9];
    171c:	7eb9      	ldrb	r1, [r7, #26]
    171e:	7efb      	ldrb	r3, [r7, #27]
    1720:	041b      	lsls	r3, r3, #16
    1722:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    1726:	7f79      	ldrb	r1, [r7, #29]
    1728:	430b      	orrs	r3, r1
    172a:	7f39      	ldrb	r1, [r7, #28]
    172c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				uint8_t qspi_buff[data_len];
    1730:	1dd9      	adds	r1, r3, #7
    1732:	f021 0107 	bic.w	r1, r1, #7
    1736:	ebad 0d01 	sub.w	sp, sp, r1
				spi_nor_flash_read(SPI_NOR_FLASH_0, qspi_buff, data_addr, data_len); // TODO: test that data is being received
    173a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    173e:	4669      	mov	r1, sp
    1740:	6830      	ldr	r0, [r6, #0]
    1742:	f8df 9080 	ldr.w	r9, [pc, #128]	; 17c4 <main+0xf4>
    1746:	47c8      	blx	r9
				
				//TODO: hard reset and sense 
				
				for(int i = 0; i < 3; i++)
				{
					SWD_tx(rst_cmd, 8); // reset device,
    1748:	2108      	movs	r1, #8
    174a:	f107 000c 	add.w	r0, r7, #12
    174e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 17c8 <main+0xf8>
    1752:	47c8      	blx	r9
    1754:	2108      	movs	r1, #8
    1756:	f107 000c 	add.w	r0, r7, #12
    175a:	47c8      	blx	r9
    175c:	2108      	movs	r1, #8
    175e:	f107 000c 	add.w	r0, r7, #12
    1762:	47c8      	blx	r9
				}
				
				SWD_tx(&req_dbg_read_idcode, 1); //TODO: reinit spi -- MOSI data = falling edge / MISO data = rising edge
    1764:	2101      	movs	r1, #1
    1766:	4815      	ldr	r0, [pc, #84]	; (17bc <main+0xec>)
    1768:	47c8      	blx	r9
				SWD_rx(swd_rx_buf, 5); 
    176a:	2105      	movs	r1, #5
    176c:	1d38      	adds	r0, r7, #4
    176e:	4b14      	ldr	r3, [pc, #80]	; (17c0 <main+0xf0>)
    1770:	4798      	blx	r3
				
				if(swd_rx_buf[0] & ACK_MASK) // ACK bit mask
    1772:	793b      	ldrb	r3, [r7, #4]
    1774:	f013 0f02 	tst.w	r3, #2
    1778:	d0bb      	beq.n	16f2 <main+0x22>
				{
					uint32_t Wdata;
										
					swd_rx_buf[4] = (swd_rx_buf[4]  << 4 )| (swd_rx_buf[3] >> 4); //first byte
    177a:	f897 e007 	ldrb.w	lr, [r7, #7]
    177e:	7a39      	ldrb	r1, [r7, #8]
    1780:	ea4f 121e 	mov.w	r2, lr, lsr #4
    1784:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
    1788:	723a      	strb	r2, [r7, #8]
					swd_rx_buf[3] = (swd_rx_buf[3]  << 4 )| (swd_rx_buf[2] >> 4); //second byte
    178a:	79b8      	ldrb	r0, [r7, #6]
    178c:	0901      	lsrs	r1, r0, #4
    178e:	ea41 110e 	orr.w	r1, r1, lr, lsl #4
    1792:	71f9      	strb	r1, [r7, #7]
					swd_rx_buf[2] = (swd_rx_buf[2]  << 4 )| (swd_rx_buf[1] >> 4); //third byte
    1794:	7979      	ldrb	r1, [r7, #5]
    1796:	090a      	lsrs	r2, r1, #4
    1798:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    179c:	71ba      	strb	r2, [r7, #6]
					swd_rx_buf[1] = (swd_rx_buf[1]  << 4 )| (swd_rx_buf[0] >> 4); //second byte
    179e:	091b      	lsrs	r3, r3, #4
    17a0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    17a4:	717b      	strb	r3, [r7, #5]
    17a6:	e7a4      	b.n	16f2 <main+0x22>
    17a8:	000002d1 	.word	0x000002d1
    17ac:	00001ef4 	.word	0x00001ef4
    17b0:	000008e9 	.word	0x000008e9
    17b4:	000007c1 	.word	0x000007c1
    17b8:	200000a8 	.word	0x200000a8
    17bc:	20000000 	.word	0x20000000
    17c0:	000008a5 	.word	0x000008a5
    17c4:	00001ceb 	.word	0x00001ceb
    17c8:	00000861 	.word	0x00000861

000017cc <s25fl116k_read_reg>:
	cmd.instruction = S25FL1_SOFT_RESET;
	qspi_sync_serial_run_command(descr, &cmd);
}

static uint8_t s25fl116k_read_reg(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst)
{
    17cc:	b500      	push	{lr}
    17ce:	b089      	sub	sp, #36	; 0x24
	uint32_t status;
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 1 */
	struct _qspi_command cmd = {
    17d0:	2300      	movs	r3, #0
    17d2:	9301      	str	r3, [sp, #4]
    17d4:	9302      	str	r3, [sp, #8]
    17d6:	9303      	str	r3, [sp, #12]
    17d8:	9305      	str	r3, [sp, #20]
    17da:	f001 0107 	and.w	r1, r1, #7
    17de:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    17e2:	f88d 1004 	strb.w	r1, [sp, #4]
    17e6:	f88d 2008 	strb.w	r2, [sp, #8]
    17ea:	2304      	movs	r3, #4
    17ec:	9304      	str	r3, [sp, #16]
    17ee:	ab07      	add	r3, sp, #28
    17f0:	9306      	str	r3, [sp, #24]
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .rx_buf                   = &status,
	};

	qspi_sync_serial_run_command(descr, &cmd);
    17f2:	a901      	add	r1, sp, #4
    17f4:	4b03      	ldr	r3, [pc, #12]	; (1804 <s25fl116k_read_reg+0x38>)
    17f6:	4798      	blx	r3
	return (uint8_t)status;
}
    17f8:	f89d 001c 	ldrb.w	r0, [sp, #28]
    17fc:	b009      	add	sp, #36	; 0x24
    17fe:	f85d fb04 	ldr.w	pc, [sp], #4
    1802:	bf00      	nop
    1804:	00000c11 	.word	0x00000c11

00001808 <s25fl116k_wait_memory_access_ready>:

static void s25fl116k_wait_memory_access_ready(struct qspi_sync_descriptor *descr)
{
    1808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    180a:	4607      	mov	r7, r0
	while (s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1) & S25FL1_STATUS_RDYBSY)
    180c:	2605      	movs	r6, #5
    180e:	2500      	movs	r5, #0
    1810:	4c04      	ldr	r4, [pc, #16]	; (1824 <s25fl116k_wait_memory_access_ready+0x1c>)
    1812:	4632      	mov	r2, r6
    1814:	4629      	mov	r1, r5
    1816:	4638      	mov	r0, r7
    1818:	47a0      	blx	r4
    181a:	f010 0f01 	tst.w	r0, #1
    181e:	d1f8      	bne.n	1812 <s25fl116k_wait_memory_access_ready+0xa>
		;
}
    1820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1822:	bf00      	nop
    1824:	000017cd 	.word	0x000017cd

00001828 <s25fl116k_write_enable>:

static void s25fl116k_write_enable(struct qspi_sync_descriptor *descr, uint8_t width, bool en)
{
    1828:	b5f0      	push	{r4, r5, r6, r7, lr}
    182a:	b087      	sub	sp, #28
    182c:	4604      	mov	r4, r0
	uint8_t              inst   = (en == true ? S25FL1_WRITE_ENABLE : S25FL1_WRITE_DISABLE);
    182e:	4616      	mov	r6, r2
    1830:	2a00      	cmp	r2, #0
    1832:	bf14      	ite	ne
    1834:	2206      	movne	r2, #6
    1836:	2204      	moveq	r2, #4
	uint8_t              status = 0;
	struct _qspi_command cmd    = {
    1838:	2300      	movs	r3, #0
    183a:	9300      	str	r3, [sp, #0]
    183c:	9301      	str	r3, [sp, #4]
    183e:	9302      	str	r3, [sp, #8]
    1840:	9303      	str	r3, [sp, #12]
    1842:	9304      	str	r3, [sp, #16]
    1844:	9305      	str	r3, [sp, #20]
    1846:	f001 0107 	and.w	r1, r1, #7
    184a:	f041 0110 	orr.w	r1, r1, #16
    184e:	f88d 1000 	strb.w	r1, [sp]
    1852:	f88d 2004 	strb.w	r2, [sp, #4]
        .inst_frame.bits.width   = width,
        .inst_frame.bits.inst_en = 1,
        .instruction             = inst,
    };

	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1856:	2205      	movs	r2, #5
    1858:	4619      	mov	r1, r3
    185a:	4b0b      	ldr	r3, [pc, #44]	; (1888 <s25fl116k_write_enable+0x60>)
    185c:	4798      	blx	r3
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    185e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1862:	42b0      	cmp	r0, r6
    1864:	d00d      	beq.n	1882 <s25fl116k_write_enable+0x5a>
    1866:	4635      	mov	r5, r6
		qspi_sync_serial_run_command(descr, &cmd);
    1868:	4f08      	ldr	r7, [pc, #32]	; (188c <s25fl116k_write_enable+0x64>)
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    186a:	4e07      	ldr	r6, [pc, #28]	; (1888 <s25fl116k_write_enable+0x60>)
		qspi_sync_serial_run_command(descr, &cmd);
    186c:	4669      	mov	r1, sp
    186e:	4620      	mov	r0, r4
    1870:	47b8      	blx	r7
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1872:	2205      	movs	r2, #5
    1874:	2100      	movs	r1, #0
    1876:	4620      	mov	r0, r4
    1878:	47b0      	blx	r6
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    187a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    187e:	42a8      	cmp	r0, r5
    1880:	d1f4      	bne.n	186c <s25fl116k_write_enable+0x44>
	}
}
    1882:	b007      	add	sp, #28
    1884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1886:	bf00      	nop
    1888:	000017cd 	.word	0x000017cd
    188c:	00000c11 	.word	0x00000c11

00001890 <s25fl116k_write_status>:

static void s25fl116k_write_status(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst, uint8_t *data)
{
    1890:	b5f0      	push	{r4, r5, r6, r7, lr}
    1892:	b087      	sub	sp, #28
    1894:	4606      	mov	r6, r0
    1896:	460f      	mov	r7, r1
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 3 */
	struct _qspi_command cmd = {
    1898:	2400      	movs	r4, #0
    189a:	9400      	str	r4, [sp, #0]
    189c:	9401      	str	r4, [sp, #4]
    189e:	9402      	str	r4, [sp, #8]
    18a0:	9405      	str	r4, [sp, #20]
    18a2:	f001 0507 	and.w	r5, r1, #7
    18a6:	f045 0590 	orr.w	r5, r5, #144	; 0x90
    18aa:	f88d 5000 	strb.w	r5, [sp]
    18ae:	f04f 0500 	mov.w	r5, #0
    18b2:	f04f 0e02 	mov.w	lr, #2
    18b6:	f36e 1505 	bfi	r5, lr, #4, #2
    18ba:	f88d 5001 	strb.w	r5, [sp, #1]
    18be:	f88d 2004 	strb.w	r2, [sp, #4]
    18c2:	2204      	movs	r2, #4
    18c4:	9203      	str	r2, [sp, #12]
    18c6:	9304      	str	r3, [sp, #16]
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .tx_buf                   = data,
	};
	s25fl116k_write_enable(descr, width, true);
    18c8:	2201      	movs	r2, #1
    18ca:	4d06      	ldr	r5, [pc, #24]	; (18e4 <s25fl116k_write_status+0x54>)
    18cc:	47a8      	blx	r5
	qspi_sync_serial_run_command(descr, &cmd);
    18ce:	4669      	mov	r1, sp
    18d0:	4630      	mov	r0, r6
    18d2:	4b05      	ldr	r3, [pc, #20]	; (18e8 <s25fl116k_write_status+0x58>)
    18d4:	4798      	blx	r3
	s25fl116k_write_enable(descr, width, false);
    18d6:	4622      	mov	r2, r4
    18d8:	4639      	mov	r1, r7
    18da:	4630      	mov	r0, r6
    18dc:	47a8      	blx	r5
}
    18de:	b007      	add	sp, #28
    18e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18e2:	bf00      	nop
    18e4:	00001829 	.word	0x00001829
    18e8:	00000c11 	.word	0x00000c11

000018ec <s25fl116k_read>:
	}
	return me;
}

int32_t s25fl116k_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    18ec:	b570      	push	{r4, r5, r6, lr}
    18ee:	b086      	sub	sp, #24
	struct s25fl116k *           s25fl1 = (struct s25fl116k *)me;
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    18f0:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    18f2:	2400      	movs	r4, #0
    18f4:	9400      	str	r4, [sp, #0]
    18f6:	9401      	str	r4, [sp, #4]
    18f8:	9404      	str	r4, [sp, #16]
    18fa:	24b0      	movs	r4, #176	; 0xb0
    18fc:	f88d 4000 	strb.w	r4, [sp]
    1900:	f04f 0400 	mov.w	r4, #0
    1904:	2601      	movs	r6, #1
    1906:	f366 1405 	bfi	r4, r6, #4, #2
    190a:	f88d 4001 	strb.w	r4, [sp, #1]
    190e:	2408      	movs	r4, #8
    1910:	f88d 4002 	strb.w	r4, [sp, #2]
    1914:	240b      	movs	r4, #11
    1916:	f88d 4004 	strb.w	r4, [sp, #4]
    191a:	9202      	str	r2, [sp, #8]
    191c:	9303      	str	r3, [sp, #12]
    191e:	9105      	str	r1, [sp, #20]
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};

	if (s25fl1->quad_mode) {
    1920:	7a03      	ldrb	r3, [r0, #8]
    1922:	b14b      	cbz	r3, 1938 <s25fl116k_read+0x4c>
		cmd.instruction           = S25FL1_READ_ARRAY_QUAD;
    1924:	236b      	movs	r3, #107	; 0x6b
    1926:	f88d 3004 	strb.w	r3, [sp, #4]
		cmd.inst_frame.bits.width = QSPI_INST1_ADDR1_DATA4;
    192a:	f89d 3000 	ldrb.w	r3, [sp]
    192e:	2202      	movs	r2, #2
    1930:	f362 0302 	bfi	r3, r2, #0, #3
    1934:	f88d 3000 	strb.w	r3, [sp]
	}
	qspi_sync_serial_run_command(descr, &cmd);
    1938:	4669      	mov	r1, sp
    193a:	4628      	mov	r0, r5
    193c:	4b02      	ldr	r3, [pc, #8]	; (1948 <s25fl116k_read+0x5c>)
    193e:	4798      	blx	r3
	return ERR_NONE;
}
    1940:	2000      	movs	r0, #0
    1942:	b006      	add	sp, #24
    1944:	bd70      	pop	{r4, r5, r6, pc}
    1946:	bf00      	nop
    1948:	00000c11 	.word	0x00000c11

0000194c <s25fl116k_page_program>:
{
    194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    194e:	4604      	mov	r4, r0
    1950:	460f      	mov	r7, r1
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    1952:	2201      	movs	r2, #1
    1954:	2100      	movs	r1, #0
    1956:	4d08      	ldr	r5, [pc, #32]	; (1978 <s25fl116k_page_program+0x2c>)
    1958:	47a8      	blx	r5
	s25fl116k_wait_memory_access_ready(descr);
    195a:	4620      	mov	r0, r4
    195c:	4e07      	ldr	r6, [pc, #28]	; (197c <s25fl116k_page_program+0x30>)
    195e:	47b0      	blx	r6
	qspi_sync_serial_run_command(descr, cmd);
    1960:	4639      	mov	r1, r7
    1962:	4620      	mov	r0, r4
    1964:	4b06      	ldr	r3, [pc, #24]	; (1980 <s25fl116k_page_program+0x34>)
    1966:	4798      	blx	r3
	s25fl116k_wait_memory_access_ready(descr);
    1968:	4620      	mov	r0, r4
    196a:	47b0      	blx	r6
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    196c:	2200      	movs	r2, #0
    196e:	4611      	mov	r1, r2
    1970:	4620      	mov	r0, r4
    1972:	47a8      	blx	r5
    1974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1976:	bf00      	nop
    1978:	00001829 	.word	0x00001829
    197c:	00001809 	.word	0x00001809
    1980:	00000c11 	.word	0x00000c11

00001984 <s25fl116k_write>:

int32_t s25fl116k_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1988:	b089      	sub	sp, #36	; 0x24
    198a:	9201      	str	r2, [sp, #4]
    198c:	461e      	mov	r6, r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    198e:	6803      	ldr	r3, [r0, #0]
    1990:	9300      	str	r3, [sp, #0]
	uint32_t i = 0;

	/** Size / page_size */
	uint32_t number_of_writes = (length >> 8);

	struct _qspi_command cmd = {
    1992:	2300      	movs	r3, #0
    1994:	9302      	str	r3, [sp, #8]
    1996:	9303      	str	r3, [sp, #12]
    1998:	9307      	str	r3, [sp, #28]
    199a:	23b0      	movs	r3, #176	; 0xb0
    199c:	f88d 3008 	strb.w	r3, [sp, #8]
    19a0:	2330      	movs	r3, #48	; 0x30
    19a2:	f88d 3009 	strb.w	r3, [sp, #9]
    19a6:	2302      	movs	r3, #2
    19a8:	f88d 300c 	strb.w	r3, [sp, #12]
    19ac:	9204      	str	r2, [sp, #16]
    19ae:	9605      	str	r6, [sp, #20]
    19b0:	9106      	str	r1, [sp, #24]
	    .buf_len                  = length,
	    .tx_buf                   = buf,
	};

	/** If less than page size */
	if (number_of_writes == 0) {
    19b2:	0a37      	lsrs	r7, r6, #8
    19b4:	d023      	beq.n	19fe <s25fl116k_write+0x7a>
    19b6:	468b      	mov	fp, r1
    19b8:	460c      	mov	r4, r1
    19ba:	2500      	movs	r5, #0
		s25fl116k_page_program(descr, &cmd);
	} else {
		/** Multiple page */
		for (i = 0; i < number_of_writes; i++) {
			cmd.buf_len = S25FL1_PAGE_SIZE;
    19bc:	f44f 7a80 	mov.w	sl, #256	; 0x100
			cmd.address = address;
    19c0:	9b01      	ldr	r3, [sp, #4]
    19c2:	eba3 0901 	sub.w	r9, r3, r1
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    19c6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1a18 <s25fl116k_write+0x94>
			cmd.buf_len = S25FL1_PAGE_SIZE;
    19ca:	f8cd a014 	str.w	sl, [sp, #20]
			cmd.address = address;
    19ce:	eb04 0309 	add.w	r3, r4, r9
    19d2:	9304      	str	r3, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    19d4:	9406      	str	r4, [sp, #24]
    19d6:	a902      	add	r1, sp, #8
    19d8:	9800      	ldr	r0, [sp, #0]
    19da:	47c0      	blx	r8
			buf += S25FL1_PAGE_SIZE;
    19dc:	f504 7480 	add.w	r4, r4, #256	; 0x100
		for (i = 0; i < number_of_writes; i++) {
    19e0:	3501      	adds	r5, #1
    19e2:	42af      	cmp	r7, r5
    19e4:	d1f1      	bne.n	19ca <s25fl116k_write+0x46>
    19e6:	022d      	lsls	r5, r5, #8
    19e8:	eb0b 0205 	add.w	r2, fp, r5
    19ec:	9b01      	ldr	r3, [sp, #4]
    19ee:	441d      	add	r5, r3
			address += S25FL1_PAGE_SIZE;
		}
		if (length % S25FL1_PAGE_SIZE) {
    19f0:	f016 03ff 	ands.w	r3, r6, #255	; 0xff
    19f4:	d108      	bne.n	1a08 <s25fl116k_write+0x84>
			cmd.address = address;
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
		}
	}
	return ERR_NONE;
}
    19f6:	2000      	movs	r0, #0
    19f8:	b009      	add	sp, #36	; 0x24
    19fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s25fl116k_page_program(descr, &cmd);
    19fe:	a902      	add	r1, sp, #8
    1a00:	9800      	ldr	r0, [sp, #0]
    1a02:	4b05      	ldr	r3, [pc, #20]	; (1a18 <s25fl116k_write+0x94>)
    1a04:	4798      	blx	r3
    1a06:	e7f6      	b.n	19f6 <s25fl116k_write+0x72>
			cmd.buf_len = length % S25FL1_PAGE_SIZE;
    1a08:	9305      	str	r3, [sp, #20]
			cmd.address = address;
    1a0a:	9504      	str	r5, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1a0c:	9206      	str	r2, [sp, #24]
    1a0e:	a902      	add	r1, sp, #8
    1a10:	9800      	ldr	r0, [sp, #0]
    1a12:	4b01      	ldr	r3, [pc, #4]	; (1a18 <s25fl116k_write+0x94>)
    1a14:	4798      	blx	r3
    1a16:	e7ee      	b.n	19f6 <s25fl116k_write+0x72>
    1a18:	0000194d 	.word	0x0000194d

00001a1c <s25fl116k_erase>:

int32_t s25fl116k_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    1a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a20:	b087      	sub	sp, #28
    1a22:	4615      	mov	r5, r2
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1a24:	6806      	ldr	r6, [r0, #0]

	uint32_t temp_addr = address;
	uint32_t temp_len  = length;
	uint8_t  status;

	struct _qspi_command cmd = {
    1a26:	2300      	movs	r3, #0
    1a28:	9300      	str	r3, [sp, #0]
    1a2a:	9301      	str	r3, [sp, #4]
    1a2c:	9302      	str	r3, [sp, #8]
    1a2e:	9303      	str	r3, [sp, #12]
    1a30:	9304      	str	r3, [sp, #16]
    1a32:	9305      	str	r3, [sp, #20]
    1a34:	2330      	movs	r3, #48	; 0x30
    1a36:	f88d 3000 	strb.w	r3, [sp]
    1a3a:	f04f 0300 	mov.w	r3, #0
    1a3e:	2202      	movs	r2, #2
    1a40:	f362 1305 	bfi	r3, r2, #4, #2
    1a44:	f88d 3001 	strb.w	r3, [sp, #1]
	    .inst_frame.bits.inst_en  = 1,
	    .inst_frame.bits.addr_en  = 1,
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	};

	if ((length % S25FL1_SECTOR_SIZE) || (address % S25FL1_SECTOR_SIZE)) {
    1a48:	ea41 0305 	orr.w	r3, r1, r5
    1a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a50:	2b00      	cmp	r3, #0
    1a52:	d15e      	bne.n	1b12 <s25fl116k_erase+0xf6>
    1a54:	460c      	mov	r4, r1
		return ERR_INVALID_ARG;
	}
	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1a56:	2205      	movs	r2, #5
    1a58:	2100      	movs	r1, #0
    1a5a:	4630      	mov	r0, r6
    1a5c:	4b31      	ldr	r3, [pc, #196]	; (1b24 <s25fl116k_erase+0x108>)
    1a5e:	4798      	blx	r3
	if ((status & S25FL1_STATUS_RDYBSY) != S25FL1_STATUS_RDYBSY_READY)
    1a60:	f010 0f01 	tst.w	r0, #1
    1a64:	d003      	beq.n	1a6e <s25fl116k_erase+0x52>
		return S25FL1_ERROR_BUSY;
    1a66:	2002      	movs	r0, #2
			return ERR_INVALID_ARG;
		}
	}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
	return ERR_NONE;
}
    1a68:	b007      	add	sp, #28
    1a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    1a6e:	2201      	movs	r2, #1
    1a70:	2100      	movs	r1, #0
    1a72:	4630      	mov	r0, r6
    1a74:	4b2c      	ldr	r3, [pc, #176]	; (1b28 <s25fl116k_erase+0x10c>)
    1a76:	4798      	blx	r3
	if (address == 0 && length >= S25FL1_FLASH_SIZE) {
    1a78:	b914      	cbnz	r4, 1a80 <s25fl116k_erase+0x64>
    1a7a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
    1a7e:	d207      	bcs.n	1a90 <s25fl116k_erase+0x74>
	while (temp_len > 0) {
    1a80:	2d00      	cmp	r5, #0
    1a82:	d03f      	beq.n	1b04 <s25fl116k_erase+0xe8>
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    1a84:	f04f 09d8 	mov.w	r9, #216	; 0xd8
			qspi_sync_serial_run_command(descr, &cmd);
    1a88:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1b30 <s25fl116k_erase+0x114>
			s25fl116k_wait_memory_access_ready(descr);
    1a8c:	4f27      	ldr	r7, [pc, #156]	; (1b2c <s25fl116k_erase+0x110>)
    1a8e:	e026      	b.n	1ade <s25fl116k_erase+0xc2>
		cmd.inst_frame.bits.addr_en = 0;
    1a90:	f89d 3000 	ldrb.w	r3, [sp]
    1a94:	f36f 1345 	bfc	r3, #5, #1
    1a98:	f88d 3000 	strb.w	r3, [sp]
		cmd.instruction             = S25FL1_CHIP_ERASE_2;
    1a9c:	23c7      	movs	r3, #199	; 0xc7
    1a9e:	f88d 3004 	strb.w	r3, [sp, #4]
		qspi_sync_serial_run_command(descr, &cmd);
    1aa2:	4669      	mov	r1, sp
    1aa4:	4630      	mov	r0, r6
    1aa6:	4b22      	ldr	r3, [pc, #136]	; (1b30 <s25fl116k_erase+0x114>)
    1aa8:	4798      	blx	r3
		temp_len -= S25FL1_FLASH_SIZE;
    1aaa:	f5a5 1500 	sub.w	r5, r5, #2097152	; 0x200000
		s25fl116k_wait_memory_access_ready(descr);
    1aae:	4630      	mov	r0, r6
    1ab0:	4b1e      	ldr	r3, [pc, #120]	; (1b2c <s25fl116k_erase+0x110>)
    1ab2:	4798      	blx	r3
    1ab4:	e7e4      	b.n	1a80 <s25fl116k_erase+0x64>
		} else if ((temp_addr % S25FL1_SECTOR_SIZE == 0) && (temp_len >= S25FL1_SECTOR_SIZE)) {
    1ab6:	f3c4 030b 	ubfx	r3, r4, #0, #12
    1aba:	bb6b      	cbnz	r3, 1b18 <s25fl116k_erase+0xfc>
    1abc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    1ac0:	d32d      	bcc.n	1b1e <s25fl116k_erase+0x102>
			cmd.address     = temp_addr;
    1ac2:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_4K;
    1ac4:	2320      	movs	r3, #32
    1ac6:	f88d 3004 	strb.w	r3, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1aca:	4669      	mov	r1, sp
    1acc:	4630      	mov	r0, r6
    1ace:	47c0      	blx	r8
			temp_addr += S25FL1_SECTOR_SIZE;
    1ad0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
			temp_len -= S25FL1_SECTOR_SIZE;
    1ad4:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
			s25fl116k_wait_memory_access_ready(descr);
    1ad8:	4630      	mov	r0, r6
    1ada:	47b8      	blx	r7
	while (temp_len > 0) {
    1adc:	b195      	cbz	r5, 1b04 <s25fl116k_erase+0xe8>
		if ((temp_addr % S25FL1_BLOCK_SIZE == 0) && (temp_len >= S25FL1_BLOCK_SIZE)) {
    1ade:	b2a3      	uxth	r3, r4
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d1e8      	bne.n	1ab6 <s25fl116k_erase+0x9a>
    1ae4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    1ae8:	d3e5      	bcc.n	1ab6 <s25fl116k_erase+0x9a>
			cmd.address     = temp_addr;
    1aea:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    1aec:	f88d 9004 	strb.w	r9, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1af0:	4669      	mov	r1, sp
    1af2:	4630      	mov	r0, r6
    1af4:	47c0      	blx	r8
			temp_addr += S25FL1_BLOCK_SIZE;
    1af6:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
			temp_len -= S25FL1_BLOCK_SIZE;
    1afa:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
			s25fl116k_wait_memory_access_ready(descr);
    1afe:	4630      	mov	r0, r6
    1b00:	47b8      	blx	r7
    1b02:	e7eb      	b.n	1adc <s25fl116k_erase+0xc0>
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    1b04:	2200      	movs	r2, #0
    1b06:	4611      	mov	r1, r2
    1b08:	4630      	mov	r0, r6
    1b0a:	4b07      	ldr	r3, [pc, #28]	; (1b28 <s25fl116k_erase+0x10c>)
    1b0c:	4798      	blx	r3
	return ERR_NONE;
    1b0e:	2000      	movs	r0, #0
    1b10:	e7aa      	b.n	1a68 <s25fl116k_erase+0x4c>
		return ERR_INVALID_ARG;
    1b12:	f06f 000c 	mvn.w	r0, #12
    1b16:	e7a7      	b.n	1a68 <s25fl116k_erase+0x4c>
			return ERR_INVALID_ARG;
    1b18:	f06f 000c 	mvn.w	r0, #12
    1b1c:	e7a4      	b.n	1a68 <s25fl116k_erase+0x4c>
    1b1e:	f06f 000c 	mvn.w	r0, #12
    1b22:	e7a1      	b.n	1a68 <s25fl116k_erase+0x4c>
    1b24:	000017cd 	.word	0x000017cd
    1b28:	00001829 	.word	0x00001829
    1b2c:	00001809 	.word	0x00001809
    1b30:	00000c11 	.word	0x00000c11

00001b34 <s25fl116k_enable_xip>:

int32_t s25fl116k_enable_xip(const struct spi_nor_flash *const me)
{
    1b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b36:	b089      	sub	sp, #36	; 0x24
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1b38:	6804      	ldr	r4, [r0, #0]

	uint8_t dummy_read, status[3];

	struct _qspi_command cmd = {
    1b3a:	2500      	movs	r5, #0
    1b3c:	9501      	str	r5, [sp, #4]
    1b3e:	9502      	str	r5, [sp, #8]
    1b40:	9503      	str	r5, [sp, #12]
    1b42:	9505      	str	r5, [sp, #20]
    1b44:	23f4      	movs	r3, #244	; 0xf4
    1b46:	f88d 3004 	strb.w	r3, [sp, #4]
    1b4a:	2302      	movs	r3, #2
    1b4c:	f043 0250 	orr.w	r2, r3, #80	; 0x50
    1b50:	f88d 2005 	strb.w	r2, [sp, #5]
    1b54:	2205      	movs	r2, #5
    1b56:	f88d 2006 	strb.w	r2, [sp, #6]
    1b5a:	21eb      	movs	r1, #235	; 0xeb
    1b5c:	f88d 1008 	strb.w	r1, [sp, #8]
    1b60:	f88d 3009 	strb.w	r3, [sp, #9]
    1b64:	2301      	movs	r3, #1
    1b66:	9304      	str	r3, [sp, #16]
    1b68:	f10d 031f 	add.w	r3, sp, #31
    1b6c:	9306      	str	r3, [sp, #24]
	    .address                        = 0,
	    .buf_len                        = 1,
	    .rx_buf                         = &dummy_read,
	};

	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1b6e:	4629      	mov	r1, r5
    1b70:	4620      	mov	r0, r4
    1b72:	4e17      	ldr	r6, [pc, #92]	; (1bd0 <s25fl116k_enable_xip+0x9c>)
    1b74:	47b0      	blx	r6
    1b76:	f88d 001c 	strb.w	r0, [sp, #28]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1b7a:	2235      	movs	r2, #53	; 0x35
    1b7c:	4629      	mov	r1, r5
    1b7e:	4620      	mov	r0, r4
    1b80:	47b0      	blx	r6
    1b82:	f88d 001d 	strb.w	r0, [sp, #29]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    1b86:	2233      	movs	r2, #51	; 0x33
    1b88:	4629      	mov	r1, r5
    1b8a:	4620      	mov	r0, r4
    1b8c:	47b0      	blx	r6
    1b8e:	f88d 001e 	strb.w	r0, [sp, #30]

	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1b92:	f89d 001d 	ldrb.w	r0, [sp, #29]
    1b96:	f010 0f02 	tst.w	r0, #2
    1b9a:	d112      	bne.n	1bc2 <s25fl116k_enable_xip+0x8e>
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1b9c:	4f0d      	ldr	r7, [pc, #52]	; (1bd4 <s25fl116k_enable_xip+0xa0>)
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    1b9e:	f040 0002 	orr.w	r0, r0, #2
    1ba2:	f88d 001d 	strb.w	r0, [sp, #29]
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1ba6:	ab07      	add	r3, sp, #28
    1ba8:	2201      	movs	r2, #1
    1baa:	4629      	mov	r1, r5
    1bac:	4620      	mov	r0, r4
    1bae:	47b8      	blx	r7
		status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1bb0:	2235      	movs	r2, #53	; 0x35
    1bb2:	4629      	mov	r1, r5
    1bb4:	4620      	mov	r0, r4
    1bb6:	47b0      	blx	r6
    1bb8:	f88d 001d 	strb.w	r0, [sp, #29]
	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1bbc:	f010 0f02 	tst.w	r0, #2
    1bc0:	d0ed      	beq.n	1b9e <s25fl116k_enable_xip+0x6a>
	}

	qspi_sync_serial_run_command(descr, &cmd);
    1bc2:	a901      	add	r1, sp, #4
    1bc4:	4620      	mov	r0, r4
    1bc6:	4b04      	ldr	r3, [pc, #16]	; (1bd8 <s25fl116k_enable_xip+0xa4>)
    1bc8:	4798      	blx	r3
	return ERR_NONE;
}
    1bca:	2000      	movs	r0, #0
    1bcc:	b009      	add	sp, #36	; 0x24
    1bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bd0:	000017cd 	.word	0x000017cd
    1bd4:	00001891 	.word	0x00001891
    1bd8:	00000c11 	.word	0x00000c11

00001bdc <s25fl116k_disable_xip>:

int32_t s25fl116k_disable_xip(const struct spi_nor_flash *const me)
{
    1bdc:	b530      	push	{r4, r5, lr}
    1bde:	b087      	sub	sp, #28
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1be0:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    1be2:	2400      	movs	r4, #0
    1be4:	9400      	str	r4, [sp, #0]
    1be6:	9401      	str	r4, [sp, #4]
    1be8:	9402      	str	r4, [sp, #8]
    1bea:	9403      	str	r4, [sp, #12]
    1bec:	9404      	str	r4, [sp, #16]
    1bee:	9405      	str	r4, [sp, #20]
    1bf0:	2310      	movs	r3, #16
    1bf2:	f88d 3000 	strb.w	r3, [sp]
    1bf6:	23ff      	movs	r3, #255	; 0xff
    1bf8:	f88d 3004 	strb.w	r3, [sp, #4]
	    .inst_frame.bits.width   = QSPI_INST1_ADDR1_DATA1,
	    .inst_frame.bits.inst_en = 1,
	    .instruction             = S25FL1_CONT_MODE_RESET,
	};

	qspi_sync_init(descr, QSPI);
    1bfc:	4906      	ldr	r1, [pc, #24]	; (1c18 <s25fl116k_disable_xip+0x3c>)
    1bfe:	4628      	mov	r0, r5
    1c00:	4b06      	ldr	r3, [pc, #24]	; (1c1c <s25fl116k_disable_xip+0x40>)
    1c02:	4798      	blx	r3
	qspi_sync_enable(descr);
    1c04:	4628      	mov	r0, r5
    1c06:	4b06      	ldr	r3, [pc, #24]	; (1c20 <s25fl116k_disable_xip+0x44>)
    1c08:	4798      	blx	r3

	qspi_sync_serial_run_command(descr, &cmd);
    1c0a:	4669      	mov	r1, sp
    1c0c:	4628      	mov	r0, r5
    1c0e:	4b05      	ldr	r3, [pc, #20]	; (1c24 <s25fl116k_disable_xip+0x48>)
    1c10:	4798      	blx	r3
	return ERR_NONE;
}
    1c12:	4620      	mov	r0, r4
    1c14:	b007      	add	sp, #28
    1c16:	bd30      	pop	{r4, r5, pc}
    1c18:	42003400 	.word	0x42003400
    1c1c:	00000bb9 	.word	0x00000bb9
    1c20:	00000be9 	.word	0x00000be9
    1c24:	00000c11 	.word	0x00000c11

00001c28 <s25fl116k_construct>:
{
    1c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c2c:	b082      	sub	sp, #8
    1c2e:	4606      	mov	r6, r0
    1c30:	4617      	mov	r7, r2
	spi_nor_flash_construct(me, io, &s25fl116k_interface);
    1c32:	4a28      	ldr	r2, [pc, #160]	; (1cd4 <s25fl116k_construct+0xac>)
    1c34:	4b28      	ldr	r3, [pc, #160]	; (1cd8 <s25fl116k_construct+0xb0>)
    1c36:	4798      	blx	r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1c38:	6834      	ldr	r4, [r6, #0]
	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1c3a:	2205      	movs	r2, #5
    1c3c:	2100      	movs	r1, #0
    1c3e:	4620      	mov	r0, r4
    1c40:	4d26      	ldr	r5, [pc, #152]	; (1cdc <s25fl116k_construct+0xb4>)
    1c42:	47a8      	blx	r5
    1c44:	f88d 0004 	strb.w	r0, [sp, #4]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1c48:	2235      	movs	r2, #53	; 0x35
    1c4a:	2100      	movs	r1, #0
    1c4c:	4620      	mov	r0, r4
    1c4e:	47a8      	blx	r5
    1c50:	f88d 0005 	strb.w	r0, [sp, #5]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    1c54:	2233      	movs	r2, #51	; 0x33
    1c56:	2100      	movs	r1, #0
    1c58:	4620      	mov	r0, r4
    1c5a:	47a8      	blx	r5
    1c5c:	f88d 0006 	strb.w	r0, [sp, #6]
	s25fl1->quad_mode = quad_mode;
    1c60:	7237      	strb	r7, [r6, #8]
	if (quad_mode) {
    1c62:	b9cf      	cbnz	r7, 1c98 <s25fl116k_construct+0x70>
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    1c64:	f89d 0005 	ldrb.w	r0, [sp, #5]
    1c68:	f010 0f02 	tst.w	r0, #2
    1c6c:	d02d      	beq.n	1cca <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1c6e:	2500      	movs	r5, #0
    1c70:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1ce0 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1c74:	4f19      	ldr	r7, [pc, #100]	; (1cdc <s25fl116k_construct+0xb4>)
			status[1] &= (~S25FL1_STATUS_QUAD_ENABLE);
    1c76:	f020 0002 	bic.w	r0, r0, #2
    1c7a:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1c7e:	ab01      	add	r3, sp, #4
    1c80:	2201      	movs	r2, #1
    1c82:	4629      	mov	r1, r5
    1c84:	4620      	mov	r0, r4
    1c86:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1c88:	2235      	movs	r2, #53	; 0x35
    1c8a:	4629      	mov	r1, r5
    1c8c:	4620      	mov	r0, r4
    1c8e:	47b8      	blx	r7
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    1c90:	f010 0f02 	tst.w	r0, #2
    1c94:	d1ef      	bne.n	1c76 <s25fl116k_construct+0x4e>
    1c96:	e018      	b.n	1cca <s25fl116k_construct+0xa2>
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1c98:	f89d 0005 	ldrb.w	r0, [sp, #5]
    1c9c:	f010 0f02 	tst.w	r0, #2
    1ca0:	d113      	bne.n	1cca <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1ca2:	2500      	movs	r5, #0
    1ca4:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1ce0 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1ca8:	4f0c      	ldr	r7, [pc, #48]	; (1cdc <s25fl116k_construct+0xb4>)
			status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    1caa:	f040 0002 	orr.w	r0, r0, #2
    1cae:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1cb2:	ab01      	add	r3, sp, #4
    1cb4:	2201      	movs	r2, #1
    1cb6:	4629      	mov	r1, r5
    1cb8:	4620      	mov	r0, r4
    1cba:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1cbc:	2235      	movs	r2, #53	; 0x35
    1cbe:	4629      	mov	r1, r5
    1cc0:	4620      	mov	r0, r4
    1cc2:	47b8      	blx	r7
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1cc4:	f010 0f02 	tst.w	r0, #2
    1cc8:	d0ef      	beq.n	1caa <s25fl116k_construct+0x82>
}
    1cca:	4630      	mov	r0, r6
    1ccc:	b002      	add	sp, #8
    1cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cd2:	bf00      	nop
    1cd4:	00001efc 	.word	0x00001efc
    1cd8:	00001ce5 	.word	0x00001ce5
    1cdc:	000017cd 	.word	0x000017cd
    1ce0:	00001891 	.word	0x00001891

00001ce4 <spi_nor_flash_construct>:
#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
    1ce4:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    1ce6:	6042      	str	r2, [r0, #4]

	return me;
}
    1ce8:	4770      	bx	lr

00001cea <spi_nor_flash_read>:

int32_t spi_nor_flash_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1cea:	b510      	push	{r4, lr}
	return me->interface->read(me, buf, address, length);
    1cec:	6844      	ldr	r4, [r0, #4]
    1cee:	6824      	ldr	r4, [r4, #0]
    1cf0:	47a0      	blx	r4
}
    1cf2:	bd10      	pop	{r4, pc}

00001cf4 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    1cf4:	b510      	push	{r4, lr}

	qspi_sync_enable(&QUAD_SPI_0);
    1cf6:	4c06      	ldr	r4, [pc, #24]	; (1d10 <spi_nor_flash_init+0x1c>)
    1cf8:	4620      	mov	r0, r4
    1cfa:	4b06      	ldr	r3, [pc, #24]	; (1d14 <spi_nor_flash_init+0x20>)
    1cfc:	4798      	blx	r3
	SPI_NOR_FLASH_0 = s25fl116k_construct(&SPI_NOR_FLASH_0_descr.parent, &QUAD_SPI_0, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    1cfe:	2200      	movs	r2, #0
    1d00:	4621      	mov	r1, r4
    1d02:	4805      	ldr	r0, [pc, #20]	; (1d18 <spi_nor_flash_init+0x24>)
    1d04:	4b05      	ldr	r3, [pc, #20]	; (1d1c <spi_nor_flash_init+0x28>)
    1d06:	4798      	blx	r3
    1d08:	4b05      	ldr	r3, [pc, #20]	; (1d20 <spi_nor_flash_init+0x2c>)
    1d0a:	6018      	str	r0, [r3, #0]
    1d0c:	bd10      	pop	{r4, pc}
    1d0e:	bf00      	nop
    1d10:	2000006c 	.word	0x2000006c
    1d14:	00000be9 	.word	0x00000be9
    1d18:	20000028 	.word	0x20000028
    1d1c:	00001c29 	.word	0x00001c29
    1d20:	200000a8 	.word	0x200000a8

00001d24 <__libc_init_array>:
    1d24:	b570      	push	{r4, r5, r6, lr}
    1d26:	4e0d      	ldr	r6, [pc, #52]	; (1d5c <__libc_init_array+0x38>)
    1d28:	4c0d      	ldr	r4, [pc, #52]	; (1d60 <__libc_init_array+0x3c>)
    1d2a:	1ba4      	subs	r4, r4, r6
    1d2c:	10a4      	asrs	r4, r4, #2
    1d2e:	2500      	movs	r5, #0
    1d30:	42a5      	cmp	r5, r4
    1d32:	d109      	bne.n	1d48 <__libc_init_array+0x24>
    1d34:	4e0b      	ldr	r6, [pc, #44]	; (1d64 <__libc_init_array+0x40>)
    1d36:	4c0c      	ldr	r4, [pc, #48]	; (1d68 <__libc_init_array+0x44>)
    1d38:	f000 f8ea 	bl	1f10 <_init>
    1d3c:	1ba4      	subs	r4, r4, r6
    1d3e:	10a4      	asrs	r4, r4, #2
    1d40:	2500      	movs	r5, #0
    1d42:	42a5      	cmp	r5, r4
    1d44:	d105      	bne.n	1d52 <__libc_init_array+0x2e>
    1d46:	bd70      	pop	{r4, r5, r6, pc}
    1d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1d4c:	4798      	blx	r3
    1d4e:	3501      	adds	r5, #1
    1d50:	e7ee      	b.n	1d30 <__libc_init_array+0xc>
    1d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1d56:	4798      	blx	r3
    1d58:	3501      	adds	r5, #1
    1d5a:	e7f2      	b.n	1d42 <__libc_init_array+0x1e>
    1d5c:	00001f1c 	.word	0x00001f1c
    1d60:	00001f1c 	.word	0x00001f1c
    1d64:	00001f1c 	.word	0x00001f1c
    1d68:	00001f20 	.word	0x00001f20
    1d6c:	682f2e2e 	.word	0x682f2e2e
    1d70:	692f6c61 	.word	0x692f6c61
    1d74:	756c636e 	.word	0x756c636e
    1d78:	682f6564 	.word	0x682f6564
    1d7c:	775f6c61 	.word	0x775f6c61
    1d80:	682e7464 	.word	0x682e7464
    1d84:	00000000 	.word	0x00000000
    1d88:	682f2e2e 	.word	0x682f2e2e
    1d8c:	732f6c61 	.word	0x732f6c61
    1d90:	682f6372 	.word	0x682f6372
    1d94:	665f6c61 	.word	0x665f6c61
    1d98:	6873616c 	.word	0x6873616c
    1d9c:	0000632e 	.word	0x0000632e
    1da0:	682f2e2e 	.word	0x682f2e2e
    1da4:	732f6c61 	.word	0x732f6c61
    1da8:	682f6372 	.word	0x682f6372
    1dac:	695f6c61 	.word	0x695f6c61
    1db0:	735f6332 	.word	0x735f6332
    1db4:	6e79735f 	.word	0x6e79735f
    1db8:	00632e63 	.word	0x00632e63
    1dbc:	682f2e2e 	.word	0x682f2e2e
    1dc0:	732f6c61 	.word	0x732f6c61
    1dc4:	682f6372 	.word	0x682f6372
    1dc8:	695f6c61 	.word	0x695f6c61
    1dcc:	00632e6f 	.word	0x00632e6f
    1dd0:	682f2e2e 	.word	0x682f2e2e
    1dd4:	732f6c61 	.word	0x732f6c61
    1dd8:	682f6372 	.word	0x682f6372
    1ddc:	715f6c61 	.word	0x715f6c61
    1de0:	5f697073 	.word	0x5f697073
    1de4:	636e7973 	.word	0x636e7973
    1de8:	0000632e 	.word	0x0000632e
    1dec:	682f2e2e 	.word	0x682f2e2e
    1df0:	732f6c61 	.word	0x732f6c61
    1df4:	682f6372 	.word	0x682f6372
    1df8:	735f6c61 	.word	0x735f6c61
    1dfc:	6d5f6970 	.word	0x6d5f6970
    1e00:	6e79735f 	.word	0x6e79735f
    1e04:	00632e63 	.word	0x00632e63
    1e08:	682f2e2e 	.word	0x682f2e2e
    1e0c:	732f6c61 	.word	0x732f6c61
    1e10:	682f6372 	.word	0x682f6372
    1e14:	745f6c61 	.word	0x745f6c61
    1e18:	72656d69 	.word	0x72656d69
    1e1c:	0000632e 	.word	0x0000632e
    1e20:	682f2e2e 	.word	0x682f2e2e
    1e24:	752f6c61 	.word	0x752f6c61
    1e28:	736c6974 	.word	0x736c6974
    1e2c:	6372732f 	.word	0x6372732f
    1e30:	6974752f 	.word	0x6974752f
    1e34:	6c5f736c 	.word	0x6c5f736c
    1e38:	2e747369 	.word	0x2e747369
    1e3c:	00000063 	.word	0x00000063
    1e40:	682f2e2e 	.word	0x682f2e2e
    1e44:	6e2f6c70 	.word	0x6e2f6c70
    1e48:	74636d76 	.word	0x74636d76
    1e4c:	682f6c72 	.word	0x682f6c72
    1e50:	6e5f6c70 	.word	0x6e5f6c70
    1e54:	74636d76 	.word	0x74636d76
    1e58:	632e6c72 	.word	0x632e6c72
    1e5c:	00000000 	.word	0x00000000
    1e60:	682f2e2e 	.word	0x682f2e2e
    1e64:	712f6c70 	.word	0x712f6c70
    1e68:	2f697073 	.word	0x2f697073
    1e6c:	5f6c7068 	.word	0x5f6c7068
    1e70:	69707371 	.word	0x69707371
    1e74:	0000632e 	.word	0x0000632e
    1e78:	682f2e2e 	.word	0x682f2e2e
    1e7c:	722f6c70 	.word	0x722f6c70
    1e80:	682f6374 	.word	0x682f6374
    1e84:	725f6c70 	.word	0x725f6c70
    1e88:	632e6374 	.word	0x632e6374
    1e8c:	00000000 	.word	0x00000000
    1e90:	40003000 	.word	0x40003000
    1e94:	40003400 	.word	0x40003400
    1e98:	41012000 	.word	0x41012000
    1e9c:	41014000 	.word	0x41014000
    1ea0:	43000000 	.word	0x43000000
    1ea4:	43000400 	.word	0x43000400

00001ea8 <_i2cms>:
	...
    1ec0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1ed0:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    1ee0:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    1ef0:	00000000 ffffffff 00ffffff              ............

00001efc <s25fl116k_interface>:
    1efc:	000018ed 00001985 00001a1d 00001b35     ............5...
    1f0c:	00001bdd                                ....

00001f10 <_init>:
    1f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f12:	bf00      	nop
    1f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f16:	bc08      	pop	{r3}
    1f18:	469e      	mov	lr, r3
    1f1a:	4770      	bx	lr

00001f1c <__init_array_start>:
    1f1c:	00000289 	.word	0x00000289

00001f20 <_fini>:
    1f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f22:	bf00      	nop
    1f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f26:	bc08      	pop	{r3}
    1f28:	469e      	mov	lr, r3
    1f2a:	4770      	bx	lr

00001f2c <__fini_array_start>:
    1f2c:	00000265 	.word	0x00000265
