
fb_atmel_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f2c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011f2c  2**0
                  CONTENTS
  2 .bkupram      00000000  47000000  47000000  00011f2c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00011f2c  2**0
                  CONTENTS
  4 .bss          000000b4  20000000  20000000  00020000  2**2
                  ALLOC
  5 .stack        0000c004  200000b4  200000b4  00020000  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00011f2c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00011f5a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002eaa8  00000000  00000000  00011fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004979  00000000  00000000  00040a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010bad  00000000  00000000  000453d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d90  00000000  00000000  00055f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011b8  00000000  00000000  00056d11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002c524  00000000  00000000  00057ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001a2fa  00000000  00000000  000843ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e5602  00000000  00000000  0009e6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002290  00000000  00000000  00183cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 c0 00 20 ed 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	1d 13 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 f9 0f 00 00 05 10 00 00     ................
      8c:	11 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 f1 10 00 00 05 11 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	6d 12 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     m...............
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     190:	00 00 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d0:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
	...
     20c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     21c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     22c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     23c:	dd 02 00 00 00 00 00 00 dd 02 00 00 dd 02 00 00     ................
     24c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     25c:	dd 02 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000000 	.word	0x20000000
     280:	00000000 	.word	0x00000000
     284:	00001f2c 	.word	0x00001f2c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00001f2c 	.word	0x00001f2c
     2c4:	20000004 	.word	0x20000004
     2c8:	00001f2c 	.word	0x00001f2c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	000007cd 	.word	0x000007cd

000002dc <Dummy_Handler>:
     2dc:	b082      	sub	sp, #8
     2de:	2301      	movs	r3, #1
     2e0:	9301      	str	r3, [sp, #4]
     2e2:	9b01      	ldr	r3, [sp, #4]
     2e4:	2b01      	cmp	r3, #1
     2e6:	d0fc      	beq.n	2e2 <Dummy_Handler+0x6>
     2e8:	b002      	add	sp, #8
     2ea:	4770      	bx	lr

000002ec <Reset_Handler>:
     2ec:	b508      	push	{r3, lr}
     2ee:	4b1c      	ldr	r3, [pc, #112]	; (360 <Reset_Handler+0x74>)
     2f0:	4a1c      	ldr	r2, [pc, #112]	; (364 <Reset_Handler+0x78>)
     2f2:	429a      	cmp	r2, r3
     2f4:	d010      	beq.n	318 <Reset_Handler+0x2c>
     2f6:	4b1c      	ldr	r3, [pc, #112]	; (368 <Reset_Handler+0x7c>)
     2f8:	4a19      	ldr	r2, [pc, #100]	; (360 <Reset_Handler+0x74>)
     2fa:	429a      	cmp	r2, r3
     2fc:	d20c      	bcs.n	318 <Reset_Handler+0x2c>
     2fe:	3b01      	subs	r3, #1
     300:	1a9b      	subs	r3, r3, r2
     302:	f023 0303 	bic.w	r3, r3, #3
     306:	3304      	adds	r3, #4
     308:	4413      	add	r3, r2
     30a:	4916      	ldr	r1, [pc, #88]	; (364 <Reset_Handler+0x78>)
     30c:	f851 0b04 	ldr.w	r0, [r1], #4
     310:	f842 0b04 	str.w	r0, [r2], #4
     314:	429a      	cmp	r2, r3
     316:	d1f9      	bne.n	30c <Reset_Handler+0x20>
     318:	4b14      	ldr	r3, [pc, #80]	; (36c <Reset_Handler+0x80>)
     31a:	4a15      	ldr	r2, [pc, #84]	; (370 <Reset_Handler+0x84>)
     31c:	429a      	cmp	r2, r3
     31e:	d20a      	bcs.n	336 <Reset_Handler+0x4a>
     320:	3b01      	subs	r3, #1
     322:	1a9b      	subs	r3, r3, r2
     324:	f023 0303 	bic.w	r3, r3, #3
     328:	3304      	adds	r3, #4
     32a:	4413      	add	r3, r2
     32c:	2100      	movs	r1, #0
     32e:	f842 1b04 	str.w	r1, [r2], #4
     332:	4293      	cmp	r3, r2
     334:	d1fb      	bne.n	32e <Reset_Handler+0x42>
     336:	4b0f      	ldr	r3, [pc, #60]	; (374 <Reset_Handler+0x88>)
     338:	4a0f      	ldr	r2, [pc, #60]	; (378 <Reset_Handler+0x8c>)
     33a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33e:	609a      	str	r2, [r3, #8]
     340:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     344:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     34c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     350:	f3bf 8f6f 	isb	sy
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x90>)
     356:	4798      	blx	r3
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x94>)
     35a:	4798      	blx	r3
     35c:	e7fe      	b.n	35c <Reset_Handler+0x70>
     35e:	bf00      	nop
     360:	20000000 	.word	0x20000000
     364:	00001f2c 	.word	0x00001f2c
     368:	20000000 	.word	0x20000000
     36c:	200000b4 	.word	0x200000b4
     370:	20000000 	.word	0x20000000
     374:	e000ed00 	.word	0xe000ed00
     378:	00000000 	.word	0x00000000
     37c:	00001d15 	.word	0x00001d15
     380:	00001575 	.word	0x00001575

00000384 <SWD_GPIO_init>:
struct wdt_descriptor WDT_0;



void SWD_GPIO_init(void)
{
     384:	b4f0      	push	{r4, r5, r6, r7}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     386:	4b1b      	ldr	r3, [pc, #108]	; (3f4 <SWD_GPIO_init+0x70>)
     388:	2708      	movs	r7, #8
     38a:	605f      	str	r7, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     38c:	4e1a      	ldr	r6, [pc, #104]	; (3f8 <SWD_GPIO_init+0x74>)
     38e:	629e      	str	r6, [r3, #40]	; 0x28
     390:	4d1a      	ldr	r5, [pc, #104]	; (3fc <SWD_GPIO_init+0x78>)
     392:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     394:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
     398:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     39c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3a0:	2204      	movs	r2, #4
     3a2:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a4:	4c16      	ldr	r4, [pc, #88]	; (400 <SWD_GPIO_init+0x7c>)
     3a6:	629c      	str	r4, [r3, #40]	; 0x28
     3a8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
     3ac:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3ae:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3b0:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
     3b4:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     3b8:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3bc:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c0:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     3c4:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3c8:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
     3cc:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     3d0:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d8:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
     3dc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3e4:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
     3e8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3ec:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	gpio_set_pin_direction(RST, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(RST, false);
	gpio_set_pin_pull_mode(RST, GPIO_PULL_OFF);
	
	
}
     3f0:	bcf0      	pop	{r4, r5, r6, r7}
     3f2:	4770      	bx	lr
     3f4:	41008000 	.word	0x41008000
     3f8:	40020008 	.word	0x40020008
     3fc:	c0020000 	.word	0xc0020000
     400:	40000004 	.word	0x40000004

00000404 <EXTERNAL_IRQ_0_init>:

void EXTERNAL_IRQ_0_init(void)
{
     404:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     406:	2040      	movs	r0, #64	; 0x40
     408:	4b2e      	ldr	r3, [pc, #184]	; (4c4 <EXTERNAL_IRQ_0_init+0xc0>)
     40a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     40e:	4a2e      	ldr	r2, [pc, #184]	; (4c8 <EXTERNAL_IRQ_0_init+0xc4>)
     410:	6953      	ldr	r3, [r2, #20]
     412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     416:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     418:	4b2c      	ldr	r3, [pc, #176]	; (4cc <EXTERNAL_IRQ_0_init+0xc8>)
     41a:	2220      	movs	r2, #32
     41c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     41e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     422:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     426:	629a      	str	r2, [r3, #40]	; 0x28
     428:	4929      	ldr	r1, [pc, #164]	; (4d0 <EXTERNAL_IRQ_0_init+0xcc>)
     42a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     42c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
     430:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     438:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     43c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     440:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     448:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     44c:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     450:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     454:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     456:	4a1f      	ldr	r2, [pc, #124]	; (4d4 <EXTERNAL_IRQ_0_init+0xd0>)
     458:	629a      	str	r2, [r3, #40]	; 0x28
     45a:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     45c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     460:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     468:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     46c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     470:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     478:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     47c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     480:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     484:	2280      	movs	r2, #128	; 0x80
     486:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     488:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     48c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     490:	629a      	str	r2, [r3, #40]	; 0x28
     492:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     494:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
     498:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     49c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b0:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4b4:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07A_EIC_EXTINT7);

	ext_irq_init();
     4bc:	4b06      	ldr	r3, [pc, #24]	; (4d8 <EXTERNAL_IRQ_0_init+0xd4>)
     4be:	4798      	blx	r3
     4c0:	bd08      	pop	{r3, pc}
     4c2:	bf00      	nop
     4c4:	40001c00 	.word	0x40001c00
     4c8:	40000800 	.word	0x40000800
     4cc:	41008000 	.word	0x41008000
     4d0:	c0020000 	.word	0xc0020000
     4d4:	40020040 	.word	0x40020040
     4d8:	00000929 	.word	0x00000929

000004dc <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     4dc:	4a02      	ldr	r2, [pc, #8]	; (4e8 <FLASH_0_CLOCK_init+0xc>)
     4de:	6913      	ldr	r3, [r2, #16]
     4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     4e4:	6113      	str	r3, [r2, #16]
     4e6:	4770      	bx	lr
     4e8:	40000800 	.word	0x40000800

000004ec <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     4ec:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     4ee:	4b03      	ldr	r3, [pc, #12]	; (4fc <FLASH_0_init+0x10>)
     4f0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     4f2:	4903      	ldr	r1, [pc, #12]	; (500 <FLASH_0_init+0x14>)
     4f4:	4803      	ldr	r0, [pc, #12]	; (504 <FLASH_0_init+0x18>)
     4f6:	4b04      	ldr	r3, [pc, #16]	; (508 <FLASH_0_init+0x1c>)
     4f8:	4798      	blx	r3
     4fa:	bd08      	pop	{r3, pc}
     4fc:	000004dd 	.word	0x000004dd
     500:	41004000 	.word	0x41004000
     504:	20000054 	.word	0x20000054
     508:	00000969 	.word	0x00000969

0000050c <QUAD_SPI_0_PORT_init>:
}

void QUAD_SPI_0_PORT_init(void)
{
     50c:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     50e:	4b5a      	ldr	r3, [pc, #360]	; (678 <QUAD_SPI_0_PORT_init+0x16c>)
     510:	f44f 6500 	mov.w	r5, #2048	; 0x800
     514:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     518:	4a58      	ldr	r2, [pc, #352]	; (67c <QUAD_SPI_0_PORT_init+0x170>)
     51a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     51e:	4858      	ldr	r0, [pc, #352]	; (680 <QUAD_SPI_0_PORT_init+0x174>)
     520:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     524:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     528:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     52c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     530:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     538:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     53c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     540:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     544:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     548:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     54c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     550:	f44f 7280 	mov.w	r2, #256	; 0x100
     554:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     556:	494b      	ldr	r1, [pc, #300]	; (684 <QUAD_SPI_0_PORT_init+0x178>)
     558:	6299      	str	r1, [r3, #40]	; 0x28
     55a:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     55e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     560:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     562:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     566:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     56a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     56e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     572:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     576:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     57a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     57e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     586:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     58a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     58e:	f44f 7200 	mov.w	r2, #512	; 0x200
     592:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     594:	f501 7180 	add.w	r1, r1, #256	; 0x100
     598:	6299      	str	r1, [r3, #40]	; 0x28
     59a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     59c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     59e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     5a2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5a6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5aa:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5b6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ba:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5be:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5c2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
     5ce:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d0:	4a2d      	ldr	r2, [pc, #180]	; (688 <QUAD_SPI_0_PORT_init+0x17c>)
     5d2:	629a      	str	r2, [r3, #40]	; 0x28
     5d4:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5d6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5d8:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     5dc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5e0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5e4:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ec:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5f0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5f4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5f8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5fc:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     604:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     606:	4a21      	ldr	r2, [pc, #132]	; (68c <QUAD_SPI_0_PORT_init+0x180>)
     608:	629a      	str	r2, [r3, #40]	; 0x28
     60a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     60c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     60e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     612:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     616:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     61a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     61e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     622:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     626:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     62a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     62e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     632:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     63a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     63e:	4a14      	ldr	r2, [pc, #80]	; (690 <QUAD_SPI_0_PORT_init+0x184>)
     640:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     644:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     648:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     64c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     650:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     654:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     65c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     660:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     664:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     668:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     66c:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     670:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     674:	bc30      	pop	{r4, r5}
     676:	4770      	bx	lr
     678:	41008000 	.word	0x41008000
     67c:	40020800 	.word	0x40020800
     680:	c0020000 	.word	0xc0020000
     684:	40000100 	.word	0x40000100
     688:	40000400 	.word	0x40000400
     68c:	40000800 	.word	0x40000800
     690:	40020400 	.word	0x40020400

00000694 <QUAD_SPI_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     694:	4b06      	ldr	r3, [pc, #24]	; (6b0 <QUAD_SPI_0_CLOCK_init+0x1c>)
     696:	691a      	ldr	r2, [r3, #16]
     698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     69c:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     69e:	691a      	ldr	r2, [r3, #16]
     6a0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     6a4:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     6a6:	69da      	ldr	r2, [r3, #28]
     6a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     6ac:	61da      	str	r2, [r3, #28]
     6ae:	4770      	bx	lr
     6b0:	40000800 	.word	0x40000800

000006b4 <QUAD_SPI_0_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QUAD_SPI_0_init(void)
{
     6b4:	b508      	push	{r3, lr}
	QUAD_SPI_0_CLOCK_init();
     6b6:	4b04      	ldr	r3, [pc, #16]	; (6c8 <QUAD_SPI_0_init+0x14>)
     6b8:	4798      	blx	r3
	qspi_sync_init(&QUAD_SPI_0, QSPI);
     6ba:	4904      	ldr	r1, [pc, #16]	; (6cc <QUAD_SPI_0_init+0x18>)
     6bc:	4804      	ldr	r0, [pc, #16]	; (6d0 <QUAD_SPI_0_init+0x1c>)
     6be:	4b05      	ldr	r3, [pc, #20]	; (6d4 <QUAD_SPI_0_init+0x20>)
     6c0:	4798      	blx	r3
	QUAD_SPI_0_PORT_init();
     6c2:	4b05      	ldr	r3, [pc, #20]	; (6d8 <QUAD_SPI_0_init+0x24>)
     6c4:	4798      	blx	r3
     6c6:	bd08      	pop	{r3, pc}
     6c8:	00000695 	.word	0x00000695
     6cc:	42003400 	.word	0x42003400
     6d0:	20000074 	.word	0x20000074
     6d4:	00000b95 	.word	0x00000b95
     6d8:	0000050d 	.word	0x0000050d

000006dc <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6dc:	4b16      	ldr	r3, [pc, #88]	; (738 <I2C_0_PORT_init+0x5c>)
     6de:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     6e2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6e6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ea:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6f6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6fa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     702:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     706:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     70a:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     70e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     712:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     716:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     71a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     71e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     722:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     726:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     72a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     72e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     732:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     736:	4770      	bx	lr
     738:	41008000 	.word	0x41008000

0000073c <I2C_0_CLOCK_init>:
     73c:	4b06      	ldr	r3, [pc, #24]	; (758 <I2C_0_CLOCK_init+0x1c>)
     73e:	2240      	movs	r2, #64	; 0x40
     740:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     744:	2243      	movs	r2, #67	; 0x43
     746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     74a:	4a04      	ldr	r2, [pc, #16]	; (75c <I2C_0_CLOCK_init+0x20>)
     74c:	6a13      	ldr	r3, [r2, #32]
     74e:	f043 0302 	orr.w	r3, r3, #2
     752:	6213      	str	r3, [r2, #32]
     754:	4770      	bx	lr
     756:	bf00      	nop
     758:	40001c00 	.word	0x40001c00
     75c:	40000800 	.word	0x40000800

00000760 <I2C_0_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void I2C_0_init(void)
{
     760:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     762:	4b04      	ldr	r3, [pc, #16]	; (774 <I2C_0_init+0x14>)
     764:	4798      	blx	r3
	i2c_s_sync_init(&I2C_0, SERCOM5);
     766:	4904      	ldr	r1, [pc, #16]	; (778 <I2C_0_init+0x18>)
     768:	4804      	ldr	r0, [pc, #16]	; (77c <I2C_0_init+0x1c>)
     76a:	4b05      	ldr	r3, [pc, #20]	; (780 <I2C_0_init+0x20>)
     76c:	4798      	blx	r3
	I2C_0_PORT_init();
     76e:	4b05      	ldr	r3, [pc, #20]	; (784 <I2C_0_init+0x24>)
     770:	4798      	blx	r3
     772:	bd08      	pop	{r3, pc}
     774:	0000073d 	.word	0x0000073d
     778:	43000400 	.word	0x43000400
     77c:	20000078 	.word	0x20000078
     780:	00000a85 	.word	0x00000a85
     784:	000006dd 	.word	0x000006dd

00000788 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     788:	4a02      	ldr	r2, [pc, #8]	; (794 <WDT_0_CLOCK_init+0xc>)
     78a:	6953      	ldr	r3, [r2, #20]
     78c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     790:	6153      	str	r3, [r2, #20]
     792:	4770      	bx	lr
     794:	40000800 	.word	0x40000800

00000798 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     798:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     79a:	4b06      	ldr	r3, [pc, #24]	; (7b4 <WDT_0_init+0x1c>)
     79c:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     79e:	2248      	movs	r2, #72	; 0x48
     7a0:	4905      	ldr	r1, [pc, #20]	; (7b8 <WDT_0_init+0x20>)
     7a2:	2001      	movs	r0, #1
     7a4:	4b05      	ldr	r3, [pc, #20]	; (7bc <WDT_0_init+0x24>)
     7a6:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     7a8:	4805      	ldr	r0, [pc, #20]	; (7c0 <WDT_0_init+0x28>)
     7aa:	4b06      	ldr	r3, [pc, #24]	; (7c4 <WDT_0_init+0x2c>)
     7ac:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     7ae:	4b06      	ldr	r3, [pc, #24]	; (7c8 <WDT_0_init+0x30>)
     7b0:	4798      	blx	r3
     7b2:	bd08      	pop	{r3, pc}
     7b4:	00000789 	.word	0x00000789
     7b8:	00001d5c 	.word	0x00001d5c
     7bc:	00000d59 	.word	0x00000d59
     7c0:	20000070 	.word	0x20000070
     7c4:	40002000 	.word	0x40002000
     7c8:	00001509 	.word	0x00001509

000007cc <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     7cc:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     7ce:	4b0b      	ldr	r3, [pc, #44]	; (7fc <system_init+0x30>)
     7d0:	4798      	blx	r3
	init_mcu();

	EXTERNAL_IRQ_0_init();
     7d2:	4b0b      	ldr	r3, [pc, #44]	; (800 <system_init+0x34>)
     7d4:	4798      	blx	r3

	FLASH_0_init();
     7d6:	4b0b      	ldr	r3, [pc, #44]	; (804 <system_init+0x38>)
     7d8:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     7da:	4a0b      	ldr	r2, [pc, #44]	; (808 <system_init+0x3c>)
     7dc:	6953      	ldr	r3, [r2, #20]
     7de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     7e2:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     7e4:	4b09      	ldr	r3, [pc, #36]	; (80c <system_init+0x40>)
     7e6:	4798      	blx	r3
     7e8:	4602      	mov	r2, r0
     7ea:	4909      	ldr	r1, [pc, #36]	; (810 <system_init+0x44>)
     7ec:	4809      	ldr	r0, [pc, #36]	; (814 <system_init+0x48>)
     7ee:	4b0a      	ldr	r3, [pc, #40]	; (818 <system_init+0x4c>)
     7f0:	4798      	blx	r3

	TIMER_0_init();

	I2C_0_init();
     7f2:	4b0a      	ldr	r3, [pc, #40]	; (81c <system_init+0x50>)
     7f4:	4798      	blx	r3

	WDT_0_init();
     7f6:	4b0a      	ldr	r3, [pc, #40]	; (820 <system_init+0x54>)
     7f8:	4798      	blx	r3
     7fa:	bd08      	pop	{r3, pc}
     7fc:	00000e01 	.word	0x00000e01
     800:	00000405 	.word	0x00000405
     804:	000004ed 	.word	0x000004ed
     808:	40000800 	.word	0x40000800
     80c:	00001319 	.word	0x00001319
     810:	40002400 	.word	0x40002400
     814:	20000084 	.word	0x20000084
     818:	00000d1d 	.word	0x00000d1d
     81c:	00000761 	.word	0x00000761
     820:	00000799 	.word	0x00000799

00000824 <nor_flash_qspi_init>:
}

void nor_flash_qspi_init(void)
{
     824:	b508      	push	{r3, lr}
	QUAD_SPI_0_init();
     826:	4b02      	ldr	r3, [pc, #8]	; (830 <nor_flash_qspi_init+0xc>)
     828:	4798      	blx	r3
	spi_nor_flash_init();
     82a:	4b02      	ldr	r3, [pc, #8]	; (834 <nor_flash_qspi_init+0x10>)
     82c:	4798      	blx	r3
     82e:	bd08      	pop	{r3, pc}
     830:	000006b5 	.word	0x000006b5
     834:	00001ce1 	.word	0x00001ce1

00000838 <I2C_read>:
	timer_add_task(&TIMER_0, &TIMER_0_task2);
	timer_start(&TIMER_0);
}

void I2C_read(uint8_t* buffer, uint16_t length)
{
     838:	b570      	push	{r4, r5, r6, lr}
     83a:	b082      	sub	sp, #8
     83c:	4605      	mov	r5, r0
     83e:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     840:	4c09      	ldr	r4, [pc, #36]	; (868 <I2C_read+0x30>)
     842:	a901      	add	r1, sp, #4
     844:	4620      	mov	r0, r4
     846:	4b09      	ldr	r3, [pc, #36]	; (86c <I2C_read+0x34>)
     848:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     84a:	2110      	movs	r1, #16
     84c:	4620      	mov	r0, r4
     84e:	4b08      	ldr	r3, [pc, #32]	; (870 <I2C_read+0x38>)
     850:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     852:	4620      	mov	r0, r4
     854:	4b07      	ldr	r3, [pc, #28]	; (874 <I2C_read+0x3c>)
     856:	4798      	blx	r3

	io_read(io, buffer, length);
     858:	4632      	mov	r2, r6
     85a:	4629      	mov	r1, r5
     85c:	9801      	ldr	r0, [sp, #4]
     85e:	4b06      	ldr	r3, [pc, #24]	; (878 <I2C_read+0x40>)
     860:	4798      	blx	r3
}
     862:	b002      	add	sp, #8
     864:	bd70      	pop	{r4, r5, r6, pc}
     866:	bf00      	nop
     868:	20000078 	.word	0x20000078
     86c:	00000b39 	.word	0x00000b39
     870:	00000acd 	.word	0x00000acd
     874:	00000b11 	.word	0x00000b11
     878:	00000b65 	.word	0x00000b65

0000087c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     87c:	f3ef 8310 	mrs	r3, PRIMASK
     880:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     882:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     884:	f3bf 8f5f 	dmb	sy
     888:	4770      	bx	lr

0000088a <atomic_leave_critical>:
     88a:	f3bf 8f5f 	dmb	sy
     88e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     890:	f383 8810 	msr	PRIMASK, r3
     894:	4770      	bx	lr
	...

00000898 <delay_us>:
     898:	b510      	push	{r4, lr}
     89a:	4b04      	ldr	r3, [pc, #16]	; (8ac <delay_us+0x14>)
     89c:	681c      	ldr	r4, [r3, #0]
     89e:	4b04      	ldr	r3, [pc, #16]	; (8b0 <delay_us+0x18>)
     8a0:	4798      	blx	r3
     8a2:	4601      	mov	r1, r0
     8a4:	4620      	mov	r0, r4
     8a6:	4b03      	ldr	r3, [pc, #12]	; (8b4 <delay_us+0x1c>)
     8a8:	4798      	blx	r3
     8aa:	bd10      	pop	{r4, pc}
     8ac:	2000001c 	.word	0x2000001c
     8b0:	00000dc1 	.word	0x00000dc1
     8b4:	00000df9 	.word	0x00000df9

000008b8 <delay_ms>:
     8b8:	b510      	push	{r4, lr}
     8ba:	4b04      	ldr	r3, [pc, #16]	; (8cc <delay_ms+0x14>)
     8bc:	681c      	ldr	r4, [r3, #0]
     8be:	4b04      	ldr	r3, [pc, #16]	; (8d0 <delay_ms+0x18>)
     8c0:	4798      	blx	r3
     8c2:	4601      	mov	r1, r0
     8c4:	4620      	mov	r0, r4
     8c6:	4b03      	ldr	r3, [pc, #12]	; (8d4 <delay_ms+0x1c>)
     8c8:	4798      	blx	r3
     8ca:	bd10      	pop	{r4, pc}
     8cc:	2000001c 	.word	0x2000001c
     8d0:	00000dd9 	.word	0x00000dd9
     8d4:	00000df9 	.word	0x00000df9

000008d8 <process_ext_irq>:
     8d8:	b570      	push	{r4, r5, r6, lr}
     8da:	4b12      	ldr	r3, [pc, #72]	; (924 <process_ext_irq+0x4c>)
     8dc:	68d9      	ldr	r1, [r3, #12]
     8de:	4288      	cmp	r0, r1
     8e0:	d01d      	beq.n	91e <process_ext_irq+0x46>
     8e2:	2201      	movs	r2, #1
     8e4:	2503      	movs	r5, #3
     8e6:	2400      	movs	r4, #0
     8e8:	461e      	mov	r6, r3
     8ea:	4288      	cmp	r0, r1
     8ec:	bf87      	ittee	hi
     8ee:	3201      	addhi	r2, #1
     8f0:	b2d4      	uxtbhi	r4, r2
     8f2:	f102 32ff 	addls.w	r2, r2, #4294967295
     8f6:	b2d5      	uxtbls	r5, r2
     8f8:	42a5      	cmp	r5, r4
     8fa:	d312      	bcc.n	922 <process_ext_irq+0x4a>
     8fc:	192b      	adds	r3, r5, r4
     8fe:	105b      	asrs	r3, r3, #1
     900:	b2da      	uxtb	r2, r3
     902:	2a02      	cmp	r2, #2
     904:	d80d      	bhi.n	922 <process_ext_irq+0x4a>
     906:	4613      	mov	r3, r2
     908:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
     90c:	6849      	ldr	r1, [r1, #4]
     90e:	4281      	cmp	r1, r0
     910:	d1eb      	bne.n	8ea <process_ext_irq+0x12>
     912:	4a04      	ldr	r2, [pc, #16]	; (924 <process_ext_irq+0x4c>)
     914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     918:	b11b      	cbz	r3, 922 <process_ext_irq+0x4a>
     91a:	4798      	blx	r3
     91c:	bd70      	pop	{r4, r5, r6, pc}
     91e:	2301      	movs	r3, #1
     920:	e7f7      	b.n	912 <process_ext_irq+0x3a>
     922:	bd70      	pop	{r4, r5, r6, pc}
     924:	20000020 	.word	0x20000020

00000928 <ext_irq_init>:
     928:	b508      	push	{r3, lr}
     92a:	4b07      	ldr	r3, [pc, #28]	; (948 <ext_irq_init+0x20>)
     92c:	f04f 31ff 	mov.w	r1, #4294967295
     930:	6059      	str	r1, [r3, #4]
     932:	2200      	movs	r2, #0
     934:	601a      	str	r2, [r3, #0]
     936:	60d9      	str	r1, [r3, #12]
     938:	609a      	str	r2, [r3, #8]
     93a:	6159      	str	r1, [r3, #20]
     93c:	611a      	str	r2, [r3, #16]
     93e:	4803      	ldr	r0, [pc, #12]	; (94c <ext_irq_init+0x24>)
     940:	4b03      	ldr	r3, [pc, #12]	; (950 <ext_irq_init+0x28>)
     942:	4798      	blx	r3
     944:	bd08      	pop	{r3, pc}
     946:	bf00      	nop
     948:	20000020 	.word	0x20000020
     94c:	000008d9 	.word	0x000008d9
     950:	00000f15 	.word	0x00000f15

00000954 <flash_ready>:
     954:	b508      	push	{r3, lr}
     956:	6943      	ldr	r3, [r0, #20]
     958:	b103      	cbz	r3, 95c <flash_ready+0x8>
     95a:	4798      	blx	r3
     95c:	bd08      	pop	{r3, pc}

0000095e <flash_error>:
     95e:	b508      	push	{r3, lr}
     960:	6983      	ldr	r3, [r0, #24]
     962:	b103      	cbz	r3, 966 <flash_error+0x8>
     964:	4798      	blx	r3
     966:	bd08      	pop	{r3, pc}

00000968 <flash_init>:
     968:	b538      	push	{r3, r4, r5, lr}
     96a:	460d      	mov	r5, r1
     96c:	4604      	mov	r4, r0
     96e:	b190      	cbz	r0, 996 <flash_init+0x2e>
     970:	1c08      	adds	r0, r1, #0
     972:	bf18      	it	ne
     974:	2001      	movne	r0, #1
     976:	2238      	movs	r2, #56	; 0x38
     978:	4908      	ldr	r1, [pc, #32]	; (99c <flash_init+0x34>)
     97a:	4b09      	ldr	r3, [pc, #36]	; (9a0 <flash_init+0x38>)
     97c:	4798      	blx	r3
     97e:	4629      	mov	r1, r5
     980:	4620      	mov	r0, r4
     982:	4b08      	ldr	r3, [pc, #32]	; (9a4 <flash_init+0x3c>)
     984:	4798      	blx	r3
     986:	4603      	mov	r3, r0
     988:	b918      	cbnz	r0, 992 <flash_init+0x2a>
     98a:	4a07      	ldr	r2, [pc, #28]	; (9a8 <flash_init+0x40>)
     98c:	6022      	str	r2, [r4, #0]
     98e:	4a07      	ldr	r2, [pc, #28]	; (9ac <flash_init+0x44>)
     990:	6062      	str	r2, [r4, #4]
     992:	4618      	mov	r0, r3
     994:	bd38      	pop	{r3, r4, r5, pc}
     996:	2000      	movs	r0, #0
     998:	e7ed      	b.n	976 <flash_init+0xe>
     99a:	bf00      	nop
     99c:	00001d78 	.word	0x00001d78
     9a0:	00000d59 	.word	0x00000d59
     9a4:	00001079 	.word	0x00001079
     9a8:	00000955 	.word	0x00000955
     9ac:	0000095f 	.word	0x0000095f

000009b0 <i2c_s_sync_write>:
     9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     9b4:	460f      	mov	r7, r1
     9b6:	4690      	mov	r8, r2
     9b8:	4604      	mov	r4, r0
     9ba:	b320      	cbz	r0, a06 <i2c_s_sync_write+0x56>
     9bc:	b329      	cbz	r1, a0a <i2c_s_sync_write+0x5a>
     9be:	1c10      	adds	r0, r2, #0
     9c0:	bf18      	it	ne
     9c2:	2001      	movne	r0, #1
     9c4:	22b6      	movs	r2, #182	; 0xb6
     9c6:	4912      	ldr	r1, [pc, #72]	; (a10 <i2c_s_sync_write+0x60>)
     9c8:	4b12      	ldr	r3, [pc, #72]	; (a14 <i2c_s_sync_write+0x64>)
     9ca:	4798      	blx	r3
     9cc:	3c04      	subs	r4, #4
     9ce:	4d12      	ldr	r5, [pc, #72]	; (a18 <i2c_s_sync_write+0x68>)
     9d0:	4620      	mov	r0, r4
     9d2:	47a8      	blx	r5
     9d4:	2800      	cmp	r0, #0
     9d6:	d0fb      	beq.n	9d0 <i2c_s_sync_write+0x20>
     9d8:	3f01      	subs	r7, #1
     9da:	2600      	movs	r6, #0
     9dc:	f8df 9040 	ldr.w	r9, [pc, #64]	; a20 <i2c_s_sync_write+0x70>
     9e0:	4d0d      	ldr	r5, [pc, #52]	; (a18 <i2c_s_sync_write+0x68>)
     9e2:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     9e6:	4620      	mov	r0, r4
     9e8:	47c8      	blx	r9
     9ea:	4620      	mov	r0, r4
     9ec:	47a8      	blx	r5
     9ee:	2800      	cmp	r0, #0
     9f0:	d0fb      	beq.n	9ea <i2c_s_sync_write+0x3a>
     9f2:	3601      	adds	r6, #1
     9f4:	b2b6      	uxth	r6, r6
     9f6:	45b0      	cmp	r8, r6
     9f8:	d8f3      	bhi.n	9e2 <i2c_s_sync_write+0x32>
     9fa:	4620      	mov	r0, r4
     9fc:	4b07      	ldr	r3, [pc, #28]	; (a1c <i2c_s_sync_write+0x6c>)
     9fe:	4798      	blx	r3
     a00:	4630      	mov	r0, r6
     a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     a06:	2000      	movs	r0, #0
     a08:	e7dc      	b.n	9c4 <i2c_s_sync_write+0x14>
     a0a:	2000      	movs	r0, #0
     a0c:	e7da      	b.n	9c4 <i2c_s_sync_write+0x14>
     a0e:	bf00      	nop
     a10:	00001d90 	.word	0x00001d90
     a14:	00000d59 	.word	0x00000d59
     a18:	000014eb 	.word	0x000014eb
     a1c:	000014ff 	.word	0x000014ff
     a20:	000014dd 	.word	0x000014dd

00000a24 <i2c_s_sync_read>:
     a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a28:	460f      	mov	r7, r1
     a2a:	4690      	mov	r8, r2
     a2c:	4604      	mov	r4, r0
     a2e:	b1e0      	cbz	r0, a6a <i2c_s_sync_read+0x46>
     a30:	b1e9      	cbz	r1, a6e <i2c_s_sync_read+0x4a>
     a32:	1c10      	adds	r0, r2, #0
     a34:	bf18      	it	ne
     a36:	2001      	movne	r0, #1
     a38:	229c      	movs	r2, #156	; 0x9c
     a3a:	490e      	ldr	r1, [pc, #56]	; (a74 <i2c_s_sync_read+0x50>)
     a3c:	4b0e      	ldr	r3, [pc, #56]	; (a78 <i2c_s_sync_read+0x54>)
     a3e:	4798      	blx	r3
     a40:	3f01      	subs	r7, #1
     a42:	2600      	movs	r6, #0
     a44:	3c04      	subs	r4, #4
     a46:	4d0d      	ldr	r5, [pc, #52]	; (a7c <i2c_s_sync_read+0x58>)
     a48:	f8df 9034 	ldr.w	r9, [pc, #52]	; a80 <i2c_s_sync_read+0x5c>
     a4c:	4620      	mov	r0, r4
     a4e:	47a8      	blx	r5
     a50:	2800      	cmp	r0, #0
     a52:	d0fb      	beq.n	a4c <i2c_s_sync_read+0x28>
     a54:	4620      	mov	r0, r4
     a56:	47c8      	blx	r9
     a58:	f807 0f01 	strb.w	r0, [r7, #1]!
     a5c:	3601      	adds	r6, #1
     a5e:	b2b6      	uxth	r6, r6
     a60:	45b0      	cmp	r8, r6
     a62:	d8f3      	bhi.n	a4c <i2c_s_sync_read+0x28>
     a64:	4630      	mov	r0, r6
     a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     a6a:	2000      	movs	r0, #0
     a6c:	e7e4      	b.n	a38 <i2c_s_sync_read+0x14>
     a6e:	2000      	movs	r0, #0
     a70:	e7e2      	b.n	a38 <i2c_s_sync_read+0x14>
     a72:	bf00      	nop
     a74:	00001d90 	.word	0x00001d90
     a78:	00000d59 	.word	0x00000d59
     a7c:	000014f5 	.word	0x000014f5
     a80:	000014e3 	.word	0x000014e3

00000a84 <i2c_s_sync_init>:
     a84:	b538      	push	{r3, r4, r5, lr}
     a86:	460d      	mov	r5, r1
     a88:	4604      	mov	r4, r0
     a8a:	b190      	cbz	r0, ab2 <i2c_s_sync_init+0x2e>
     a8c:	1c08      	adds	r0, r1, #0
     a8e:	bf18      	it	ne
     a90:	2001      	movne	r0, #1
     a92:	2235      	movs	r2, #53	; 0x35
     a94:	4908      	ldr	r1, [pc, #32]	; (ab8 <i2c_s_sync_init+0x34>)
     a96:	4b09      	ldr	r3, [pc, #36]	; (abc <i2c_s_sync_init+0x38>)
     a98:	4798      	blx	r3
     a9a:	4629      	mov	r1, r5
     a9c:	4620      	mov	r0, r4
     a9e:	4b08      	ldr	r3, [pc, #32]	; (ac0 <i2c_s_sync_init+0x3c>)
     aa0:	4798      	blx	r3
     aa2:	4603      	mov	r3, r0
     aa4:	b918      	cbnz	r0, aae <i2c_s_sync_init+0x2a>
     aa6:	4a07      	ldr	r2, [pc, #28]	; (ac4 <i2c_s_sync_init+0x40>)
     aa8:	60a2      	str	r2, [r4, #8]
     aaa:	4a07      	ldr	r2, [pc, #28]	; (ac8 <i2c_s_sync_init+0x44>)
     aac:	6062      	str	r2, [r4, #4]
     aae:	4618      	mov	r0, r3
     ab0:	bd38      	pop	{r3, r4, r5, pc}
     ab2:	2000      	movs	r0, #0
     ab4:	e7ed      	b.n	a92 <i2c_s_sync_init+0xe>
     ab6:	bf00      	nop
     ab8:	00001d90 	.word	0x00001d90
     abc:	00000d59 	.word	0x00000d59
     ac0:	00001479 	.word	0x00001479
     ac4:	00000a25 	.word	0x00000a25
     ac8:	000009b1 	.word	0x000009b1

00000acc <i2c_s_sync_set_addr>:
     acc:	b538      	push	{r3, r4, r5, lr}
     ace:	460d      	mov	r5, r1
     ad0:	4604      	mov	r4, r0
     ad2:	2251      	movs	r2, #81	; 0x51
     ad4:	490a      	ldr	r1, [pc, #40]	; (b00 <i2c_s_sync_set_addr+0x34>)
     ad6:	3000      	adds	r0, #0
     ad8:	bf18      	it	ne
     ada:	2001      	movne	r0, #1
     adc:	4b09      	ldr	r3, [pc, #36]	; (b04 <i2c_s_sync_set_addr+0x38>)
     ade:	4798      	blx	r3
     ae0:	4620      	mov	r0, r4
     ae2:	4b09      	ldr	r3, [pc, #36]	; (b08 <i2c_s_sync_set_addr+0x3c>)
     ae4:	4798      	blx	r3
     ae6:	b120      	cbz	r0, af2 <i2c_s_sync_set_addr+0x26>
     ae8:	4629      	mov	r1, r5
     aea:	4620      	mov	r0, r4
     aec:	4b07      	ldr	r3, [pc, #28]	; (b0c <i2c_s_sync_set_addr+0x40>)
     aee:	4798      	blx	r3
     af0:	bd38      	pop	{r3, r4, r5, pc}
     af2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
     af6:	4620      	mov	r0, r4
     af8:	4b04      	ldr	r3, [pc, #16]	; (b0c <i2c_s_sync_set_addr+0x40>)
     afa:	4798      	blx	r3
     afc:	bd38      	pop	{r3, r4, r5, pc}
     afe:	bf00      	nop
     b00:	00001d90 	.word	0x00001d90
     b04:	00000d59 	.word	0x00000d59
     b08:	000014c3 	.word	0x000014c3
     b0c:	000014cd 	.word	0x000014cd

00000b10 <i2c_s_sync_enable>:
     b10:	b510      	push	{r4, lr}
     b12:	4604      	mov	r4, r0
     b14:	225f      	movs	r2, #95	; 0x5f
     b16:	4905      	ldr	r1, [pc, #20]	; (b2c <i2c_s_sync_enable+0x1c>)
     b18:	3000      	adds	r0, #0
     b1a:	bf18      	it	ne
     b1c:	2001      	movne	r0, #1
     b1e:	4b04      	ldr	r3, [pc, #16]	; (b30 <i2c_s_sync_enable+0x20>)
     b20:	4798      	blx	r3
     b22:	4620      	mov	r0, r4
     b24:	4b03      	ldr	r3, [pc, #12]	; (b34 <i2c_s_sync_enable+0x24>)
     b26:	4798      	blx	r3
     b28:	bd10      	pop	{r4, pc}
     b2a:	bf00      	nop
     b2c:	00001d90 	.word	0x00001d90
     b30:	00000d59 	.word	0x00000d59
     b34:	000014ad 	.word	0x000014ad

00000b38 <i2c_s_sync_get_io_descriptor>:
     b38:	b538      	push	{r3, r4, r5, lr}
     b3a:	460d      	mov	r5, r1
     b3c:	4604      	mov	r4, r0
     b3e:	b150      	cbz	r0, b56 <i2c_s_sync_get_io_descriptor+0x1e>
     b40:	1c08      	adds	r0, r1, #0
     b42:	bf18      	it	ne
     b44:	2001      	movne	r0, #1
     b46:	2273      	movs	r2, #115	; 0x73
     b48:	4904      	ldr	r1, [pc, #16]	; (b5c <i2c_s_sync_get_io_descriptor+0x24>)
     b4a:	4b05      	ldr	r3, [pc, #20]	; (b60 <i2c_s_sync_get_io_descriptor+0x28>)
     b4c:	4798      	blx	r3
     b4e:	3404      	adds	r4, #4
     b50:	602c      	str	r4, [r5, #0]
     b52:	2000      	movs	r0, #0
     b54:	bd38      	pop	{r3, r4, r5, pc}
     b56:	2000      	movs	r0, #0
     b58:	e7f5      	b.n	b46 <i2c_s_sync_get_io_descriptor+0xe>
     b5a:	bf00      	nop
     b5c:	00001d90 	.word	0x00001d90
     b60:	00000d59 	.word	0x00000d59

00000b64 <io_read>:
     b64:	b570      	push	{r4, r5, r6, lr}
     b66:	460d      	mov	r5, r1
     b68:	4616      	mov	r6, r2
     b6a:	4604      	mov	r4, r0
     b6c:	b160      	cbz	r0, b88 <io_read+0x24>
     b6e:	1c08      	adds	r0, r1, #0
     b70:	bf18      	it	ne
     b72:	2001      	movne	r0, #1
     b74:	223d      	movs	r2, #61	; 0x3d
     b76:	4905      	ldr	r1, [pc, #20]	; (b8c <io_read+0x28>)
     b78:	4b05      	ldr	r3, [pc, #20]	; (b90 <io_read+0x2c>)
     b7a:	4798      	blx	r3
     b7c:	6863      	ldr	r3, [r4, #4]
     b7e:	4632      	mov	r2, r6
     b80:	4629      	mov	r1, r5
     b82:	4620      	mov	r0, r4
     b84:	4798      	blx	r3
     b86:	bd70      	pop	{r4, r5, r6, pc}
     b88:	2000      	movs	r0, #0
     b8a:	e7f3      	b.n	b74 <io_read+0x10>
     b8c:	00001dac 	.word	0x00001dac
     b90:	00000d59 	.word	0x00000d59

00000b94 <qspi_sync_init>:
     b94:	b538      	push	{r3, r4, r5, lr}
     b96:	460c      	mov	r4, r1
     b98:	4605      	mov	r5, r0
     b9a:	b158      	cbz	r0, bb4 <qspi_sync_init+0x20>
     b9c:	1c08      	adds	r0, r1, #0
     b9e:	bf18      	it	ne
     ba0:	2001      	movne	r0, #1
     ba2:	2231      	movs	r2, #49	; 0x31
     ba4:	4904      	ldr	r1, [pc, #16]	; (bb8 <qspi_sync_init+0x24>)
     ba6:	4b05      	ldr	r3, [pc, #20]	; (bbc <qspi_sync_init+0x28>)
     ba8:	4798      	blx	r3
     baa:	4621      	mov	r1, r4
     bac:	4628      	mov	r0, r5
     bae:	4b04      	ldr	r3, [pc, #16]	; (bc0 <qspi_sync_init+0x2c>)
     bb0:	4798      	blx	r3
     bb2:	bd38      	pop	{r3, r4, r5, pc}
     bb4:	2000      	movs	r0, #0
     bb6:	e7f4      	b.n	ba2 <qspi_sync_init+0xe>
     bb8:	00001dc0 	.word	0x00001dc0
     bbc:	00000d59 	.word	0x00000d59
     bc0:	0000114d 	.word	0x0000114d

00000bc4 <qspi_sync_enable>:
     bc4:	b510      	push	{r4, lr}
     bc6:	4604      	mov	r4, r0
     bc8:	223f      	movs	r2, #63	; 0x3f
     bca:	4905      	ldr	r1, [pc, #20]	; (be0 <qspi_sync_enable+0x1c>)
     bcc:	3000      	adds	r0, #0
     bce:	bf18      	it	ne
     bd0:	2001      	movne	r0, #1
     bd2:	4b04      	ldr	r3, [pc, #16]	; (be4 <qspi_sync_enable+0x20>)
     bd4:	4798      	blx	r3
     bd6:	4620      	mov	r0, r4
     bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <qspi_sync_enable+0x24>)
     bda:	4798      	blx	r3
     bdc:	bd10      	pop	{r4, pc}
     bde:	bf00      	nop
     be0:	00001dc0 	.word	0x00001dc0
     be4:	00000d59 	.word	0x00000d59
     be8:	00001181 	.word	0x00001181

00000bec <qspi_sync_disable>:
     bec:	b510      	push	{r4, lr}
     bee:	4604      	mov	r4, r0
     bf0:	2246      	movs	r2, #70	; 0x46
     bf2:	4905      	ldr	r1, [pc, #20]	; (c08 <qspi_sync_disable+0x1c>)
     bf4:	3000      	adds	r0, #0
     bf6:	bf18      	it	ne
     bf8:	2001      	movne	r0, #1
     bfa:	4b04      	ldr	r3, [pc, #16]	; (c0c <qspi_sync_disable+0x20>)
     bfc:	4798      	blx	r3
     bfe:	4620      	mov	r0, r4
     c00:	4b03      	ldr	r3, [pc, #12]	; (c10 <qspi_sync_disable+0x24>)
     c02:	4798      	blx	r3
     c04:	bd10      	pop	{r4, pc}
     c06:	bf00      	nop
     c08:	00001dc0 	.word	0x00001dc0
     c0c:	00000d59 	.word	0x00000d59
     c10:	0000118b 	.word	0x0000118b

00000c14 <qspi_sync_serial_run_command>:
     c14:	b538      	push	{r3, r4, r5, lr}
     c16:	460c      	mov	r4, r1
     c18:	4605      	mov	r5, r0
     c1a:	b158      	cbz	r0, c34 <qspi_sync_serial_run_command+0x20>
     c1c:	1c08      	adds	r0, r1, #0
     c1e:	bf18      	it	ne
     c20:	2001      	movne	r0, #1
     c22:	224d      	movs	r2, #77	; 0x4d
     c24:	4904      	ldr	r1, [pc, #16]	; (c38 <qspi_sync_serial_run_command+0x24>)
     c26:	4b05      	ldr	r3, [pc, #20]	; (c3c <qspi_sync_serial_run_command+0x28>)
     c28:	4798      	blx	r3
     c2a:	4621      	mov	r1, r4
     c2c:	4628      	mov	r0, r5
     c2e:	4b04      	ldr	r3, [pc, #16]	; (c40 <qspi_sync_serial_run_command+0x2c>)
     c30:	4798      	blx	r3
     c32:	bd38      	pop	{r3, r4, r5, pc}
     c34:	2000      	movs	r0, #0
     c36:	e7f4      	b.n	c22 <qspi_sync_serial_run_command+0xe>
     c38:	00001dc0 	.word	0x00001dc0
     c3c:	00000d59 	.word	0x00000d59
     c40:	00001195 	.word	0x00001195

00000c44 <timer_add_timer_task>:
     c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c46:	4684      	mov	ip, r0
     c48:	6807      	ldr	r7, [r0, #0]
     c4a:	b12f      	cbz	r7, c58 <timer_add_timer_task+0x14>
     c4c:	688d      	ldr	r5, [r1, #8]
     c4e:	463c      	mov	r4, r7
     c50:	2600      	movs	r6, #0
     c52:	f1c2 0e01 	rsb	lr, r2, #1
     c56:	e00b      	b.n	c70 <timer_add_timer_task+0x2c>
     c58:	4b0e      	ldr	r3, [pc, #56]	; (c94 <timer_add_timer_task+0x50>)
     c5a:	4798      	blx	r3
     c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c5e:	4473      	add	r3, lr
     c60:	68a0      	ldr	r0, [r4, #8]
     c62:	4403      	add	r3, r0
     c64:	42ab      	cmp	r3, r5
     c66:	d20a      	bcs.n	c7e <timer_add_timer_task+0x3a>
     c68:	6823      	ldr	r3, [r4, #0]
     c6a:	4626      	mov	r6, r4
     c6c:	b153      	cbz	r3, c84 <timer_add_timer_task+0x40>
     c6e:	461c      	mov	r4, r3
     c70:	6863      	ldr	r3, [r4, #4]
     c72:	4293      	cmp	r3, r2
     c74:	d8f3      	bhi.n	c5e <timer_add_timer_task+0x1a>
     c76:	68a0      	ldr	r0, [r4, #8]
     c78:	4403      	add	r3, r0
     c7a:	1a9b      	subs	r3, r3, r2
     c7c:	e7f2      	b.n	c64 <timer_add_timer_task+0x20>
     c7e:	42a7      	cmp	r7, r4
     c80:	d004      	beq.n	c8c <timer_add_timer_task+0x48>
     c82:	4634      	mov	r4, r6
     c84:	4620      	mov	r0, r4
     c86:	4b04      	ldr	r3, [pc, #16]	; (c98 <timer_add_timer_task+0x54>)
     c88:	4798      	blx	r3
     c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c8c:	4660      	mov	r0, ip
     c8e:	4b01      	ldr	r3, [pc, #4]	; (c94 <timer_add_timer_task+0x50>)
     c90:	4798      	blx	r3
     c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c94:	00000d81 	.word	0x00000d81
     c98:	00000dad 	.word	0x00000dad

00000c9c <timer_process_counted>:
     c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ca0:	6944      	ldr	r4, [r0, #20]
     ca2:	6907      	ldr	r7, [r0, #16]
     ca4:	3701      	adds	r7, #1
     ca6:	6107      	str	r7, [r0, #16]
     ca8:	7e03      	ldrb	r3, [r0, #24]
     caa:	f013 0f01 	tst.w	r3, #1
     cae:	d113      	bne.n	cd8 <timer_process_counted+0x3c>
     cb0:	7e03      	ldrb	r3, [r0, #24]
     cb2:	f013 0f02 	tst.w	r3, #2
     cb6:	d10f      	bne.n	cd8 <timer_process_counted+0x3c>
     cb8:	b354      	cbz	r4, d10 <timer_process_counted+0x74>
     cba:	6863      	ldr	r3, [r4, #4]
     cbc:	1afb      	subs	r3, r7, r3
     cbe:	68a2      	ldr	r2, [r4, #8]
     cc0:	4293      	cmp	r3, r2
     cc2:	d307      	bcc.n	cd4 <timer_process_counted+0x38>
     cc4:	4606      	mov	r6, r0
     cc6:	f100 0814 	add.w	r8, r0, #20
     cca:	f8df 9048 	ldr.w	r9, [pc, #72]	; d14 <timer_process_counted+0x78>
     cce:	f8df a048 	ldr.w	sl, [pc, #72]	; d18 <timer_process_counted+0x7c>
     cd2:	e012      	b.n	cfa <timer_process_counted+0x5e>
     cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cd8:	7e03      	ldrb	r3, [r0, #24]
     cda:	f043 0302 	orr.w	r3, r3, #2
     cde:	7603      	strb	r3, [r0, #24]
     ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ce4:	6975      	ldr	r5, [r6, #20]
     ce6:	68e3      	ldr	r3, [r4, #12]
     ce8:	4620      	mov	r0, r4
     cea:	4798      	blx	r3
     cec:	b185      	cbz	r5, d10 <timer_process_counted+0x74>
     cee:	462c      	mov	r4, r5
     cf0:	686b      	ldr	r3, [r5, #4]
     cf2:	1afb      	subs	r3, r7, r3
     cf4:	68aa      	ldr	r2, [r5, #8]
     cf6:	4293      	cmp	r3, r2
     cf8:	d30a      	bcc.n	d10 <timer_process_counted+0x74>
     cfa:	4640      	mov	r0, r8
     cfc:	47c8      	blx	r9
     cfe:	7c23      	ldrb	r3, [r4, #16]
     d00:	2b01      	cmp	r3, #1
     d02:	d1ef      	bne.n	ce4 <timer_process_counted+0x48>
     d04:	6067      	str	r7, [r4, #4]
     d06:	463a      	mov	r2, r7
     d08:	4621      	mov	r1, r4
     d0a:	4640      	mov	r0, r8
     d0c:	47d0      	blx	sl
     d0e:	e7e9      	b.n	ce4 <timer_process_counted+0x48>
     d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d14:	00000db5 	.word	0x00000db5
     d18:	00000c45 	.word	0x00000c45

00000d1c <timer_init>:
     d1c:	b538      	push	{r3, r4, r5, lr}
     d1e:	460d      	mov	r5, r1
     d20:	4604      	mov	r4, r0
     d22:	b178      	cbz	r0, d44 <timer_init+0x28>
     d24:	1c08      	adds	r0, r1, #0
     d26:	bf18      	it	ne
     d28:	2001      	movne	r0, #1
     d2a:	223b      	movs	r2, #59	; 0x3b
     d2c:	4906      	ldr	r1, [pc, #24]	; (d48 <timer_init+0x2c>)
     d2e:	4b07      	ldr	r3, [pc, #28]	; (d4c <timer_init+0x30>)
     d30:	4798      	blx	r3
     d32:	4629      	mov	r1, r5
     d34:	4620      	mov	r0, r4
     d36:	4b06      	ldr	r3, [pc, #24]	; (d50 <timer_init+0x34>)
     d38:	4798      	blx	r3
     d3a:	2000      	movs	r0, #0
     d3c:	6120      	str	r0, [r4, #16]
     d3e:	4b05      	ldr	r3, [pc, #20]	; (d54 <timer_init+0x38>)
     d40:	6023      	str	r3, [r4, #0]
     d42:	bd38      	pop	{r3, r4, r5, pc}
     d44:	2000      	movs	r0, #0
     d46:	e7f0      	b.n	d2a <timer_init+0xe>
     d48:	00001ddc 	.word	0x00001ddc
     d4c:	00000d59 	.word	0x00000d59
     d50:	000012b1 	.word	0x000012b1
     d54:	00000c9d 	.word	0x00000c9d

00000d58 <assert>:
     d58:	b900      	cbnz	r0, d5c <assert+0x4>
     d5a:	be00      	bkpt	0x0000
     d5c:	4770      	bx	lr

00000d5e <is_list_element>:
     d5e:	6803      	ldr	r3, [r0, #0]
     d60:	b14b      	cbz	r3, d76 <is_list_element+0x18>
     d62:	428b      	cmp	r3, r1
     d64:	d009      	beq.n	d7a <is_list_element+0x1c>
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	b11b      	cbz	r3, d72 <is_list_element+0x14>
     d6a:	4299      	cmp	r1, r3
     d6c:	d1fb      	bne.n	d66 <is_list_element+0x8>
     d6e:	2001      	movs	r0, #1
     d70:	4770      	bx	lr
     d72:	2000      	movs	r0, #0
     d74:	4770      	bx	lr
     d76:	2000      	movs	r0, #0
     d78:	4770      	bx	lr
     d7a:	2001      	movs	r0, #1
     d7c:	4770      	bx	lr
	...

00000d80 <list_insert_as_head>:
     d80:	b538      	push	{r3, r4, r5, lr}
     d82:	4604      	mov	r4, r0
     d84:	460d      	mov	r5, r1
     d86:	4b06      	ldr	r3, [pc, #24]	; (da0 <list_insert_as_head+0x20>)
     d88:	4798      	blx	r3
     d8a:	f080 0001 	eor.w	r0, r0, #1
     d8e:	2239      	movs	r2, #57	; 0x39
     d90:	4904      	ldr	r1, [pc, #16]	; (da4 <list_insert_as_head+0x24>)
     d92:	b2c0      	uxtb	r0, r0
     d94:	4b04      	ldr	r3, [pc, #16]	; (da8 <list_insert_as_head+0x28>)
     d96:	4798      	blx	r3
     d98:	6823      	ldr	r3, [r4, #0]
     d9a:	602b      	str	r3, [r5, #0]
     d9c:	6025      	str	r5, [r4, #0]
     d9e:	bd38      	pop	{r3, r4, r5, pc}
     da0:	00000d5f 	.word	0x00000d5f
     da4:	00001df4 	.word	0x00001df4
     da8:	00000d59 	.word	0x00000d59

00000dac <list_insert_after>:
     dac:	6803      	ldr	r3, [r0, #0]
     dae:	600b      	str	r3, [r1, #0]
     db0:	6001      	str	r1, [r0, #0]
     db2:	4770      	bx	lr

00000db4 <list_remove_head>:
     db4:	6803      	ldr	r3, [r0, #0]
     db6:	b10b      	cbz	r3, dbc <list_remove_head+0x8>
     db8:	681a      	ldr	r2, [r3, #0]
     dba:	6002      	str	r2, [r0, #0]
     dbc:	4618      	mov	r0, r3
     dbe:	4770      	bx	lr

00000dc0 <_get_cycles_for_us>:
     dc0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     dc4:	00c0      	lsls	r0, r0, #3
     dc6:	301d      	adds	r0, #29
     dc8:	4b02      	ldr	r3, [pc, #8]	; (dd4 <_get_cycles_for_us+0x14>)
     dca:	fba3 3000 	umull	r3, r0, r3, r0
     dce:	0900      	lsrs	r0, r0, #4
     dd0:	4770      	bx	lr
     dd2:	bf00      	nop
     dd4:	88888889 	.word	0x88888889

00000dd8 <_get_cycles_for_ms>:
     dd8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     ddc:	00c3      	lsls	r3, r0, #3
     dde:	3302      	adds	r3, #2
     de0:	4803      	ldr	r0, [pc, #12]	; (df0 <_get_cycles_for_ms+0x18>)
     de2:	fba0 2303 	umull	r2, r3, r0, r3
     de6:	085b      	lsrs	r3, r3, #1
     de8:	2064      	movs	r0, #100	; 0x64
     dea:	fb00 f003 	mul.w	r0, r0, r3
     dee:	4770      	bx	lr
     df0:	aaaaaaab 	.word	0xaaaaaaab
     df4:	00000000 	.word	0x00000000

00000df8 <_delay_cycles>:
     df8:	3901      	subs	r1, #1
     dfa:	d8fd      	bhi.n	df8 <_delay_cycles>
     dfc:	4770      	bx	lr
     dfe:	bf00      	nop

00000e00 <_init_chip>:
     e00:	b508      	push	{r3, lr}
     e02:	4a08      	ldr	r2, [pc, #32]	; (e24 <_init_chip+0x24>)
     e04:	8813      	ldrh	r3, [r2, #0]
     e06:	b29b      	uxth	r3, r3
     e08:	8013      	strh	r3, [r2, #0]
     e0a:	4b07      	ldr	r3, [pc, #28]	; (e28 <_init_chip+0x28>)
     e0c:	4798      	blx	r3
     e0e:	4b07      	ldr	r3, [pc, #28]	; (e2c <_init_chip+0x2c>)
     e10:	4798      	blx	r3
     e12:	4b07      	ldr	r3, [pc, #28]	; (e30 <_init_chip+0x30>)
     e14:	4798      	blx	r3
     e16:	4b07      	ldr	r3, [pc, #28]	; (e34 <_init_chip+0x34>)
     e18:	4798      	blx	r3
     e1a:	f640 70ff 	movw	r0, #4095	; 0xfff
     e1e:	4b06      	ldr	r3, [pc, #24]	; (e38 <_init_chip+0x38>)
     e20:	4798      	blx	r3
     e22:	bd08      	pop	{r3, pc}
     e24:	41004000 	.word	0x41004000
     e28:	00001119 	.word	0x00001119
     e2c:	0000112d 	.word	0x0000112d
     e30:	00001041 	.word	0x00001041
     e34:	00001149 	.word	0x00001149
     e38:	0000101d 	.word	0x0000101d

00000e3c <_ext_irq_handler>:
     e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e3e:	b083      	sub	sp, #12
     e40:	4b2f      	ldr	r3, [pc, #188]	; (f00 <_ext_irq_handler+0xc4>)
     e42:	695a      	ldr	r2, [r3, #20]
     e44:	9201      	str	r2, [sp, #4]
     e46:	9a01      	ldr	r2, [sp, #4]
     e48:	615a      	str	r2, [r3, #20]
     e4a:	4b2e      	ldr	r3, [pc, #184]	; (f04 <_ext_irq_handler+0xc8>)
     e4c:	6818      	ldr	r0, [r3, #0]
     e4e:	22f0      	movs	r2, #240	; 0xf0
     e50:	492d      	ldr	r1, [pc, #180]	; (f08 <_ext_irq_handler+0xcc>)
     e52:	3000      	adds	r0, #0
     e54:	bf18      	it	ne
     e56:	2001      	movne	r0, #1
     e58:	4b2c      	ldr	r3, [pc, #176]	; (f0c <_ext_irq_handler+0xd0>)
     e5a:	4798      	blx	r3
     e5c:	9b01      	ldr	r3, [sp, #4]
     e5e:	2b00      	cmp	r3, #0
     e60:	d04b      	beq.n	efa <_ext_irq_handler+0xbe>
     e62:	f04f 37ff 	mov.w	r7, #4294967295
     e66:	4d2a      	ldr	r5, [pc, #168]	; (f10 <_ext_irq_handler+0xd4>)
     e68:	e03b      	b.n	ee2 <_ext_irq_handler+0xa6>
     e6a:	46b6      	mov	lr, r6
     e6c:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
     e70:	f8de 7004 	ldr.w	r7, [lr, #4]
     e74:	f1b7 3fff 	cmp.w	r7, #4294967295
     e78:	d003      	beq.n	e82 <_ext_irq_handler+0x46>
     e7a:	4b22      	ldr	r3, [pc, #136]	; (f04 <_ext_irq_handler+0xc8>)
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	4638      	mov	r0, r7
     e80:	4798      	blx	r3
     e82:	9b01      	ldr	r3, [sp, #4]
     e84:	fa06 f404 	lsl.w	r4, r6, r4
     e88:	ea23 0404 	bic.w	r4, r3, r4
     e8c:	9401      	str	r4, [sp, #4]
     e8e:	9a01      	ldr	r2, [sp, #4]
     e90:	fa92 f3a2 	rbit	r3, r2
     e94:	fab3 f383 	clz	r3, r3
     e98:	2a00      	cmp	r2, #0
     e9a:	bf08      	it	eq
     e9c:	f04f 33ff 	moveq.w	r3, #4294967295
     ea0:	d018      	beq.n	ed4 <_ext_irq_handler+0x98>
     ea2:	461c      	mov	r4, r3
     ea4:	2b06      	cmp	r3, #6
     ea6:	d0e0      	beq.n	e6a <_ext_irq_handler+0x2e>
     ea8:	2206      	movs	r2, #6
     eaa:	4633      	mov	r3, r6
     eac:	2003      	movs	r0, #3
     eae:	2100      	movs	r1, #0
     eb0:	4294      	cmp	r4, r2
     eb2:	bfc7      	ittee	gt
     eb4:	3301      	addgt	r3, #1
     eb6:	b2d9      	uxtbgt	r1, r3
     eb8:	f103 33ff 	addle.w	r3, r3, #4294967295
     ebc:	b2d8      	uxtble	r0, r3
     ebe:	4281      	cmp	r1, r0
     ec0:	d8d8      	bhi.n	e74 <_ext_irq_handler+0x38>
     ec2:	1843      	adds	r3, r0, r1
     ec4:	f3c3 0347 	ubfx	r3, r3, #1, #8
     ec8:	469e      	mov	lr, r3
     eca:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
     ece:	42a2      	cmp	r2, r4
     ed0:	d1ee      	bne.n	eb0 <_ext_irq_handler+0x74>
     ed2:	e7cb      	b.n	e6c <_ext_irq_handler+0x30>
     ed4:	4b0a      	ldr	r3, [pc, #40]	; (f00 <_ext_irq_handler+0xc4>)
     ed6:	695a      	ldr	r2, [r3, #20]
     ed8:	9201      	str	r2, [sp, #4]
     eda:	9a01      	ldr	r2, [sp, #4]
     edc:	615a      	str	r2, [r3, #20]
     ede:	9b01      	ldr	r3, [sp, #4]
     ee0:	b15b      	cbz	r3, efa <_ext_irq_handler+0xbe>
     ee2:	9a01      	ldr	r2, [sp, #4]
     ee4:	fa92 f3a2 	rbit	r3, r2
     ee8:	fab3 f383 	clz	r3, r3
     eec:	2a00      	cmp	r2, #0
     eee:	bf0c      	ite	eq
     ef0:	f04f 33ff 	moveq.w	r3, #4294967295
     ef4:	2601      	movne	r6, #1
     ef6:	d1d4      	bne.n	ea2 <_ext_irq_handler+0x66>
     ef8:	e7ec      	b.n	ed4 <_ext_irq_handler+0x98>
     efa:	b003      	add	sp, #12
     efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     efe:	bf00      	nop
     f00:	40002800 	.word	0x40002800
     f04:	20000038 	.word	0x20000038
     f08:	00001e2c 	.word	0x00001e2c
     f0c:	00000d59 	.word	0x00000d59
     f10:	00001e14 	.word	0x00001e14

00000f14 <_ext_irq_init>:
     f14:	4b35      	ldr	r3, [pc, #212]	; (fec <_ext_irq_init+0xd8>)
     f16:	685b      	ldr	r3, [r3, #4]
     f18:	f013 0f01 	tst.w	r3, #1
     f1c:	d11f      	bne.n	f5e <_ext_irq_init+0x4a>
     f1e:	4a33      	ldr	r2, [pc, #204]	; (fec <_ext_irq_init+0xd8>)
     f20:	6853      	ldr	r3, [r2, #4]
     f22:	f013 0f03 	tst.w	r3, #3
     f26:	d1fb      	bne.n	f20 <_ext_irq_init+0xc>
     f28:	4b30      	ldr	r3, [pc, #192]	; (fec <_ext_irq_init+0xd8>)
     f2a:	781b      	ldrb	r3, [r3, #0]
     f2c:	f013 0f02 	tst.w	r3, #2
     f30:	d00d      	beq.n	f4e <_ext_irq_init+0x3a>
     f32:	4a2e      	ldr	r2, [pc, #184]	; (fec <_ext_irq_init+0xd8>)
     f34:	7813      	ldrb	r3, [r2, #0]
     f36:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     f3a:	7013      	strb	r3, [r2, #0]
     f3c:	6853      	ldr	r3, [r2, #4]
     f3e:	f013 0f03 	tst.w	r3, #3
     f42:	d1fb      	bne.n	f3c <_ext_irq_init+0x28>
     f44:	4a29      	ldr	r2, [pc, #164]	; (fec <_ext_irq_init+0xd8>)
     f46:	6853      	ldr	r3, [r2, #4]
     f48:	f013 0f02 	tst.w	r3, #2
     f4c:	d1fb      	bne.n	f46 <_ext_irq_init+0x32>
     f4e:	2201      	movs	r2, #1
     f50:	4b26      	ldr	r3, [pc, #152]	; (fec <_ext_irq_init+0xd8>)
     f52:	701a      	strb	r2, [r3, #0]
     f54:	461a      	mov	r2, r3
     f56:	6853      	ldr	r3, [r2, #4]
     f58:	f013 0f03 	tst.w	r3, #3
     f5c:	d1fb      	bne.n	f56 <_ext_irq_init+0x42>
     f5e:	4a23      	ldr	r2, [pc, #140]	; (fec <_ext_irq_init+0xd8>)
     f60:	6853      	ldr	r3, [r2, #4]
     f62:	f013 0f01 	tst.w	r3, #1
     f66:	d1fb      	bne.n	f60 <_ext_irq_init+0x4c>
     f68:	4a20      	ldr	r2, [pc, #128]	; (fec <_ext_irq_init+0xd8>)
     f6a:	7813      	ldrb	r3, [r2, #0]
     f6c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     f70:	7013      	strb	r3, [r2, #0]
     f72:	6853      	ldr	r3, [r2, #4]
     f74:	f013 0f03 	tst.w	r3, #3
     f78:	d1fb      	bne.n	f72 <_ext_irq_init+0x5e>
     f7a:	4b1c      	ldr	r3, [pc, #112]	; (fec <_ext_irq_init+0xd8>)
     f7c:	2200      	movs	r2, #0
     f7e:	705a      	strb	r2, [r3, #1]
     f80:	609a      	str	r2, [r3, #8]
     f82:	619a      	str	r2, [r3, #24]
     f84:	631a      	str	r2, [r3, #48]	; 0x30
     f86:	635a      	str	r2, [r3, #52]	; 0x34
     f88:	61da      	str	r2, [r3, #28]
     f8a:	621a      	str	r2, [r3, #32]
     f8c:	781a      	ldrb	r2, [r3, #0]
     f8e:	f042 0202 	orr.w	r2, r2, #2
     f92:	701a      	strb	r2, [r3, #0]
     f94:	461a      	mov	r2, r3
     f96:	6853      	ldr	r3, [r2, #4]
     f98:	f013 0f03 	tst.w	r3, #3
     f9c:	d1fb      	bne.n	f96 <_ext_irq_init+0x82>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f9e:	4b14      	ldr	r3, [pc, #80]	; (ff0 <_ext_irq_init+0xdc>)
     fa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     fa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fac:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fb4:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fb6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     fbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fc2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fca:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fcc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     fd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fd8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fdc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fe0:	601a      	str	r2, [r3, #0]
     fe2:	4b04      	ldr	r3, [pc, #16]	; (ff4 <_ext_irq_init+0xe0>)
     fe4:	6018      	str	r0, [r3, #0]
     fe6:	2000      	movs	r0, #0
     fe8:	4770      	bx	lr
     fea:	bf00      	nop
     fec:	40002800 	.word	0x40002800
     ff0:	e000e100 	.word	0xe000e100
     ff4:	20000038 	.word	0x20000038

00000ff8 <EIC_5_Handler>:
     ff8:	b508      	push	{r3, lr}
     ffa:	4b01      	ldr	r3, [pc, #4]	; (1000 <EIC_5_Handler+0x8>)
     ffc:	4798      	blx	r3
     ffe:	bd08      	pop	{r3, pc}
    1000:	00000e3d 	.word	0x00000e3d

00001004 <EIC_6_Handler>:
    1004:	b508      	push	{r3, lr}
    1006:	4b01      	ldr	r3, [pc, #4]	; (100c <EIC_6_Handler+0x8>)
    1008:	4798      	blx	r3
    100a:	bd08      	pop	{r3, pc}
    100c:	00000e3d 	.word	0x00000e3d

00001010 <EIC_7_Handler>:
    1010:	b508      	push	{r3, lr}
    1012:	4b01      	ldr	r3, [pc, #4]	; (1018 <EIC_7_Handler+0x8>)
    1014:	4798      	blx	r3
    1016:	bd08      	pop	{r3, pc}
    1018:	00000e3d 	.word	0x00000e3d

0000101c <_gclk_init_generators_by_fref>:
    101c:	f010 0f01 	tst.w	r0, #1
    1020:	d008      	beq.n	1034 <_gclk_init_generators_by_fref+0x18>
    1022:	4a05      	ldr	r2, [pc, #20]	; (1038 <_gclk_init_generators_by_fref+0x1c>)
    1024:	4b05      	ldr	r3, [pc, #20]	; (103c <_gclk_init_generators_by_fref+0x20>)
    1026:	621a      	str	r2, [r3, #32]
    1028:	4619      	mov	r1, r3
    102a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    102e:	684b      	ldr	r3, [r1, #4]
    1030:	4213      	tst	r3, r2
    1032:	d1fc      	bne.n	102e <_gclk_init_generators_by_fref+0x12>
    1034:	4770      	bx	lr
    1036:	bf00      	nop
    1038:	00010101 	.word	0x00010101
    103c:	40001c00 	.word	0x40001c00

00001040 <_mclk_init>:
    1040:	2201      	movs	r2, #1
    1042:	4b01      	ldr	r3, [pc, #4]	; (1048 <_mclk_init+0x8>)
    1044:	715a      	strb	r2, [r3, #5]
    1046:	4770      	bx	lr
    1048:	40000800 	.word	0x40000800

0000104c <_nvm_interrupt_handler>:
    104c:	b508      	push	{r3, lr}
    104e:	6903      	ldr	r3, [r0, #16]
    1050:	8a1a      	ldrh	r2, [r3, #16]
    1052:	f012 0f01 	tst.w	r2, #1
    1056:	d005      	beq.n	1064 <_nvm_interrupt_handler+0x18>
    1058:	2201      	movs	r2, #1
    105a:	821a      	strh	r2, [r3, #16]
    105c:	6803      	ldr	r3, [r0, #0]
    105e:	b153      	cbz	r3, 1076 <_nvm_interrupt_handler+0x2a>
    1060:	4798      	blx	r3
    1062:	bd08      	pop	{r3, pc}
    1064:	8a1a      	ldrh	r2, [r3, #16]
    1066:	b292      	uxth	r2, r2
    1068:	b12a      	cbz	r2, 1076 <_nvm_interrupt_handler+0x2a>
    106a:	f240 225e 	movw	r2, #606	; 0x25e
    106e:	821a      	strh	r2, [r3, #16]
    1070:	6843      	ldr	r3, [r0, #4]
    1072:	b103      	cbz	r3, 1076 <_nvm_interrupt_handler+0x2a>
    1074:	4798      	blx	r3
    1076:	bd08      	pop	{r3, pc}

00001078 <_flash_init>:
    1078:	b538      	push	{r3, r4, r5, lr}
    107a:	460c      	mov	r4, r1
    107c:	4605      	mov	r5, r0
    107e:	b350      	cbz	r0, 10d6 <_flash_init+0x5e>
    1080:	4816      	ldr	r0, [pc, #88]	; (10dc <_flash_init+0x64>)
    1082:	4281      	cmp	r1, r0
    1084:	bf14      	ite	ne
    1086:	2000      	movne	r0, #0
    1088:	2001      	moveq	r0, #1
    108a:	224b      	movs	r2, #75	; 0x4b
    108c:	4914      	ldr	r1, [pc, #80]	; (10e0 <_flash_init+0x68>)
    108e:	4b15      	ldr	r3, [pc, #84]	; (10e4 <_flash_init+0x6c>)
    1090:	4798      	blx	r3
    1092:	612c      	str	r4, [r5, #16]
    1094:	8823      	ldrh	r3, [r4, #0]
    1096:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    109a:	049b      	lsls	r3, r3, #18
    109c:	0c9b      	lsrs	r3, r3, #18
    109e:	8023      	strh	r3, [r4, #0]
    10a0:	4b11      	ldr	r3, [pc, #68]	; (10e8 <_flash_init+0x70>)
    10a2:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10a4:	4b11      	ldr	r3, [pc, #68]	; (10ec <_flash_init+0x74>)
    10a6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    10aa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    10ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10b2:	f3bf 8f6f 	isb	sy
    10b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    10be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10c2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10c6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    10ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10ce:	6019      	str	r1, [r3, #0]
    10d0:	601a      	str	r2, [r3, #0]
    10d2:	2000      	movs	r0, #0
    10d4:	bd38      	pop	{r3, r4, r5, pc}
    10d6:	2000      	movs	r0, #0
    10d8:	e7d7      	b.n	108a <_flash_init+0x12>
    10da:	bf00      	nop
    10dc:	41004000 	.word	0x41004000
    10e0:	00001e44 	.word	0x00001e44
    10e4:	00000d59 	.word	0x00000d59
    10e8:	2000003c 	.word	0x2000003c
    10ec:	e000e100 	.word	0xe000e100

000010f0 <NVMCTRL_0_Handler>:
    10f0:	b508      	push	{r3, lr}
    10f2:	4b02      	ldr	r3, [pc, #8]	; (10fc <NVMCTRL_0_Handler+0xc>)
    10f4:	6818      	ldr	r0, [r3, #0]
    10f6:	4b02      	ldr	r3, [pc, #8]	; (1100 <NVMCTRL_0_Handler+0x10>)
    10f8:	4798      	blx	r3
    10fa:	bd08      	pop	{r3, pc}
    10fc:	2000003c 	.word	0x2000003c
    1100:	0000104d 	.word	0x0000104d

00001104 <NVMCTRL_1_Handler>:
    1104:	b508      	push	{r3, lr}
    1106:	4b02      	ldr	r3, [pc, #8]	; (1110 <NVMCTRL_1_Handler+0xc>)
    1108:	6818      	ldr	r0, [r3, #0]
    110a:	4b02      	ldr	r3, [pc, #8]	; (1114 <NVMCTRL_1_Handler+0x10>)
    110c:	4798      	blx	r3
    110e:	bd08      	pop	{r3, pc}
    1110:	2000003c 	.word	0x2000003c
    1114:	0000104d 	.word	0x0000104d

00001118 <_osc32kctrl_init_sources>:
    1118:	4b03      	ldr	r3, [pc, #12]	; (1128 <_osc32kctrl_init_sources+0x10>)
    111a:	69da      	ldr	r2, [r3, #28]
    111c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
    1120:	61da      	str	r2, [r3, #28]
    1122:	2201      	movs	r2, #1
    1124:	741a      	strb	r2, [r3, #16]
    1126:	4770      	bx	lr
    1128:	40001400 	.word	0x40001400

0000112c <_oscctrl_init_sources>:
    112c:	4a04      	ldr	r2, [pc, #16]	; (1140 <_oscctrl_init_sources+0x14>)
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <_oscctrl_init_sources+0x18>)
    1130:	619a      	str	r2, [r3, #24]
    1132:	461a      	mov	r2, r3
    1134:	6913      	ldr	r3, [r2, #16]
    1136:	f013 0f02 	tst.w	r3, #2
    113a:	d0fb      	beq.n	1134 <_oscctrl_init_sources+0x8>
    113c:	4770      	bx	lr
    113e:	bf00      	nop
    1140:	03002606 	.word	0x03002606
    1144:	40001000 	.word	0x40001000

00001148 <_oscctrl_init_referenced_generators>:
    1148:	4770      	bx	lr
	...

0000114c <_qspi_sync_init>:
    114c:	b538      	push	{r3, r4, r5, lr}
    114e:	460c      	mov	r4, r1
    1150:	4605      	mov	r5, r0
    1152:	b170      	cbz	r0, 1172 <_qspi_sync_init+0x26>
    1154:	1c08      	adds	r0, r1, #0
    1156:	bf18      	it	ne
    1158:	2001      	movne	r0, #1
    115a:	2240      	movs	r2, #64	; 0x40
    115c:	4906      	ldr	r1, [pc, #24]	; (1178 <_qspi_sync_init+0x2c>)
    115e:	4b07      	ldr	r3, [pc, #28]	; (117c <_qspi_sync_init+0x30>)
    1160:	4798      	blx	r3
    1162:	602c      	str	r4, [r5, #0]
    1164:	2301      	movs	r3, #1
    1166:	6023      	str	r3, [r4, #0]
    1168:	2311      	movs	r3, #17
    116a:	6063      	str	r3, [r4, #4]
    116c:	2000      	movs	r0, #0
    116e:	60a0      	str	r0, [r4, #8]
    1170:	bd38      	pop	{r3, r4, r5, pc}
    1172:	2000      	movs	r0, #0
    1174:	e7f1      	b.n	115a <_qspi_sync_init+0xe>
    1176:	bf00      	nop
    1178:	00001e64 	.word	0x00001e64
    117c:	00000d59 	.word	0x00000d59

00001180 <_qspi_sync_enable>:
    1180:	6803      	ldr	r3, [r0, #0]
    1182:	2202      	movs	r2, #2
    1184:	601a      	str	r2, [r3, #0]
    1186:	2000      	movs	r0, #0
    1188:	4770      	bx	lr

0000118a <_qspi_sync_disable>:
    118a:	6803      	ldr	r3, [r0, #0]
    118c:	2000      	movs	r0, #0
    118e:	6018      	str	r0, [r3, #0]
    1190:	4770      	bx	lr
	...

00001194 <_qspi_sync_serial_run_command>:
    1194:	b570      	push	{r4, r5, r6, lr}
    1196:	4605      	mov	r5, r0
    1198:	460c      	mov	r4, r1
    119a:	6803      	ldr	r3, [r0, #0]
    119c:	780a      	ldrb	r2, [r1, #0]
    119e:	f012 0f20 	tst.w	r2, #32
    11a2:	bf1c      	itt	ne
    11a4:	688a      	ldrne	r2, [r1, #8]
    11a6:	631a      	strne	r2, [r3, #48]	; 0x30
    11a8:	780a      	ldrb	r2, [r1, #0]
    11aa:	f012 0f10 	tst.w	r2, #16
    11ae:	d005      	beq.n	11bc <_qspi_sync_serial_run_command+0x28>
    11b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    11b2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    11b6:	7922      	ldrb	r2, [r4, #4]
    11b8:	430a      	orrs	r2, r1
    11ba:	635a      	str	r2, [r3, #52]	; 0x34
    11bc:	7822      	ldrb	r2, [r4, #0]
    11be:	f012 0f40 	tst.w	r2, #64	; 0x40
    11c2:	d006      	beq.n	11d2 <_qspi_sync_serial_run_command+0x3e>
    11c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    11c6:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
    11ca:	7961      	ldrb	r1, [r4, #5]
    11cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    11d0:	635a      	str	r2, [r3, #52]	; 0x34
    11d2:	6822      	ldr	r2, [r4, #0]
    11d4:	639a      	str	r2, [r3, #56]	; 0x38
    11d6:	7823      	ldrb	r3, [r4, #0]
    11d8:	f013 0f80 	tst.w	r3, #128	; 0x80
    11dc:	d10c      	bne.n	11f8 <_qspi_sync_serial_run_command+0x64>
    11de:	682b      	ldr	r3, [r5, #0]
    11e0:	4a1f      	ldr	r2, [pc, #124]	; (1260 <_qspi_sync_serial_run_command+0xcc>)
    11e2:	601a      	str	r2, [r3, #0]
    11e4:	682a      	ldr	r2, [r5, #0]
    11e6:	69d3      	ldr	r3, [r2, #28]
    11e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    11ec:	d0fb      	beq.n	11e6 <_qspi_sync_serial_run_command+0x52>
    11ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
    11f2:	61d3      	str	r3, [r2, #28]
    11f4:	2000      	movs	r0, #0
    11f6:	bd70      	pop	{r4, r5, r6, pc}
    11f8:	6829      	ldr	r1, [r5, #0]
    11fa:	f013 0f20 	tst.w	r3, #32
    11fe:	bf1a      	itte	ne
    1200:	68a2      	ldrne	r2, [r4, #8]
    1202:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
    1206:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
    120a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    120c:	6923      	ldr	r3, [r4, #16]
    120e:	b1ab      	cbz	r3, 123c <_qspi_sync_serial_run_command+0xa8>
    1210:	2001      	movs	r0, #1
    1212:	2282      	movs	r2, #130	; 0x82
    1214:	4913      	ldr	r1, [pc, #76]	; (1264 <_qspi_sync_serial_run_command+0xd0>)
    1216:	4b14      	ldr	r3, [pc, #80]	; (1268 <_qspi_sync_serial_run_command+0xd4>)
    1218:	4798      	blx	r3
    121a:	6923      	ldr	r3, [r4, #16]
    121c:	b19b      	cbz	r3, 1246 <_qspi_sync_serial_run_command+0xb2>
    121e:	68e0      	ldr	r0, [r4, #12]
    1220:	b138      	cbz	r0, 1232 <_qspi_sync_serial_run_command+0x9e>
    1222:	1e72      	subs	r2, r6, #1
    1224:	4418      	add	r0, r3
    1226:	f813 1b01 	ldrb.w	r1, [r3], #1
    122a:	f802 1f01 	strb.w	r1, [r2, #1]!
    122e:	4283      	cmp	r3, r0
    1230:	d1f9      	bne.n	1226 <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
    1232:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1236:	f3bf 8f6f 	isb	sy
    123a:	e7d0      	b.n	11de <_qspi_sync_serial_run_command+0x4a>
    123c:	6960      	ldr	r0, [r4, #20]
    123e:	3000      	adds	r0, #0
    1240:	bf18      	it	ne
    1242:	2001      	movne	r0, #1
    1244:	e7e5      	b.n	1212 <_qspi_sync_serial_run_command+0x7e>
    1246:	6963      	ldr	r3, [r4, #20]
    1248:	68e1      	ldr	r1, [r4, #12]
    124a:	2900      	cmp	r1, #0
    124c:	d0f1      	beq.n	1232 <_qspi_sync_serial_run_command+0x9e>
    124e:	3b01      	subs	r3, #1
    1250:	4431      	add	r1, r6
    1252:	f816 2b01 	ldrb.w	r2, [r6], #1
    1256:	f803 2f01 	strb.w	r2, [r3, #1]!
    125a:	42b1      	cmp	r1, r6
    125c:	d1f9      	bne.n	1252 <_qspi_sync_serial_run_command+0xbe>
    125e:	e7e8      	b.n	1232 <_qspi_sync_serial_run_command+0x9e>
    1260:	01000002 	.word	0x01000002
    1264:	00001e64 	.word	0x00001e64
    1268:	00000d59 	.word	0x00000d59

0000126c <RAMECC_Handler>:
    126c:	b500      	push	{lr}
    126e:	b083      	sub	sp, #12
    1270:	4b0d      	ldr	r3, [pc, #52]	; (12a8 <RAMECC_Handler+0x3c>)
    1272:	789b      	ldrb	r3, [r3, #2]
    1274:	b2db      	uxtb	r3, r3
    1276:	9301      	str	r3, [sp, #4]
    1278:	9b01      	ldr	r3, [sp, #4]
    127a:	f013 0f02 	tst.w	r3, #2
    127e:	d006      	beq.n	128e <RAMECC_Handler+0x22>
    1280:	4b0a      	ldr	r3, [pc, #40]	; (12ac <RAMECC_Handler+0x40>)
    1282:	681b      	ldr	r3, [r3, #0]
    1284:	b11b      	cbz	r3, 128e <RAMECC_Handler+0x22>
    1286:	4a08      	ldr	r2, [pc, #32]	; (12a8 <RAMECC_Handler+0x3c>)
    1288:	6850      	ldr	r0, [r2, #4]
    128a:	4798      	blx	r3
    128c:	e009      	b.n	12a2 <RAMECC_Handler+0x36>
    128e:	9b01      	ldr	r3, [sp, #4]
    1290:	f013 0f01 	tst.w	r3, #1
    1294:	d005      	beq.n	12a2 <RAMECC_Handler+0x36>
    1296:	4b05      	ldr	r3, [pc, #20]	; (12ac <RAMECC_Handler+0x40>)
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	b113      	cbz	r3, 12a2 <RAMECC_Handler+0x36>
    129c:	4a02      	ldr	r2, [pc, #8]	; (12a8 <RAMECC_Handler+0x3c>)
    129e:	6850      	ldr	r0, [r2, #4]
    12a0:	4798      	blx	r3
    12a2:	b003      	add	sp, #12
    12a4:	f85d fb04 	ldr.w	pc, [sp], #4
    12a8:	41020000 	.word	0x41020000
    12ac:	200000a0 	.word	0x200000a0

000012b0 <_timer_init>:
    12b0:	b538      	push	{r3, r4, r5, lr}
    12b2:	460c      	mov	r4, r1
    12b4:	4605      	mov	r5, r0
    12b6:	2230      	movs	r2, #48	; 0x30
    12b8:	4914      	ldr	r1, [pc, #80]	; (130c <_timer_init+0x5c>)
    12ba:	3000      	adds	r0, #0
    12bc:	bf18      	it	ne
    12be:	2001      	movne	r0, #1
    12c0:	4b13      	ldr	r3, [pc, #76]	; (1310 <_timer_init+0x60>)
    12c2:	4798      	blx	r3
    12c4:	60ec      	str	r4, [r5, #12]
    12c6:	2301      	movs	r3, #1
    12c8:	8023      	strh	r3, [r4, #0]
    12ca:	f248 0203 	movw	r2, #32771	; 0x8003
    12ce:	6923      	ldr	r3, [r4, #16]
    12d0:	4213      	tst	r3, r2
    12d2:	d1fc      	bne.n	12ce <_timer_init+0x1e>
    12d4:	68eb      	ldr	r3, [r5, #12]
    12d6:	691a      	ldr	r2, [r3, #16]
    12d8:	f012 0f01 	tst.w	r2, #1
    12dc:	d1fb      	bne.n	12d6 <_timer_init+0x26>
    12de:	f248 0280 	movw	r2, #32896	; 0x8080
    12e2:	801a      	strh	r2, [r3, #0]
    12e4:	f248 0103 	movw	r1, #32771	; 0x8003
    12e8:	691a      	ldr	r2, [r3, #16]
    12ea:	420a      	tst	r2, r1
    12ec:	d1fc      	bne.n	12e8 <_timer_init+0x38>
    12ee:	68ea      	ldr	r2, [r5, #12]
    12f0:	2320      	movs	r3, #32
    12f2:	6213      	str	r3, [r2, #32]
    12f4:	6913      	ldr	r3, [r2, #16]
    12f6:	f013 0f60 	tst.w	r3, #96	; 0x60
    12fa:	d1fb      	bne.n	12f4 <_timer_init+0x44>
    12fc:	68eb      	ldr	r3, [r5, #12]
    12fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    1302:	815a      	strh	r2, [r3, #10]
    1304:	4b03      	ldr	r3, [pc, #12]	; (1314 <_timer_init+0x64>)
    1306:	601d      	str	r5, [r3, #0]
    1308:	2000      	movs	r0, #0
    130a:	bd38      	pop	{r3, r4, r5, pc}
    130c:	00001e7c 	.word	0x00001e7c
    1310:	00000d59 	.word	0x00000d59
    1314:	20000040 	.word	0x20000040

00001318 <_rtc_get_timer>:
    1318:	2000      	movs	r0, #0
    131a:	4770      	bx	lr

0000131c <RTC_Handler>:
    131c:	b510      	push	{r4, lr}
    131e:	4b08      	ldr	r3, [pc, #32]	; (1340 <RTC_Handler+0x24>)
    1320:	681c      	ldr	r4, [r3, #0]
    1322:	68e3      	ldr	r3, [r4, #12]
    1324:	899b      	ldrh	r3, [r3, #12]
    1326:	f413 7f80 	tst.w	r3, #256	; 0x100
    132a:	d007      	beq.n	133c <RTC_Handler+0x20>
    132c:	6823      	ldr	r3, [r4, #0]
    132e:	b10b      	cbz	r3, 1334 <RTC_Handler+0x18>
    1330:	4620      	mov	r0, r4
    1332:	4798      	blx	r3
    1334:	68e3      	ldr	r3, [r4, #12]
    1336:	f44f 7280 	mov.w	r2, #256	; 0x100
    133a:	819a      	strh	r2, [r3, #12]
    133c:	bd10      	pop	{r4, pc}
    133e:	bf00      	nop
    1340:	20000040 	.word	0x20000040

00001344 <_sercom_get_hardware_index>:
    1344:	b470      	push	{r4, r5, r6}
    1346:	b087      	sub	sp, #28
    1348:	4606      	mov	r6, r0
    134a:	466c      	mov	r4, sp
    134c:	4d0c      	ldr	r5, [pc, #48]	; (1380 <_sercom_get_hardware_index+0x3c>)
    134e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1352:	e895 0003 	ldmia.w	r5, {r0, r1}
    1356:	e884 0003 	stmia.w	r4, {r0, r1}
    135a:	9b00      	ldr	r3, [sp, #0]
    135c:	42b3      	cmp	r3, r6
    135e:	d00c      	beq.n	137a <_sercom_get_hardware_index+0x36>
    1360:	4632      	mov	r2, r6
    1362:	2001      	movs	r0, #1
    1364:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    1368:	4293      	cmp	r3, r2
    136a:	d007      	beq.n	137c <_sercom_get_hardware_index+0x38>
    136c:	3001      	adds	r0, #1
    136e:	2806      	cmp	r0, #6
    1370:	d1f8      	bne.n	1364 <_sercom_get_hardware_index+0x20>
    1372:	2000      	movs	r0, #0
    1374:	b007      	add	sp, #28
    1376:	bc70      	pop	{r4, r5, r6}
    1378:	4770      	bx	lr
    137a:	2000      	movs	r0, #0
    137c:	b2c0      	uxtb	r0, r0
    137e:	e7f9      	b.n	1374 <_sercom_get_hardware_index+0x30>
    1380:	00001e94 	.word	0x00001e94

00001384 <_i2c_s_init>:
    1384:	b510      	push	{r4, lr}
    1386:	4604      	mov	r4, r0
    1388:	4b1d      	ldr	r3, [pc, #116]	; (1400 <_i2c_s_init+0x7c>)
    138a:	4798      	blx	r3
    138c:	2805      	cmp	r0, #5
    138e:	d008      	beq.n	13a2 <_i2c_s_init+0x1e>
    1390:	f240 72b7 	movw	r2, #1975	; 0x7b7
    1394:	491b      	ldr	r1, [pc, #108]	; (1404 <_i2c_s_init+0x80>)
    1396:	2000      	movs	r0, #0
    1398:	4b1b      	ldr	r3, [pc, #108]	; (1408 <_i2c_s_init+0x84>)
    139a:	4798      	blx	r3
    139c:	f06f 000c 	mvn.w	r0, #12
    13a0:	bd10      	pop	{r4, pc}
    13a2:	69e3      	ldr	r3, [r4, #28]
    13a4:	f013 0f01 	tst.w	r3, #1
    13a8:	d119      	bne.n	13de <_i2c_s_init+0x5a>
    13aa:	69e3      	ldr	r3, [r4, #28]
    13ac:	f013 0f03 	tst.w	r3, #3
    13b0:	d1fb      	bne.n	13aa <_i2c_s_init+0x26>
    13b2:	6823      	ldr	r3, [r4, #0]
    13b4:	f013 0f02 	tst.w	r3, #2
    13b8:	d00b      	beq.n	13d2 <_i2c_s_init+0x4e>
    13ba:	6823      	ldr	r3, [r4, #0]
    13bc:	f023 0302 	bic.w	r3, r3, #2
    13c0:	6023      	str	r3, [r4, #0]
    13c2:	69e3      	ldr	r3, [r4, #28]
    13c4:	f013 0f03 	tst.w	r3, #3
    13c8:	d1fb      	bne.n	13c2 <_i2c_s_init+0x3e>
    13ca:	69e3      	ldr	r3, [r4, #28]
    13cc:	f013 0f02 	tst.w	r3, #2
    13d0:	d1fb      	bne.n	13ca <_i2c_s_init+0x46>
    13d2:	2311      	movs	r3, #17
    13d4:	6023      	str	r3, [r4, #0]
    13d6:	69e3      	ldr	r3, [r4, #28]
    13d8:	f013 0f03 	tst.w	r3, #3
    13dc:	d1fb      	bne.n	13d6 <_i2c_s_init+0x52>
    13de:	69e3      	ldr	r3, [r4, #28]
    13e0:	f013 0f01 	tst.w	r3, #1
    13e4:	d1fb      	bne.n	13de <_i2c_s_init+0x5a>
    13e6:	4b09      	ldr	r3, [pc, #36]	; (140c <_i2c_s_init+0x88>)
    13e8:	6023      	str	r3, [r4, #0]
    13ea:	69e3      	ldr	r3, [r4, #28]
    13ec:	f013 0f03 	tst.w	r3, #3
    13f0:	d1fb      	bne.n	13ea <_i2c_s_init+0x66>
    13f2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    13f6:	6063      	str	r3, [r4, #4]
    13f8:	2320      	movs	r3, #32
    13fa:	6263      	str	r3, [r4, #36]	; 0x24
    13fc:	2000      	movs	r0, #0
    13fe:	bd10      	pop	{r4, pc}
    1400:	00001345 	.word	0x00001345
    1404:	00001ec4 	.word	0x00001ec4
    1408:	00000d59 	.word	0x00000d59
    140c:	00200010 	.word	0x00200010

00001410 <_i2c_s_set_address>:
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	b082      	sub	sp, #8
    1414:	4604      	mov	r4, r0
    1416:	460e      	mov	r6, r1
    1418:	69e3      	ldr	r3, [r4, #28]
    141a:	f013 0f03 	tst.w	r3, #3
    141e:	d1fb      	bne.n	1418 <_i2c_s_set_address+0x8>
    1420:	6825      	ldr	r5, [r4, #0]
    1422:	f3c5 0540 	ubfx	r5, r5, #1, #1
    1426:	a801      	add	r0, sp, #4
    1428:	4b11      	ldr	r3, [pc, #68]	; (1470 <_i2c_s_set_address+0x60>)
    142a:	4798      	blx	r3
    142c:	6823      	ldr	r3, [r4, #0]
    142e:	f023 0302 	bic.w	r3, r3, #2
    1432:	6023      	str	r3, [r4, #0]
    1434:	69e3      	ldr	r3, [r4, #28]
    1436:	f013 0f03 	tst.w	r3, #3
    143a:	d1fb      	bne.n	1434 <_i2c_s_set_address+0x24>
    143c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    143e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    1442:	f023 0306 	bic.w	r3, r3, #6
    1446:	f240 71fe 	movw	r1, #2046	; 0x7fe
    144a:	ea01 0146 	and.w	r1, r1, r6, lsl #1
    144e:	4319      	orrs	r1, r3
    1450:	6261      	str	r1, [r4, #36]	; 0x24
    1452:	a801      	add	r0, sp, #4
    1454:	4b07      	ldr	r3, [pc, #28]	; (1474 <_i2c_s_set_address+0x64>)
    1456:	4798      	blx	r3
    1458:	b13d      	cbz	r5, 146a <_i2c_s_set_address+0x5a>
    145a:	6823      	ldr	r3, [r4, #0]
    145c:	f043 0302 	orr.w	r3, r3, #2
    1460:	6023      	str	r3, [r4, #0]
    1462:	69e3      	ldr	r3, [r4, #28]
    1464:	f013 0f03 	tst.w	r3, #3
    1468:	d1fb      	bne.n	1462 <_i2c_s_set_address+0x52>
    146a:	2000      	movs	r0, #0
    146c:	b002      	add	sp, #8
    146e:	bd70      	pop	{r4, r5, r6, pc}
    1470:	0000087d 	.word	0x0000087d
    1474:	0000088b 	.word	0x0000088b

00001478 <_i2c_s_sync_init>:
    1478:	b538      	push	{r3, r4, r5, lr}
    147a:	460c      	mov	r4, r1
    147c:	4605      	mov	r5, r0
    147e:	f240 62a6 	movw	r2, #1702	; 0x6a6
    1482:	4907      	ldr	r1, [pc, #28]	; (14a0 <_i2c_s_sync_init+0x28>)
    1484:	3000      	adds	r0, #0
    1486:	bf18      	it	ne
    1488:	2001      	movne	r0, #1
    148a:	4b06      	ldr	r3, [pc, #24]	; (14a4 <_i2c_s_sync_init+0x2c>)
    148c:	4798      	blx	r3
    148e:	4620      	mov	r0, r4
    1490:	4b05      	ldr	r3, [pc, #20]	; (14a8 <_i2c_s_sync_init+0x30>)
    1492:	4798      	blx	r3
    1494:	4603      	mov	r3, r0
    1496:	b900      	cbnz	r0, 149a <_i2c_s_sync_init+0x22>
    1498:	602c      	str	r4, [r5, #0]
    149a:	4618      	mov	r0, r3
    149c:	bd38      	pop	{r3, r4, r5, pc}
    149e:	bf00      	nop
    14a0:	00001ec4 	.word	0x00001ec4
    14a4:	00000d59 	.word	0x00000d59
    14a8:	00001385 	.word	0x00001385

000014ac <_i2c_s_sync_enable>:
    14ac:	6802      	ldr	r2, [r0, #0]
    14ae:	6813      	ldr	r3, [r2, #0]
    14b0:	f043 0302 	orr.w	r3, r3, #2
    14b4:	6013      	str	r3, [r2, #0]
    14b6:	69d3      	ldr	r3, [r2, #28]
    14b8:	f013 0f03 	tst.w	r3, #3
    14bc:	d1fb      	bne.n	14b6 <_i2c_s_sync_enable+0xa>
    14be:	2000      	movs	r0, #0
    14c0:	4770      	bx	lr

000014c2 <_i2c_s_sync_is_10bit_addressing_on>:
    14c2:	6803      	ldr	r3, [r0, #0]
    14c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
    14c6:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    14ca:	4770      	bx	lr

000014cc <_i2c_s_sync_set_address>:
    14cc:	b508      	push	{r3, lr}
    14ce:	6800      	ldr	r0, [r0, #0]
    14d0:	4b01      	ldr	r3, [pc, #4]	; (14d8 <_i2c_s_sync_set_address+0xc>)
    14d2:	4798      	blx	r3
    14d4:	bd08      	pop	{r3, pc}
    14d6:	bf00      	nop
    14d8:	00001411 	.word	0x00001411

000014dc <_i2c_s_sync_write_byte>:
    14dc:	6803      	ldr	r3, [r0, #0]
    14de:	6299      	str	r1, [r3, #40]	; 0x28
    14e0:	4770      	bx	lr

000014e2 <_i2c_s_sync_read_byte>:
    14e2:	6803      	ldr	r3, [r0, #0]
    14e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    14e6:	b2c0      	uxtb	r0, r0
    14e8:	4770      	bx	lr

000014ea <_i2c_s_sync_is_byte_sent>:
    14ea:	6803      	ldr	r3, [r0, #0]
    14ec:	7e18      	ldrb	r0, [r3, #24]
    14ee:	f3c0 0080 	ubfx	r0, r0, #2, #1
    14f2:	4770      	bx	lr

000014f4 <_i2c_s_sync_is_byte_received>:
    14f4:	6803      	ldr	r3, [r0, #0]
    14f6:	7e18      	ldrb	r0, [r3, #24]
    14f8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    14fc:	4770      	bx	lr

000014fe <_i2c_s_sync_clear_data_ready_flag>:
    14fe:	6803      	ldr	r3, [r0, #0]
    1500:	2204      	movs	r2, #4
    1502:	761a      	strb	r2, [r3, #24]
    1504:	2000      	movs	r0, #0
    1506:	4770      	bx	lr

00001508 <_wdt_init>:
    1508:	b510      	push	{r4, lr}
    150a:	4604      	mov	r4, r0
    150c:	b330      	cbz	r0, 155c <_wdt_init+0x54>
    150e:	6800      	ldr	r0, [r0, #0]
    1510:	3000      	adds	r0, #0
    1512:	bf18      	it	ne
    1514:	2001      	movne	r0, #1
    1516:	2250      	movs	r2, #80	; 0x50
    1518:	4914      	ldr	r1, [pc, #80]	; (156c <_wdt_init+0x64>)
    151a:	4b15      	ldr	r3, [pc, #84]	; (1570 <_wdt_init+0x68>)
    151c:	4798      	blx	r3
    151e:	6823      	ldr	r3, [r4, #0]
    1520:	689a      	ldr	r2, [r3, #8]
    1522:	f012 0f0e 	tst.w	r2, #14
    1526:	d1fb      	bne.n	1520 <_wdt_init+0x18>
    1528:	781a      	ldrb	r2, [r3, #0]
    152a:	09d2      	lsrs	r2, r2, #7
    152c:	d118      	bne.n	1560 <_wdt_init+0x58>
    152e:	689a      	ldr	r2, [r3, #8]
    1530:	f012 0f0e 	tst.w	r2, #14
    1534:	d1fb      	bne.n	152e <_wdt_init+0x26>
    1536:	781a      	ldrb	r2, [r3, #0]
    1538:	f012 0f02 	tst.w	r2, #2
    153c:	d113      	bne.n	1566 <_wdt_init+0x5e>
    153e:	781a      	ldrb	r2, [r3, #0]
    1540:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1544:	701a      	strb	r2, [r3, #0]
    1546:	689a      	ldr	r2, [r3, #8]
    1548:	f012 0f0e 	tst.w	r2, #14
    154c:	d1fb      	bne.n	1546 <_wdt_init+0x3e>
    154e:	6822      	ldr	r2, [r4, #0]
    1550:	7853      	ldrb	r3, [r2, #1]
    1552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1556:	7053      	strb	r3, [r2, #1]
    1558:	2000      	movs	r0, #0
    155a:	bd10      	pop	{r4, pc}
    155c:	2000      	movs	r0, #0
    155e:	e7da      	b.n	1516 <_wdt_init+0xe>
    1560:	f06f 0010 	mvn.w	r0, #16
    1564:	bd10      	pop	{r4, pc}
    1566:	f06f 0010 	mvn.w	r0, #16
    156a:	bd10      	pop	{r4, pc}
    156c:	00001ee0 	.word	0x00001ee0
    1570:	00000d59 	.word	0x00000d59

00001574 <main>:
#include "driver_init.h"
#include "atmel_start_pins.h"


int main(void)
{
    1574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1578:	b085      	sub	sp, #20
    157a:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    157c:	4b20      	ldr	r3, [pc, #128]	; (1600 <main+0x8c>)
    157e:	4798      	blx	r3
	SWD_GPIO_init();
    1580:	4b20      	ldr	r3, [pc, #128]	; (1604 <main+0x90>)
    1582:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1584:	4e20      	ldr	r6, [pc, #128]	; (1608 <main+0x94>)
    1586:	f04f 0804 	mov.w	r8, #4
    158a:	46c1      	mov	r9, r8
{
    158c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1590:	f8c6 9014 	str.w	r9, [r6, #20]
		
		
		for(int i = 0; i<1000; i++)
		{
			gpio_set_pin_level(SWCLK, false);
			delay_ms(50);
    1594:	2032      	movs	r0, #50	; 0x32
    1596:	4d1d      	ldr	r5, [pc, #116]	; (160c <main+0x98>)
    1598:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    159a:	f8c6 8018 	str.w	r8, [r6, #24]
			gpio_set_pin_level(SWCLK, true);
			delay_ms(50);
    159e:	2032      	movs	r0, #50	; 0x32
    15a0:	47a8      	blx	r5
		for(int i = 0; i<1000; i++)
    15a2:	3c01      	subs	r4, #1
    15a4:	d1f4      	bne.n	1590 <main+0x1c>
		}
		

		
		I2C_read(buffer, RX_LENGTH);
    15a6:	210a      	movs	r1, #10
    15a8:	1d38      	adds	r0, r7, #4
    15aa:	4b19      	ldr	r3, [pc, #100]	; (1610 <main+0x9c>)
    15ac:	4798      	blx	r3
		
		nor_flash_qspi_init();
    15ae:	4b19      	ldr	r3, [pc, #100]	; (1614 <main+0xa0>)
    15b0:	4798      	blx	r3
		
		if(buffer[0] == 0xCC) //start byte CC 
    15b2:	793b      	ldrb	r3, [r7, #4]
    15b4:	2bcc      	cmp	r3, #204	; 0xcc
    15b6:	d1e9      	bne.n	158c <main+0x18>
		{
			if(buffer[1] == 0xBB) //target cmd BB
    15b8:	797b      	ldrb	r3, [r7, #5]
    15ba:	2bbb      	cmp	r3, #187	; 0xbb
    15bc:	d1e6      	bne.n	158c <main+0x18>
			{
    15be:	466c      	mov	r4, sp
				uint32_t data_addr = buffer[2] << 24 | buffer[3] << 16 | buffer[4] << 8 | buffer[5]; 
    15c0:	79bb      	ldrb	r3, [r7, #6]
    15c2:	79fa      	ldrb	r2, [r7, #7]
    15c4:	0412      	lsls	r2, r2, #16
    15c6:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    15ca:	7a7b      	ldrb	r3, [r7, #9]
    15cc:	431a      	orrs	r2, r3
    15ce:	7a38      	ldrb	r0, [r7, #8]
				uint32_t data_len = buffer[6] << 24 | buffer[7] << 16 | buffer[8] << 8 | buffer[9];
    15d0:	7ab9      	ldrb	r1, [r7, #10]
    15d2:	7afb      	ldrb	r3, [r7, #11]
    15d4:	041b      	lsls	r3, r3, #16
    15d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    15da:	7b79      	ldrb	r1, [r7, #13]
    15dc:	430b      	orrs	r3, r1
    15de:	7b39      	ldrb	r1, [r7, #12]
    15e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				//if data length is bigger than RAM program in chunks
				
				uint8_t qspi_buff[data_len];
    15e4:	1dd9      	adds	r1, r3, #7
    15e6:	f021 0107 	bic.w	r1, r1, #7
    15ea:	ebad 0d01 	sub.w	sp, sp, r1
				spi_nor_flash_read(SPI_NOR_FLASH_0, qspi_buff, data_addr, data_len);
    15ee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    15f2:	4669      	mov	r1, sp
    15f4:	4808      	ldr	r0, [pc, #32]	; (1618 <main+0xa4>)
    15f6:	6800      	ldr	r0, [r0, #0]
    15f8:	4d08      	ldr	r5, [pc, #32]	; (161c <main+0xa8>)
    15fa:	47a8      	blx	r5
    15fc:	46a5      	mov	sp, r4
    15fe:	e7c5      	b.n	158c <main+0x18>
    1600:	000002d1 	.word	0x000002d1
    1604:	00000385 	.word	0x00000385
    1608:	41008000 	.word	0x41008000
    160c:	000008b9 	.word	0x000008b9
    1610:	00000839 	.word	0x00000839
    1614:	00000825 	.word	0x00000825
    1618:	200000b0 	.word	0x200000b0
    161c:	00001beb 	.word	0x00001beb

00001620 <n25q256a_read>:
    1620:	b570      	push	{r4, r5, r6, lr}
    1622:	b086      	sub	sp, #24
    1624:	6806      	ldr	r6, [r0, #0]
    1626:	2400      	movs	r4, #0
    1628:	9400      	str	r4, [sp, #0]
    162a:	9401      	str	r4, [sp, #4]
    162c:	9404      	str	r4, [sp, #16]
    162e:	7b00      	ldrb	r0, [r0, #12]
    1630:	bb10      	cbnz	r0, 1678 <n25q256a_read+0x58>
    1632:	f89d 4000 	ldrb.w	r4, [sp]
    1636:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
    163a:	f044 04b0 	orr.w	r4, r4, #176	; 0xb0
    163e:	f88d 4000 	strb.w	r4, [sp]
    1642:	f89d 0001 	ldrb.w	r0, [sp, #1]
    1646:	2401      	movs	r4, #1
    1648:	f364 1005 	bfi	r0, r4, #4, #2
    164c:	f88d 0001 	strb.w	r0, [sp, #1]
    1650:	2508      	movs	r5, #8
    1652:	f89d 4002 	ldrb.w	r4, [sp, #2]
    1656:	f365 0404 	bfi	r4, r5, #0, #5
    165a:	f88d 4002 	strb.w	r4, [sp, #2]
    165e:	200b      	movs	r0, #11
    1660:	f88d 0004 	strb.w	r0, [sp, #4]
    1664:	9202      	str	r2, [sp, #8]
    1666:	9303      	str	r3, [sp, #12]
    1668:	9105      	str	r1, [sp, #20]
    166a:	4669      	mov	r1, sp
    166c:	4630      	mov	r0, r6
    166e:	4b0b      	ldr	r3, [pc, #44]	; (169c <n25q256a_read+0x7c>)
    1670:	4798      	blx	r3
    1672:	2000      	movs	r0, #0
    1674:	b006      	add	sp, #24
    1676:	bd70      	pop	{r4, r5, r6, pc}
    1678:	f89d 4000 	ldrb.w	r4, [sp]
    167c:	2006      	movs	r0, #6
    167e:	f360 0402 	bfi	r4, r0, #0, #3
    1682:	f064 044f 	orn	r4, r4, #79	; 0x4f
    1686:	f88d 4000 	strb.w	r4, [sp]
    168a:	f89d 0001 	ldrb.w	r0, [sp, #1]
    168e:	2401      	movs	r4, #1
    1690:	f364 1005 	bfi	r0, r4, #4, #2
    1694:	f88d 0001 	strb.w	r0, [sp, #1]
    1698:	250a      	movs	r5, #10
    169a:	e7da      	b.n	1652 <n25q256a_read+0x32>
    169c:	00000c15 	.word	0x00000c15

000016a0 <n25q256a_xip_confirm>:
    16a0:	b530      	push	{r4, r5, lr}
    16a2:	b089      	sub	sp, #36	; 0x24
    16a4:	4604      	mov	r4, r0
    16a6:	460d      	mov	r5, r1
    16a8:	6800      	ldr	r0, [r0, #0]
    16aa:	2300      	movs	r3, #0
    16ac:	9301      	str	r3, [sp, #4]
    16ae:	9302      	str	r3, [sp, #8]
    16b0:	9303      	str	r3, [sp, #12]
    16b2:	9305      	str	r3, [sp, #20]
    16b4:	7b23      	ldrb	r3, [r4, #12]
    16b6:	bb7b      	cbnz	r3, 1718 <n25q256a_xip_confirm+0x78>
    16b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    16bc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    16c0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    16c4:	f88d 3004 	strb.w	r3, [sp, #4]
    16c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    16cc:	f043 0303 	orr.w	r3, r3, #3
    16d0:	2201      	movs	r2, #1
    16d2:	f362 1305 	bfi	r3, r2, #4, #2
    16d6:	f88d 3005 	strb.w	r3, [sp, #5]
    16da:	2200      	movs	r2, #0
    16dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    16e0:	f362 0304 	bfi	r3, r2, #0, #5
    16e4:	f88d 3006 	strb.w	r3, [sp, #6]
    16e8:	230b      	movs	r3, #11
    16ea:	f88d 3008 	strb.w	r3, [sp, #8]
    16ee:	f085 0301 	eor.w	r3, r5, #1
    16f2:	425b      	negs	r3, r3
    16f4:	f88d 3009 	strb.w	r3, [sp, #9]
    16f8:	2301      	movs	r3, #1
    16fa:	9304      	str	r3, [sp, #16]
    16fc:	f10d 031f 	add.w	r3, sp, #31
    1700:	9306      	str	r3, [sp, #24]
    1702:	a901      	add	r1, sp, #4
    1704:	4b0e      	ldr	r3, [pc, #56]	; (1740 <n25q256a_xip_confirm+0xa0>)
    1706:	4798      	blx	r3
    1708:	2d00      	cmp	r5, #0
    170a:	bf14      	ite	ne
    170c:	2302      	movne	r3, #2
    170e:	2301      	moveq	r3, #1
    1710:	7363      	strb	r3, [r4, #13]
    1712:	2000      	movs	r0, #0
    1714:	b009      	add	sp, #36	; 0x24
    1716:	bd30      	pop	{r4, r5, pc}
    1718:	f89d 3004 	ldrb.w	r3, [sp, #4]
    171c:	2206      	movs	r2, #6
    171e:	f362 0302 	bfi	r3, r2, #0, #3
    1722:	f063 030f 	orn	r3, r3, #15
    1726:	f88d 3004 	strb.w	r3, [sp, #4]
    172a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    172e:	f043 0303 	orr.w	r3, r3, #3
    1732:	2201      	movs	r2, #1
    1734:	f362 1305 	bfi	r3, r2, #4, #2
    1738:	f88d 3005 	strb.w	r3, [sp, #5]
    173c:	2208      	movs	r2, #8
    173e:	e7cd      	b.n	16dc <n25q256a_xip_confirm+0x3c>
    1740:	00000c15 	.word	0x00000c15

00001744 <n25q256a_read_reg>:
    1744:	b530      	push	{r4, r5, lr}
    1746:	b089      	sub	sp, #36	; 0x24
    1748:	4604      	mov	r4, r0
    174a:	2300      	movs	r3, #0
    174c:	9307      	str	r3, [sp, #28]
    174e:	6805      	ldr	r5, [r0, #0]
    1750:	9301      	str	r3, [sp, #4]
    1752:	9302      	str	r3, [sp, #8]
    1754:	9303      	str	r3, [sp, #12]
    1756:	9305      	str	r3, [sp, #20]
    1758:	f001 0107 	and.w	r1, r1, #7
    175c:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    1760:	f88d 1004 	strb.w	r1, [sp, #4]
    1764:	f88d 2008 	strb.w	r2, [sp, #8]
    1768:	2301      	movs	r3, #1
    176a:	9304      	str	r3, [sp, #16]
    176c:	ab07      	add	r3, sp, #28
    176e:	9306      	str	r3, [sp, #24]
    1770:	7b43      	ldrb	r3, [r0, #13]
    1772:	b943      	cbnz	r3, 1786 <n25q256a_read_reg+0x42>
    1774:	a901      	add	r1, sp, #4
    1776:	4628      	mov	r0, r5
    1778:	4b07      	ldr	r3, [pc, #28]	; (1798 <n25q256a_read_reg+0x54>)
    177a:	4798      	blx	r3
    177c:	7b63      	ldrb	r3, [r4, #13]
    177e:	b933      	cbnz	r3, 178e <n25q256a_read_reg+0x4a>
    1780:	9807      	ldr	r0, [sp, #28]
    1782:	b009      	add	sp, #36	; 0x24
    1784:	bd30      	pop	{r4, r5, pc}
    1786:	2100      	movs	r1, #0
    1788:	4b04      	ldr	r3, [pc, #16]	; (179c <n25q256a_read_reg+0x58>)
    178a:	4798      	blx	r3
    178c:	e7f2      	b.n	1774 <n25q256a_read_reg+0x30>
    178e:	2101      	movs	r1, #1
    1790:	4620      	mov	r0, r4
    1792:	4b02      	ldr	r3, [pc, #8]	; (179c <n25q256a_read_reg+0x58>)
    1794:	4798      	blx	r3
    1796:	e7f3      	b.n	1780 <n25q256a_read_reg+0x3c>
    1798:	00000c15 	.word	0x00000c15
    179c:	000016a1 	.word	0x000016a1

000017a0 <n25q256a_disable_xip>:
    17a0:	b570      	push	{r4, r5, r6, lr}
    17a2:	4604      	mov	r4, r0
    17a4:	6806      	ldr	r6, [r0, #0]
    17a6:	7b05      	ldrb	r5, [r0, #12]
    17a8:	2d00      	cmp	r5, #0
    17aa:	bf18      	it	ne
    17ac:	2506      	movne	r5, #6
    17ae:	2100      	movs	r1, #0
    17b0:	4b0d      	ldr	r3, [pc, #52]	; (17e8 <n25q256a_disable_xip+0x48>)
    17b2:	4798      	blx	r3
    17b4:	2285      	movs	r2, #133	; 0x85
    17b6:	4629      	mov	r1, r5
    17b8:	4620      	mov	r0, r4
    17ba:	4b0c      	ldr	r3, [pc, #48]	; (17ec <n25q256a_disable_xip+0x4c>)
    17bc:	4798      	blx	r3
    17be:	f010 0f08 	tst.w	r0, #8
    17c2:	d10e      	bne.n	17e2 <n25q256a_disable_xip+0x42>
    17c4:	68a3      	ldr	r3, [r4, #8]
    17c6:	b163      	cbz	r3, 17e2 <n25q256a_disable_xip+0x42>
    17c8:	6835      	ldr	r5, [r6, #0]
    17ca:	4630      	mov	r0, r6
    17cc:	4b08      	ldr	r3, [pc, #32]	; (17f0 <n25q256a_disable_xip+0x50>)
    17ce:	4798      	blx	r3
    17d0:	68a3      	ldr	r3, [r4, #8]
    17d2:	4798      	blx	r3
    17d4:	4629      	mov	r1, r5
    17d6:	4630      	mov	r0, r6
    17d8:	4b06      	ldr	r3, [pc, #24]	; (17f4 <n25q256a_disable_xip+0x54>)
    17da:	4798      	blx	r3
    17dc:	4630      	mov	r0, r6
    17de:	4b06      	ldr	r3, [pc, #24]	; (17f8 <n25q256a_disable_xip+0x58>)
    17e0:	4798      	blx	r3
    17e2:	2000      	movs	r0, #0
    17e4:	7360      	strb	r0, [r4, #13]
    17e6:	bd70      	pop	{r4, r5, r6, pc}
    17e8:	000016a1 	.word	0x000016a1
    17ec:	00001745 	.word	0x00001745
    17f0:	00000bed 	.word	0x00000bed
    17f4:	00000b95 	.word	0x00000b95
    17f8:	00000bc5 	.word	0x00000bc5

000017fc <n25q256a_write_reg>:
    17fc:	b530      	push	{r4, r5, lr}
    17fe:	b089      	sub	sp, #36	; 0x24
    1800:	4604      	mov	r4, r0
    1802:	9301      	str	r3, [sp, #4]
    1804:	6805      	ldr	r5, [r0, #0]
    1806:	2300      	movs	r3, #0
    1808:	9302      	str	r3, [sp, #8]
    180a:	9303      	str	r3, [sp, #12]
    180c:	9304      	str	r3, [sp, #16]
    180e:	9307      	str	r3, [sp, #28]
    1810:	f001 0107 	and.w	r1, r1, #7
    1814:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    1818:	f88d 1008 	strb.w	r1, [sp, #8]
    181c:	2102      	movs	r1, #2
    181e:	f361 1305 	bfi	r3, r1, #4, #2
    1822:	f88d 3009 	strb.w	r3, [sp, #9]
    1826:	f88d 200c 	strb.w	r2, [sp, #12]
    182a:	2301      	movs	r3, #1
    182c:	9305      	str	r3, [sp, #20]
    182e:	ab01      	add	r3, sp, #4
    1830:	9306      	str	r3, [sp, #24]
    1832:	7b43      	ldrb	r3, [r0, #13]
    1834:	b93b      	cbnz	r3, 1846 <n25q256a_write_reg+0x4a>
    1836:	a902      	add	r1, sp, #8
    1838:	4628      	mov	r0, r5
    183a:	4b07      	ldr	r3, [pc, #28]	; (1858 <n25q256a_write_reg+0x5c>)
    183c:	4798      	blx	r3
    183e:	7b63      	ldrb	r3, [r4, #13]
    1840:	b92b      	cbnz	r3, 184e <n25q256a_write_reg+0x52>
    1842:	b009      	add	sp, #36	; 0x24
    1844:	bd30      	pop	{r4, r5, pc}
    1846:	2100      	movs	r1, #0
    1848:	4b04      	ldr	r3, [pc, #16]	; (185c <n25q256a_write_reg+0x60>)
    184a:	4798      	blx	r3
    184c:	e7f3      	b.n	1836 <n25q256a_write_reg+0x3a>
    184e:	2101      	movs	r1, #1
    1850:	4620      	mov	r0, r4
    1852:	4b02      	ldr	r3, [pc, #8]	; (185c <n25q256a_write_reg+0x60>)
    1854:	4798      	blx	r3
    1856:	e7f4      	b.n	1842 <n25q256a_write_reg+0x46>
    1858:	00000c15 	.word	0x00000c15
    185c:	000016a1 	.word	0x000016a1

00001860 <n25q256a_enable_xip>:
    1860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1862:	7b05      	ldrb	r5, [r0, #12]
    1864:	2d00      	cmp	r5, #0
    1866:	bf18      	it	ne
    1868:	2506      	movne	r5, #6
    186a:	7b43      	ldrb	r3, [r0, #13]
    186c:	b10b      	cbz	r3, 1872 <n25q256a_enable_xip+0x12>
    186e:	2000      	movs	r0, #0
    1870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1872:	4604      	mov	r4, r0
    1874:	2285      	movs	r2, #133	; 0x85
    1876:	4629      	mov	r1, r5
    1878:	4b0d      	ldr	r3, [pc, #52]	; (18b0 <n25q256a_enable_xip+0x50>)
    187a:	4798      	blx	r3
    187c:	f010 0f08 	tst.w	r0, #8
    1880:	d105      	bne.n	188e <n25q256a_enable_xip+0x2e>
    1882:	2101      	movs	r1, #1
    1884:	7361      	strb	r1, [r4, #13]
    1886:	4620      	mov	r0, r4
    1888:	4b0a      	ldr	r3, [pc, #40]	; (18b4 <n25q256a_enable_xip+0x54>)
    188a:	4798      	blx	r3
    188c:	e7ef      	b.n	186e <n25q256a_enable_xip+0xe>
    188e:	f000 03f7 	and.w	r3, r0, #247	; 0xf7
    1892:	2281      	movs	r2, #129	; 0x81
    1894:	4629      	mov	r1, r5
    1896:	4620      	mov	r0, r4
    1898:	4e07      	ldr	r6, [pc, #28]	; (18b8 <n25q256a_enable_xip+0x58>)
    189a:	47b0      	blx	r6
    189c:	2770      	movs	r7, #112	; 0x70
    189e:	4e04      	ldr	r6, [pc, #16]	; (18b0 <n25q256a_enable_xip+0x50>)
    18a0:	463a      	mov	r2, r7
    18a2:	4629      	mov	r1, r5
    18a4:	4620      	mov	r0, r4
    18a6:	47b0      	blx	r6
    18a8:	f010 0f80 	tst.w	r0, #128	; 0x80
    18ac:	d0f8      	beq.n	18a0 <n25q256a_enable_xip+0x40>
    18ae:	e7e8      	b.n	1882 <n25q256a_enable_xip+0x22>
    18b0:	00001745 	.word	0x00001745
    18b4:	000016a1 	.word	0x000016a1
    18b8:	000017fd 	.word	0x000017fd

000018bc <n25q256a_write_enable>:
    18bc:	b530      	push	{r4, r5, lr}
    18be:	b08f      	sub	sp, #60	; 0x3c
    18c0:	6805      	ldr	r5, [r0, #0]
    18c2:	2a00      	cmp	r2, #0
    18c4:	bf14      	ite	ne
    18c6:	2206      	movne	r2, #6
    18c8:	2204      	moveq	r2, #4
    18ca:	2300      	movs	r3, #0
    18cc:	9307      	str	r3, [sp, #28]
    18ce:	9308      	str	r3, [sp, #32]
    18d0:	9309      	str	r3, [sp, #36]	; 0x24
    18d2:	930a      	str	r3, [sp, #40]	; 0x28
    18d4:	930b      	str	r3, [sp, #44]	; 0x2c
    18d6:	930c      	str	r3, [sp, #48]	; 0x30
    18d8:	f001 0107 	and.w	r1, r1, #7
    18dc:	f041 0010 	orr.w	r0, r1, #16
    18e0:	f88d 001c 	strb.w	r0, [sp, #28]
    18e4:	f88d 2020 	strb.w	r2, [sp, #32]
    18e8:	9301      	str	r3, [sp, #4]
    18ea:	9302      	str	r3, [sp, #8]
    18ec:	9303      	str	r3, [sp, #12]
    18ee:	9305      	str	r3, [sp, #20]
    18f0:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    18f4:	f88d 1004 	strb.w	r1, [sp, #4]
    18f8:	2305      	movs	r3, #5
    18fa:	f88d 3008 	strb.w	r3, [sp, #8]
    18fe:	2301      	movs	r3, #1
    1900:	9304      	str	r3, [sp, #16]
    1902:	f10d 0337 	add.w	r3, sp, #55	; 0x37
    1906:	9306      	str	r3, [sp, #24]
    1908:	4c06      	ldr	r4, [pc, #24]	; (1924 <n25q256a_write_enable+0x68>)
    190a:	a907      	add	r1, sp, #28
    190c:	4628      	mov	r0, r5
    190e:	47a0      	blx	r4
    1910:	a901      	add	r1, sp, #4
    1912:	4628      	mov	r0, r5
    1914:	47a0      	blx	r4
    1916:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    191a:	f013 0f02 	tst.w	r3, #2
    191e:	d0f4      	beq.n	190a <n25q256a_write_enable+0x4e>
    1920:	b00f      	add	sp, #60	; 0x3c
    1922:	bd30      	pop	{r4, r5, pc}
    1924:	00000c15 	.word	0x00000c15

00001928 <n25q256a_write>:
    1928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    192c:	b087      	sub	sp, #28
    192e:	4604      	mov	r4, r0
    1930:	4690      	mov	r8, r2
    1932:	461f      	mov	r7, r3
    1934:	f8d0 b000 	ldr.w	fp, [r0]
    1938:	2300      	movs	r3, #0
    193a:	9300      	str	r3, [sp, #0]
    193c:	9301      	str	r3, [sp, #4]
    193e:	9305      	str	r3, [sp, #20]
    1940:	2330      	movs	r3, #48	; 0x30
    1942:	f88d 3001 	strb.w	r3, [sp, #1]
    1946:	2302      	movs	r3, #2
    1948:	f88d 3004 	strb.w	r3, [sp, #4]
    194c:	9202      	str	r2, [sp, #8]
    194e:	9703      	str	r7, [sp, #12]
    1950:	9104      	str	r1, [sp, #16]
    1952:	7b03      	ldrb	r3, [r0, #12]
    1954:	2b00      	cmp	r3, #0
    1956:	bf14      	ite	ne
    1958:	2206      	movne	r2, #6
    195a:	2200      	moveq	r2, #0
    195c:	f06f 034f 	mvn.w	r3, #79	; 0x4f
    1960:	f362 0302 	bfi	r3, r2, #0, #3
    1964:	f88d 3000 	strb.w	r3, [sp]
    1968:	b357      	cbz	r7, 19c0 <n25q256a_write+0x98>
    196a:	f8df a074 	ldr.w	sl, [pc, #116]	; 19e0 <n25q256a_write+0xb8>
    196e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 19e4 <n25q256a_write+0xbc>
    1972:	4e19      	ldr	r6, [pc, #100]	; (19d8 <n25q256a_write+0xb0>)
    1974:	f8cd 8008 	str.w	r8, [sp, #8]
    1978:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    197c:	bf92      	itee	ls
    197e:	9703      	strls	r7, [sp, #12]
    1980:	f44f 7380 	movhi.w	r3, #256	; 0x100
    1984:	9303      	strhi	r3, [sp, #12]
    1986:	ad06      	add	r5, sp, #24
    1988:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    198c:	2201      	movs	r2, #1
    198e:	f001 0107 	and.w	r1, r1, #7
    1992:	4620      	mov	r0, r4
    1994:	47d0      	blx	sl
    1996:	4629      	mov	r1, r5
    1998:	4658      	mov	r0, fp
    199a:	47c8      	blx	r9
    199c:	2570      	movs	r5, #112	; 0x70
    199e:	f89d 1000 	ldrb.w	r1, [sp]
    19a2:	462a      	mov	r2, r5
    19a4:	f001 0107 	and.w	r1, r1, #7
    19a8:	4620      	mov	r0, r4
    19aa:	47b0      	blx	r6
    19ac:	f010 0f80 	tst.w	r0, #128	; 0x80
    19b0:	d0f5      	beq.n	199e <n25q256a_write+0x76>
    19b2:	9b03      	ldr	r3, [sp, #12]
    19b4:	9a04      	ldr	r2, [sp, #16]
    19b6:	441a      	add	r2, r3
    19b8:	9204      	str	r2, [sp, #16]
    19ba:	4498      	add	r8, r3
    19bc:	1aff      	subs	r7, r7, r3
    19be:	d1d9      	bne.n	1974 <n25q256a_write+0x4c>
    19c0:	7b63      	ldrb	r3, [r4, #13]
    19c2:	b91b      	cbnz	r3, 19cc <n25q256a_write+0xa4>
    19c4:	2000      	movs	r0, #0
    19c6:	b007      	add	sp, #28
    19c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    19cc:	2101      	movs	r1, #1
    19ce:	4620      	mov	r0, r4
    19d0:	4b02      	ldr	r3, [pc, #8]	; (19dc <n25q256a_write+0xb4>)
    19d2:	4798      	blx	r3
    19d4:	e7f6      	b.n	19c4 <n25q256a_write+0x9c>
    19d6:	bf00      	nop
    19d8:	00001745 	.word	0x00001745
    19dc:	000016a1 	.word	0x000016a1
    19e0:	000018bd 	.word	0x000018bd
    19e4:	00000c15 	.word	0x00000c15

000019e8 <n25q256a_erase>:
    19e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19ec:	b087      	sub	sp, #28
    19ee:	4688      	mov	r8, r1
    19f0:	4617      	mov	r7, r2
    19f2:	f8d0 9000 	ldr.w	r9, [r0]
    19f6:	2300      	movs	r3, #0
    19f8:	9300      	str	r3, [sp, #0]
    19fa:	9301      	str	r3, [sp, #4]
    19fc:	9302      	str	r3, [sp, #8]
    19fe:	9303      	str	r3, [sp, #12]
    1a00:	9304      	str	r3, [sp, #16]
    1a02:	9305      	str	r3, [sp, #20]
    1a04:	7b03      	ldrb	r3, [r0, #12]
    1a06:	2b00      	cmp	r3, #0
    1a08:	bf14      	ite	ne
    1a0a:	2106      	movne	r1, #6
    1a0c:	2100      	moveq	r1, #0
    1a0e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    1a12:	bf2c      	ite	cs
    1a14:	2200      	movcs	r2, #0
    1a16:	2201      	movcc	r2, #1
    1a18:	f041 0310 	orr.w	r3, r1, #16
    1a1c:	f362 1345 	bfi	r3, r2, #5, #1
    1a20:	f88d 3000 	strb.w	r3, [sp]
    1a24:	f04f 0300 	mov.w	r3, #0
    1a28:	2202      	movs	r2, #2
    1a2a:	f362 1305 	bfi	r3, r2, #4, #2
    1a2e:	f88d 3001 	strb.w	r3, [sp, #1]
    1a32:	ea47 0308 	orr.w	r3, r7, r8
    1a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d16f      	bne.n	1b1e <n25q256a_erase+0x136>
    1a3e:	4604      	mov	r4, r0
    1a40:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
    1a44:	d207      	bcs.n	1a56 <n25q256a_erase+0x6e>
    1a46:	2f00      	cmp	r7, #0
    1a48:	d052      	beq.n	1af0 <n25q256a_erase+0x108>
    1a4a:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 1b28 <n25q256a_erase+0x140>
    1a4e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 1b2c <n25q256a_erase+0x144>
    1a52:	4e34      	ldr	r6, [pc, #208]	; (1b24 <n25q256a_erase+0x13c>)
    1a54:	e02e      	b.n	1ab4 <n25q256a_erase+0xcc>
    1a56:	23c7      	movs	r3, #199	; 0xc7
    1a58:	f88d 3004 	strb.w	r3, [sp, #4]
    1a5c:	2201      	movs	r2, #1
    1a5e:	4b32      	ldr	r3, [pc, #200]	; (1b28 <n25q256a_erase+0x140>)
    1a60:	4798      	blx	r3
    1a62:	4669      	mov	r1, sp
    1a64:	4648      	mov	r0, r9
    1a66:	4b31      	ldr	r3, [pc, #196]	; (1b2c <n25q256a_erase+0x144>)
    1a68:	4798      	blx	r3
    1a6a:	2700      	movs	r7, #0
    1a6c:	e040      	b.n	1af0 <n25q256a_erase+0x108>
    1a6e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    1a72:	d33b      	bcc.n	1aec <n25q256a_erase+0x104>
    1a74:	f8cd 8008 	str.w	r8, [sp, #8]
    1a78:	2320      	movs	r3, #32
    1a7a:	f88d 3004 	strb.w	r3, [sp, #4]
    1a7e:	ad06      	add	r5, sp, #24
    1a80:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    1a84:	2201      	movs	r2, #1
    1a86:	f001 0107 	and.w	r1, r1, #7
    1a8a:	4620      	mov	r0, r4
    1a8c:	47d8      	blx	fp
    1a8e:	4629      	mov	r1, r5
    1a90:	4648      	mov	r0, r9
    1a92:	47d0      	blx	sl
    1a94:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
    1a98:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
    1a9c:	2570      	movs	r5, #112	; 0x70
    1a9e:	f89d 1000 	ldrb.w	r1, [sp]
    1aa2:	462a      	mov	r2, r5
    1aa4:	f001 0107 	and.w	r1, r1, #7
    1aa8:	4620      	mov	r0, r4
    1aaa:	47b0      	blx	r6
    1aac:	f010 0f80 	tst.w	r0, #128	; 0x80
    1ab0:	d0f5      	beq.n	1a9e <n25q256a_erase+0xb6>
    1ab2:	b1ef      	cbz	r7, 1af0 <n25q256a_erase+0x108>
    1ab4:	fa1f f388 	uxth.w	r3, r8
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d1d8      	bne.n	1a6e <n25q256a_erase+0x86>
    1abc:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    1ac0:	d3d5      	bcc.n	1a6e <n25q256a_erase+0x86>
    1ac2:	f8cd 8008 	str.w	r8, [sp, #8]
    1ac6:	23d8      	movs	r3, #216	; 0xd8
    1ac8:	f88d 3004 	strb.w	r3, [sp, #4]
    1acc:	ad06      	add	r5, sp, #24
    1ace:	f815 1d18 	ldrb.w	r1, [r5, #-24]!
    1ad2:	2201      	movs	r2, #1
    1ad4:	f001 0107 	and.w	r1, r1, #7
    1ad8:	4620      	mov	r0, r4
    1ada:	47d8      	blx	fp
    1adc:	4629      	mov	r1, r5
    1ade:	4648      	mov	r0, r9
    1ae0:	47d0      	blx	sl
    1ae2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
    1ae6:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
    1aea:	e7d7      	b.n	1a9c <n25q256a_erase+0xb4>
    1aec:	f06f 070c 	mvn.w	r7, #12
    1af0:	2670      	movs	r6, #112	; 0x70
    1af2:	4d0c      	ldr	r5, [pc, #48]	; (1b24 <n25q256a_erase+0x13c>)
    1af4:	f89d 1000 	ldrb.w	r1, [sp]
    1af8:	4632      	mov	r2, r6
    1afa:	f001 0107 	and.w	r1, r1, #7
    1afe:	4620      	mov	r0, r4
    1b00:	47a8      	blx	r5
    1b02:	f010 0f80 	tst.w	r0, #128	; 0x80
    1b06:	d0f5      	beq.n	1af4 <n25q256a_erase+0x10c>
    1b08:	7b63      	ldrb	r3, [r4, #13]
    1b0a:	b91b      	cbnz	r3, 1b14 <n25q256a_erase+0x12c>
    1b0c:	4638      	mov	r0, r7
    1b0e:	b007      	add	sp, #28
    1b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b14:	2101      	movs	r1, #1
    1b16:	4620      	mov	r0, r4
    1b18:	4b05      	ldr	r3, [pc, #20]	; (1b30 <n25q256a_erase+0x148>)
    1b1a:	4798      	blx	r3
    1b1c:	e7f6      	b.n	1b0c <n25q256a_erase+0x124>
    1b1e:	f06f 070c 	mvn.w	r7, #12
    1b22:	e7f3      	b.n	1b0c <n25q256a_erase+0x124>
    1b24:	00001745 	.word	0x00001745
    1b28:	000018bd 	.word	0x000018bd
    1b2c:	00000c15 	.word	0x00000c15
    1b30:	000016a1 	.word	0x000016a1

00001b34 <n25q256a_switch_mode>:
    1b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b36:	4604      	mov	r4, r0
    1b38:	460e      	mov	r6, r1
    1b3a:	7b05      	ldrb	r5, [r0, #12]
    1b3c:	2d00      	cmp	r5, #0
    1b3e:	bf18      	it	ne
    1b40:	2506      	movne	r5, #6
    1b42:	2265      	movs	r2, #101	; 0x65
    1b44:	4629      	mov	r1, r5
    1b46:	4b18      	ldr	r3, [pc, #96]	; (1ba8 <n25q256a_switch_mode+0x74>)
    1b48:	4798      	blx	r3
    1b4a:	7b23      	ldrb	r3, [r4, #12]
    1b4c:	42b3      	cmp	r3, r6
    1b4e:	d017      	beq.n	1b80 <n25q256a_switch_mode+0x4c>
    1b50:	4607      	mov	r7, r0
    1b52:	b1b6      	cbz	r6, 1b82 <n25q256a_switch_mode+0x4e>
    1b54:	f010 0f80 	tst.w	r0, #128	; 0x80
    1b58:	d012      	beq.n	1b80 <n25q256a_switch_mode+0x4c>
    1b5a:	7326      	strb	r6, [r4, #12]
    1b5c:	2201      	movs	r2, #1
    1b5e:	4629      	mov	r1, r5
    1b60:	4620      	mov	r0, r4
    1b62:	4b12      	ldr	r3, [pc, #72]	; (1bac <n25q256a_switch_mode+0x78>)
    1b64:	4798      	blx	r3
    1b66:	f007 031f 	and.w	r3, r7, #31
    1b6a:	2261      	movs	r2, #97	; 0x61
    1b6c:	4629      	mov	r1, r5
    1b6e:	4620      	mov	r0, r4
    1b70:	4d0f      	ldr	r5, [pc, #60]	; (1bb0 <n25q256a_switch_mode+0x7c>)
    1b72:	47a8      	blx	r5
    1b74:	2106      	movs	r1, #6
    1b76:	2265      	movs	r2, #101	; 0x65
    1b78:	4620      	mov	r0, r4
    1b7a:	4b0b      	ldr	r3, [pc, #44]	; (1ba8 <n25q256a_switch_mode+0x74>)
    1b7c:	4798      	blx	r3
    1b7e:	7326      	strb	r6, [r4, #12]
    1b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b82:	f010 0f80 	tst.w	r0, #128	; 0x80
    1b86:	d1fb      	bne.n	1b80 <n25q256a_switch_mode+0x4c>
    1b88:	7326      	strb	r6, [r4, #12]
    1b8a:	2201      	movs	r2, #1
    1b8c:	4629      	mov	r1, r5
    1b8e:	4620      	mov	r0, r4
    1b90:	4b06      	ldr	r3, [pc, #24]	; (1bac <n25q256a_switch_mode+0x78>)
    1b92:	4798      	blx	r3
    1b94:	f047 03c0 	orr.w	r3, r7, #192	; 0xc0
    1b98:	2261      	movs	r2, #97	; 0x61
    1b9a:	4629      	mov	r1, r5
    1b9c:	4620      	mov	r0, r4
    1b9e:	4d04      	ldr	r5, [pc, #16]	; (1bb0 <n25q256a_switch_mode+0x7c>)
    1ba0:	47a8      	blx	r5
    1ba2:	4631      	mov	r1, r6
    1ba4:	e7e7      	b.n	1b76 <n25q256a_switch_mode+0x42>
    1ba6:	bf00      	nop
    1ba8:	00001745 	.word	0x00001745
    1bac:	000018bd 	.word	0x000018bd
    1bb0:	000017fd 	.word	0x000017fd

00001bb4 <n25q256a_construct>:
    1bb4:	b570      	push	{r4, r5, r6, lr}
    1bb6:	4604      	mov	r4, r0
    1bb8:	4616      	mov	r6, r2
    1bba:	461d      	mov	r5, r3
    1bbc:	4a06      	ldr	r2, [pc, #24]	; (1bd8 <n25q256a_construct+0x24>)
    1bbe:	4b07      	ldr	r3, [pc, #28]	; (1bdc <n25q256a_construct+0x28>)
    1bc0:	4798      	blx	r3
    1bc2:	2300      	movs	r3, #0
    1bc4:	7323      	strb	r3, [r4, #12]
    1bc6:	7363      	strb	r3, [r4, #13]
    1bc8:	60a6      	str	r6, [r4, #8]
    1bca:	4629      	mov	r1, r5
    1bcc:	4620      	mov	r0, r4
    1bce:	4b04      	ldr	r3, [pc, #16]	; (1be0 <n25q256a_construct+0x2c>)
    1bd0:	4798      	blx	r3
    1bd2:	4620      	mov	r0, r4
    1bd4:	bd70      	pop	{r4, r5, r6, pc}
    1bd6:	bf00      	nop
    1bd8:	00001ef8 	.word	0x00001ef8
    1bdc:	00001be5 	.word	0x00001be5
    1be0:	00001b35 	.word	0x00001b35

00001be4 <spi_nor_flash_construct>:
    1be4:	6001      	str	r1, [r0, #0]
    1be6:	6042      	str	r2, [r0, #4]
    1be8:	4770      	bx	lr

00001bea <spi_nor_flash_read>:
    1bea:	b510      	push	{r4, lr}
    1bec:	6844      	ldr	r4, [r0, #4]
    1bee:	6824      	ldr	r4, [r4, #0]
    1bf0:	47a0      	blx	r4
    1bf2:	bd10      	pop	{r4, pc}

00001bf4 <QUAD_SPI_0_exit_xip>:
static struct n25q256a SPI_NOR_FLASH_0_descr;

struct spi_nor_flash *SPI_NOR_FLASH_0;

void QUAD_SPI_0_exit_xip(void)
{
    1bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1bf8:	4b33      	ldr	r3, [pc, #204]	; (1cc8 <QUAD_SPI_0_exit_xip+0xd4>)
    1bfa:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
    1bfe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1c02:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c0a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1c0e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c16:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1c1e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c22:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c26:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1c2a:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c2e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c32:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1c3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c3e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1c42:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1c46:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1c4a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c4e:	f44f 7480 	mov.w	r4, #256	; 0x100
    1c52:	609c      	str	r4, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c54:	4a1d      	ldr	r2, [pc, #116]	; (1ccc <QUAD_SPI_0_exit_xip+0xd8>)
    1c56:	629a      	str	r2, [r3, #40]	; 0x28
    1c58:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1c5c:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1c62:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c66:	491a      	ldr	r1, [pc, #104]	; (1cd0 <QUAD_SPI_0_exit_xip+0xdc>)
    1c68:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1c6c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1c74:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c78:	4d16      	ldr	r5, [pc, #88]	; (1cd4 <QUAD_SPI_0_exit_xip+0xe0>)
    1c7a:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
    1c7e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c82:	619c      	str	r4, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c84:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    1c88:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94

	gpio_set_pin_level(PA08, true);
	gpio_set_pin_level(PB11, false);
	gpio_set_pin_level(PB10, false);

	delay_us(1);
    1c8c:	2001      	movs	r0, #1
    1c8e:	4b12      	ldr	r3, [pc, #72]	; (1cd8 <QUAD_SPI_0_exit_xip+0xe4>)
    1c90:	4798      	blx	r3
    1c92:	2407      	movs	r4, #7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c94:	4e0c      	ldr	r6, [pc, #48]	; (1cc8 <QUAD_SPI_0_exit_xip+0xd4>)
    1c96:	f44f 6780 	mov.w	r7, #1024	; 0x400
    1c9a:	46b8      	mov	r8, r7
    1c9c:	f8c6 8098 	str.w	r8, [r6, #152]	; 0x98

	for (int i = 0; i < 7; i++) {
		gpio_set_pin_level(PB10, true);
		delay_us(1);
    1ca0:	2001      	movs	r0, #1
    1ca2:	4d0d      	ldr	r5, [pc, #52]	; (1cd8 <QUAD_SPI_0_exit_xip+0xe4>)
    1ca4:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ca6:	f8c6 7094 	str.w	r7, [r6, #148]	; 0x94
		gpio_set_pin_level(PB10, false);
		delay_us(1);
    1caa:	2001      	movs	r0, #1
    1cac:	47a8      	blx	r5
	for (int i = 0; i < 7; i++) {
    1cae:	3c01      	subs	r4, #1
    1cb0:	d1f4      	bne.n	1c9c <QUAD_SPI_0_exit_xip+0xa8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1cb6:	4b04      	ldr	r3, [pc, #16]	; (1cc8 <QUAD_SPI_0_exit_xip+0xd4>)
    1cb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	}

	gpio_set_pin_level(PB11, true);
	delay_us(1);
    1cbc:	2001      	movs	r0, #1
    1cbe:	47a8      	blx	r5
	QUAD_SPI_0_PORT_init();
    1cc0:	4b06      	ldr	r3, [pc, #24]	; (1cdc <QUAD_SPI_0_exit_xip+0xe8>)
    1cc2:	4798      	blx	r3
    1cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cc8:	41008000 	.word	0x41008000
    1ccc:	40000100 	.word	0x40000100
    1cd0:	40000800 	.word	0x40000800
    1cd4:	40000400 	.word	0x40000400
    1cd8:	00000899 	.word	0x00000899
    1cdc:	0000050d 	.word	0x0000050d

00001ce0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    1ce0:	b510      	push	{r4, lr}

	qspi_sync_enable(&QUAD_SPI_0);
    1ce2:	4c06      	ldr	r4, [pc, #24]	; (1cfc <spi_nor_flash_init+0x1c>)
    1ce4:	4620      	mov	r0, r4
    1ce6:	4b06      	ldr	r3, [pc, #24]	; (1d00 <spi_nor_flash_init+0x20>)
    1ce8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = n25q256a_construct(
    1cea:	2300      	movs	r3, #0
    1cec:	4a05      	ldr	r2, [pc, #20]	; (1d04 <spi_nor_flash_init+0x24>)
    1cee:	4621      	mov	r1, r4
    1cf0:	4805      	ldr	r0, [pc, #20]	; (1d08 <spi_nor_flash_init+0x28>)
    1cf2:	4c06      	ldr	r4, [pc, #24]	; (1d0c <spi_nor_flash_init+0x2c>)
    1cf4:	47a0      	blx	r4
    1cf6:	4b06      	ldr	r3, [pc, #24]	; (1d10 <spi_nor_flash_init+0x30>)
    1cf8:	6018      	str	r0, [r3, #0]
    1cfa:	bd10      	pop	{r4, pc}
    1cfc:	20000074 	.word	0x20000074
    1d00:	00000bc5 	.word	0x00000bc5
    1d04:	00001bf5 	.word	0x00001bf5
    1d08:	20000044 	.word	0x20000044
    1d0c:	00001bb5 	.word	0x00001bb5
    1d10:	200000b0 	.word	0x200000b0

00001d14 <__libc_init_array>:
    1d14:	b570      	push	{r4, r5, r6, lr}
    1d16:	4e0d      	ldr	r6, [pc, #52]	; (1d4c <__libc_init_array+0x38>)
    1d18:	4c0d      	ldr	r4, [pc, #52]	; (1d50 <__libc_init_array+0x3c>)
    1d1a:	1ba4      	subs	r4, r4, r6
    1d1c:	10a4      	asrs	r4, r4, #2
    1d1e:	2500      	movs	r5, #0
    1d20:	42a5      	cmp	r5, r4
    1d22:	d109      	bne.n	1d38 <__libc_init_array+0x24>
    1d24:	4e0b      	ldr	r6, [pc, #44]	; (1d54 <__libc_init_array+0x40>)
    1d26:	4c0c      	ldr	r4, [pc, #48]	; (1d58 <__libc_init_array+0x44>)
    1d28:	f000 f8f0 	bl	1f0c <_init>
    1d2c:	1ba4      	subs	r4, r4, r6
    1d2e:	10a4      	asrs	r4, r4, #2
    1d30:	2500      	movs	r5, #0
    1d32:	42a5      	cmp	r5, r4
    1d34:	d105      	bne.n	1d42 <__libc_init_array+0x2e>
    1d36:	bd70      	pop	{r4, r5, r6, pc}
    1d38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1d3c:	4798      	blx	r3
    1d3e:	3501      	adds	r5, #1
    1d40:	e7ee      	b.n	1d20 <__libc_init_array+0xc>
    1d42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1d46:	4798      	blx	r3
    1d48:	3501      	adds	r5, #1
    1d4a:	e7f2      	b.n	1d32 <__libc_init_array+0x1e>
    1d4c:	00001f18 	.word	0x00001f18
    1d50:	00001f18 	.word	0x00001f18
    1d54:	00001f18 	.word	0x00001f18
    1d58:	00001f1c 	.word	0x00001f1c
    1d5c:	682f2e2e 	.word	0x682f2e2e
    1d60:	692f6c61 	.word	0x692f6c61
    1d64:	756c636e 	.word	0x756c636e
    1d68:	682f6564 	.word	0x682f6564
    1d6c:	775f6c61 	.word	0x775f6c61
    1d70:	682e7464 	.word	0x682e7464
    1d74:	00000000 	.word	0x00000000
    1d78:	682f2e2e 	.word	0x682f2e2e
    1d7c:	732f6c61 	.word	0x732f6c61
    1d80:	682f6372 	.word	0x682f6372
    1d84:	665f6c61 	.word	0x665f6c61
    1d88:	6873616c 	.word	0x6873616c
    1d8c:	0000632e 	.word	0x0000632e
    1d90:	682f2e2e 	.word	0x682f2e2e
    1d94:	732f6c61 	.word	0x732f6c61
    1d98:	682f6372 	.word	0x682f6372
    1d9c:	695f6c61 	.word	0x695f6c61
    1da0:	735f6332 	.word	0x735f6332
    1da4:	6e79735f 	.word	0x6e79735f
    1da8:	00632e63 	.word	0x00632e63
    1dac:	682f2e2e 	.word	0x682f2e2e
    1db0:	732f6c61 	.word	0x732f6c61
    1db4:	682f6372 	.word	0x682f6372
    1db8:	695f6c61 	.word	0x695f6c61
    1dbc:	00632e6f 	.word	0x00632e6f
    1dc0:	682f2e2e 	.word	0x682f2e2e
    1dc4:	732f6c61 	.word	0x732f6c61
    1dc8:	682f6372 	.word	0x682f6372
    1dcc:	715f6c61 	.word	0x715f6c61
    1dd0:	5f697073 	.word	0x5f697073
    1dd4:	636e7973 	.word	0x636e7973
    1dd8:	0000632e 	.word	0x0000632e
    1ddc:	682f2e2e 	.word	0x682f2e2e
    1de0:	732f6c61 	.word	0x732f6c61
    1de4:	682f6372 	.word	0x682f6372
    1de8:	745f6c61 	.word	0x745f6c61
    1dec:	72656d69 	.word	0x72656d69
    1df0:	0000632e 	.word	0x0000632e
    1df4:	682f2e2e 	.word	0x682f2e2e
    1df8:	752f6c61 	.word	0x752f6c61
    1dfc:	736c6974 	.word	0x736c6974
    1e00:	6372732f 	.word	0x6372732f
    1e04:	6974752f 	.word	0x6974752f
    1e08:	6c5f736c 	.word	0x6c5f736c
    1e0c:	2e747369 	.word	0x2e747369
    1e10:	00000063 	.word	0x00000063

00001e14 <_map>:
    1e14:	00000005 00000005 00000006 00000006     ................
    1e24:	00000007 00000007 682f2e2e 652f6c70     ........../hpl/e
    1e34:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    1e44:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    1e54:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    1e64:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    1e74:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    1e84:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    1e94:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    1ea4:	43000000 43000400                       ...C...C

00001eac <_i2cms>:
	...
    1ec4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1ed4:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    1ee4:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    1ef4:	00000000                                ....

00001ef8 <n25q256a_interface>:
    1ef8:	00001621 00001929 000019e9 00001861     !...).......a...
    1f08:	000017a1                                ....

00001f0c <_init>:
    1f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f0e:	bf00      	nop
    1f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f12:	bc08      	pop	{r3}
    1f14:	469e      	mov	lr, r3
    1f16:	4770      	bx	lr

00001f18 <__init_array_start>:
    1f18:	00000289 	.word	0x00000289

00001f1c <_fini>:
    1f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f1e:	bf00      	nop
    1f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f22:	bc08      	pop	{r3}
    1f24:	469e      	mov	lr, r3
    1f26:	4770      	bx	lr

00001f28 <__fini_array_start>:
    1f28:	00000265 	.word	0x00000265
