
fb_atmel_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002070  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00012070  2**0
                  CONTENTS
  2 .bkupram      00000000  47000000  47000000  00012070  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00012070  2**0
                  CONTENTS
  4 .bss          000000b4  20000000  20000000  00020000  2**2
                  ALLOC
  5 .stack        0000c004  200000b4  200000b4  00020000  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00012070  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0001209e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002f3f1  00000000  00000000  000120f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000436e  00000000  00000000  000414e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010114  00000000  00000000  00045856  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d10  00000000  00000000  0005596a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001108  00000000  00000000  0005667a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002bbb5  00000000  00000000  00057782  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00018cc6  00000000  00000000  00083337  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e4dc7  00000000  00000000  0009bffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002260  00000000  00000000  00180dc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 c0 00 20 05 03 00 00 f5 02 00 00 e5 02 00 00     ... ............
      10:	f5 02 00 00 f5 02 00 00 f5 02 00 00 00 00 00 00     ................
	...
      2c:	f5 02 00 00 f5 02 00 00 00 00 00 00 f5 02 00 00     ................
      3c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      4c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      5c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      6c:	05 13 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      7c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      8c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      9c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      ac:	f5 02 00 00 f5 02 00 00 89 10 00 00 9d 10 00 00     ................
      bc:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      cc:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      dc:	f5 02 00 00 f5 02 00 00 f5 02 00 00 00 00 00 00     ................
	...
      f4:	55 12 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     U...............
     104:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     114:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     124:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     134:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     144:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     154:	f5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     190:	00 00 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1a0:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1b0:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1c0:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1d0:	f5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
	...
     20c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     21c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     22c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     23c:	f5 02 00 00 00 00 00 00 f5 02 00 00 f5 02 00 00     ................
     24c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     25c:	f5 02 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000000 	.word	0x20000000
     280:	00000000 	.word	0x00000000
     284:	00002070 	.word	0x00002070

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002070 	.word	0x00002070
     2c4:	20000004 	.word	0x20000004
     2c8:	00002070 	.word	0x00002070
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
#include "driver_init.h"
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	SWD_GPIO_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000785 	.word	0x00000785
     2e0:	000007f1 	.word	0x000007f1

000002e4 <__HardFault_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void __HardFault_Handler(void)
{		volatile int c = 1;
     2e4:	b082      	sub	sp, #8
     2e6:	2301      	movs	r3, #1
     2e8:	9301      	str	r3, [sp, #4]
        while (c==1) {
     2ea:	9b01      	ldr	r3, [sp, #4]
     2ec:	2b01      	cmp	r3, #1
     2ee:	d0fc      	beq.n	2ea <__HardFault_Handler+0x6>
        }
}
     2f0:	b002      	add	sp, #8
     2f2:	4770      	bx	lr

000002f4 <Dummy_Handler>:
void Dummy_Handler(void)
{		volatile int c = 1;
     2f4:	b082      	sub	sp, #8
     2f6:	2301      	movs	r3, #1
     2f8:	9301      	str	r3, [sp, #4]
        while (c==1) {
     2fa:	9b01      	ldr	r3, [sp, #4]
     2fc:	2b01      	cmp	r3, #1
     2fe:	d0fc      	beq.n	2fa <Dummy_Handler+0x6>
        }
}
     300:	b002      	add	sp, #8
     302:	4770      	bx	lr

00000304 <Reset_Handler>:
{
     304:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     306:	4b1c      	ldr	r3, [pc, #112]	; (378 <Reset_Handler+0x74>)
     308:	4a1c      	ldr	r2, [pc, #112]	; (37c <Reset_Handler+0x78>)
     30a:	429a      	cmp	r2, r3
     30c:	d010      	beq.n	330 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     30e:	4b1c      	ldr	r3, [pc, #112]	; (380 <Reset_Handler+0x7c>)
     310:	4a19      	ldr	r2, [pc, #100]	; (378 <Reset_Handler+0x74>)
     312:	429a      	cmp	r2, r3
     314:	d20c      	bcs.n	330 <Reset_Handler+0x2c>
     316:	3b01      	subs	r3, #1
     318:	1a9b      	subs	r3, r3, r2
     31a:	f023 0303 	bic.w	r3, r3, #3
     31e:	3304      	adds	r3, #4
     320:	4413      	add	r3, r2
     322:	4916      	ldr	r1, [pc, #88]	; (37c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     324:	f851 0b04 	ldr.w	r0, [r1], #4
     328:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     32c:	429a      	cmp	r2, r3
     32e:	d1f9      	bne.n	324 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     330:	4b14      	ldr	r3, [pc, #80]	; (384 <Reset_Handler+0x80>)
     332:	4a15      	ldr	r2, [pc, #84]	; (388 <Reset_Handler+0x84>)
     334:	429a      	cmp	r2, r3
     336:	d20a      	bcs.n	34e <Reset_Handler+0x4a>
     338:	3b01      	subs	r3, #1
     33a:	1a9b      	subs	r3, r3, r2
     33c:	f023 0303 	bic.w	r3, r3, #3
     340:	3304      	adds	r3, #4
     342:	4413      	add	r3, r2
                *pDest++ = 0;
     344:	2100      	movs	r1, #0
     346:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     34a:	4293      	cmp	r3, r2
     34c:	d1fb      	bne.n	346 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     34e:	4b0f      	ldr	r3, [pc, #60]	; (38c <Reset_Handler+0x88>)
     350:	4a0f      	ldr	r2, [pc, #60]	; (390 <Reset_Handler+0x8c>)
     352:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     356:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     358:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     35c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     368:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     36c:	4b09      	ldr	r3, [pc, #36]	; (394 <Reset_Handler+0x90>)
     36e:	4798      	blx	r3
        main();
     370:	4b09      	ldr	r3, [pc, #36]	; (398 <Reset_Handler+0x94>)
     372:	4798      	blx	r3
     374:	e7fe      	b.n	374 <Reset_Handler+0x70>
     376:	bf00      	nop
     378:	20000000 	.word	0x20000000
     37c:	00002070 	.word	0x00002070
     380:	20000000 	.word	0x20000000
     384:	200000b4 	.word	0x200000b4
     388:	20000000 	.word	0x20000000
     38c:	e000ed00 	.word	0xe000ed00
     390:	00000000 	.word	0x00000000
     394:	00001e5d 	.word	0x00001e5d
     398:	00001785 	.word	0x00001785

0000039c <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     39c:	4a02      	ldr	r2, [pc, #8]	; (3a8 <FLASH_0_CLOCK_init+0xc>)
     39e:	6913      	ldr	r3, [r2, #16]
     3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     3a4:	6113      	str	r3, [r2, #16]
     3a6:	4770      	bx	lr
     3a8:	40000800 	.word	0x40000800

000003ac <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     3ac:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     3ae:	4b03      	ldr	r3, [pc, #12]	; (3bc <FLASH_0_init+0x10>)
     3b0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     3b2:	4903      	ldr	r1, [pc, #12]	; (3c0 <FLASH_0_init+0x14>)
     3b4:	4803      	ldr	r0, [pc, #12]	; (3c4 <FLASH_0_init+0x18>)
     3b6:	4b04      	ldr	r3, [pc, #16]	; (3c8 <FLASH_0_init+0x1c>)
     3b8:	4798      	blx	r3
     3ba:	bd08      	pop	{r3, pc}
     3bc:	0000039d 	.word	0x0000039d
     3c0:	41004000 	.word	0x41004000
     3c4:	20000030 	.word	0x20000030
     3c8:	000009bd 	.word	0x000009bd

000003cc <QUAD_SPI_0_PORT_init>:
}

void QUAD_SPI_0_PORT_init(void)
{
     3cc:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ce:	4b5a      	ldr	r3, [pc, #360]	; (538 <QUAD_SPI_0_PORT_init+0x16c>)
     3d0:	f44f 6500 	mov.w	r5, #2048	; 0x800
     3d4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d8:	4a58      	ldr	r2, [pc, #352]	; (53c <QUAD_SPI_0_PORT_init+0x170>)
     3da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3de:	4858      	ldr	r0, [pc, #352]	; (540 <QUAD_SPI_0_PORT_init+0x174>)
     3e0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3e4:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     3e8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3ec:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f0:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fc:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     400:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     404:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     408:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     40c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     410:	f44f 7280 	mov.w	r2, #256	; 0x100
     414:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     416:	494b      	ldr	r1, [pc, #300]	; (544 <QUAD_SPI_0_PORT_init+0x178>)
     418:	6299      	str	r1, [r3, #40]	; 0x28
     41a:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     41e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     420:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     422:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     426:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     42a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     432:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     436:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     43a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     43e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     442:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     446:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44e:	f44f 7200 	mov.w	r2, #512	; 0x200
     452:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     454:	f501 7180 	add.w	r1, r1, #256	; 0x100
     458:	6299      	str	r1, [r3, #40]	; 0x28
     45a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     45c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     45e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     462:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     466:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     472:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     476:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     47a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     47e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     482:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     48a:	f44f 6180 	mov.w	r1, #1024	; 0x400
     48e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     490:	4a2d      	ldr	r2, [pc, #180]	; (548 <QUAD_SPI_0_PORT_init+0x17c>)
     492:	629a      	str	r2, [r3, #40]	; 0x28
     494:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     496:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     498:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     49c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4a0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a4:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ac:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4b8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4bc:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4c4:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c6:	4a21      	ldr	r2, [pc, #132]	; (54c <QUAD_SPI_0_PORT_init+0x180>)
     4c8:	629a      	str	r2, [r3, #40]	; 0x28
     4ca:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4cc:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4ce:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     4d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4d6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4da:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     4de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ea:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4f2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4fa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4fe:	4a14      	ldr	r2, [pc, #80]	; (550 <QUAD_SPI_0_PORT_init+0x184>)
     500:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     504:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     508:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     50c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     510:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     514:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     51c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     520:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     524:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     528:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     52c:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     530:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     534:	bc30      	pop	{r4, r5}
     536:	4770      	bx	lr
     538:	41008000 	.word	0x41008000
     53c:	40020800 	.word	0x40020800
     540:	c0020000 	.word	0xc0020000
     544:	40000100 	.word	0x40000100
     548:	40000400 	.word	0x40000400
     54c:	40000800 	.word	0x40000800
     550:	40020400 	.word	0x40020400

00000554 <QUAD_SPI_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     554:	4b06      	ldr	r3, [pc, #24]	; (570 <QUAD_SPI_0_CLOCK_init+0x1c>)
     556:	691a      	ldr	r2, [r3, #16]
     558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     55c:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     55e:	691a      	ldr	r2, [r3, #16]
     560:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     564:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     566:	69da      	ldr	r2, [r3, #28]
     568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     56c:	61da      	str	r2, [r3, #28]
     56e:	4770      	bx	lr
     570:	40000800 	.word	0x40000800

00000574 <QUAD_SPI_0_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QUAD_SPI_0_init(void)
{
     574:	b508      	push	{r3, lr}
	QUAD_SPI_0_CLOCK_init();
     576:	4b04      	ldr	r3, [pc, #16]	; (588 <QUAD_SPI_0_init+0x14>)
     578:	4798      	blx	r3
	qspi_sync_init(&QUAD_SPI_0, QSPI);
     57a:	4904      	ldr	r1, [pc, #16]	; (58c <QUAD_SPI_0_init+0x18>)
     57c:	4804      	ldr	r0, [pc, #16]	; (590 <QUAD_SPI_0_init+0x1c>)
     57e:	4b05      	ldr	r3, [pc, #20]	; (594 <QUAD_SPI_0_init+0x20>)
     580:	4798      	blx	r3
	QUAD_SPI_0_PORT_init();
     582:	4b05      	ldr	r3, [pc, #20]	; (598 <QUAD_SPI_0_init+0x24>)
     584:	4798      	blx	r3
     586:	bd08      	pop	{r3, pc}
     588:	00000555 	.word	0x00000555
     58c:	42003400 	.word	0x42003400
     590:	20000068 	.word	0x20000068
     594:	00000c19 	.word	0x00000c19
     598:	000003cd 	.word	0x000003cd

0000059c <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     59c:	4b28      	ldr	r3, [pc, #160]	; (640 <SPI_0_PORT_init+0xa4>)
     59e:	2210      	movs	r2, #16
     5a0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5a2:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5a8:	629a      	str	r2, [r3, #40]	; 0x28
     5aa:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     5ae:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5d0:	2220      	movs	r2, #32
     5d2:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5da:	629a      	str	r2, [r3, #40]	; 0x28
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ee:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5f2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5f6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5fe:	2240      	movs	r2, #64	; 0x40
     600:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     602:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     606:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     60a:	629a      	str	r2, [r3, #40]	; 0x28
     60c:	4a0d      	ldr	r2, [pc, #52]	; (644 <SPI_0_PORT_init+0xa8>)
     60e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     610:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     614:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     61c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     624:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     62c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     630:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     634:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     638:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     63c:	4770      	bx	lr
     63e:	bf00      	nop
     640:	41008000 	.word	0x41008000
     644:	c0020000 	.word	0xc0020000

00000648 <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     648:	4b06      	ldr	r3, [pc, #24]	; (664 <SPI_0_CLOCK_init+0x1c>)
     64a:	2240      	movs	r2, #64	; 0x40
     64c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     650:	2243      	movs	r2, #67	; 0x43
     652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     656:	4a04      	ldr	r2, [pc, #16]	; (668 <SPI_0_CLOCK_init+0x20>)
     658:	6953      	ldr	r3, [r2, #20]
     65a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     65e:	6153      	str	r3, [r2, #20]
     660:	4770      	bx	lr
     662:	bf00      	nop
     664:	40001c00 	.word	0x40001c00
     668:	40000800 	.word	0x40000800

0000066c <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     66c:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     66e:	4b04      	ldr	r3, [pc, #16]	; (680 <SPI_0_init+0x14>)
     670:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     672:	4904      	ldr	r1, [pc, #16]	; (684 <SPI_0_init+0x18>)
     674:	4804      	ldr	r0, [pc, #16]	; (688 <SPI_0_init+0x1c>)
     676:	4b05      	ldr	r3, [pc, #20]	; (68c <SPI_0_init+0x20>)
     678:	4798      	blx	r3
	SPI_0_PORT_init();
     67a:	4b05      	ldr	r3, [pc, #20]	; (690 <SPI_0_init+0x24>)
     67c:	4798      	blx	r3
     67e:	bd08      	pop	{r3, pc}
     680:	00000649 	.word	0x00000649
     684:	40003000 	.word	0x40003000
     688:	20000050 	.word	0x20000050
     68c:	00000ca1 	.word	0x00000ca1
     690:	0000059d 	.word	0x0000059d

00000694 <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     694:	4b16      	ldr	r3, [pc, #88]	; (6f0 <I2C_0_PORT_init+0x5c>)
     696:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     69a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     69e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6a2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     6a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6b2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ba:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6c2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     6c6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ce:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     6d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6de:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6e6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     6ee:	4770      	bx	lr
     6f0:	41008000 	.word	0x41008000

000006f4 <I2C_0_CLOCK_init>:
     6f4:	4b06      	ldr	r3, [pc, #24]	; (710 <I2C_0_CLOCK_init+0x1c>)
     6f6:	2240      	movs	r2, #64	; 0x40
     6f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     6fc:	2243      	movs	r2, #67	; 0x43
     6fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     702:	4a04      	ldr	r2, [pc, #16]	; (714 <I2C_0_CLOCK_init+0x20>)
     704:	6993      	ldr	r3, [r2, #24]
     706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     70a:	6193      	str	r3, [r2, #24]
     70c:	4770      	bx	lr
     70e:	bf00      	nop
     710:	40001c00 	.word	0x40001c00
     714:	40000800 	.word	0x40000800

00000718 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     718:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     71a:	4b04      	ldr	r3, [pc, #16]	; (72c <I2C_0_init+0x14>)
     71c:	4798      	blx	r3
	i2c_s_sync_init(&I2C_0, SERCOM3);
     71e:	4904      	ldr	r1, [pc, #16]	; (730 <I2C_0_init+0x18>)
     720:	4804      	ldr	r0, [pc, #16]	; (734 <I2C_0_init+0x1c>)
     722:	4b05      	ldr	r3, [pc, #20]	; (738 <I2C_0_init+0x20>)
     724:	4798      	blx	r3
	I2C_0_PORT_init();
     726:	4b05      	ldr	r3, [pc, #20]	; (73c <I2C_0_init+0x24>)
     728:	4798      	blx	r3
     72a:	bd08      	pop	{r3, pc}
     72c:	000006f5 	.word	0x000006f5
     730:	41014000 	.word	0x41014000
     734:	2000006c 	.word	0x2000006c
     738:	00000ad9 	.word	0x00000ad9
     73c:	00000695 	.word	0x00000695

00000740 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     740:	4a02      	ldr	r2, [pc, #8]	; (74c <WDT_0_CLOCK_init+0xc>)
     742:	6953      	ldr	r3, [r2, #20]
     744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     748:	6153      	str	r3, [r2, #20]
     74a:	4770      	bx	lr
     74c:	40000800 	.word	0x40000800

00000750 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     750:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     752:	4b06      	ldr	r3, [pc, #24]	; (76c <WDT_0_init+0x1c>)
     754:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     756:	2248      	movs	r2, #72	; 0x48
     758:	4905      	ldr	r1, [pc, #20]	; (770 <WDT_0_init+0x20>)
     75a:	2001      	movs	r0, #1
     75c:	4b05      	ldr	r3, [pc, #20]	; (774 <WDT_0_init+0x24>)
     75e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     760:	4805      	ldr	r0, [pc, #20]	; (778 <WDT_0_init+0x28>)
     762:	4b06      	ldr	r3, [pc, #24]	; (77c <WDT_0_init+0x2c>)
     764:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     766:	4b06      	ldr	r3, [pc, #24]	; (780 <WDT_0_init+0x30>)
     768:	4798      	blx	r3
     76a:	bd08      	pop	{r3, pc}
     76c:	00000741 	.word	0x00000741
     770:	00001ea4 	.word	0x00001ea4
     774:	00000f11 	.word	0x00000f11
     778:	2000004c 	.word	0x2000004c
     77c:	40002000 	.word	0x40002000
     780:	00001719 	.word	0x00001719

00000784 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     784:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     786:	4b0b      	ldr	r3, [pc, #44]	; (7b4 <system_init+0x30>)
     788:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     78a:	4b0b      	ldr	r3, [pc, #44]	; (7b8 <system_init+0x34>)
     78c:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     78e:	4a0b      	ldr	r2, [pc, #44]	; (7bc <system_init+0x38>)
     790:	6953      	ldr	r3, [r2, #20]
     792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     796:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     798:	4b09      	ldr	r3, [pc, #36]	; (7c0 <system_init+0x3c>)
     79a:	4798      	blx	r3
     79c:	4602      	mov	r2, r0
     79e:	4909      	ldr	r1, [pc, #36]	; (7c4 <system_init+0x40>)
     7a0:	4809      	ldr	r0, [pc, #36]	; (7c8 <system_init+0x44>)
     7a2:	4b0a      	ldr	r3, [pc, #40]	; (7cc <system_init+0x48>)
     7a4:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     7a6:	4b0a      	ldr	r3, [pc, #40]	; (7d0 <system_init+0x4c>)
     7a8:	4798      	blx	r3

	I2C_0_init();
     7aa:	4b0a      	ldr	r3, [pc, #40]	; (7d4 <system_init+0x50>)
     7ac:	4798      	blx	r3

	WDT_0_init();
     7ae:	4b0a      	ldr	r3, [pc, #40]	; (7d8 <system_init+0x54>)
     7b0:	4798      	blx	r3
     7b2:	bd08      	pop	{r3, pc}
     7b4:	00000f79 	.word	0x00000f79
     7b8:	000003ad 	.word	0x000003ad
     7bc:	40000800 	.word	0x40000800
     7c0:	00001301 	.word	0x00001301
     7c4:	40002400 	.word	0x40002400
     7c8:	20000078 	.word	0x20000078
     7cc:	00000ed5 	.word	0x00000ed5
     7d0:	0000066d 	.word	0x0000066d
     7d4:	00000719 	.word	0x00000719
     7d8:	00000751 	.word	0x00000751

000007dc <nor_flash_qspi_init>:
}


void nor_flash_qspi_init(void)
{
     7dc:	b508      	push	{r3, lr}
	QUAD_SPI_0_init();
     7de:	4b02      	ldr	r3, [pc, #8]	; (7e8 <nor_flash_qspi_init+0xc>)
     7e0:	4798      	blx	r3
	spi_nor_flash_init();
     7e2:	4b02      	ldr	r3, [pc, #8]	; (7ec <nor_flash_qspi_init+0x10>)
     7e4:	4798      	blx	r3
     7e6:	bd08      	pop	{r3, pc}
     7e8:	00000575 	.word	0x00000575
     7ec:	00001d79 	.word	0x00001d79

000007f0 <SWD_GPIO_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7f0:	4b1e      	ldr	r3, [pc, #120]	; (86c <SWD_GPIO_init+0x7c>)
     7f2:	2101      	movs	r1, #1
     7f4:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7f6:	4a1e      	ldr	r2, [pc, #120]	; (870 <SWD_GPIO_init+0x80>)
     7f8:	629a      	str	r2, [r3, #40]	; 0x28
     7fa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7fe:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     800:	6199      	str	r1, [r3, #24]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     802:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
     806:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     80a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     80e:	2102      	movs	r1, #2
     810:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     812:	4818      	ldr	r0, [pc, #96]	; (874 <SWD_GPIO_init+0x84>)
     814:	6298      	str	r0, [r3, #40]	; 0x28
     816:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     818:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     81a:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
     81e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     822:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     826:	2108      	movs	r1, #8
     828:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     82c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     830:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     834:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     838:	490f      	ldr	r1, [pc, #60]	; (878 <SWD_GPIO_init+0x88>)
     83a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     83e:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
     842:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     846:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     84a:	2104      	movs	r1, #4
     84c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     850:	3002      	adds	r0, #2
     852:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     856:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
     862:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     866:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
     86a:	4770      	bx	lr
     86c:	41008000 	.word	0x41008000
     870:	40000001 	.word	0x40000001
     874:	40000002 	.word	0x40000002
     878:	c0020000 	.word	0xc0020000

0000087c <SWD_tx>:
	timer_start(&TIMER_0);
}


void SWD_tx(uint8_t* buffer, uint16_t length) //SPI MOSI
{	
     87c:	b570      	push	{r4, r5, r6, lr}
     87e:	b082      	sub	sp, #8
     880:	4605      	mov	r5, r0
     882:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     884:	4b09      	ldr	r3, [pc, #36]	; (8ac <SWD_tx+0x30>)
     886:	2201      	movs	r2, #1
     888:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     88a:	2202      	movs	r2, #2
     88c:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(MOSI_EN, true);
	gpio_set_pin_level(MISO_EN, false);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     88e:	4c08      	ldr	r4, [pc, #32]	; (8b0 <SWD_tx+0x34>)
     890:	a901      	add	r1, sp, #4
     892:	4620      	mov	r0, r4
     894:	4b07      	ldr	r3, [pc, #28]	; (8b4 <SWD_tx+0x38>)
     896:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     898:	4620      	mov	r0, r4
     89a:	4b07      	ldr	r3, [pc, #28]	; (8b8 <SWD_tx+0x3c>)
     89c:	4798      	blx	r3
	io_write(io, buffer, length);
     89e:	4632      	mov	r2, r6
     8a0:	4629      	mov	r1, r5
     8a2:	9801      	ldr	r0, [sp, #4]
     8a4:	4b05      	ldr	r3, [pc, #20]	; (8bc <SWD_tx+0x40>)
     8a6:	4798      	blx	r3
}
     8a8:	b002      	add	sp, #8
     8aa:	bd70      	pop	{r4, r5, r6, pc}
     8ac:	41008000 	.word	0x41008000
     8b0:	20000050 	.word	0x20000050
     8b4:	00000dd1 	.word	0x00000dd1
     8b8:	00000cf1 	.word	0x00000cf1
     8bc:	00000bb9 	.word	0x00000bb9

000008c0 <SWD_rx>:

void SWD_rx(uint8_t* buffer, uint16_t length) //SPI MISO
{
     8c0:	b570      	push	{r4, r5, r6, lr}
     8c2:	b082      	sub	sp, #8
     8c4:	4605      	mov	r5, r0
     8c6:	460e      	mov	r6, r1
     8c8:	4b09      	ldr	r3, [pc, #36]	; (8f0 <SWD_rx+0x30>)
     8ca:	2201      	movs	r2, #1
     8cc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8ce:	2202      	movs	r2, #2
     8d0:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(MOSI_EN, false);
	gpio_set_pin_level(MISO_EN, true);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     8d2:	4c08      	ldr	r4, [pc, #32]	; (8f4 <SWD_rx+0x34>)
     8d4:	a901      	add	r1, sp, #4
     8d6:	4620      	mov	r0, r4
     8d8:	4b07      	ldr	r3, [pc, #28]	; (8f8 <SWD_rx+0x38>)
     8da:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     8dc:	4620      	mov	r0, r4
     8de:	4b07      	ldr	r3, [pc, #28]	; (8fc <SWD_rx+0x3c>)
     8e0:	4798      	blx	r3
	io_read(io, buffer, length);
     8e2:	4632      	mov	r2, r6
     8e4:	4629      	mov	r1, r5
     8e6:	9801      	ldr	r0, [sp, #4]
     8e8:	4b05      	ldr	r3, [pc, #20]	; (900 <SWD_rx+0x40>)
     8ea:	4798      	blx	r3
}
     8ec:	b002      	add	sp, #8
     8ee:	bd70      	pop	{r4, r5, r6, pc}
     8f0:	41008000 	.word	0x41008000
     8f4:	20000050 	.word	0x20000050
     8f8:	00000dd1 	.word	0x00000dd1
     8fc:	00000cf1 	.word	0x00000cf1
     900:	00000be9 	.word	0x00000be9

00000904 <I2C_read>:
	spi_m_sync_enable(&SPI_0);
	_spi_m_sync_trans(&SPI_0.dev, &spi_istruct);//(struct _spi_m_sync_dev *dev, const struct spi_msg *msg);
}

void I2C_read(uint8_t* buffer, uint16_t length)
{
     904:	b570      	push	{r4, r5, r6, lr}
     906:	b082      	sub	sp, #8
     908:	4605      	mov	r5, r0
     90a:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     90c:	4c09      	ldr	r4, [pc, #36]	; (934 <I2C_read+0x30>)
     90e:	a901      	add	r1, sp, #4
     910:	4620      	mov	r0, r4
     912:	4b09      	ldr	r3, [pc, #36]	; (938 <I2C_read+0x34>)
     914:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     916:	2110      	movs	r1, #16
     918:	4620      	mov	r0, r4
     91a:	4b08      	ldr	r3, [pc, #32]	; (93c <I2C_read+0x38>)
     91c:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     91e:	4620      	mov	r0, r4
     920:	4b07      	ldr	r3, [pc, #28]	; (940 <I2C_read+0x3c>)
     922:	4798      	blx	r3

	io_read(io, buffer, length);
     924:	4632      	mov	r2, r6
     926:	4629      	mov	r1, r5
     928:	9801      	ldr	r0, [sp, #4]
     92a:	4b06      	ldr	r3, [pc, #24]	; (944 <I2C_read+0x40>)
     92c:	4798      	blx	r3
}
     92e:	b002      	add	sp, #8
     930:	bd70      	pop	{r4, r5, r6, pc}
     932:	bf00      	nop
     934:	2000006c 	.word	0x2000006c
     938:	00000b8d 	.word	0x00000b8d
     93c:	00000b21 	.word	0x00000b21
     940:	00000b65 	.word	0x00000b65
     944:	00000be9 	.word	0x00000be9

00000948 <I2C_write>:

void I2C_write(uint8_t* buffer, uint16_t length)
{
     948:	b570      	push	{r4, r5, r6, lr}
     94a:	b082      	sub	sp, #8
     94c:	4605      	mov	r5, r0
     94e:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     950:	4c09      	ldr	r4, [pc, #36]	; (978 <I2C_write+0x30>)
     952:	a901      	add	r1, sp, #4
     954:	4620      	mov	r0, r4
     956:	4b09      	ldr	r3, [pc, #36]	; (97c <I2C_write+0x34>)
     958:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     95a:	2110      	movs	r1, #16
     95c:	4620      	mov	r0, r4
     95e:	4b08      	ldr	r3, [pc, #32]	; (980 <I2C_write+0x38>)
     960:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     962:	4620      	mov	r0, r4
     964:	4b07      	ldr	r3, [pc, #28]	; (984 <I2C_write+0x3c>)
     966:	4798      	blx	r3

	io_write(io, buffer, length);
     968:	4632      	mov	r2, r6
     96a:	4629      	mov	r1, r5
     96c:	9801      	ldr	r0, [sp, #4]
     96e:	4b06      	ldr	r3, [pc, #24]	; (988 <I2C_write+0x40>)
     970:	4798      	blx	r3
}
     972:	b002      	add	sp, #8
     974:	bd70      	pop	{r4, r5, r6, pc}
     976:	bf00      	nop
     978:	2000006c 	.word	0x2000006c
     97c:	00000b8d 	.word	0x00000b8d
     980:	00000b21 	.word	0x00000b21
     984:	00000b65 	.word	0x00000b65
     988:	00000bb9 	.word	0x00000bb9

0000098c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     98c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     990:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     992:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     994:	f3bf 8f5f 	dmb	sy
     998:	4770      	bx	lr

0000099a <atomic_leave_critical>:
     99a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     99e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     9a0:	f383 8810 	msr	PRIMASK, r3
     9a4:	4770      	bx	lr

000009a6 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     9a6:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     9a8:	6943      	ldr	r3, [r0, #20]
     9aa:	b103      	cbz	r3, 9ae <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     9ac:	4798      	blx	r3
     9ae:	bd08      	pop	{r3, pc}

000009b0 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     9b0:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     9b2:	6983      	ldr	r3, [r0, #24]
     9b4:	b103      	cbz	r3, 9b8 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     9b6:	4798      	blx	r3
     9b8:	bd08      	pop	{r3, pc}
	...

000009bc <flash_init>:
{
     9bc:	b538      	push	{r3, r4, r5, lr}
     9be:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     9c0:	4604      	mov	r4, r0
     9c2:	b190      	cbz	r0, 9ea <flash_init+0x2e>
     9c4:	1c08      	adds	r0, r1, #0
     9c6:	bf18      	it	ne
     9c8:	2001      	movne	r0, #1
     9ca:	2238      	movs	r2, #56	; 0x38
     9cc:	4908      	ldr	r1, [pc, #32]	; (9f0 <flash_init+0x34>)
     9ce:	4b09      	ldr	r3, [pc, #36]	; (9f4 <flash_init+0x38>)
     9d0:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     9d2:	4629      	mov	r1, r5
     9d4:	4620      	mov	r0, r4
     9d6:	4b08      	ldr	r3, [pc, #32]	; (9f8 <flash_init+0x3c>)
     9d8:	4798      	blx	r3
	if (rc) {
     9da:	4603      	mov	r3, r0
     9dc:	b918      	cbnz	r0, 9e6 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     9de:	4a07      	ldr	r2, [pc, #28]	; (9fc <flash_init+0x40>)
     9e0:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     9e2:	4a07      	ldr	r2, [pc, #28]	; (a00 <flash_init+0x44>)
     9e4:	6062      	str	r2, [r4, #4]
}
     9e6:	4618      	mov	r0, r3
     9e8:	bd38      	pop	{r3, r4, r5, pc}
     9ea:	2000      	movs	r0, #0
     9ec:	e7ed      	b.n	9ca <flash_init+0xe>
     9ee:	bf00      	nop
     9f0:	00001ec0 	.word	0x00001ec0
     9f4:	00000f11 	.word	0x00000f11
     9f8:	00001011 	.word	0x00001011
     9fc:	000009a7 	.word	0x000009a7
     a00:	000009b1 	.word	0x000009b1

00000a04 <i2c_s_sync_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_sync_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a08:	460f      	mov	r7, r1
     a0a:	4690      	mov	r8, r2
	uint16_t                      offset = 0;
	struct i2c_s_sync_descriptor *descr  = CONTAINER_OF(io, struct i2c_s_sync_descriptor, io);

	ASSERT(io && buf && length);
     a0c:	4604      	mov	r4, r0
     a0e:	b320      	cbz	r0, a5a <i2c_s_sync_write+0x56>
     a10:	b329      	cbz	r1, a5e <i2c_s_sync_write+0x5a>
     a12:	1c10      	adds	r0, r2, #0
     a14:	bf18      	it	ne
     a16:	2001      	movne	r0, #1
     a18:	22b6      	movs	r2, #182	; 0xb6
     a1a:	4912      	ldr	r1, [pc, #72]	; (a64 <i2c_s_sync_write+0x60>)
     a1c:	4b12      	ldr	r3, [pc, #72]	; (a68 <i2c_s_sync_write+0x64>)
     a1e:	4798      	blx	r3

	while (!_i2c_s_sync_is_byte_sent(&descr->device))
     a20:	3c04      	subs	r4, #4
     a22:	4d12      	ldr	r5, [pc, #72]	; (a6c <i2c_s_sync_write+0x68>)
     a24:	4620      	mov	r0, r4
     a26:	47a8      	blx	r5
     a28:	2800      	cmp	r0, #0
     a2a:	d0fb      	beq.n	a24 <i2c_s_sync_write+0x20>
     a2c:	3f01      	subs	r7, #1
     a2e:	2600      	movs	r6, #0
		;
	do {
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     a30:	f8df 9040 	ldr.w	r9, [pc, #64]	; a74 <i2c_s_sync_write+0x70>
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     a34:	4d0d      	ldr	r5, [pc, #52]	; (a6c <i2c_s_sync_write+0x68>)
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     a36:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     a3a:	4620      	mov	r0, r4
     a3c:	47c8      	blx	r9
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     a3e:	4620      	mov	r0, r4
     a40:	47a8      	blx	r5
     a42:	2800      	cmp	r0, #0
     a44:	d0fb      	beq.n	a3e <i2c_s_sync_write+0x3a>
			;
	} while (++offset < length);
     a46:	3601      	adds	r6, #1
     a48:	b2b6      	uxth	r6, r6
     a4a:	45b0      	cmp	r8, r6
     a4c:	d8f3      	bhi.n	a36 <i2c_s_sync_write+0x32>

	/* To ensure no more data needs to be sent */
	_i2c_s_sync_clear_data_ready_flag(&descr->device);
     a4e:	4620      	mov	r0, r4
     a50:	4b07      	ldr	r3, [pc, #28]	; (a70 <i2c_s_sync_write+0x6c>)
     a52:	4798      	blx	r3

	return (int32_t)offset;
}
     a54:	4630      	mov	r0, r6
     a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     a5a:	2000      	movs	r0, #0
     a5c:	e7dc      	b.n	a18 <i2c_s_sync_write+0x14>
     a5e:	2000      	movs	r0, #0
     a60:	e7da      	b.n	a18 <i2c_s_sync_write+0x14>
     a62:	bf00      	nop
     a64:	00001ed8 	.word	0x00001ed8
     a68:	00000f11 	.word	0x00000f11
     a6c:	000014f7 	.word	0x000014f7
     a70:	0000150b 	.word	0x0000150b
     a74:	000014e9 	.word	0x000014e9

00000a78 <i2c_s_sync_read>:
{
     a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a7c:	460f      	mov	r7, r1
     a7e:	4690      	mov	r8, r2
	ASSERT(io && buf && length);
     a80:	4604      	mov	r4, r0
     a82:	b1e0      	cbz	r0, abe <i2c_s_sync_read+0x46>
     a84:	b1e9      	cbz	r1, ac2 <i2c_s_sync_read+0x4a>
     a86:	1c10      	adds	r0, r2, #0
     a88:	bf18      	it	ne
     a8a:	2001      	movne	r0, #1
     a8c:	229c      	movs	r2, #156	; 0x9c
     a8e:	490e      	ldr	r1, [pc, #56]	; (ac8 <i2c_s_sync_read+0x50>)
     a90:	4b0e      	ldr	r3, [pc, #56]	; (acc <i2c_s_sync_read+0x54>)
     a92:	4798      	blx	r3
     a94:	3f01      	subs	r7, #1
	uint16_t                      offset = 0;
     a96:	2600      	movs	r6, #0
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     a98:	3c04      	subs	r4, #4
     a9a:	4d0d      	ldr	r5, [pc, #52]	; (ad0 <i2c_s_sync_read+0x58>)
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     a9c:	f8df 9034 	ldr.w	r9, [pc, #52]	; ad4 <i2c_s_sync_read+0x5c>
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     aa0:	4620      	mov	r0, r4
     aa2:	47a8      	blx	r5
     aa4:	2800      	cmp	r0, #0
     aa6:	d0fb      	beq.n	aa0 <i2c_s_sync_read+0x28>
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     aa8:	4620      	mov	r0, r4
     aaa:	47c8      	blx	r9
     aac:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     ab0:	3601      	adds	r6, #1
     ab2:	b2b6      	uxth	r6, r6
     ab4:	45b0      	cmp	r8, r6
     ab6:	d8f3      	bhi.n	aa0 <i2c_s_sync_read+0x28>
}
     ab8:	4630      	mov	r0, r6
     aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     abe:	2000      	movs	r0, #0
     ac0:	e7e4      	b.n	a8c <i2c_s_sync_read+0x14>
     ac2:	2000      	movs	r0, #0
     ac4:	e7e2      	b.n	a8c <i2c_s_sync_read+0x14>
     ac6:	bf00      	nop
     ac8:	00001ed8 	.word	0x00001ed8
     acc:	00000f11 	.word	0x00000f11
     ad0:	00001501 	.word	0x00001501
     ad4:	000014ef 	.word	0x000014ef

00000ad8 <i2c_s_sync_init>:
{
     ad8:	b538      	push	{r3, r4, r5, lr}
     ada:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     adc:	4604      	mov	r4, r0
     ade:	b190      	cbz	r0, b06 <i2c_s_sync_init+0x2e>
     ae0:	1c08      	adds	r0, r1, #0
     ae2:	bf18      	it	ne
     ae4:	2001      	movne	r0, #1
     ae6:	2235      	movs	r2, #53	; 0x35
     ae8:	4908      	ldr	r1, [pc, #32]	; (b0c <i2c_s_sync_init+0x34>)
     aea:	4b09      	ldr	r3, [pc, #36]	; (b10 <i2c_s_sync_init+0x38>)
     aec:	4798      	blx	r3
	init_status = _i2c_s_sync_init(&descr->device, hw);
     aee:	4629      	mov	r1, r5
     af0:	4620      	mov	r0, r4
     af2:	4b08      	ldr	r3, [pc, #32]	; (b14 <i2c_s_sync_init+0x3c>)
     af4:	4798      	blx	r3
	if (init_status) {
     af6:	4603      	mov	r3, r0
     af8:	b918      	cbnz	r0, b02 <i2c_s_sync_init+0x2a>
	descr->io.read  = i2c_s_sync_read;
     afa:	4a07      	ldr	r2, [pc, #28]	; (b18 <i2c_s_sync_init+0x40>)
     afc:	60a2      	str	r2, [r4, #8]
	descr->io.write = i2c_s_sync_write;
     afe:	4a07      	ldr	r2, [pc, #28]	; (b1c <i2c_s_sync_init+0x44>)
     b00:	6062      	str	r2, [r4, #4]
}
     b02:	4618      	mov	r0, r3
     b04:	bd38      	pop	{r3, r4, r5, pc}
     b06:	2000      	movs	r0, #0
     b08:	e7ed      	b.n	ae6 <i2c_s_sync_init+0xe>
     b0a:	bf00      	nop
     b0c:	00001ed8 	.word	0x00001ed8
     b10:	00000f11 	.word	0x00000f11
     b14:	00001485 	.word	0x00001485
     b18:	00000a79 	.word	0x00000a79
     b1c:	00000a05 	.word	0x00000a05

00000b20 <i2c_s_sync_set_addr>:
{
     b20:	b538      	push	{r3, r4, r5, lr}
     b22:	460d      	mov	r5, r1
	ASSERT(descr);
     b24:	4604      	mov	r4, r0
     b26:	2251      	movs	r2, #81	; 0x51
     b28:	490a      	ldr	r1, [pc, #40]	; (b54 <i2c_s_sync_set_addr+0x34>)
     b2a:	3000      	adds	r0, #0
     b2c:	bf18      	it	ne
     b2e:	2001      	movne	r0, #1
     b30:	4b09      	ldr	r3, [pc, #36]	; (b58 <i2c_s_sync_set_addr+0x38>)
     b32:	4798      	blx	r3
	if (!_i2c_s_sync_is_10bit_addressing_on(&descr->device)) {
     b34:	4620      	mov	r0, r4
     b36:	4b09      	ldr	r3, [pc, #36]	; (b5c <i2c_s_sync_set_addr+0x3c>)
     b38:	4798      	blx	r3
     b3a:	b120      	cbz	r0, b46 <i2c_s_sync_set_addr+0x26>
	return _i2c_s_sync_set_address(&descr->device, address);
     b3c:	4629      	mov	r1, r5
     b3e:	4620      	mov	r0, r4
     b40:	4b07      	ldr	r3, [pc, #28]	; (b60 <i2c_s_sync_set_addr+0x40>)
     b42:	4798      	blx	r3
}
     b44:	bd38      	pop	{r3, r4, r5, pc}
		return _i2c_s_sync_set_address(&descr->device, address & 0x7F);
     b46:	f005 017f 	and.w	r1, r5, #127	; 0x7f
     b4a:	4620      	mov	r0, r4
     b4c:	4b04      	ldr	r3, [pc, #16]	; (b60 <i2c_s_sync_set_addr+0x40>)
     b4e:	4798      	blx	r3
     b50:	bd38      	pop	{r3, r4, r5, pc}
     b52:	bf00      	nop
     b54:	00001ed8 	.word	0x00001ed8
     b58:	00000f11 	.word	0x00000f11
     b5c:	000014cf 	.word	0x000014cf
     b60:	000014d9 	.word	0x000014d9

00000b64 <i2c_s_sync_enable>:
{
     b64:	b510      	push	{r4, lr}
	ASSERT(descr);
     b66:	4604      	mov	r4, r0
     b68:	225f      	movs	r2, #95	; 0x5f
     b6a:	4905      	ldr	r1, [pc, #20]	; (b80 <i2c_s_sync_enable+0x1c>)
     b6c:	3000      	adds	r0, #0
     b6e:	bf18      	it	ne
     b70:	2001      	movne	r0, #1
     b72:	4b04      	ldr	r3, [pc, #16]	; (b84 <i2c_s_sync_enable+0x20>)
     b74:	4798      	blx	r3
	return _i2c_s_sync_enable(&descr->device);
     b76:	4620      	mov	r0, r4
     b78:	4b03      	ldr	r3, [pc, #12]	; (b88 <i2c_s_sync_enable+0x24>)
     b7a:	4798      	blx	r3
}
     b7c:	bd10      	pop	{r4, pc}
     b7e:	bf00      	nop
     b80:	00001ed8 	.word	0x00001ed8
     b84:	00000f11 	.word	0x00000f11
     b88:	000014b9 	.word	0x000014b9

00000b8c <i2c_s_sync_get_io_descriptor>:
{
     b8c:	b538      	push	{r3, r4, r5, lr}
     b8e:	460d      	mov	r5, r1
	ASSERT(descr && io);
     b90:	4604      	mov	r4, r0
     b92:	b150      	cbz	r0, baa <i2c_s_sync_get_io_descriptor+0x1e>
     b94:	1c08      	adds	r0, r1, #0
     b96:	bf18      	it	ne
     b98:	2001      	movne	r0, #1
     b9a:	2273      	movs	r2, #115	; 0x73
     b9c:	4904      	ldr	r1, [pc, #16]	; (bb0 <i2c_s_sync_get_io_descriptor+0x24>)
     b9e:	4b05      	ldr	r3, [pc, #20]	; (bb4 <i2c_s_sync_get_io_descriptor+0x28>)
     ba0:	4798      	blx	r3
	*io = &descr->io;
     ba2:	3404      	adds	r4, #4
     ba4:	602c      	str	r4, [r5, #0]
}
     ba6:	2000      	movs	r0, #0
     ba8:	bd38      	pop	{r3, r4, r5, pc}
     baa:	2000      	movs	r0, #0
     bac:	e7f5      	b.n	b9a <i2c_s_sync_get_io_descriptor+0xe>
     bae:	bf00      	nop
     bb0:	00001ed8 	.word	0x00001ed8
     bb4:	00000f11 	.word	0x00000f11

00000bb8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     bb8:	b570      	push	{r4, r5, r6, lr}
     bba:	460d      	mov	r5, r1
     bbc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     bbe:	4604      	mov	r4, r0
     bc0:	b160      	cbz	r0, bdc <io_write+0x24>
     bc2:	1c08      	adds	r0, r1, #0
     bc4:	bf18      	it	ne
     bc6:	2001      	movne	r0, #1
     bc8:	2234      	movs	r2, #52	; 0x34
     bca:	4905      	ldr	r1, [pc, #20]	; (be0 <io_write+0x28>)
     bcc:	4b05      	ldr	r3, [pc, #20]	; (be4 <io_write+0x2c>)
     bce:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     bd0:	6823      	ldr	r3, [r4, #0]
     bd2:	4632      	mov	r2, r6
     bd4:	4629      	mov	r1, r5
     bd6:	4620      	mov	r0, r4
     bd8:	4798      	blx	r3
}
     bda:	bd70      	pop	{r4, r5, r6, pc}
     bdc:	2000      	movs	r0, #0
     bde:	e7f3      	b.n	bc8 <io_write+0x10>
     be0:	00001ef4 	.word	0x00001ef4
     be4:	00000f11 	.word	0x00000f11

00000be8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     be8:	b570      	push	{r4, r5, r6, lr}
     bea:	460d      	mov	r5, r1
     bec:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     bee:	4604      	mov	r4, r0
     bf0:	b160      	cbz	r0, c0c <io_read+0x24>
     bf2:	1c08      	adds	r0, r1, #0
     bf4:	bf18      	it	ne
     bf6:	2001      	movne	r0, #1
     bf8:	223d      	movs	r2, #61	; 0x3d
     bfa:	4905      	ldr	r1, [pc, #20]	; (c10 <io_read+0x28>)
     bfc:	4b05      	ldr	r3, [pc, #20]	; (c14 <io_read+0x2c>)
     bfe:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     c00:	6863      	ldr	r3, [r4, #4]
     c02:	4632      	mov	r2, r6
     c04:	4629      	mov	r1, r5
     c06:	4620      	mov	r0, r4
     c08:	4798      	blx	r3
}
     c0a:	bd70      	pop	{r4, r5, r6, pc}
     c0c:	2000      	movs	r0, #0
     c0e:	e7f3      	b.n	bf8 <io_read+0x10>
     c10:	00001ef4 	.word	0x00001ef4
     c14:	00000f11 	.word	0x00000f11

00000c18 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
     c18:	b538      	push	{r3, r4, r5, lr}
     c1a:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
     c1c:	4605      	mov	r5, r0
     c1e:	b158      	cbz	r0, c38 <qspi_sync_init+0x20>
     c20:	1c08      	adds	r0, r1, #0
     c22:	bf18      	it	ne
     c24:	2001      	movne	r0, #1
     c26:	2231      	movs	r2, #49	; 0x31
     c28:	4904      	ldr	r1, [pc, #16]	; (c3c <qspi_sync_init+0x24>)
     c2a:	4b05      	ldr	r3, [pc, #20]	; (c40 <qspi_sync_init+0x28>)
     c2c:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
     c2e:	4621      	mov	r1, r4
     c30:	4628      	mov	r0, r5
     c32:	4b04      	ldr	r3, [pc, #16]	; (c44 <qspi_sync_init+0x2c>)
     c34:	4798      	blx	r3
}
     c36:	bd38      	pop	{r3, r4, r5, pc}
     c38:	2000      	movs	r0, #0
     c3a:	e7f4      	b.n	c26 <qspi_sync_init+0xe>
     c3c:	00001f08 	.word	0x00001f08
     c40:	00000f11 	.word	0x00000f11
     c44:	00001139 	.word	0x00001139

00000c48 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
     c48:	b510      	push	{r4, lr}
	ASSERT(qspi);
     c4a:	4604      	mov	r4, r0
     c4c:	223f      	movs	r2, #63	; 0x3f
     c4e:	4905      	ldr	r1, [pc, #20]	; (c64 <qspi_sync_enable+0x1c>)
     c50:	3000      	adds	r0, #0
     c52:	bf18      	it	ne
     c54:	2001      	movne	r0, #1
     c56:	4b04      	ldr	r3, [pc, #16]	; (c68 <qspi_sync_enable+0x20>)
     c58:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
     c5a:	4620      	mov	r0, r4
     c5c:	4b03      	ldr	r3, [pc, #12]	; (c6c <qspi_sync_enable+0x24>)
     c5e:	4798      	blx	r3
}
     c60:	bd10      	pop	{r4, pc}
     c62:	bf00      	nop
     c64:	00001f08 	.word	0x00001f08
     c68:	00000f11 	.word	0x00000f11
     c6c:	00001171 	.word	0x00001171

00000c70 <qspi_sync_serial_run_command>:

	return _qspi_sync_disable(&qspi->dev);
}

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
     c70:	b538      	push	{r3, r4, r5, lr}
     c72:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
     c74:	4605      	mov	r5, r0
     c76:	b158      	cbz	r0, c90 <qspi_sync_serial_run_command+0x20>
     c78:	1c08      	adds	r0, r1, #0
     c7a:	bf18      	it	ne
     c7c:	2001      	movne	r0, #1
     c7e:	224d      	movs	r2, #77	; 0x4d
     c80:	4904      	ldr	r1, [pc, #16]	; (c94 <qspi_sync_serial_run_command+0x24>)
     c82:	4b05      	ldr	r3, [pc, #20]	; (c98 <qspi_sync_serial_run_command+0x28>)
     c84:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
     c86:	4621      	mov	r1, r4
     c88:	4628      	mov	r0, r5
     c8a:	4b04      	ldr	r3, [pc, #16]	; (c9c <qspi_sync_serial_run_command+0x2c>)
     c8c:	4798      	blx	r3
}
     c8e:	bd38      	pop	{r3, r4, r5, pc}
     c90:	2000      	movs	r0, #0
     c92:	e7f4      	b.n	c7e <qspi_sync_serial_run_command+0xe>
     c94:	00001f08 	.word	0x00001f08
     c98:	00000f11 	.word	0x00000f11
     c9c:	0000117d 	.word	0x0000117d

00000ca0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     ca0:	b538      	push	{r3, r4, r5, lr}
     ca2:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     ca4:	4604      	mov	r4, r0
     ca6:	b1b8      	cbz	r0, cd8 <spi_m_sync_init+0x38>
     ca8:	1c08      	adds	r0, r1, #0
     caa:	bf18      	it	ne
     cac:	2001      	movne	r0, #1
     cae:	2240      	movs	r2, #64	; 0x40
     cb0:	490a      	ldr	r1, [pc, #40]	; (cdc <spi_m_sync_init+0x3c>)
     cb2:	4b0b      	ldr	r3, [pc, #44]	; (ce0 <spi_m_sync_init+0x40>)
     cb4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     cb6:	4620      	mov	r0, r4
     cb8:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     cbc:	4629      	mov	r1, r5
     cbe:	4b09      	ldr	r3, [pc, #36]	; (ce4 <spi_m_sync_init+0x44>)
     cc0:	4798      	blx	r3

	if (rc < 0) {
     cc2:	2800      	cmp	r0, #0
     cc4:	db07      	blt.n	cd6 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     cca:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     ccc:	4b06      	ldr	r3, [pc, #24]	; (ce8 <spi_m_sync_init+0x48>)
     cce:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     cd0:	4b06      	ldr	r3, [pc, #24]	; (cec <spi_m_sync_init+0x4c>)
     cd2:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     cd4:	2000      	movs	r0, #0
}
     cd6:	bd38      	pop	{r3, r4, r5, pc}
     cd8:	2000      	movs	r0, #0
     cda:	e7e8      	b.n	cae <spi_m_sync_init+0xe>
     cdc:	00001f24 	.word	0x00001f24
     ce0:	00000f11 	.word	0x00000f11
     ce4:	00001515 	.word	0x00001515
     ce8:	00000d95 	.word	0x00000d95
     cec:	00000d59 	.word	0x00000d59

00000cf0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     cf0:	b510      	push	{r4, lr}
	ASSERT(spi);
     cf2:	4604      	mov	r4, r0
     cf4:	2257      	movs	r2, #87	; 0x57
     cf6:	4905      	ldr	r1, [pc, #20]	; (d0c <spi_m_sync_enable+0x1c>)
     cf8:	3000      	adds	r0, #0
     cfa:	bf18      	it	ne
     cfc:	2001      	movne	r0, #1
     cfe:	4b04      	ldr	r3, [pc, #16]	; (d10 <spi_m_sync_enable+0x20>)
     d00:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     d02:	1d20      	adds	r0, r4, #4
     d04:	4b03      	ldr	r3, [pc, #12]	; (d14 <spi_m_sync_enable+0x24>)
     d06:	4798      	blx	r3
     d08:	bd10      	pop	{r4, pc}
     d0a:	bf00      	nop
     d0c:	00001f24 	.word	0x00001f24
     d10:	00000f11 	.word	0x00000f11
     d14:	00001609 	.word	0x00001609

00000d18 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     d18:	b530      	push	{r4, r5, lr}
     d1a:	b085      	sub	sp, #20
     d1c:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     d1e:	4605      	mov	r5, r0
     d20:	b190      	cbz	r0, d48 <spi_m_sync_transfer+0x30>
     d22:	1c08      	adds	r0, r1, #0
     d24:	bf18      	it	ne
     d26:	2001      	movne	r0, #1
     d28:	22b3      	movs	r2, #179	; 0xb3
     d2a:	4908      	ldr	r1, [pc, #32]	; (d4c <spi_m_sync_transfer+0x34>)
     d2c:	4b08      	ldr	r3, [pc, #32]	; (d50 <spi_m_sync_transfer+0x38>)
     d2e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     d30:	6823      	ldr	r3, [r4, #0]
     d32:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     d34:	6863      	ldr	r3, [r4, #4]
     d36:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     d38:	68a3      	ldr	r3, [r4, #8]
     d3a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     d3c:	a901      	add	r1, sp, #4
     d3e:	1d28      	adds	r0, r5, #4
     d40:	4b04      	ldr	r3, [pc, #16]	; (d54 <spi_m_sync_transfer+0x3c>)
     d42:	4798      	blx	r3
}
     d44:	b005      	add	sp, #20
     d46:	bd30      	pop	{r4, r5, pc}
     d48:	2000      	movs	r0, #0
     d4a:	e7ed      	b.n	d28 <spi_m_sync_transfer+0x10>
     d4c:	00001f24 	.word	0x00001f24
     d50:	00000f11 	.word	0x00000f11
     d54:	00001639 	.word	0x00001639

00000d58 <_spi_m_sync_io_write>:
{
     d58:	b570      	push	{r4, r5, r6, lr}
     d5a:	b084      	sub	sp, #16
     d5c:	460e      	mov	r6, r1
     d5e:	4615      	mov	r5, r2
	ASSERT(io);
     d60:	4604      	mov	r4, r0
     d62:	22a3      	movs	r2, #163	; 0xa3
     d64:	4908      	ldr	r1, [pc, #32]	; (d88 <_spi_m_sync_io_write+0x30>)
     d66:	3000      	adds	r0, #0
     d68:	bf18      	it	ne
     d6a:	2001      	movne	r0, #1
     d6c:	4b07      	ldr	r3, [pc, #28]	; (d8c <_spi_m_sync_io_write+0x34>)
     d6e:	4798      	blx	r3
	xfer.rxbuf = 0;
     d70:	2300      	movs	r3, #0
     d72:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     d74:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     d76:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     d78:	a901      	add	r1, sp, #4
     d7a:	f1a4 000c 	sub.w	r0, r4, #12
     d7e:	4b04      	ldr	r3, [pc, #16]	; (d90 <_spi_m_sync_io_write+0x38>)
     d80:	4798      	blx	r3
}
     d82:	b004      	add	sp, #16
     d84:	bd70      	pop	{r4, r5, r6, pc}
     d86:	bf00      	nop
     d88:	00001f24 	.word	0x00001f24
     d8c:	00000f11 	.word	0x00000f11
     d90:	00000d19 	.word	0x00000d19

00000d94 <_spi_m_sync_io_read>:
{
     d94:	b570      	push	{r4, r5, r6, lr}
     d96:	b084      	sub	sp, #16
     d98:	460e      	mov	r6, r1
     d9a:	4615      	mov	r5, r2
	ASSERT(io);
     d9c:	4604      	mov	r4, r0
     d9e:	2287      	movs	r2, #135	; 0x87
     da0:	4908      	ldr	r1, [pc, #32]	; (dc4 <_spi_m_sync_io_read+0x30>)
     da2:	3000      	adds	r0, #0
     da4:	bf18      	it	ne
     da6:	2001      	movne	r0, #1
     da8:	4b07      	ldr	r3, [pc, #28]	; (dc8 <_spi_m_sync_io_read+0x34>)
     daa:	4798      	blx	r3
	xfer.rxbuf = buf;
     dac:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     dae:	2300      	movs	r3, #0
     db0:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     db2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     db4:	a901      	add	r1, sp, #4
     db6:	f1a4 000c 	sub.w	r0, r4, #12
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <_spi_m_sync_io_read+0x38>)
     dbc:	4798      	blx	r3
}
     dbe:	b004      	add	sp, #16
     dc0:	bd70      	pop	{r4, r5, r6, pc}
     dc2:	bf00      	nop
     dc4:	00001f24 	.word	0x00001f24
     dc8:	00000f11 	.word	0x00000f11
     dcc:	00000d19 	.word	0x00000d19

00000dd0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     dd0:	b538      	push	{r3, r4, r5, lr}
     dd2:	460d      	mov	r5, r1
	ASSERT(spi && io);
     dd4:	4604      	mov	r4, r0
     dd6:	b150      	cbz	r0, dee <spi_m_sync_get_io_descriptor+0x1e>
     dd8:	1c08      	adds	r0, r1, #0
     dda:	bf18      	it	ne
     ddc:	2001      	movne	r0, #1
     dde:	22bd      	movs	r2, #189	; 0xbd
     de0:	4904      	ldr	r1, [pc, #16]	; (df4 <spi_m_sync_get_io_descriptor+0x24>)
     de2:	4b05      	ldr	r3, [pc, #20]	; (df8 <spi_m_sync_get_io_descriptor+0x28>)
     de4:	4798      	blx	r3
	*io = &spi->io;
     de6:	340c      	adds	r4, #12
     de8:	602c      	str	r4, [r5, #0]
	return 0;
}
     dea:	2000      	movs	r0, #0
     dec:	bd38      	pop	{r3, r4, r5, pc}
     dee:	2000      	movs	r0, #0
     df0:	e7f5      	b.n	dde <spi_m_sync_get_io_descriptor+0xe>
     df2:	bf00      	nop
     df4:	00001f24 	.word	0x00001f24
     df8:	00000f11 	.word	0x00000f11

00000dfc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dfe:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     e00:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     e02:	b12f      	cbz	r7, e10 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     e04:	688d      	ldr	r5, [r1, #8]
     e06:	463c      	mov	r4, r7
     e08:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     e0a:	f1c2 0e01 	rsb	lr, r2, #1
     e0e:	e00b      	b.n	e28 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     e10:	4b0e      	ldr	r3, [pc, #56]	; (e4c <timer_add_timer_task+0x50>)
     e12:	4798      	blx	r3
		return;
     e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     e16:	4473      	add	r3, lr
     e18:	68a0      	ldr	r0, [r4, #8]
     e1a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     e1c:	42ab      	cmp	r3, r5
     e1e:	d20a      	bcs.n	e36 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     e20:	6823      	ldr	r3, [r4, #0]
     e22:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     e24:	b153      	cbz	r3, e3c <timer_add_timer_task+0x40>
     e26:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     e28:	6863      	ldr	r3, [r4, #4]
     e2a:	4293      	cmp	r3, r2
     e2c:	d8f3      	bhi.n	e16 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     e2e:	68a0      	ldr	r0, [r4, #8]
     e30:	4403      	add	r3, r0
     e32:	1a9b      	subs	r3, r3, r2
     e34:	e7f2      	b.n	e1c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     e36:	42a7      	cmp	r7, r4
     e38:	d004      	beq.n	e44 <timer_add_timer_task+0x48>
     e3a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     e3c:	4620      	mov	r0, r4
     e3e:	4b04      	ldr	r3, [pc, #16]	; (e50 <timer_add_timer_task+0x54>)
     e40:	4798      	blx	r3
     e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     e44:	4660      	mov	r0, ip
     e46:	4b01      	ldr	r3, [pc, #4]	; (e4c <timer_add_timer_task+0x50>)
     e48:	4798      	blx	r3
     e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e4c:	00000f39 	.word	0x00000f39
     e50:	00000f65 	.word	0x00000f65

00000e54 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     e58:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     e5a:	6907      	ldr	r7, [r0, #16]
     e5c:	3701      	adds	r7, #1
     e5e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     e60:	7e03      	ldrb	r3, [r0, #24]
     e62:	f013 0f01 	tst.w	r3, #1
     e66:	d113      	bne.n	e90 <timer_process_counted+0x3c>
     e68:	7e03      	ldrb	r3, [r0, #24]
     e6a:	f013 0f02 	tst.w	r3, #2
     e6e:	d10f      	bne.n	e90 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     e70:	b354      	cbz	r4, ec8 <timer_process_counted+0x74>
     e72:	6863      	ldr	r3, [r4, #4]
     e74:	1afb      	subs	r3, r7, r3
     e76:	68a2      	ldr	r2, [r4, #8]
     e78:	4293      	cmp	r3, r2
     e7a:	d307      	bcc.n	e8c <timer_process_counted+0x38>
     e7c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     e7e:	f100 0814 	add.w	r8, r0, #20
     e82:	f8df 9048 	ldr.w	r9, [pc, #72]	; ecc <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     e86:	f8df a048 	ldr.w	sl, [pc, #72]	; ed0 <timer_process_counted+0x7c>
     e8a:	e012      	b.n	eb2 <timer_process_counted+0x5e>
     e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     e90:	7e03      	ldrb	r3, [r0, #24]
     e92:	f043 0302 	orr.w	r3, r3, #2
     e96:	7603      	strb	r3, [r0, #24]
		return;
     e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e9c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     e9e:	68e3      	ldr	r3, [r4, #12]
     ea0:	4620      	mov	r0, r4
     ea2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     ea4:	b185      	cbz	r5, ec8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     ea6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     ea8:	686b      	ldr	r3, [r5, #4]
     eaa:	1afb      	subs	r3, r7, r3
     eac:	68aa      	ldr	r2, [r5, #8]
     eae:	4293      	cmp	r3, r2
     eb0:	d30a      	bcc.n	ec8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     eb2:	4640      	mov	r0, r8
     eb4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     eb6:	7c23      	ldrb	r3, [r4, #16]
     eb8:	2b01      	cmp	r3, #1
     eba:	d1ef      	bne.n	e9c <timer_process_counted+0x48>
			tmp->time_label = time;
     ebc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     ebe:	463a      	mov	r2, r7
     ec0:	4621      	mov	r1, r4
     ec2:	4640      	mov	r0, r8
     ec4:	47d0      	blx	sl
     ec6:	e7e9      	b.n	e9c <timer_process_counted+0x48>
     ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ecc:	00000f6d 	.word	0x00000f6d
     ed0:	00000dfd 	.word	0x00000dfd

00000ed4 <timer_init>:
{
     ed4:	b538      	push	{r3, r4, r5, lr}
     ed6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     ed8:	4604      	mov	r4, r0
     eda:	b178      	cbz	r0, efc <timer_init+0x28>
     edc:	1c08      	adds	r0, r1, #0
     ede:	bf18      	it	ne
     ee0:	2001      	movne	r0, #1
     ee2:	223b      	movs	r2, #59	; 0x3b
     ee4:	4906      	ldr	r1, [pc, #24]	; (f00 <timer_init+0x2c>)
     ee6:	4b07      	ldr	r3, [pc, #28]	; (f04 <timer_init+0x30>)
     ee8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     eea:	4629      	mov	r1, r5
     eec:	4620      	mov	r0, r4
     eee:	4b06      	ldr	r3, [pc, #24]	; (f08 <timer_init+0x34>)
     ef0:	4798      	blx	r3
	descr->time                           = 0;
     ef2:	2000      	movs	r0, #0
     ef4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     ef6:	4b05      	ldr	r3, [pc, #20]	; (f0c <timer_init+0x38>)
     ef8:	6023      	str	r3, [r4, #0]
}
     efa:	bd38      	pop	{r3, r4, r5, pc}
     efc:	2000      	movs	r0, #0
     efe:	e7f0      	b.n	ee2 <timer_init+0xe>
     f00:	00001f40 	.word	0x00001f40
     f04:	00000f11 	.word	0x00000f11
     f08:	00001299 	.word	0x00001299
     f0c:	00000e55 	.word	0x00000e55

00000f10 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     f10:	b900      	cbnz	r0, f14 <assert+0x4>
		__asm("BKPT #0");
     f12:	be00      	bkpt	0x0000
     f14:	4770      	bx	lr

00000f16 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     f16:	6803      	ldr	r3, [r0, #0]
     f18:	b14b      	cbz	r3, f2e <is_list_element+0x18>
		if (it == element) {
     f1a:	428b      	cmp	r3, r1
     f1c:	d009      	beq.n	f32 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     f1e:	681b      	ldr	r3, [r3, #0]
     f20:	b11b      	cbz	r3, f2a <is_list_element+0x14>
		if (it == element) {
     f22:	4299      	cmp	r1, r3
     f24:	d1fb      	bne.n	f1e <is_list_element+0x8>
			return true;
     f26:	2001      	movs	r0, #1
		}
	}

	return false;
}
     f28:	4770      	bx	lr
	return false;
     f2a:	2000      	movs	r0, #0
     f2c:	4770      	bx	lr
     f2e:	2000      	movs	r0, #0
     f30:	4770      	bx	lr
			return true;
     f32:	2001      	movs	r0, #1
     f34:	4770      	bx	lr
	...

00000f38 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     f38:	b538      	push	{r3, r4, r5, lr}
     f3a:	4604      	mov	r4, r0
     f3c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     f3e:	4b06      	ldr	r3, [pc, #24]	; (f58 <list_insert_as_head+0x20>)
     f40:	4798      	blx	r3
     f42:	f080 0001 	eor.w	r0, r0, #1
     f46:	2239      	movs	r2, #57	; 0x39
     f48:	4904      	ldr	r1, [pc, #16]	; (f5c <list_insert_as_head+0x24>)
     f4a:	b2c0      	uxtb	r0, r0
     f4c:	4b04      	ldr	r3, [pc, #16]	; (f60 <list_insert_as_head+0x28>)
     f4e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     f50:	6823      	ldr	r3, [r4, #0]
     f52:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     f54:	6025      	str	r5, [r4, #0]
     f56:	bd38      	pop	{r3, r4, r5, pc}
     f58:	00000f17 	.word	0x00000f17
     f5c:	00001f58 	.word	0x00001f58
     f60:	00000f11 	.word	0x00000f11

00000f64 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     f64:	6803      	ldr	r3, [r0, #0]
     f66:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     f68:	6001      	str	r1, [r0, #0]
     f6a:	4770      	bx	lr

00000f6c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     f6c:	6803      	ldr	r3, [r0, #0]
     f6e:	b10b      	cbz	r3, f74 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     f70:	681a      	ldr	r2, [r3, #0]
     f72:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     f74:	4618      	mov	r0, r3
     f76:	4770      	bx	lr

00000f78 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f78:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     f7a:	4a08      	ldr	r2, [pc, #32]	; (f9c <_init_chip+0x24>)
     f7c:	8813      	ldrh	r3, [r2, #0]
     f7e:	b29b      	uxth	r3, r3
     f80:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     f82:	4b07      	ldr	r3, [pc, #28]	; (fa0 <_init_chip+0x28>)
     f84:	4798      	blx	r3
	_oscctrl_init_sources();
     f86:	4b07      	ldr	r3, [pc, #28]	; (fa4 <_init_chip+0x2c>)
     f88:	4798      	blx	r3
	_mclk_init();
     f8a:	4b07      	ldr	r3, [pc, #28]	; (fa8 <_init_chip+0x30>)
     f8c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     f8e:	4b07      	ldr	r3, [pc, #28]	; (fac <_init_chip+0x34>)
     f90:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f92:	f640 70ff 	movw	r0, #4095	; 0xfff
     f96:	4b06      	ldr	r3, [pc, #24]	; (fb0 <_init_chip+0x38>)
     f98:	4798      	blx	r3
     f9a:	bd08      	pop	{r3, pc}
     f9c:	41004000 	.word	0x41004000
     fa0:	000010b1 	.word	0x000010b1
     fa4:	000010c5 	.word	0x000010c5
     fa8:	00000fd9 	.word	0x00000fd9
     fac:	000010e1 	.word	0x000010e1
     fb0:	00000fb5 	.word	0x00000fb5

00000fb4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     fb4:	f010 0f01 	tst.w	r0, #1
     fb8:	d008      	beq.n	fcc <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     fba:	4a05      	ldr	r2, [pc, #20]	; (fd0 <_gclk_init_generators_by_fref+0x1c>)
     fbc:	4b05      	ldr	r3, [pc, #20]	; (fd4 <_gclk_init_generators_by_fref+0x20>)
     fbe:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     fc0:	4619      	mov	r1, r3
     fc2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     fc6:	684b      	ldr	r3, [r1, #4]
     fc8:	4213      	tst	r3, r2
     fca:	d1fc      	bne.n	fc6 <_gclk_init_generators_by_fref+0x12>
     fcc:	4770      	bx	lr
     fce:	bf00      	nop
     fd0:	00010108 	.word	0x00010108
     fd4:	40001c00 	.word	0x40001c00

00000fd8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     fd8:	2201      	movs	r2, #1
     fda:	4b01      	ldr	r3, [pc, #4]	; (fe0 <_mclk_init+0x8>)
     fdc:	715a      	strb	r2, [r3, #5]
     fde:	4770      	bx	lr
     fe0:	40000800 	.word	0x40000800

00000fe4 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
     fe4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
     fe6:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
     fe8:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
     fea:	f012 0f01 	tst.w	r2, #1
     fee:	d005      	beq.n	ffc <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
     ff0:	2201      	movs	r2, #1
     ff2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
     ff4:	6803      	ldr	r3, [r0, #0]
     ff6:	b153      	cbz	r3, 100e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
     ff8:	4798      	blx	r3
     ffa:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
     ffc:	8a1a      	ldrh	r2, [r3, #16]
     ffe:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1000:	b12a      	cbz	r2, 100e <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1002:	f240 225e 	movw	r2, #606	; 0x25e
    1006:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1008:	6843      	ldr	r3, [r0, #4]
    100a:	b103      	cbz	r3, 100e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    100c:	4798      	blx	r3
    100e:	bd08      	pop	{r3, pc}

00001010 <_flash_init>:
{
    1010:	b538      	push	{r3, r4, r5, lr}
    1012:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1014:	4605      	mov	r5, r0
    1016:	b350      	cbz	r0, 106e <_flash_init+0x5e>
    1018:	4816      	ldr	r0, [pc, #88]	; (1074 <_flash_init+0x64>)
    101a:	4281      	cmp	r1, r0
    101c:	bf14      	ite	ne
    101e:	2000      	movne	r0, #0
    1020:	2001      	moveq	r0, #1
    1022:	224b      	movs	r2, #75	; 0x4b
    1024:	4914      	ldr	r1, [pc, #80]	; (1078 <_flash_init+0x68>)
    1026:	4b15      	ldr	r3, [pc, #84]	; (107c <_flash_init+0x6c>)
    1028:	4798      	blx	r3
	device->hw = hw;
    102a:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    102c:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    102e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    1032:	049b      	lsls	r3, r3, #18
    1034:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1036:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    1038:	4b11      	ldr	r3, [pc, #68]	; (1080 <_flash_init+0x70>)
    103a:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    103c:	4b11      	ldr	r3, [pc, #68]	; (1084 <_flash_init+0x74>)
    103e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1042:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1046:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    104a:	f3bf 8f6f 	isb	sy
    104e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1052:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1056:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    105a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    105e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    1062:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1066:	6019      	str	r1, [r3, #0]
    1068:	601a      	str	r2, [r3, #0]
}
    106a:	2000      	movs	r0, #0
    106c:	bd38      	pop	{r3, r4, r5, pc}
    106e:	2000      	movs	r0, #0
    1070:	e7d7      	b.n	1022 <_flash_init+0x12>
    1072:	bf00      	nop
    1074:	41004000 	.word	0x41004000
    1078:	00001f78 	.word	0x00001f78
    107c:	00000f11 	.word	0x00000f11
    1080:	2000001c 	.word	0x2000001c
    1084:	e000e100 	.word	0xe000e100

00001088 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1088:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    108a:	4b02      	ldr	r3, [pc, #8]	; (1094 <NVMCTRL_0_Handler+0xc>)
    108c:	6818      	ldr	r0, [r3, #0]
    108e:	4b02      	ldr	r3, [pc, #8]	; (1098 <NVMCTRL_0_Handler+0x10>)
    1090:	4798      	blx	r3
    1092:	bd08      	pop	{r3, pc}
    1094:	2000001c 	.word	0x2000001c
    1098:	00000fe5 	.word	0x00000fe5

0000109c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    109c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    109e:	4b02      	ldr	r3, [pc, #8]	; (10a8 <NVMCTRL_1_Handler+0xc>)
    10a0:	6818      	ldr	r0, [r3, #0]
    10a2:	4b02      	ldr	r3, [pc, #8]	; (10ac <NVMCTRL_1_Handler+0x10>)
    10a4:	4798      	blx	r3
    10a6:	bd08      	pop	{r3, pc}
    10a8:	2000001c 	.word	0x2000001c
    10ac:	00000fe5 	.word	0x00000fe5

000010b0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    10b0:	4b03      	ldr	r3, [pc, #12]	; (10c0 <_osc32kctrl_init_sources+0x10>)
    10b2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    10b4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    10b8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    10ba:	2201      	movs	r2, #1
    10bc:	741a      	strb	r2, [r3, #16]
    10be:	4770      	bx	lr
    10c0:	40001400 	.word	0x40001400

000010c4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    10c4:	4a04      	ldr	r2, [pc, #16]	; (10d8 <_oscctrl_init_sources+0x14>)
    10c6:	4b05      	ldr	r3, [pc, #20]	; (10dc <_oscctrl_init_sources+0x18>)
    10c8:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    10ca:	461a      	mov	r2, r3
    10cc:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    10ce:	f013 0f02 	tst.w	r3, #2
    10d2:	d0fb      	beq.n	10cc <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    10d4:	4770      	bx	lr
    10d6:	bf00      	nop
    10d8:	03002606 	.word	0x03002606
    10dc:	40001000 	.word	0x40001000

000010e0 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    10e0:	f240 123f 	movw	r2, #319	; 0x13f
    10e4:	4b13      	ldr	r3, [pc, #76]	; (1134 <_oscctrl_init_referenced_generators+0x54>)
    10e6:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    10e8:	461a      	mov	r2, r3
    10ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
    10ec:	f013 0f06 	tst.w	r3, #6
    10f0:	d1fb      	bne.n	10ea <_oscctrl_init_referenced_generators+0xa>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    10f2:	4b10      	ldr	r3, [pc, #64]	; (1134 <_oscctrl_init_referenced_generators+0x54>)
    10f4:	2230      	movs	r2, #48	; 0x30
    10f6:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    10f8:	2202      	movs	r2, #2
    10fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    10fe:	461a      	mov	r2, r3
    1100:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1102:	f013 0f02 	tst.w	r3, #2
    1106:	d1fb      	bne.n	1100 <_oscctrl_init_referenced_generators+0x20>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1108:	4b0a      	ldr	r3, [pc, #40]	; (1134 <_oscctrl_init_referenced_generators+0x54>)
    110a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    110c:	f012 0f01 	tst.w	r2, #1
    1110:	d103      	bne.n	111a <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1112:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1114:	f012 0f02 	tst.w	r2, #2
    1118:	d0f7      	beq.n	110a <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
    111a:	4a06      	ldr	r2, [pc, #24]	; (1134 <_oscctrl_init_referenced_generators+0x54>)
    111c:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    1120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1124:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1128:	6d13      	ldr	r3, [r2, #80]	; 0x50
    112a:	f013 0f06 	tst.w	r3, #6
    112e:	d1fb      	bne.n	1128 <_oscctrl_init_referenced_generators+0x48>
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    1130:	4770      	bx	lr
    1132:	bf00      	nop
    1134:	40001000 	.word	0x40001000

00001138 <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    1138:	b538      	push	{r3, r4, r5, lr}
    113a:	460c      	mov	r4, r1
	ASSERT(dev && hw);
    113c:	4605      	mov	r5, r0
    113e:	b180      	cbz	r0, 1162 <_qspi_sync_init+0x2a>
    1140:	1c08      	adds	r0, r1, #0
    1142:	bf18      	it	ne
    1144:	2001      	movne	r0, #1
    1146:	2240      	movs	r2, #64	; 0x40
    1148:	4907      	ldr	r1, [pc, #28]	; (1168 <_qspi_sync_init+0x30>)
    114a:	4b08      	ldr	r3, [pc, #32]	; (116c <_qspi_sync_init+0x34>)
    114c:	4798      	blx	r3
	dev->prvt = hw;
    114e:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    1150:	2301      	movs	r3, #1
    1152:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    1154:	2311      	movs	r3, #17
    1156:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    1158:	f44f 7300 	mov.w	r3, #512	; 0x200
    115c:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
    115e:	2000      	movs	r0, #0
    1160:	bd38      	pop	{r3, r4, r5, pc}
    1162:	2000      	movs	r0, #0
    1164:	e7ef      	b.n	1146 <_qspi_sync_init+0xe>
    1166:	bf00      	nop
    1168:	00001f98 	.word	0x00001f98
    116c:	00000f11 	.word	0x00000f11

00001170 <_qspi_sync_enable>:
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    1170:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    1172:	2202      	movs	r2, #2
    1174:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    1176:	2000      	movs	r0, #0
    1178:	4770      	bx	lr
	...

0000117c <_qspi_sync_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    117c:	b570      	push	{r4, r5, r6, lr}
    117e:	4605      	mov	r5, r0
    1180:	460c      	mov	r4, r1
	void *hw = dev->prvt;
    1182:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
    1184:	780a      	ldrb	r2, [r1, #0]
    1186:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    118a:	bf1c      	itt	ne
    118c:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    118e:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
    1190:	780a      	ldrb	r2, [r1, #0]
    1192:	f012 0f10 	tst.w	r2, #16
    1196:	d005      	beq.n	11a4 <_qspi_sync_serial_run_command+0x28>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    1198:	6b59      	ldr	r1, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    119a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    119e:	7922      	ldrb	r2, [r4, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    11a0:	430a      	orrs	r2, r1
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    11a2:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
    11a4:	7822      	ldrb	r2, [r4, #0]
    11a6:	f012 0f40 	tst.w	r2, #64	; 0x40
    11aa:	d006      	beq.n	11ba <_qspi_sync_serial_run_command+0x3e>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    11ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    11ae:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    11b2:	7961      	ldrb	r1, [r4, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    11b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    11b8:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    11ba:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    11bc:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_sync_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
    11be:	7823      	ldrb	r3, [r4, #0]
    11c0:	f013 0f80 	tst.w	r3, #128	; 0x80
    11c4:	d10c      	bne.n	11e0 <_qspi_sync_serial_run_command+0x64>
		_qspi_sync_run_transfer(dev, cmd);
	}

	_qspi_end_transfer(dev->prvt);
    11c6:	682b      	ldr	r3, [r5, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    11c8:	4a1f      	ldr	r2, [pc, #124]	; (1248 <_qspi_sync_serial_run_command+0xcc>)
    11ca:	601a      	str	r2, [r3, #0]

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    11cc:	682a      	ldr	r2, [r5, #0]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    11ce:	69d3      	ldr	r3, [r2, #28]
    11d0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    11d4:	d0fb      	beq.n	11ce <_qspi_sync_serial_run_command+0x52>
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    11d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    11da:	61d3      	str	r3, [r2, #28]
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
	return ERR_NONE;
}
    11dc:	2000      	movs	r0, #0
    11de:	bd70      	pop	{r4, r5, r6, pc}
	void *   hw       = dev->prvt;
    11e0:	6829      	ldr	r1, [r5, #0]
	if (cmd->inst_frame.bits.addr_en)
    11e2:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
    11e6:	bf1a      	itte	ne
    11e8:	68a2      	ldrne	r2, [r4, #8]
    11ea:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    11ee:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
    11f2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    11f4:	6923      	ldr	r3, [r4, #16]
    11f6:	b1ab      	cbz	r3, 1224 <_qspi_sync_serial_run_command+0xa8>
    11f8:	2001      	movs	r0, #1
    11fa:	2282      	movs	r2, #130	; 0x82
    11fc:	4913      	ldr	r1, [pc, #76]	; (124c <_qspi_sync_serial_run_command+0xd0>)
    11fe:	4b14      	ldr	r3, [pc, #80]	; (1250 <_qspi_sync_serial_run_command+0xd4>)
    1200:	4798      	blx	r3
	if (cmd->tx_buf) {
    1202:	6923      	ldr	r3, [r4, #16]
    1204:	b19b      	cbz	r3, 122e <_qspi_sync_serial_run_command+0xb2>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    1206:	68e0      	ldr	r0, [r4, #12]
	while (count--) {
    1208:	b138      	cbz	r0, 121a <_qspi_sync_serial_run_command+0x9e>
    120a:	1e72      	subs	r2, r6, #1
    120c:	4418      	add	r0, r3
		*dst++ = *src++;
    120e:	f813 1b01 	ldrb.w	r1, [r3], #1
    1212:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (count--) {
    1216:	4283      	cmp	r3, r0
    1218:	d1f9      	bne.n	120e <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
    121a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    121e:	f3bf 8f6f 	isb	sy
    1222:	e7d0      	b.n	11c6 <_qspi_sync_serial_run_command+0x4a>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    1224:	6960      	ldr	r0, [r4, #20]
    1226:	3000      	adds	r0, #0
    1228:	bf18      	it	ne
    122a:	2001      	movne	r0, #1
    122c:	e7e5      	b.n	11fa <_qspi_sync_serial_run_command+0x7e>
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    122e:	6963      	ldr	r3, [r4, #20]
    1230:	68e1      	ldr	r1, [r4, #12]
	while (count--) {
    1232:	2900      	cmp	r1, #0
    1234:	d0f1      	beq.n	121a <_qspi_sync_serial_run_command+0x9e>
    1236:	3b01      	subs	r3, #1
    1238:	4431      	add	r1, r6
		*dst++ = *src++;
    123a:	f816 2b01 	ldrb.w	r2, [r6], #1
    123e:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (count--) {
    1242:	42b1      	cmp	r1, r6
    1244:	d1f9      	bne.n	123a <_qspi_sync_serial_run_command+0xbe>
    1246:	e7e8      	b.n	121a <_qspi_sync_serial_run_command+0x9e>
    1248:	01000002 	.word	0x01000002
    124c:	00001f98 	.word	0x00001f98
    1250:	00000f11 	.word	0x00000f11

00001254 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1254:	b500      	push	{lr}
    1256:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1258:	4b0d      	ldr	r3, [pc, #52]	; (1290 <RAMECC_Handler+0x3c>)
    125a:	789b      	ldrb	r3, [r3, #2]
    125c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    125e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1260:	9b01      	ldr	r3, [sp, #4]
    1262:	f013 0f02 	tst.w	r3, #2
    1266:	d006      	beq.n	1276 <RAMECC_Handler+0x22>
    1268:	4b0a      	ldr	r3, [pc, #40]	; (1294 <RAMECC_Handler+0x40>)
    126a:	681b      	ldr	r3, [r3, #0]
    126c:	b11b      	cbz	r3, 1276 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    126e:	4a08      	ldr	r2, [pc, #32]	; (1290 <RAMECC_Handler+0x3c>)
    1270:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1272:	4798      	blx	r3
    1274:	e009      	b.n	128a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1276:	9b01      	ldr	r3, [sp, #4]
    1278:	f013 0f01 	tst.w	r3, #1
    127c:	d005      	beq.n	128a <RAMECC_Handler+0x36>
    127e:	4b05      	ldr	r3, [pc, #20]	; (1294 <RAMECC_Handler+0x40>)
    1280:	685b      	ldr	r3, [r3, #4]
    1282:	b113      	cbz	r3, 128a <RAMECC_Handler+0x36>
    1284:	4a02      	ldr	r2, [pc, #8]	; (1290 <RAMECC_Handler+0x3c>)
    1286:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1288:	4798      	blx	r3
	} else {
		return;
	}
}
    128a:	b003      	add	sp, #12
    128c:	f85d fb04 	ldr.w	pc, [sp], #4
    1290:	41020000 	.word	0x41020000
    1294:	20000094 	.word	0x20000094

00001298 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1298:	b538      	push	{r3, r4, r5, lr}
    129a:	460c      	mov	r4, r1
	ASSERT(dev);
    129c:	4605      	mov	r5, r0
    129e:	2230      	movs	r2, #48	; 0x30
    12a0:	4914      	ldr	r1, [pc, #80]	; (12f4 <_timer_init+0x5c>)
    12a2:	3000      	adds	r0, #0
    12a4:	bf18      	it	ne
    12a6:	2001      	movne	r0, #1
    12a8:	4b13      	ldr	r3, [pc, #76]	; (12f8 <_timer_init+0x60>)
    12aa:	4798      	blx	r3

	dev->hw = hw;
    12ac:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    12ae:	2301      	movs	r3, #1
    12b0:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    12b2:	f248 0203 	movw	r2, #32771	; 0x8003
    12b6:	6923      	ldr	r3, [r4, #16]
    12b8:	4213      	tst	r3, r2
    12ba:	d1fc      	bne.n	12b6 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    12bc:	68eb      	ldr	r3, [r5, #12]
    12be:	691a      	ldr	r2, [r3, #16]
    12c0:	f012 0f01 	tst.w	r2, #1
    12c4:	d1fb      	bne.n	12be <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    12c6:	f248 0280 	movw	r2, #32896	; 0x8080
    12ca:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    12cc:	f248 0103 	movw	r1, #32771	; 0x8003
    12d0:	691a      	ldr	r2, [r3, #16]
    12d2:	420a      	tst	r2, r1
    12d4:	d1fc      	bne.n	12d0 <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    12d6:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    12d8:	2320      	movs	r3, #32
    12da:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    12dc:	6913      	ldr	r3, [r2, #16]
    12de:	f013 0f60 	tst.w	r3, #96	; 0x60
    12e2:	d1fb      	bne.n	12dc <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    12e4:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    12e6:	f44f 7280 	mov.w	r2, #256	; 0x100
    12ea:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    12ec:	4b03      	ldr	r3, [pc, #12]	; (12fc <_timer_init+0x64>)
    12ee:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    12f0:	2000      	movs	r0, #0
    12f2:	bd38      	pop	{r3, r4, r5, pc}
    12f4:	00001fb0 	.word	0x00001fb0
    12f8:	00000f11 	.word	0x00000f11
    12fc:	20000020 	.word	0x20000020

00001300 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1300:	2000      	movs	r0, #0
    1302:	4770      	bx	lr

00001304 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1304:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1306:	4b08      	ldr	r3, [pc, #32]	; (1328 <RTC_Handler+0x24>)
    1308:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    130a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    130c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    130e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1312:	d007      	beq.n	1324 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    1314:	6823      	ldr	r3, [r4, #0]
    1316:	b10b      	cbz	r3, 131c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1318:	4620      	mov	r0, r4
    131a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    131c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    131e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1322:	819a      	strh	r2, [r3, #12]
    1324:	bd10      	pop	{r4, pc}
    1326:	bf00      	nop
    1328:	20000020 	.word	0x20000020

0000132c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    132c:	b470      	push	{r4, r5, r6}
    132e:	b087      	sub	sp, #28
    1330:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1332:	466c      	mov	r4, sp
    1334:	4d0c      	ldr	r5, [pc, #48]	; (1368 <_sercom_get_hardware_index+0x3c>)
    1336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    133a:	e895 0003 	ldmia.w	r5, {r0, r1}
    133e:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1342:	9b00      	ldr	r3, [sp, #0]
    1344:	42b3      	cmp	r3, r6
    1346:	d00c      	beq.n	1362 <_sercom_get_hardware_index+0x36>
    1348:	4632      	mov	r2, r6
    134a:	2001      	movs	r0, #1
    134c:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    1350:	4293      	cmp	r3, r2
    1352:	d007      	beq.n	1364 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1354:	3001      	adds	r0, #1
    1356:	2806      	cmp	r0, #6
    1358:	d1f8      	bne.n	134c <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    135a:	2000      	movs	r0, #0
}
    135c:	b007      	add	sp, #28
    135e:	bc70      	pop	{r4, r5, r6}
    1360:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1362:	2000      	movs	r0, #0
			return i;
    1364:	b2c0      	uxtb	r0, r0
    1366:	e7f9      	b.n	135c <_sercom_get_hardware_index+0x30>
    1368:	00001fc8 	.word	0x00001fc8

0000136c <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    136c:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    136e:	f013 0f01 	tst.w	r3, #1
    1372:	d109      	bne.n	1388 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1374:	6803      	ldr	r3, [r0, #0]
    1376:	f043 0302 	orr.w	r3, r3, #2
    137a:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    137c:	69c3      	ldr	r3, [r0, #28]
    137e:	f013 0f03 	tst.w	r3, #3
    1382:	d1fb      	bne.n	137c <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1384:	2000      	movs	r0, #0
    1386:	4770      	bx	lr
		return ERR_BUSY;
    1388:	f06f 0003 	mvn.w	r0, #3
}
    138c:	4770      	bx	lr
	...

00001390 <_i2c_s_init>:
{
    1390:	b510      	push	{r4, lr}
    1392:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1394:	4b1d      	ldr	r3, [pc, #116]	; (140c <_i2c_s_init+0x7c>)
    1396:	4798      	blx	r3
		if (_i2css[i].number == sercom_offset) {
    1398:	2803      	cmp	r0, #3
    139a:	d008      	beq.n	13ae <_i2c_s_init+0x1e>
	ASSERT(false);
    139c:	f240 72b7 	movw	r2, #1975	; 0x7b7
    13a0:	491b      	ldr	r1, [pc, #108]	; (1410 <_i2c_s_init+0x80>)
    13a2:	2000      	movs	r0, #0
    13a4:	4b1b      	ldr	r3, [pc, #108]	; (1414 <_i2c_s_init+0x84>)
    13a6:	4798      	blx	r3
		return ERR_INVALID_ARG;
    13a8:	f06f 000c 	mvn.w	r0, #12
}
    13ac:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    13ae:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    13b0:	f013 0f01 	tst.w	r3, #1
    13b4:	d119      	bne.n	13ea <_i2c_s_init+0x5a>
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    13b6:	69e3      	ldr	r3, [r4, #28]
    13b8:	f013 0f03 	tst.w	r3, #3
    13bc:	d1fb      	bne.n	13b6 <_i2c_s_init+0x26>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    13be:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    13c0:	f013 0f02 	tst.w	r3, #2
    13c4:	d00b      	beq.n	13de <_i2c_s_init+0x4e>
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    13c6:	6823      	ldr	r3, [r4, #0]
    13c8:	f023 0302 	bic.w	r3, r3, #2
    13cc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    13ce:	69e3      	ldr	r3, [r4, #28]
    13d0:	f013 0f03 	tst.w	r3, #3
    13d4:	d1fb      	bne.n	13ce <_i2c_s_init+0x3e>
    13d6:	69e3      	ldr	r3, [r4, #28]
    13d8:	f013 0f02 	tst.w	r3, #2
    13dc:	d1fb      	bne.n	13d6 <_i2c_s_init+0x46>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    13de:	2311      	movs	r3, #17
    13e0:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    13e2:	69e3      	ldr	r3, [r4, #28]
    13e4:	f013 0f03 	tst.w	r3, #3
    13e8:	d1fb      	bne.n	13e2 <_i2c_s_init+0x52>
    13ea:	69e3      	ldr	r3, [r4, #28]
    13ec:	f013 0f01 	tst.w	r3, #1
    13f0:	d1fb      	bne.n	13ea <_i2c_s_init+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    13f2:	4b09      	ldr	r3, [pc, #36]	; (1418 <_i2c_s_init+0x88>)
    13f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    13f6:	69e3      	ldr	r3, [r4, #28]
    13f8:	f013 0f03 	tst.w	r3, #3
    13fc:	d1fb      	bne.n	13f6 <_i2c_s_init+0x66>
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    13fe:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    1402:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    1404:	2320      	movs	r3, #32
    1406:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    1408:	2000      	movs	r0, #0
    140a:	bd10      	pop	{r4, pc}
    140c:	0000132d 	.word	0x0000132d
    1410:	00001ff8 	.word	0x00001ff8
    1414:	00000f11 	.word	0x00000f11
    1418:	00200010 	.word	0x00200010

0000141c <_i2c_s_set_address>:
{
    141c:	b570      	push	{r4, r5, r6, lr}
    141e:	b082      	sub	sp, #8
    1420:	4604      	mov	r4, r0
    1422:	460e      	mov	r6, r1
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1424:	69e3      	ldr	r3, [r4, #28]
    1426:	f013 0f03 	tst.w	r3, #3
    142a:	d1fb      	bne.n	1424 <_i2c_s_set_address+0x8>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    142c:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_I2CS_CTRLA_ENABLE) >> SERCOM_I2CS_CTRLA_ENABLE_Pos;
    142e:	f3c5 0540 	ubfx	r5, r5, #1, #1
	CRITICAL_SECTION_ENTER()
    1432:	a801      	add	r0, sp, #4
    1434:	4b11      	ldr	r3, [pc, #68]	; (147c <_i2c_s_set_address+0x60>)
    1436:	4798      	blx	r3
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1438:	6823      	ldr	r3, [r4, #0]
    143a:	f023 0302 	bic.w	r3, r3, #2
    143e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1440:	69e3      	ldr	r3, [r4, #28]
    1442:	f013 0f03 	tst.w	r3, #3
    1446:	d1fb      	bne.n	1440 <_i2c_s_set_address+0x24>
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1448:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CS_ADDR_ADDR_Msk;
    144a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    144e:	f023 0306 	bic.w	r3, r3, #6
	tmp |= SERCOM_I2CS_ADDR_ADDR(data);
    1452:	f240 71fe 	movw	r1, #2046	; 0x7fe
    1456:	ea01 0146 	and.w	r1, r1, r6, lsl #1
    145a:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CS.ADDR.reg = tmp;
    145c:	6261      	str	r1, [r4, #36]	; 0x24
	CRITICAL_SECTION_LEAVE()
    145e:	a801      	add	r0, sp, #4
    1460:	4b07      	ldr	r3, [pc, #28]	; (1480 <_i2c_s_set_address+0x64>)
    1462:	4798      	blx	r3
	if (enabled) {
    1464:	b13d      	cbz	r5, 1476 <_i2c_s_set_address+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1466:	6823      	ldr	r3, [r4, #0]
    1468:	f043 0302 	orr.w	r3, r3, #2
    146c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    146e:	69e3      	ldr	r3, [r4, #28]
    1470:	f013 0f03 	tst.w	r3, #3
    1474:	d1fb      	bne.n	146e <_i2c_s_set_address+0x52>
}
    1476:	2000      	movs	r0, #0
    1478:	b002      	add	sp, #8
    147a:	bd70      	pop	{r4, r5, r6, pc}
    147c:	0000098d 	.word	0x0000098d
    1480:	0000099b 	.word	0x0000099b

00001484 <_i2c_s_sync_init>:
{
    1484:	b538      	push	{r3, r4, r5, lr}
    1486:	460c      	mov	r4, r1
	ASSERT(device);
    1488:	4605      	mov	r5, r0
    148a:	f240 62a6 	movw	r2, #1702	; 0x6a6
    148e:	4907      	ldr	r1, [pc, #28]	; (14ac <_i2c_s_sync_init+0x28>)
    1490:	3000      	adds	r0, #0
    1492:	bf18      	it	ne
    1494:	2001      	movne	r0, #1
    1496:	4b06      	ldr	r3, [pc, #24]	; (14b0 <_i2c_s_sync_init+0x2c>)
    1498:	4798      	blx	r3
	status = _i2c_s_init(hw);
    149a:	4620      	mov	r0, r4
    149c:	4b05      	ldr	r3, [pc, #20]	; (14b4 <_i2c_s_sync_init+0x30>)
    149e:	4798      	blx	r3
	if (status) {
    14a0:	4603      	mov	r3, r0
    14a2:	b900      	cbnz	r0, 14a6 <_i2c_s_sync_init+0x22>
	device->hw = hw;
    14a4:	602c      	str	r4, [r5, #0]
}
    14a6:	4618      	mov	r0, r3
    14a8:	bd38      	pop	{r3, r4, r5, pc}
    14aa:	bf00      	nop
    14ac:	00001ff8 	.word	0x00001ff8
    14b0:	00000f11 	.word	0x00000f11
    14b4:	00001391 	.word	0x00001391

000014b8 <_i2c_s_sync_enable>:
	hri_sercomi2cs_set_CTRLA_ENABLE_bit(device->hw);
    14b8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    14ba:	6813      	ldr	r3, [r2, #0]
    14bc:	f043 0302 	orr.w	r3, r3, #2
    14c0:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    14c2:	69d3      	ldr	r3, [r2, #28]
    14c4:	f013 0f03 	tst.w	r3, #3
    14c8:	d1fb      	bne.n	14c2 <_i2c_s_sync_enable+0xa>
}
    14ca:	2000      	movs	r0, #0
    14cc:	4770      	bx	lr

000014ce <_i2c_s_sync_is_10bit_addressing_on>:
	return hri_sercomi2cs_get_ADDR_TENBITEN_bit(device->hw);
    14ce:	6803      	ldr	r3, [r0, #0]
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    14d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    14d2:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    14d6:	4770      	bx	lr

000014d8 <_i2c_s_sync_set_address>:
{
    14d8:	b508      	push	{r3, lr}
	return _i2c_s_set_address(device->hw, address);
    14da:	6800      	ldr	r0, [r0, #0]
    14dc:	4b01      	ldr	r3, [pc, #4]	; (14e4 <_i2c_s_sync_set_address+0xc>)
    14de:	4798      	blx	r3
}
    14e0:	bd08      	pop	{r3, pc}
    14e2:	bf00      	nop
    14e4:	0000141d 	.word	0x0000141d

000014e8 <_i2c_s_sync_write_byte>:
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    14e8:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    14ea:	6299      	str	r1, [r3, #40]	; 0x28
    14ec:	4770      	bx	lr

000014ee <_i2c_s_sync_read_byte>:
	return hri_sercomi2cs_read_DATA_reg(device->hw);
    14ee:	6803      	ldr	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->I2CS.DATA.reg;
    14f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    14f2:	b2c0      	uxtb	r0, r0
    14f4:	4770      	bx	lr

000014f6 <_i2c_s_sync_is_byte_sent>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    14f6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) >> SERCOM_I2CS_INTFLAG_DRDY_Pos;
    14f8:	7e18      	ldrb	r0, [r3, #24]
}
    14fa:	f3c0 0080 	ubfx	r0, r0, #2, #1
    14fe:	4770      	bx	lr

00001500 <_i2c_s_sync_is_byte_received>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1500:	6803      	ldr	r3, [r0, #0]
    1502:	7e18      	ldrb	r0, [r3, #24]
}
    1504:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1508:	4770      	bx	lr

0000150a <_i2c_s_sync_clear_data_ready_flag>:
	hri_sercomi2cs_clear_INTFLAG_DRDY_bit(device->hw);
    150a:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_DRDY;
    150c:	2204      	movs	r2, #4
    150e:	761a      	strb	r2, [r3, #24]
}
    1510:	2000      	movs	r0, #0
    1512:	4770      	bx	lr

00001514 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1514:	b538      	push	{r3, r4, r5, lr}
    1516:	4605      	mov	r5, r0
    1518:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    151a:	4608      	mov	r0, r1
    151c:	4b36      	ldr	r3, [pc, #216]	; (15f8 <_spi_m_sync_init+0xe4>)
    151e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1520:	b160      	cbz	r0, 153c <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1522:	2d00      	cmp	r5, #0
    1524:	d055      	beq.n	15d2 <_spi_m_sync_init+0xbe>
    1526:	f640 123c 	movw	r2, #2364	; 0x93c
    152a:	4934      	ldr	r1, [pc, #208]	; (15fc <_spi_m_sync_init+0xe8>)
    152c:	1c20      	adds	r0, r4, #0
    152e:	bf18      	it	ne
    1530:	2001      	movne	r0, #1
    1532:	4b33      	ldr	r3, [pc, #204]	; (1600 <_spi_m_sync_init+0xec>)
    1534:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1536:	f06f 000c 	mvn.w	r0, #12
    153a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    153c:	2d00      	cmp	r5, #0
    153e:	d151      	bne.n	15e4 <_spi_m_sync_init+0xd0>
    1540:	f640 123c 	movw	r2, #2364	; 0x93c
    1544:	492d      	ldr	r1, [pc, #180]	; (15fc <_spi_m_sync_init+0xe8>)
    1546:	2000      	movs	r0, #0
    1548:	4b2d      	ldr	r3, [pc, #180]	; (1600 <_spi_m_sync_init+0xec>)
    154a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    154c:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    154e:	f013 0f01 	tst.w	r3, #1
    1552:	d119      	bne.n	1588 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1554:	69e3      	ldr	r3, [r4, #28]
    1556:	f013 0f03 	tst.w	r3, #3
    155a:	d1fb      	bne.n	1554 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    155c:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    155e:	f013 0f02 	tst.w	r3, #2
    1562:	d00b      	beq.n	157c <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1564:	6823      	ldr	r3, [r4, #0]
    1566:	f023 0302 	bic.w	r3, r3, #2
    156a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    156c:	69e3      	ldr	r3, [r4, #28]
    156e:	f013 0f03 	tst.w	r3, #3
    1572:	d1fb      	bne.n	156c <_spi_m_sync_init+0x58>
    1574:	69e3      	ldr	r3, [r4, #28]
    1576:	f013 0f02 	tst.w	r3, #2
    157a:	d1fb      	bne.n	1574 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    157c:	230d      	movs	r3, #13
    157e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1580:	69e3      	ldr	r3, [r4, #28]
    1582:	f013 0f03 	tst.w	r3, #3
    1586:	d1fb      	bne.n	1580 <_spi_m_sync_init+0x6c>
    1588:	69e3      	ldr	r3, [r4, #28]
    158a:	f013 0f01 	tst.w	r3, #1
    158e:	d1fb      	bne.n	1588 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1590:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1592:	f640 1206 	movw	r2, #2310	; 0x906
    1596:	4919      	ldr	r1, [pc, #100]	; (15fc <_spi_m_sync_init+0xe8>)
    1598:	1c20      	adds	r0, r4, #0
    159a:	bf18      	it	ne
    159c:	2001      	movne	r0, #1
    159e:	4b18      	ldr	r3, [pc, #96]	; (1600 <_spi_m_sync_init+0xec>)
    15a0:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    15a2:	4b18      	ldr	r3, [pc, #96]	; (1604 <_spi_m_sync_init+0xf0>)
    15a4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15a6:	69e3      	ldr	r3, [r4, #28]
    15a8:	f013 0f03 	tst.w	r3, #3
    15ac:	d1fb      	bne.n	15a6 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    15ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    15b2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15b4:	69e3      	ldr	r3, [r4, #28]
    15b6:	f013 0f17 	tst.w	r3, #23
    15ba:	d1fb      	bne.n	15b4 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    15bc:	230e      	movs	r3, #14
    15be:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    15c0:	2000      	movs	r0, #0
    15c2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    15c6:	2301      	movs	r3, #1
    15c8:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    15ca:	f240 13ff 	movw	r3, #511	; 0x1ff
    15ce:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    15d0:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    15d2:	f640 123c 	movw	r2, #2364	; 0x93c
    15d6:	4909      	ldr	r1, [pc, #36]	; (15fc <_spi_m_sync_init+0xe8>)
    15d8:	2000      	movs	r0, #0
    15da:	4b09      	ldr	r3, [pc, #36]	; (1600 <_spi_m_sync_init+0xec>)
    15dc:	4798      	blx	r3
		return ERR_INVALID_ARG;
    15de:	f06f 000c 	mvn.w	r0, #12
    15e2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    15e4:	f640 123c 	movw	r2, #2364	; 0x93c
    15e8:	4904      	ldr	r1, [pc, #16]	; (15fc <_spi_m_sync_init+0xe8>)
    15ea:	1c20      	adds	r0, r4, #0
    15ec:	bf18      	it	ne
    15ee:	2001      	movne	r0, #1
    15f0:	4b03      	ldr	r3, [pc, #12]	; (1600 <_spi_m_sync_init+0xec>)
    15f2:	4798      	blx	r3
    15f4:	e7aa      	b.n	154c <_spi_m_sync_init+0x38>
    15f6:	bf00      	nop
    15f8:	0000132d 	.word	0x0000132d
    15fc:	00001ff8 	.word	0x00001ff8
    1600:	00000f11 	.word	0x00000f11
    1604:	4020000c 	.word	0x4020000c

00001608 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1608:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    160a:	4604      	mov	r4, r0
    160c:	b160      	cbz	r0, 1628 <_spi_m_sync_enable+0x20>
    160e:	6800      	ldr	r0, [r0, #0]
    1610:	3000      	adds	r0, #0
    1612:	bf18      	it	ne
    1614:	2001      	movne	r0, #1
    1616:	f640 129b 	movw	r2, #2459	; 0x99b
    161a:	4904      	ldr	r1, [pc, #16]	; (162c <_spi_m_sync_enable+0x24>)
    161c:	4b04      	ldr	r3, [pc, #16]	; (1630 <_spi_m_sync_enable+0x28>)
    161e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1620:	6820      	ldr	r0, [r4, #0]
    1622:	4b04      	ldr	r3, [pc, #16]	; (1634 <_spi_m_sync_enable+0x2c>)
    1624:	4798      	blx	r3
}
    1626:	bd10      	pop	{r4, pc}
    1628:	2000      	movs	r0, #0
    162a:	e7f4      	b.n	1616 <_spi_m_sync_enable+0xe>
    162c:	00001ff8 	.word	0x00001ff8
    1630:	00000f11 	.word	0x00000f11
    1634:	0000136d 	.word	0x0000136d

00001638 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    163c:	4681      	mov	r9, r0
    163e:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    1640:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1642:	f8d1 8000 	ldr.w	r8, [r1]
    1646:	684d      	ldr	r5, [r1, #4]
    1648:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    164a:	b1a8      	cbz	r0, 1678 <_spi_m_sync_trans+0x40>
    164c:	1c20      	adds	r0, r4, #0
    164e:	bf18      	it	ne
    1650:	2001      	movne	r0, #1
    1652:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    1656:	492e      	ldr	r1, [pc, #184]	; (1710 <_spi_m_sync_trans+0xd8>)
    1658:	4b2e      	ldr	r3, [pc, #184]	; (1714 <_spi_m_sync_trans+0xdc>)
    165a:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    165c:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    165e:	f013 0f07 	tst.w	r3, #7
    1662:	d134      	bne.n	16ce <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1664:	69e0      	ldr	r0, [r4, #28]
    1666:	f010 0003 	ands.w	r0, r0, #3
    166a:	d1fb      	bne.n	1664 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    166c:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    166e:	f013 0f02 	tst.w	r3, #2
    1672:	d030      	beq.n	16d6 <_spi_m_sync_trans+0x9e>
    1674:	4602      	mov	r2, r0
    1676:	e008      	b.n	168a <_spi_m_sync_trans+0x52>
    1678:	2000      	movs	r0, #0
    167a:	e7ea      	b.n	1652 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    167c:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    167e:	f013 0f80 	tst.w	r3, #128	; 0x80
    1682:	d112      	bne.n	16aa <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1684:	68b3      	ldr	r3, [r6, #8]
    1686:	4283      	cmp	r3, r0
    1688:	d91e      	bls.n	16c8 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    168a:	7e23      	ldrb	r3, [r4, #24]
    168c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    168e:	f013 0f04 	tst.w	r3, #4
    1692:	d024      	beq.n	16de <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1694:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1696:	2d00      	cmp	r5, #0
    1698:	d0f0      	beq.n	167c <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    169a:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    169c:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    169e:	bf91      	iteee	ls
    16a0:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    16a2:	0a09      	lsrhi	r1, r1, #8
    16a4:	7069      	strbhi	r1, [r5, #1]
    16a6:	3502      	addhi	r5, #2
    16a8:	e7e8      	b.n	167c <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    16aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    16ae:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    16b0:	2380      	movs	r3, #128	; 0x80
    16b2:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    16b4:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    16b8:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    16ba:	f013 0f03 	tst.w	r3, #3
    16be:	d0fb      	beq.n	16b8 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    16c0:	2303      	movs	r3, #3
    16c2:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    16c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    16c8:	4293      	cmp	r3, r2
    16ca:	d8de      	bhi.n	168a <_spi_m_sync_trans+0x52>
    16cc:	e7f4      	b.n	16b8 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    16ce:	f06f 0003 	mvn.w	r0, #3
    16d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    16d6:	f06f 0013 	mvn.w	r0, #19
    16da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    16de:	4290      	cmp	r0, r2
    16e0:	d8cd      	bhi.n	167e <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    16e2:	f013 0f01 	tst.w	r3, #1
    16e6:	d0ca      	beq.n	167e <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    16e8:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    16ec:	f1b8 0f00 	cmp.w	r8, #0
    16f0:	d00b      	beq.n	170a <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    16f2:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    16f6:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    16f8:	bf91      	iteee	ls
    16fa:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    16fe:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    1702:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    1706:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    170a:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    170c:	62a1      	str	r1, [r4, #40]	; 0x28
    170e:	e7b6      	b.n	167e <_spi_m_sync_trans+0x46>
    1710:	00001ff8 	.word	0x00001ff8
    1714:	00000f11 	.word	0x00000f11

00001718 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    1718:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    171a:	4604      	mov	r4, r0
    171c:	b330      	cbz	r0, 176c <_wdt_init+0x54>
    171e:	6800      	ldr	r0, [r0, #0]
    1720:	3000      	adds	r0, #0
    1722:	bf18      	it	ne
    1724:	2001      	movne	r0, #1
    1726:	2250      	movs	r2, #80	; 0x50
    1728:	4914      	ldr	r1, [pc, #80]	; (177c <_wdt_init+0x64>)
    172a:	4b15      	ldr	r3, [pc, #84]	; (1780 <_wdt_init+0x68>)
    172c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    172e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1730:	689a      	ldr	r2, [r3, #8]
    1732:	f012 0f0e 	tst.w	r2, #14
    1736:	d1fb      	bne.n	1730 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1738:	781a      	ldrb	r2, [r3, #0]
    173a:	09d2      	lsrs	r2, r2, #7
    173c:	d118      	bne.n	1770 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    173e:	689a      	ldr	r2, [r3, #8]
    1740:	f012 0f0e 	tst.w	r2, #14
    1744:	d1fb      	bne.n	173e <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1746:	781a      	ldrb	r2, [r3, #0]
    1748:	f012 0f02 	tst.w	r2, #2
    174c:	d113      	bne.n	1776 <_wdt_init+0x5e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    174e:	781a      	ldrb	r2, [r3, #0]
    1750:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1754:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1756:	689a      	ldr	r2, [r3, #8]
    1758:	f012 0f0e 	tst.w	r2, #14
    175c:	d1fb      	bne.n	1756 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    175e:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    1760:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    1762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    1766:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    1768:	2000      	movs	r0, #0
    176a:	bd10      	pop	{r4, pc}
    176c:	2000      	movs	r0, #0
    176e:	e7da      	b.n	1726 <_wdt_init+0xe>
		return ERR_DENIED;
    1770:	f06f 0010 	mvn.w	r0, #16
    1774:	bd10      	pop	{r4, pc}
    1776:	f06f 0010 	mvn.w	r0, #16
}
    177a:	bd10      	pop	{r4, pc}
    177c:	00002014 	.word	0x00002014
    1780:	00000f11 	.word	0x00000f11

00001784 <main>:


uint8_t i2c_buf[RX_LENGTH]; 

int main(void)
{	
    1784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1788:	b083      	sub	sp, #12
    178a:	af00      	add	r7, sp, #0
	atmel_start_init();
    178c:	4b26      	ldr	r3, [pc, #152]	; (1828 <main+0xa4>)
    178e:	4798      	blx	r3
	
	while (1) 
	{
		I2C_read(i2c_buf, RX_LENGTH);
    1790:	4c26      	ldr	r4, [pc, #152]	; (182c <main+0xa8>)
    1792:	4e27      	ldr	r6, [pc, #156]	; (1830 <main+0xac>)
		
		nor_flash_qspi_init();
    1794:	4d27      	ldr	r5, [pc, #156]	; (1834 <main+0xb0>)
    1796:	e005      	b.n	17a4 <main+0x20>
					uint8_t error_packet[3] = {start_byte, error_cmd, error_no_target};
					I2C_write(error_packet, 3);
				} 
				
				//swd_reset(); 
				uint32_t _idcode = swd_read(req_read_idcode); // immediate xfer second read not working, try host holding line low after between xfers or 50 clk cycle reset followed by read-id as new re-connect sequence											
    1798:	20a5      	movs	r0, #165	; 0xa5
    179a:	4b27      	ldr	r3, [pc, #156]	; (1838 <main+0xb4>)
    179c:	4798      	blx	r3
				if(idcode == _idcode) // idcode match - neither value should be 0x00
    179e:	4581      	cmp	r9, r0
    17a0:	d03e      	beq.n	1820 <main+0x9c>
    17a2:	46c5      	mov	sp, r8
		I2C_read(i2c_buf, RX_LENGTH);
    17a4:	210a      	movs	r1, #10
    17a6:	4620      	mov	r0, r4
    17a8:	47b0      	blx	r6
		nor_flash_qspi_init();
    17aa:	47a8      	blx	r5
		if(i2c_buf[0] == start_byte) //start byte CC 
    17ac:	7823      	ldrb	r3, [r4, #0]
    17ae:	2bcc      	cmp	r3, #204	; 0xcc
    17b0:	d1f8      	bne.n	17a4 <main+0x20>
			if(i2c_buf[1] == target_cmd) //target cmd BB (data address, data length, target flash address, and chip type to follow, atmel begins programming)
    17b2:	7863      	ldrb	r3, [r4, #1]
    17b4:	2bbb      	cmp	r3, #187	; 0xbb
    17b6:	d1f5      	bne.n	17a4 <main+0x20>
			{
    17b8:	46e8      	mov	r8, sp
				uint32_t data_addr = i2c_buf[2] << 24 | i2c_buf[3] << 16 | i2c_buf[4] << 8 | i2c_buf[5];
    17ba:	78a3      	ldrb	r3, [r4, #2]
    17bc:	78e2      	ldrb	r2, [r4, #3]
    17be:	0412      	lsls	r2, r2, #16
    17c0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    17c4:	7963      	ldrb	r3, [r4, #5]
    17c6:	431a      	orrs	r2, r3
    17c8:	7920      	ldrb	r0, [r4, #4]
				uint32_t data_len = i2c_buf[6] << 24 | i2c_buf[7] << 16 | i2c_buf[8] << 8 | i2c_buf[9];
    17ca:	79a1      	ldrb	r1, [r4, #6]
    17cc:	79e3      	ldrb	r3, [r4, #7]
    17ce:	041b      	lsls	r3, r3, #16
    17d0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    17d4:	7a61      	ldrb	r1, [r4, #9]
    17d6:	430b      	orrs	r3, r1
    17d8:	7a21      	ldrb	r1, [r4, #8]
    17da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				uint8_t qspi_buff[data_len]; 
    17de:	1dd9      	adds	r1, r3, #7
    17e0:	f021 0107 	bic.w	r1, r1, #7
    17e4:	ebad 0d01 	sub.w	sp, sp, r1
				spi_nor_flash_read(SPI_NOR_FLASH_0, qspi_buff, data_addr, data_len); // TODO: test that data is being received
    17e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    17ec:	4669      	mov	r1, sp
    17ee:	4813      	ldr	r0, [pc, #76]	; (183c <main+0xb8>)
    17f0:	6800      	ldr	r0, [r0, #0]
    17f2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 184c <main+0xc8>
    17f6:	47c8      	blx	r9
				swd_reset();
    17f8:	4b11      	ldr	r3, [pc, #68]	; (1840 <main+0xbc>)
    17fa:	4798      	blx	r3
				uint32_t idcode = swd_read(req_read_idcode); // Error here, //NOTE: if sync lost (ex: no stop bit) is leaves line undriven and waits for host to retry (after some clk cycles w/ line low), or signals a reset by not driving line 
    17fc:	20a5      	movs	r0, #165	; 0xa5
    17fe:	4b0e      	ldr	r3, [pc, #56]	; (1838 <main+0xb4>)
    1800:	4798      	blx	r3
    1802:	4681      	mov	r9, r0
				if(idcode == 0x00000000 || idcode == 0xFFFFFFFF)
    1804:	1e43      	subs	r3, r0, #1
    1806:	f113 0f03 	cmn.w	r3, #3
    180a:	d9c5      	bls.n	1798 <main+0x14>
					uint8_t error_packet[3] = {start_byte, error_cmd, error_no_target};
    180c:	4b0d      	ldr	r3, [pc, #52]	; (1844 <main+0xc0>)
    180e:	681b      	ldr	r3, [r3, #0]
    1810:	80bb      	strh	r3, [r7, #4]
    1812:	0c1b      	lsrs	r3, r3, #16
    1814:	71bb      	strb	r3, [r7, #6]
					I2C_write(error_packet, 3);
    1816:	2103      	movs	r1, #3
    1818:	1d38      	adds	r0, r7, #4
    181a:	4b0b      	ldr	r3, [pc, #44]	; (1848 <main+0xc4>)
    181c:	4798      	blx	r3
    181e:	e7bb      	b.n	1798 <main+0x14>
				{
					uint32_t ctrl_reg = swd_read(req_read_ctrl_stat);
    1820:	20b1      	movs	r0, #177	; 0xb1
    1822:	4b05      	ldr	r3, [pc, #20]	; (1838 <main+0xb4>)
    1824:	4798      	blx	r3
    1826:	e7bc      	b.n	17a2 <main+0x1e>
    1828:	000002d1 	.word	0x000002d1
    182c:	200000a4 	.word	0x200000a4
    1830:	00000905 	.word	0x00000905
    1834:	000007dd 	.word	0x000007dd
    1838:	00001dd9 	.word	0x00001dd9
    183c:	200000b0 	.word	0x200000b0
    1840:	00001da9 	.word	0x00001da9
    1844:	0000202c 	.word	0x0000202c
    1848:	00000949 	.word	0x00000949
    184c:	00001d6f 	.word	0x00001d6f

00001850 <s25fl116k_read_reg>:
	cmd.instruction = S25FL1_SOFT_RESET;
	qspi_sync_serial_run_command(descr, &cmd);
}

static uint8_t s25fl116k_read_reg(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst)
{
    1850:	b500      	push	{lr}
    1852:	b089      	sub	sp, #36	; 0x24
	uint32_t status;
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 1 */
	struct _qspi_command cmd = {
    1854:	2300      	movs	r3, #0
    1856:	9301      	str	r3, [sp, #4]
    1858:	9302      	str	r3, [sp, #8]
    185a:	9303      	str	r3, [sp, #12]
    185c:	9305      	str	r3, [sp, #20]
    185e:	f001 0107 	and.w	r1, r1, #7
    1862:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    1866:	f88d 1004 	strb.w	r1, [sp, #4]
    186a:	f88d 2008 	strb.w	r2, [sp, #8]
    186e:	2304      	movs	r3, #4
    1870:	9304      	str	r3, [sp, #16]
    1872:	ab07      	add	r3, sp, #28
    1874:	9306      	str	r3, [sp, #24]
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .rx_buf                   = &status,
	};

	qspi_sync_serial_run_command(descr, &cmd);
    1876:	a901      	add	r1, sp, #4
    1878:	4b03      	ldr	r3, [pc, #12]	; (1888 <s25fl116k_read_reg+0x38>)
    187a:	4798      	blx	r3
	return (uint8_t)status;
}
    187c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1880:	b009      	add	sp, #36	; 0x24
    1882:	f85d fb04 	ldr.w	pc, [sp], #4
    1886:	bf00      	nop
    1888:	00000c71 	.word	0x00000c71

0000188c <s25fl116k_wait_memory_access_ready>:

static void s25fl116k_wait_memory_access_ready(struct qspi_sync_descriptor *descr)
{
    188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    188e:	4607      	mov	r7, r0
	while (s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1) & S25FL1_STATUS_RDYBSY)
    1890:	2605      	movs	r6, #5
    1892:	2500      	movs	r5, #0
    1894:	4c04      	ldr	r4, [pc, #16]	; (18a8 <s25fl116k_wait_memory_access_ready+0x1c>)
    1896:	4632      	mov	r2, r6
    1898:	4629      	mov	r1, r5
    189a:	4638      	mov	r0, r7
    189c:	47a0      	blx	r4
    189e:	f010 0f01 	tst.w	r0, #1
    18a2:	d1f8      	bne.n	1896 <s25fl116k_wait_memory_access_ready+0xa>
		;
}
    18a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18a6:	bf00      	nop
    18a8:	00001851 	.word	0x00001851

000018ac <s25fl116k_write_enable>:

static void s25fl116k_write_enable(struct qspi_sync_descriptor *descr, uint8_t width, bool en)
{
    18ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ae:	b087      	sub	sp, #28
    18b0:	4604      	mov	r4, r0
	uint8_t              inst   = (en == true ? S25FL1_WRITE_ENABLE : S25FL1_WRITE_DISABLE);
    18b2:	4616      	mov	r6, r2
    18b4:	2a00      	cmp	r2, #0
    18b6:	bf14      	ite	ne
    18b8:	2206      	movne	r2, #6
    18ba:	2204      	moveq	r2, #4
	uint8_t              status = 0;
	struct _qspi_command cmd    = {
    18bc:	2300      	movs	r3, #0
    18be:	9300      	str	r3, [sp, #0]
    18c0:	9301      	str	r3, [sp, #4]
    18c2:	9302      	str	r3, [sp, #8]
    18c4:	9303      	str	r3, [sp, #12]
    18c6:	9304      	str	r3, [sp, #16]
    18c8:	9305      	str	r3, [sp, #20]
    18ca:	f001 0107 	and.w	r1, r1, #7
    18ce:	f041 0110 	orr.w	r1, r1, #16
    18d2:	f88d 1000 	strb.w	r1, [sp]
    18d6:	f88d 2004 	strb.w	r2, [sp, #4]
        .inst_frame.bits.width   = width,
        .inst_frame.bits.inst_en = 1,
        .instruction             = inst,
    };

	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    18da:	2205      	movs	r2, #5
    18dc:	4619      	mov	r1, r3
    18de:	4b0b      	ldr	r3, [pc, #44]	; (190c <s25fl116k_write_enable+0x60>)
    18e0:	4798      	blx	r3
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    18e2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    18e6:	42b0      	cmp	r0, r6
    18e8:	d00d      	beq.n	1906 <s25fl116k_write_enable+0x5a>
    18ea:	4635      	mov	r5, r6
		qspi_sync_serial_run_command(descr, &cmd);
    18ec:	4f08      	ldr	r7, [pc, #32]	; (1910 <s25fl116k_write_enable+0x64>)
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    18ee:	4e07      	ldr	r6, [pc, #28]	; (190c <s25fl116k_write_enable+0x60>)
		qspi_sync_serial_run_command(descr, &cmd);
    18f0:	4669      	mov	r1, sp
    18f2:	4620      	mov	r0, r4
    18f4:	47b8      	blx	r7
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    18f6:	2205      	movs	r2, #5
    18f8:	2100      	movs	r1, #0
    18fa:	4620      	mov	r0, r4
    18fc:	47b0      	blx	r6
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    18fe:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1902:	42a8      	cmp	r0, r5
    1904:	d1f4      	bne.n	18f0 <s25fl116k_write_enable+0x44>
	}
}
    1906:	b007      	add	sp, #28
    1908:	bdf0      	pop	{r4, r5, r6, r7, pc}
    190a:	bf00      	nop
    190c:	00001851 	.word	0x00001851
    1910:	00000c71 	.word	0x00000c71

00001914 <s25fl116k_write_status>:

static void s25fl116k_write_status(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst, uint8_t *data)
{
    1914:	b5f0      	push	{r4, r5, r6, r7, lr}
    1916:	b087      	sub	sp, #28
    1918:	4606      	mov	r6, r0
    191a:	460f      	mov	r7, r1
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 3 */
	struct _qspi_command cmd = {
    191c:	2400      	movs	r4, #0
    191e:	9400      	str	r4, [sp, #0]
    1920:	9401      	str	r4, [sp, #4]
    1922:	9402      	str	r4, [sp, #8]
    1924:	9405      	str	r4, [sp, #20]
    1926:	f001 0507 	and.w	r5, r1, #7
    192a:	f045 0590 	orr.w	r5, r5, #144	; 0x90
    192e:	f88d 5000 	strb.w	r5, [sp]
    1932:	f04f 0500 	mov.w	r5, #0
    1936:	f04f 0e02 	mov.w	lr, #2
    193a:	f36e 1505 	bfi	r5, lr, #4, #2
    193e:	f88d 5001 	strb.w	r5, [sp, #1]
    1942:	f88d 2004 	strb.w	r2, [sp, #4]
    1946:	2204      	movs	r2, #4
    1948:	9203      	str	r2, [sp, #12]
    194a:	9304      	str	r3, [sp, #16]
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .tx_buf                   = data,
	};
	s25fl116k_write_enable(descr, width, true);
    194c:	2201      	movs	r2, #1
    194e:	4d06      	ldr	r5, [pc, #24]	; (1968 <s25fl116k_write_status+0x54>)
    1950:	47a8      	blx	r5
	qspi_sync_serial_run_command(descr, &cmd);
    1952:	4669      	mov	r1, sp
    1954:	4630      	mov	r0, r6
    1956:	4b05      	ldr	r3, [pc, #20]	; (196c <s25fl116k_write_status+0x58>)
    1958:	4798      	blx	r3
	s25fl116k_write_enable(descr, width, false);
    195a:	4622      	mov	r2, r4
    195c:	4639      	mov	r1, r7
    195e:	4630      	mov	r0, r6
    1960:	47a8      	blx	r5
}
    1962:	b007      	add	sp, #28
    1964:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1966:	bf00      	nop
    1968:	000018ad 	.word	0x000018ad
    196c:	00000c71 	.word	0x00000c71

00001970 <s25fl116k_read>:
	}
	return me;
}

int32_t s25fl116k_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1970:	b570      	push	{r4, r5, r6, lr}
    1972:	b086      	sub	sp, #24
	struct s25fl116k *           s25fl1 = (struct s25fl116k *)me;
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    1974:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    1976:	2400      	movs	r4, #0
    1978:	9400      	str	r4, [sp, #0]
    197a:	9401      	str	r4, [sp, #4]
    197c:	9404      	str	r4, [sp, #16]
    197e:	24b0      	movs	r4, #176	; 0xb0
    1980:	f88d 4000 	strb.w	r4, [sp]
    1984:	f04f 0400 	mov.w	r4, #0
    1988:	2601      	movs	r6, #1
    198a:	f366 1405 	bfi	r4, r6, #4, #2
    198e:	f88d 4001 	strb.w	r4, [sp, #1]
    1992:	2408      	movs	r4, #8
    1994:	f88d 4002 	strb.w	r4, [sp, #2]
    1998:	240b      	movs	r4, #11
    199a:	f88d 4004 	strb.w	r4, [sp, #4]
    199e:	9202      	str	r2, [sp, #8]
    19a0:	9303      	str	r3, [sp, #12]
    19a2:	9105      	str	r1, [sp, #20]
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};

	if (s25fl1->quad_mode) {
    19a4:	7a03      	ldrb	r3, [r0, #8]
    19a6:	b14b      	cbz	r3, 19bc <s25fl116k_read+0x4c>
		cmd.instruction           = S25FL1_READ_ARRAY_QUAD;
    19a8:	236b      	movs	r3, #107	; 0x6b
    19aa:	f88d 3004 	strb.w	r3, [sp, #4]
		cmd.inst_frame.bits.width = QSPI_INST1_ADDR1_DATA4;
    19ae:	f89d 3000 	ldrb.w	r3, [sp]
    19b2:	2202      	movs	r2, #2
    19b4:	f362 0302 	bfi	r3, r2, #0, #3
    19b8:	f88d 3000 	strb.w	r3, [sp]
	}
	qspi_sync_serial_run_command(descr, &cmd);
    19bc:	4669      	mov	r1, sp
    19be:	4628      	mov	r0, r5
    19c0:	4b02      	ldr	r3, [pc, #8]	; (19cc <s25fl116k_read+0x5c>)
    19c2:	4798      	blx	r3
	return ERR_NONE;
}
    19c4:	2000      	movs	r0, #0
    19c6:	b006      	add	sp, #24
    19c8:	bd70      	pop	{r4, r5, r6, pc}
    19ca:	bf00      	nop
    19cc:	00000c71 	.word	0x00000c71

000019d0 <s25fl116k_page_program>:
{
    19d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19d2:	4604      	mov	r4, r0
    19d4:	460f      	mov	r7, r1
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    19d6:	2201      	movs	r2, #1
    19d8:	2100      	movs	r1, #0
    19da:	4d08      	ldr	r5, [pc, #32]	; (19fc <s25fl116k_page_program+0x2c>)
    19dc:	47a8      	blx	r5
	s25fl116k_wait_memory_access_ready(descr);
    19de:	4620      	mov	r0, r4
    19e0:	4e07      	ldr	r6, [pc, #28]	; (1a00 <s25fl116k_page_program+0x30>)
    19e2:	47b0      	blx	r6
	qspi_sync_serial_run_command(descr, cmd);
    19e4:	4639      	mov	r1, r7
    19e6:	4620      	mov	r0, r4
    19e8:	4b06      	ldr	r3, [pc, #24]	; (1a04 <s25fl116k_page_program+0x34>)
    19ea:	4798      	blx	r3
	s25fl116k_wait_memory_access_ready(descr);
    19ec:	4620      	mov	r0, r4
    19ee:	47b0      	blx	r6
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    19f0:	2200      	movs	r2, #0
    19f2:	4611      	mov	r1, r2
    19f4:	4620      	mov	r0, r4
    19f6:	47a8      	blx	r5
    19f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19fa:	bf00      	nop
    19fc:	000018ad 	.word	0x000018ad
    1a00:	0000188d 	.word	0x0000188d
    1a04:	00000c71 	.word	0x00000c71

00001a08 <s25fl116k_write>:

int32_t s25fl116k_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a0c:	b089      	sub	sp, #36	; 0x24
    1a0e:	9201      	str	r2, [sp, #4]
    1a10:	461e      	mov	r6, r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1a12:	6803      	ldr	r3, [r0, #0]
    1a14:	9300      	str	r3, [sp, #0]
	uint32_t i = 0;

	/** Size / page_size */
	uint32_t number_of_writes = (length >> 8);

	struct _qspi_command cmd = {
    1a16:	2300      	movs	r3, #0
    1a18:	9302      	str	r3, [sp, #8]
    1a1a:	9303      	str	r3, [sp, #12]
    1a1c:	9307      	str	r3, [sp, #28]
    1a1e:	23b0      	movs	r3, #176	; 0xb0
    1a20:	f88d 3008 	strb.w	r3, [sp, #8]
    1a24:	2330      	movs	r3, #48	; 0x30
    1a26:	f88d 3009 	strb.w	r3, [sp, #9]
    1a2a:	2302      	movs	r3, #2
    1a2c:	f88d 300c 	strb.w	r3, [sp, #12]
    1a30:	9204      	str	r2, [sp, #16]
    1a32:	9605      	str	r6, [sp, #20]
    1a34:	9106      	str	r1, [sp, #24]
	    .buf_len                  = length,
	    .tx_buf                   = buf,
	};

	/** If less than page size */
	if (number_of_writes == 0) {
    1a36:	0a37      	lsrs	r7, r6, #8
    1a38:	d023      	beq.n	1a82 <s25fl116k_write+0x7a>
    1a3a:	468b      	mov	fp, r1
    1a3c:	460c      	mov	r4, r1
    1a3e:	2500      	movs	r5, #0
		s25fl116k_page_program(descr, &cmd);
	} else {
		/** Multiple page */
		for (i = 0; i < number_of_writes; i++) {
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1a40:	f44f 7a80 	mov.w	sl, #256	; 0x100
			cmd.address = address;
    1a44:	9b01      	ldr	r3, [sp, #4]
    1a46:	eba3 0901 	sub.w	r9, r3, r1
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1a4a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1a9c <s25fl116k_write+0x94>
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1a4e:	f8cd a014 	str.w	sl, [sp, #20]
			cmd.address = address;
    1a52:	eb04 0309 	add.w	r3, r4, r9
    1a56:	9304      	str	r3, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1a58:	9406      	str	r4, [sp, #24]
    1a5a:	a902      	add	r1, sp, #8
    1a5c:	9800      	ldr	r0, [sp, #0]
    1a5e:	47c0      	blx	r8
			buf += S25FL1_PAGE_SIZE;
    1a60:	f504 7480 	add.w	r4, r4, #256	; 0x100
		for (i = 0; i < number_of_writes; i++) {
    1a64:	3501      	adds	r5, #1
    1a66:	42af      	cmp	r7, r5
    1a68:	d1f1      	bne.n	1a4e <s25fl116k_write+0x46>
    1a6a:	022d      	lsls	r5, r5, #8
    1a6c:	eb0b 0205 	add.w	r2, fp, r5
    1a70:	9b01      	ldr	r3, [sp, #4]
    1a72:	441d      	add	r5, r3
			address += S25FL1_PAGE_SIZE;
		}
		if (length % S25FL1_PAGE_SIZE) {
    1a74:	f016 03ff 	ands.w	r3, r6, #255	; 0xff
    1a78:	d108      	bne.n	1a8c <s25fl116k_write+0x84>
			cmd.address = address;
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
		}
	}
	return ERR_NONE;
}
    1a7a:	2000      	movs	r0, #0
    1a7c:	b009      	add	sp, #36	; 0x24
    1a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s25fl116k_page_program(descr, &cmd);
    1a82:	a902      	add	r1, sp, #8
    1a84:	9800      	ldr	r0, [sp, #0]
    1a86:	4b05      	ldr	r3, [pc, #20]	; (1a9c <s25fl116k_write+0x94>)
    1a88:	4798      	blx	r3
    1a8a:	e7f6      	b.n	1a7a <s25fl116k_write+0x72>
			cmd.buf_len = length % S25FL1_PAGE_SIZE;
    1a8c:	9305      	str	r3, [sp, #20]
			cmd.address = address;
    1a8e:	9504      	str	r5, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1a90:	9206      	str	r2, [sp, #24]
    1a92:	a902      	add	r1, sp, #8
    1a94:	9800      	ldr	r0, [sp, #0]
    1a96:	4b01      	ldr	r3, [pc, #4]	; (1a9c <s25fl116k_write+0x94>)
    1a98:	4798      	blx	r3
    1a9a:	e7ee      	b.n	1a7a <s25fl116k_write+0x72>
    1a9c:	000019d1 	.word	0x000019d1

00001aa0 <s25fl116k_erase>:

int32_t s25fl116k_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    1aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1aa4:	b087      	sub	sp, #28
    1aa6:	4615      	mov	r5, r2
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1aa8:	6806      	ldr	r6, [r0, #0]

	uint32_t temp_addr = address;
	uint32_t temp_len  = length;
	uint8_t  status;

	struct _qspi_command cmd = {
    1aaa:	2300      	movs	r3, #0
    1aac:	9300      	str	r3, [sp, #0]
    1aae:	9301      	str	r3, [sp, #4]
    1ab0:	9302      	str	r3, [sp, #8]
    1ab2:	9303      	str	r3, [sp, #12]
    1ab4:	9304      	str	r3, [sp, #16]
    1ab6:	9305      	str	r3, [sp, #20]
    1ab8:	2330      	movs	r3, #48	; 0x30
    1aba:	f88d 3000 	strb.w	r3, [sp]
    1abe:	f04f 0300 	mov.w	r3, #0
    1ac2:	2202      	movs	r2, #2
    1ac4:	f362 1305 	bfi	r3, r2, #4, #2
    1ac8:	f88d 3001 	strb.w	r3, [sp, #1]
	    .inst_frame.bits.inst_en  = 1,
	    .inst_frame.bits.addr_en  = 1,
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	};

	if ((length % S25FL1_SECTOR_SIZE) || (address % S25FL1_SECTOR_SIZE)) {
    1acc:	ea41 0305 	orr.w	r3, r1, r5
    1ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1ad4:	2b00      	cmp	r3, #0
    1ad6:	d15e      	bne.n	1b96 <s25fl116k_erase+0xf6>
    1ad8:	460c      	mov	r4, r1
		return ERR_INVALID_ARG;
	}
	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1ada:	2205      	movs	r2, #5
    1adc:	2100      	movs	r1, #0
    1ade:	4630      	mov	r0, r6
    1ae0:	4b31      	ldr	r3, [pc, #196]	; (1ba8 <s25fl116k_erase+0x108>)
    1ae2:	4798      	blx	r3
	if ((status & S25FL1_STATUS_RDYBSY) != S25FL1_STATUS_RDYBSY_READY)
    1ae4:	f010 0f01 	tst.w	r0, #1
    1ae8:	d003      	beq.n	1af2 <s25fl116k_erase+0x52>
		return S25FL1_ERROR_BUSY;
    1aea:	2002      	movs	r0, #2
			return ERR_INVALID_ARG;
		}
	}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
	return ERR_NONE;
}
    1aec:	b007      	add	sp, #28
    1aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    1af2:	2201      	movs	r2, #1
    1af4:	2100      	movs	r1, #0
    1af6:	4630      	mov	r0, r6
    1af8:	4b2c      	ldr	r3, [pc, #176]	; (1bac <s25fl116k_erase+0x10c>)
    1afa:	4798      	blx	r3
	if (address == 0 && length >= S25FL1_FLASH_SIZE) {
    1afc:	b914      	cbnz	r4, 1b04 <s25fl116k_erase+0x64>
    1afe:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
    1b02:	d207      	bcs.n	1b14 <s25fl116k_erase+0x74>
	while (temp_len > 0) {
    1b04:	2d00      	cmp	r5, #0
    1b06:	d03f      	beq.n	1b88 <s25fl116k_erase+0xe8>
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    1b08:	f04f 09d8 	mov.w	r9, #216	; 0xd8
			qspi_sync_serial_run_command(descr, &cmd);
    1b0c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1bb4 <s25fl116k_erase+0x114>
			s25fl116k_wait_memory_access_ready(descr);
    1b10:	4f27      	ldr	r7, [pc, #156]	; (1bb0 <s25fl116k_erase+0x110>)
    1b12:	e026      	b.n	1b62 <s25fl116k_erase+0xc2>
		cmd.inst_frame.bits.addr_en = 0;
    1b14:	f89d 3000 	ldrb.w	r3, [sp]
    1b18:	f36f 1345 	bfc	r3, #5, #1
    1b1c:	f88d 3000 	strb.w	r3, [sp]
		cmd.instruction             = S25FL1_CHIP_ERASE_2;
    1b20:	23c7      	movs	r3, #199	; 0xc7
    1b22:	f88d 3004 	strb.w	r3, [sp, #4]
		qspi_sync_serial_run_command(descr, &cmd);
    1b26:	4669      	mov	r1, sp
    1b28:	4630      	mov	r0, r6
    1b2a:	4b22      	ldr	r3, [pc, #136]	; (1bb4 <s25fl116k_erase+0x114>)
    1b2c:	4798      	blx	r3
		temp_len -= S25FL1_FLASH_SIZE;
    1b2e:	f5a5 1500 	sub.w	r5, r5, #2097152	; 0x200000
		s25fl116k_wait_memory_access_ready(descr);
    1b32:	4630      	mov	r0, r6
    1b34:	4b1e      	ldr	r3, [pc, #120]	; (1bb0 <s25fl116k_erase+0x110>)
    1b36:	4798      	blx	r3
    1b38:	e7e4      	b.n	1b04 <s25fl116k_erase+0x64>
		} else if ((temp_addr % S25FL1_SECTOR_SIZE == 0) && (temp_len >= S25FL1_SECTOR_SIZE)) {
    1b3a:	f3c4 030b 	ubfx	r3, r4, #0, #12
    1b3e:	bb6b      	cbnz	r3, 1b9c <s25fl116k_erase+0xfc>
    1b40:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    1b44:	d32d      	bcc.n	1ba2 <s25fl116k_erase+0x102>
			cmd.address     = temp_addr;
    1b46:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_4K;
    1b48:	2320      	movs	r3, #32
    1b4a:	f88d 3004 	strb.w	r3, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1b4e:	4669      	mov	r1, sp
    1b50:	4630      	mov	r0, r6
    1b52:	47c0      	blx	r8
			temp_addr += S25FL1_SECTOR_SIZE;
    1b54:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
			temp_len -= S25FL1_SECTOR_SIZE;
    1b58:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
			s25fl116k_wait_memory_access_ready(descr);
    1b5c:	4630      	mov	r0, r6
    1b5e:	47b8      	blx	r7
	while (temp_len > 0) {
    1b60:	b195      	cbz	r5, 1b88 <s25fl116k_erase+0xe8>
		if ((temp_addr % S25FL1_BLOCK_SIZE == 0) && (temp_len >= S25FL1_BLOCK_SIZE)) {
    1b62:	b2a3      	uxth	r3, r4
    1b64:	2b00      	cmp	r3, #0
    1b66:	d1e8      	bne.n	1b3a <s25fl116k_erase+0x9a>
    1b68:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    1b6c:	d3e5      	bcc.n	1b3a <s25fl116k_erase+0x9a>
			cmd.address     = temp_addr;
    1b6e:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    1b70:	f88d 9004 	strb.w	r9, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1b74:	4669      	mov	r1, sp
    1b76:	4630      	mov	r0, r6
    1b78:	47c0      	blx	r8
			temp_addr += S25FL1_BLOCK_SIZE;
    1b7a:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
			temp_len -= S25FL1_BLOCK_SIZE;
    1b7e:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
			s25fl116k_wait_memory_access_ready(descr);
    1b82:	4630      	mov	r0, r6
    1b84:	47b8      	blx	r7
    1b86:	e7eb      	b.n	1b60 <s25fl116k_erase+0xc0>
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    1b88:	2200      	movs	r2, #0
    1b8a:	4611      	mov	r1, r2
    1b8c:	4630      	mov	r0, r6
    1b8e:	4b07      	ldr	r3, [pc, #28]	; (1bac <s25fl116k_erase+0x10c>)
    1b90:	4798      	blx	r3
	return ERR_NONE;
    1b92:	2000      	movs	r0, #0
    1b94:	e7aa      	b.n	1aec <s25fl116k_erase+0x4c>
		return ERR_INVALID_ARG;
    1b96:	f06f 000c 	mvn.w	r0, #12
    1b9a:	e7a7      	b.n	1aec <s25fl116k_erase+0x4c>
			return ERR_INVALID_ARG;
    1b9c:	f06f 000c 	mvn.w	r0, #12
    1ba0:	e7a4      	b.n	1aec <s25fl116k_erase+0x4c>
    1ba2:	f06f 000c 	mvn.w	r0, #12
    1ba6:	e7a1      	b.n	1aec <s25fl116k_erase+0x4c>
    1ba8:	00001851 	.word	0x00001851
    1bac:	000018ad 	.word	0x000018ad
    1bb0:	0000188d 	.word	0x0000188d
    1bb4:	00000c71 	.word	0x00000c71

00001bb8 <s25fl116k_enable_xip>:

int32_t s25fl116k_enable_xip(const struct spi_nor_flash *const me)
{
    1bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bba:	b089      	sub	sp, #36	; 0x24
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1bbc:	6804      	ldr	r4, [r0, #0]

	uint8_t dummy_read, status[3];

	struct _qspi_command cmd = {
    1bbe:	2500      	movs	r5, #0
    1bc0:	9501      	str	r5, [sp, #4]
    1bc2:	9502      	str	r5, [sp, #8]
    1bc4:	9503      	str	r5, [sp, #12]
    1bc6:	9505      	str	r5, [sp, #20]
    1bc8:	23f4      	movs	r3, #244	; 0xf4
    1bca:	f88d 3004 	strb.w	r3, [sp, #4]
    1bce:	2302      	movs	r3, #2
    1bd0:	f043 0250 	orr.w	r2, r3, #80	; 0x50
    1bd4:	f88d 2005 	strb.w	r2, [sp, #5]
    1bd8:	2205      	movs	r2, #5
    1bda:	f88d 2006 	strb.w	r2, [sp, #6]
    1bde:	21eb      	movs	r1, #235	; 0xeb
    1be0:	f88d 1008 	strb.w	r1, [sp, #8]
    1be4:	f88d 3009 	strb.w	r3, [sp, #9]
    1be8:	2301      	movs	r3, #1
    1bea:	9304      	str	r3, [sp, #16]
    1bec:	f10d 031f 	add.w	r3, sp, #31
    1bf0:	9306      	str	r3, [sp, #24]
	    .address                        = 0,
	    .buf_len                        = 1,
	    .rx_buf                         = &dummy_read,
	};

	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1bf2:	4629      	mov	r1, r5
    1bf4:	4620      	mov	r0, r4
    1bf6:	4e17      	ldr	r6, [pc, #92]	; (1c54 <s25fl116k_enable_xip+0x9c>)
    1bf8:	47b0      	blx	r6
    1bfa:	f88d 001c 	strb.w	r0, [sp, #28]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1bfe:	2235      	movs	r2, #53	; 0x35
    1c00:	4629      	mov	r1, r5
    1c02:	4620      	mov	r0, r4
    1c04:	47b0      	blx	r6
    1c06:	f88d 001d 	strb.w	r0, [sp, #29]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    1c0a:	2233      	movs	r2, #51	; 0x33
    1c0c:	4629      	mov	r1, r5
    1c0e:	4620      	mov	r0, r4
    1c10:	47b0      	blx	r6
    1c12:	f88d 001e 	strb.w	r0, [sp, #30]

	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1c16:	f89d 001d 	ldrb.w	r0, [sp, #29]
    1c1a:	f010 0f02 	tst.w	r0, #2
    1c1e:	d112      	bne.n	1c46 <s25fl116k_enable_xip+0x8e>
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1c20:	4f0d      	ldr	r7, [pc, #52]	; (1c58 <s25fl116k_enable_xip+0xa0>)
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    1c22:	f040 0002 	orr.w	r0, r0, #2
    1c26:	f88d 001d 	strb.w	r0, [sp, #29]
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1c2a:	ab07      	add	r3, sp, #28
    1c2c:	2201      	movs	r2, #1
    1c2e:	4629      	mov	r1, r5
    1c30:	4620      	mov	r0, r4
    1c32:	47b8      	blx	r7
		status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1c34:	2235      	movs	r2, #53	; 0x35
    1c36:	4629      	mov	r1, r5
    1c38:	4620      	mov	r0, r4
    1c3a:	47b0      	blx	r6
    1c3c:	f88d 001d 	strb.w	r0, [sp, #29]
	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1c40:	f010 0f02 	tst.w	r0, #2
    1c44:	d0ed      	beq.n	1c22 <s25fl116k_enable_xip+0x6a>
	}

	qspi_sync_serial_run_command(descr, &cmd);
    1c46:	a901      	add	r1, sp, #4
    1c48:	4620      	mov	r0, r4
    1c4a:	4b04      	ldr	r3, [pc, #16]	; (1c5c <s25fl116k_enable_xip+0xa4>)
    1c4c:	4798      	blx	r3
	return ERR_NONE;
}
    1c4e:	2000      	movs	r0, #0
    1c50:	b009      	add	sp, #36	; 0x24
    1c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c54:	00001851 	.word	0x00001851
    1c58:	00001915 	.word	0x00001915
    1c5c:	00000c71 	.word	0x00000c71

00001c60 <s25fl116k_disable_xip>:

int32_t s25fl116k_disable_xip(const struct spi_nor_flash *const me)
{
    1c60:	b530      	push	{r4, r5, lr}
    1c62:	b087      	sub	sp, #28
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1c64:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    1c66:	2400      	movs	r4, #0
    1c68:	9400      	str	r4, [sp, #0]
    1c6a:	9401      	str	r4, [sp, #4]
    1c6c:	9402      	str	r4, [sp, #8]
    1c6e:	9403      	str	r4, [sp, #12]
    1c70:	9404      	str	r4, [sp, #16]
    1c72:	9405      	str	r4, [sp, #20]
    1c74:	2310      	movs	r3, #16
    1c76:	f88d 3000 	strb.w	r3, [sp]
    1c7a:	23ff      	movs	r3, #255	; 0xff
    1c7c:	f88d 3004 	strb.w	r3, [sp, #4]
	    .inst_frame.bits.width   = QSPI_INST1_ADDR1_DATA1,
	    .inst_frame.bits.inst_en = 1,
	    .instruction             = S25FL1_CONT_MODE_RESET,
	};

	qspi_sync_init(descr, QSPI);
    1c80:	4906      	ldr	r1, [pc, #24]	; (1c9c <s25fl116k_disable_xip+0x3c>)
    1c82:	4628      	mov	r0, r5
    1c84:	4b06      	ldr	r3, [pc, #24]	; (1ca0 <s25fl116k_disable_xip+0x40>)
    1c86:	4798      	blx	r3
	qspi_sync_enable(descr);
    1c88:	4628      	mov	r0, r5
    1c8a:	4b06      	ldr	r3, [pc, #24]	; (1ca4 <s25fl116k_disable_xip+0x44>)
    1c8c:	4798      	blx	r3

	qspi_sync_serial_run_command(descr, &cmd);
    1c8e:	4669      	mov	r1, sp
    1c90:	4628      	mov	r0, r5
    1c92:	4b05      	ldr	r3, [pc, #20]	; (1ca8 <s25fl116k_disable_xip+0x48>)
    1c94:	4798      	blx	r3
	return ERR_NONE;
}
    1c96:	4620      	mov	r0, r4
    1c98:	b007      	add	sp, #28
    1c9a:	bd30      	pop	{r4, r5, pc}
    1c9c:	42003400 	.word	0x42003400
    1ca0:	00000c19 	.word	0x00000c19
    1ca4:	00000c49 	.word	0x00000c49
    1ca8:	00000c71 	.word	0x00000c71

00001cac <s25fl116k_construct>:
{
    1cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cb0:	b082      	sub	sp, #8
    1cb2:	4606      	mov	r6, r0
    1cb4:	4617      	mov	r7, r2
	spi_nor_flash_construct(me, io, &s25fl116k_interface);
    1cb6:	4a28      	ldr	r2, [pc, #160]	; (1d58 <s25fl116k_construct+0xac>)
    1cb8:	4b28      	ldr	r3, [pc, #160]	; (1d5c <s25fl116k_construct+0xb0>)
    1cba:	4798      	blx	r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1cbc:	6834      	ldr	r4, [r6, #0]
	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1cbe:	2205      	movs	r2, #5
    1cc0:	2100      	movs	r1, #0
    1cc2:	4620      	mov	r0, r4
    1cc4:	4d26      	ldr	r5, [pc, #152]	; (1d60 <s25fl116k_construct+0xb4>)
    1cc6:	47a8      	blx	r5
    1cc8:	f88d 0004 	strb.w	r0, [sp, #4]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1ccc:	2235      	movs	r2, #53	; 0x35
    1cce:	2100      	movs	r1, #0
    1cd0:	4620      	mov	r0, r4
    1cd2:	47a8      	blx	r5
    1cd4:	f88d 0005 	strb.w	r0, [sp, #5]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    1cd8:	2233      	movs	r2, #51	; 0x33
    1cda:	2100      	movs	r1, #0
    1cdc:	4620      	mov	r0, r4
    1cde:	47a8      	blx	r5
    1ce0:	f88d 0006 	strb.w	r0, [sp, #6]
	s25fl1->quad_mode = quad_mode;
    1ce4:	7237      	strb	r7, [r6, #8]
	if (quad_mode) {
    1ce6:	b9cf      	cbnz	r7, 1d1c <s25fl116k_construct+0x70>
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    1ce8:	f89d 0005 	ldrb.w	r0, [sp, #5]
    1cec:	f010 0f02 	tst.w	r0, #2
    1cf0:	d02d      	beq.n	1d4e <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1cf2:	2500      	movs	r5, #0
    1cf4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1d64 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1cf8:	4f19      	ldr	r7, [pc, #100]	; (1d60 <s25fl116k_construct+0xb4>)
			status[1] &= (~S25FL1_STATUS_QUAD_ENABLE);
    1cfa:	f020 0002 	bic.w	r0, r0, #2
    1cfe:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1d02:	ab01      	add	r3, sp, #4
    1d04:	2201      	movs	r2, #1
    1d06:	4629      	mov	r1, r5
    1d08:	4620      	mov	r0, r4
    1d0a:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1d0c:	2235      	movs	r2, #53	; 0x35
    1d0e:	4629      	mov	r1, r5
    1d10:	4620      	mov	r0, r4
    1d12:	47b8      	blx	r7
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    1d14:	f010 0f02 	tst.w	r0, #2
    1d18:	d1ef      	bne.n	1cfa <s25fl116k_construct+0x4e>
    1d1a:	e018      	b.n	1d4e <s25fl116k_construct+0xa2>
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1d1c:	f89d 0005 	ldrb.w	r0, [sp, #5]
    1d20:	f010 0f02 	tst.w	r0, #2
    1d24:	d113      	bne.n	1d4e <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1d26:	2500      	movs	r5, #0
    1d28:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1d64 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1d2c:	4f0c      	ldr	r7, [pc, #48]	; (1d60 <s25fl116k_construct+0xb4>)
			status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    1d2e:	f040 0002 	orr.w	r0, r0, #2
    1d32:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1d36:	ab01      	add	r3, sp, #4
    1d38:	2201      	movs	r2, #1
    1d3a:	4629      	mov	r1, r5
    1d3c:	4620      	mov	r0, r4
    1d3e:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1d40:	2235      	movs	r2, #53	; 0x35
    1d42:	4629      	mov	r1, r5
    1d44:	4620      	mov	r0, r4
    1d46:	47b8      	blx	r7
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1d48:	f010 0f02 	tst.w	r0, #2
    1d4c:	d0ef      	beq.n	1d2e <s25fl116k_construct+0x82>
}
    1d4e:	4630      	mov	r0, r6
    1d50:	b002      	add	sp, #8
    1d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d56:	bf00      	nop
    1d58:	00002030 	.word	0x00002030
    1d5c:	00001d69 	.word	0x00001d69
    1d60:	00001851 	.word	0x00001851
    1d64:	00001915 	.word	0x00001915

00001d68 <spi_nor_flash_construct>:
#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
    1d68:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    1d6a:	6042      	str	r2, [r0, #4]

	return me;
}
    1d6c:	4770      	bx	lr

00001d6e <spi_nor_flash_read>:

int32_t spi_nor_flash_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1d6e:	b510      	push	{r4, lr}
	return me->interface->read(me, buf, address, length);
    1d70:	6844      	ldr	r4, [r0, #4]
    1d72:	6824      	ldr	r4, [r4, #0]
    1d74:	47a0      	blx	r4
}
    1d76:	bd10      	pop	{r4, pc}

00001d78 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    1d78:	b510      	push	{r4, lr}

	qspi_sync_enable(&QUAD_SPI_0);
    1d7a:	4c06      	ldr	r4, [pc, #24]	; (1d94 <spi_nor_flash_init+0x1c>)
    1d7c:	4620      	mov	r0, r4
    1d7e:	4b06      	ldr	r3, [pc, #24]	; (1d98 <spi_nor_flash_init+0x20>)
    1d80:	4798      	blx	r3
	SPI_NOR_FLASH_0 = s25fl116k_construct(&SPI_NOR_FLASH_0_descr.parent, &QUAD_SPI_0, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    1d82:	2200      	movs	r2, #0
    1d84:	4621      	mov	r1, r4
    1d86:	4805      	ldr	r0, [pc, #20]	; (1d9c <spi_nor_flash_init+0x24>)
    1d88:	4b05      	ldr	r3, [pc, #20]	; (1da0 <spi_nor_flash_init+0x28>)
    1d8a:	4798      	blx	r3
    1d8c:	4b05      	ldr	r3, [pc, #20]	; (1da4 <spi_nor_flash_init+0x2c>)
    1d8e:	6018      	str	r0, [r3, #0]
    1d90:	bd10      	pop	{r4, pc}
    1d92:	bf00      	nop
    1d94:	20000068 	.word	0x20000068
    1d98:	00000c49 	.word	0x00000c49
    1d9c:	20000024 	.word	0x20000024
    1da0:	00001cad 	.word	0x00001cad
    1da4:	200000b0 	.word	0x200000b0

00001da8 <swd_reset>:
	
	//TODO: sense input 
}

void swd_reset(void)
{
    1da8:	b530      	push	{r4, r5, lr}
    1daa:	b083      	sub	sp, #12
	uint8_t rst_cmd[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00}; // min of 50 bits clocked with swdio high
    1dac:	4b08      	ldr	r3, [pc, #32]	; (1dd0 <swd_reset+0x28>)
    1dae:	e893 0003 	ldmia.w	r3, {r0, r1}
    1db2:	e88d 0003 	stmia.w	sp, {r0, r1}
		
	for(int i = 0; i < 3; i++)
	{
		SWD_tx(rst_cmd, 8); // reset device,
    1db6:	2108      	movs	r1, #8
    1db8:	4668      	mov	r0, sp
    1dba:	4d06      	ldr	r5, [pc, #24]	; (1dd4 <swd_reset+0x2c>)
    1dbc:	47a8      	blx	r5
    1dbe:	2108      	movs	r1, #8
    1dc0:	4668      	mov	r0, sp
    1dc2:	47a8      	blx	r5
    1dc4:	2108      	movs	r1, #8
    1dc6:	4668      	mov	r0, sp
    1dc8:	47a8      	blx	r5
	}
}
    1dca:	b003      	add	sp, #12
    1dcc:	bd30      	pop	{r4, r5, pc}
    1dce:	bf00      	nop
    1dd0:	00002048 	.word	0x00002048
    1dd4:	0000087d 	.word	0x0000087d

00001dd8 <swd_read>:

uint32_t swd_read(uint8_t cmd)
{
    1dd8:	b530      	push	{r4, r5, lr}
    1dda:	b085      	sub	sp, #20
    1ddc:	f88d 0007 	strb.w	r0, [sp, #7]
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1de0:	4a1b      	ldr	r2, [pc, #108]	; (1e50 <swd_read+0x78>)
    1de2:	6813      	ldr	r3, [r2, #0]
	tmp |= value << SERCOM_SPI_CTRLA_CPHA_Pos;
    1de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
	((Sercom *)hw)->SPI.CTRLA.reg = tmp;
    1de8:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1dea:	69d3      	ldr	r3, [r2, #28]
    1dec:	f013 0f17 	tst.w	r3, #23
    1df0:	d1fb      	bne.n	1dea <swd_read+0x12>
	uint8_t swd_rx_buf[5];
	
	//hri_sercomspi_write_CTRLA_CPHA_bit(SERCOM0, false); //for test
	hri_sercomspi_write_CTRLA_CPHA_bit(SERCOM0, true); //for test
		
	SWD_tx(&cmd, 1);
    1df2:	2101      	movs	r1, #1
    1df4:	f10d 0007 	add.w	r0, sp, #7
    1df8:	4b16      	ldr	r3, [pc, #88]	; (1e54 <swd_read+0x7c>)
    1dfa:	4798      	blx	r3
	
	
	
	SWD_rx(swd_rx_buf, 10);
    1dfc:	210a      	movs	r1, #10
    1dfe:	a802      	add	r0, sp, #8
    1e00:	4b15      	ldr	r3, [pc, #84]	; (1e58 <swd_read+0x80>)
    1e02:	4798      	blx	r3
					
	if(swd_rx_buf[0] & ACK_MASK) // check ACK
    1e04:	f89d 3008 	ldrb.w	r3, [sp, #8]
    1e08:	f013 0f02 	tst.w	r3, #2
    1e0c:	d01c      	beq.n	1e48 <swd_read+0x70>
	{				
		swd_rx_buf[4] = (swd_rx_buf[4]  << 4 ) | (swd_rx_buf[3] >> 4); //first byte
    1e0e:	f89d 500b 	ldrb.w	r5, [sp, #11]
		swd_rx_buf[3] = (swd_rx_buf[3]  << 4 ) | (swd_rx_buf[2] >> 4); //second
    1e12:	f89d 000a 	ldrb.w	r0, [sp, #10]
		swd_rx_buf[2] = (swd_rx_buf[2]  << 4 ) | (swd_rx_buf[1] >> 4); //third
    1e16:	f89d 2009 	ldrb.w	r2, [sp, #9]
		swd_rx_buf[4] = (swd_rx_buf[4]  << 4 ) | (swd_rx_buf[3] >> 4); //first byte
    1e1a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1e1e:	092c      	lsrs	r4, r5, #4
    1e20:	ea44 1101 	orr.w	r1, r4, r1, lsl #4
		swd_rx_buf[3] = (swd_rx_buf[3]  << 4 ) | (swd_rx_buf[2] >> 4); //second
    1e24:	0904      	lsrs	r4, r0, #4
    1e26:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
		swd_rx_buf[1] = (swd_rx_buf[1]  << 4 ) | (swd_rx_buf[0] >> 4); //fourth
					
		Wdata = swd_rx_buf[4] << 24 | swd_rx_buf[3] << 16 | swd_rx_buf[2] << 8 | swd_rx_buf[1];
    1e2a:	b2e4      	uxtb	r4, r4
    1e2c:	0424      	lsls	r4, r4, #16
    1e2e:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
		swd_rx_buf[1] = (swd_rx_buf[1]  << 4 ) | (swd_rx_buf[0] >> 4); //fourth
    1e32:	091b      	lsrs	r3, r3, #4
    1e34:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
		Wdata = swd_rx_buf[4] << 24 | swd_rx_buf[3] << 16 | swd_rx_buf[2] << 8 | swd_rx_buf[1];
    1e38:	b2db      	uxtb	r3, r3
    1e3a:	431c      	orrs	r4, r3
		swd_rx_buf[2] = (swd_rx_buf[2]  << 4 ) | (swd_rx_buf[1] >> 4); //third
    1e3c:	0913      	lsrs	r3, r2, #4
    1e3e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
		Wdata = swd_rx_buf[4] << 24 | swd_rx_buf[3] << 16 | swd_rx_buf[2] << 8 | swd_rx_buf[1];
    1e42:	b2db      	uxtb	r3, r3
    1e44:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
		//else confirm even 1's				
	}
	//else ACK WAIT or FAULT was received
	
	return Wdata; 
}
    1e48:	4620      	mov	r0, r4
    1e4a:	b005      	add	sp, #20
    1e4c:	bd30      	pop	{r4, r5, pc}
    1e4e:	bf00      	nop
    1e50:	40003000 	.word	0x40003000
    1e54:	0000087d 	.word	0x0000087d
    1e58:	000008c1 	.word	0x000008c1

00001e5c <__libc_init_array>:
    1e5c:	b570      	push	{r4, r5, r6, lr}
    1e5e:	4e0d      	ldr	r6, [pc, #52]	; (1e94 <__libc_init_array+0x38>)
    1e60:	4c0d      	ldr	r4, [pc, #52]	; (1e98 <__libc_init_array+0x3c>)
    1e62:	1ba4      	subs	r4, r4, r6
    1e64:	10a4      	asrs	r4, r4, #2
    1e66:	2500      	movs	r5, #0
    1e68:	42a5      	cmp	r5, r4
    1e6a:	d109      	bne.n	1e80 <__libc_init_array+0x24>
    1e6c:	4e0b      	ldr	r6, [pc, #44]	; (1e9c <__libc_init_array+0x40>)
    1e6e:	4c0c      	ldr	r4, [pc, #48]	; (1ea0 <__libc_init_array+0x44>)
    1e70:	f000 f8ee 	bl	2050 <_init>
    1e74:	1ba4      	subs	r4, r4, r6
    1e76:	10a4      	asrs	r4, r4, #2
    1e78:	2500      	movs	r5, #0
    1e7a:	42a5      	cmp	r5, r4
    1e7c:	d105      	bne.n	1e8a <__libc_init_array+0x2e>
    1e7e:	bd70      	pop	{r4, r5, r6, pc}
    1e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1e84:	4798      	blx	r3
    1e86:	3501      	adds	r5, #1
    1e88:	e7ee      	b.n	1e68 <__libc_init_array+0xc>
    1e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1e8e:	4798      	blx	r3
    1e90:	3501      	adds	r5, #1
    1e92:	e7f2      	b.n	1e7a <__libc_init_array+0x1e>
    1e94:	0000205c 	.word	0x0000205c
    1e98:	0000205c 	.word	0x0000205c
    1e9c:	0000205c 	.word	0x0000205c
    1ea0:	00002060 	.word	0x00002060
    1ea4:	682f2e2e 	.word	0x682f2e2e
    1ea8:	692f6c61 	.word	0x692f6c61
    1eac:	756c636e 	.word	0x756c636e
    1eb0:	682f6564 	.word	0x682f6564
    1eb4:	775f6c61 	.word	0x775f6c61
    1eb8:	682e7464 	.word	0x682e7464
    1ebc:	00000000 	.word	0x00000000
    1ec0:	682f2e2e 	.word	0x682f2e2e
    1ec4:	732f6c61 	.word	0x732f6c61
    1ec8:	682f6372 	.word	0x682f6372
    1ecc:	665f6c61 	.word	0x665f6c61
    1ed0:	6873616c 	.word	0x6873616c
    1ed4:	0000632e 	.word	0x0000632e
    1ed8:	682f2e2e 	.word	0x682f2e2e
    1edc:	732f6c61 	.word	0x732f6c61
    1ee0:	682f6372 	.word	0x682f6372
    1ee4:	695f6c61 	.word	0x695f6c61
    1ee8:	735f6332 	.word	0x735f6332
    1eec:	6e79735f 	.word	0x6e79735f
    1ef0:	00632e63 	.word	0x00632e63
    1ef4:	682f2e2e 	.word	0x682f2e2e
    1ef8:	732f6c61 	.word	0x732f6c61
    1efc:	682f6372 	.word	0x682f6372
    1f00:	695f6c61 	.word	0x695f6c61
    1f04:	00632e6f 	.word	0x00632e6f
    1f08:	682f2e2e 	.word	0x682f2e2e
    1f0c:	732f6c61 	.word	0x732f6c61
    1f10:	682f6372 	.word	0x682f6372
    1f14:	715f6c61 	.word	0x715f6c61
    1f18:	5f697073 	.word	0x5f697073
    1f1c:	636e7973 	.word	0x636e7973
    1f20:	0000632e 	.word	0x0000632e
    1f24:	682f2e2e 	.word	0x682f2e2e
    1f28:	732f6c61 	.word	0x732f6c61
    1f2c:	682f6372 	.word	0x682f6372
    1f30:	735f6c61 	.word	0x735f6c61
    1f34:	6d5f6970 	.word	0x6d5f6970
    1f38:	6e79735f 	.word	0x6e79735f
    1f3c:	00632e63 	.word	0x00632e63
    1f40:	682f2e2e 	.word	0x682f2e2e
    1f44:	732f6c61 	.word	0x732f6c61
    1f48:	682f6372 	.word	0x682f6372
    1f4c:	745f6c61 	.word	0x745f6c61
    1f50:	72656d69 	.word	0x72656d69
    1f54:	0000632e 	.word	0x0000632e
    1f58:	682f2e2e 	.word	0x682f2e2e
    1f5c:	752f6c61 	.word	0x752f6c61
    1f60:	736c6974 	.word	0x736c6974
    1f64:	6372732f 	.word	0x6372732f
    1f68:	6974752f 	.word	0x6974752f
    1f6c:	6c5f736c 	.word	0x6c5f736c
    1f70:	2e747369 	.word	0x2e747369
    1f74:	00000063 	.word	0x00000063
    1f78:	682f2e2e 	.word	0x682f2e2e
    1f7c:	6e2f6c70 	.word	0x6e2f6c70
    1f80:	74636d76 	.word	0x74636d76
    1f84:	682f6c72 	.word	0x682f6c72
    1f88:	6e5f6c70 	.word	0x6e5f6c70
    1f8c:	74636d76 	.word	0x74636d76
    1f90:	632e6c72 	.word	0x632e6c72
    1f94:	00000000 	.word	0x00000000
    1f98:	682f2e2e 	.word	0x682f2e2e
    1f9c:	712f6c70 	.word	0x712f6c70
    1fa0:	2f697073 	.word	0x2f697073
    1fa4:	5f6c7068 	.word	0x5f6c7068
    1fa8:	69707371 	.word	0x69707371
    1fac:	0000632e 	.word	0x0000632e
    1fb0:	682f2e2e 	.word	0x682f2e2e
    1fb4:	722f6c70 	.word	0x722f6c70
    1fb8:	682f6374 	.word	0x682f6374
    1fbc:	725f6c70 	.word	0x725f6c70
    1fc0:	632e6374 	.word	0x632e6374
    1fc4:	00000000 	.word	0x00000000
    1fc8:	40003000 	.word	0x40003000
    1fcc:	40003400 	.word	0x40003400
    1fd0:	41012000 	.word	0x41012000
    1fd4:	41014000 	.word	0x41014000
    1fd8:	43000000 	.word	0x43000000
    1fdc:	43000400 	.word	0x43000400

00001fe0 <_i2cms>:
	...
    1ff8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2008:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    2018:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    2028:	00000000 0000eecc                       ........

00002030 <s25fl116k_interface>:
    2030:	00001971 00001a09 00001aa1 00001bb9     q...............
    2040:	00001c61 0000e79e ffffffff 00ffffff     a...............

00002050 <_init>:
    2050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2052:	bf00      	nop
    2054:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2056:	bc08      	pop	{r3}
    2058:	469e      	mov	lr, r3
    205a:	4770      	bx	lr

0000205c <__init_array_start>:
    205c:	00000289 	.word	0x00000289

00002060 <_fini>:
    2060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2062:	bf00      	nop
    2064:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2066:	bc08      	pop	{r3}
    2068:	469e      	mov	lr, r3
    206a:	4770      	bx	lr

0000206c <__fini_array_start>:
    206c:	00000265 	.word	0x00000265
