
fb_atmel_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000293c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  0000293c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          000000d4  20000064  000029a0  00020064  2**2
                  ALLOC
  5 .stack        0000c000  20000138  00002a74  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   00033011  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004e57  00000000  00000000  000530fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011b91  00000000  00000000  00057f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ec8  00000000  00000000  00069ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001298  00000000  00000000  0006a9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ea96  00000000  00000000  0006bc44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001bfb0  00000000  00000000  0009a6da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e715f  00000000  00000000  000b668a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000028d4  00000000  00000000  0019d7ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 c1 00 20 29 03 00 00 19 03 00 00 09 03 00 00     8.. )...........
      10:	19 03 00 00 19 03 00 00 19 03 00 00 00 00 00 00     ................
	...
      2c:	19 03 00 00 19 03 00 00 00 00 00 00 19 03 00 00     ................
      3c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
      4c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
      5c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
      6c:	85 18 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
      7c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
      8c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
      9c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
      ac:	19 03 00 00 19 03 00 00 01 16 00 00 15 16 00 00     ................
      bc:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
      cc:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
      dc:	19 03 00 00 19 03 00 00 19 03 00 00 00 00 00 00     ................
	...
      f4:	d5 17 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     104:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     114:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     124:	19 03 00 00 c1 03 00 00 19 03 00 00 19 03 00 00     ................
     134:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     144:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     154:	19 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     190:	00 00 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     1a0:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     1b0:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     1c0:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     1d0:	19 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
	...
     20c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     21c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     22c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     23c:	19 03 00 00 00 00 00 00 19 03 00 00 19 03 00 00     ................
     24c:	19 03 00 00 19 03 00 00 19 03 00 00 19 03 00 00     ................
     25c:	19 03 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000064 	.word	0x20000064
     280:	00000000 	.word	0x00000000
     284:	0000293c 	.word	0x0000293c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000293c 	.word	0x0000293c
     2c4:	20000068 	.word	0x20000068
     2c8:	0000293c 	.word	0x0000293c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
#include "driver_init.h"
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	SWD_GPIO_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	0000088d 	.word	0x0000088d
     2e0:	00000905 	.word	0x00000905

000002e4 <system_off>:
	while(PM->SLEEPCFG.bit.SLEEPMODE != PM_SLEEPCFG_SLEEPMODE_HIBERNATE);
	_go_to_sleep();
}

void system_off(void) // < 1mA draw
{
     2e4:	b508      	push	{r3, lr}
	PM->SLEEPCFG.bit.SLEEPMODE = PM_SLEEPCFG_SLEEPMODE_OFF;
     2e6:	4a06      	ldr	r2, [pc, #24]	; (300 <system_off+0x1c>)
     2e8:	7853      	ldrb	r3, [r2, #1]
     2ea:	f043 0307 	orr.w	r3, r3, #7
     2ee:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.bit.SLEEPMODE != PM_SLEEPCFG_SLEEPMODE_OFF);
     2f0:	7853      	ldrb	r3, [r2, #1]
     2f2:	f003 0307 	and.w	r3, r3, #7
     2f6:	2b07      	cmp	r3, #7
     2f8:	d1fa      	bne.n	2f0 <system_off+0xc>
	_go_to_sleep();
     2fa:	4b02      	ldr	r3, [pc, #8]	; (304 <system_off+0x20>)
     2fc:	4798      	blx	r3
     2fe:	bd08      	pop	{r3, pc}
     300:	40000400 	.word	0x40000400
     304:	000014a9 	.word	0x000014a9

00000308 <__HardFault_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void __HardFault_Handler(void)
{		
     308:	b082      	sub	sp, #8
		volatile int c = 1;
     30a:	2301      	movs	r3, #1
     30c:	9301      	str	r3, [sp, #4]
        while (c==1) {
     30e:	9b01      	ldr	r3, [sp, #4]
     310:	2b01      	cmp	r3, #1
     312:	d0fc      	beq.n	30e <__HardFault_Handler+0x6>
        }
}
     314:	b002      	add	sp, #8
     316:	4770      	bx	lr

00000318 <Dummy_Handler>:
{
		_irq_clear(SERCOM3_0_IRQn);
}

void Dummy_Handler(void)
{		
     318:	b082      	sub	sp, #8
		volatile int c = 1;
     31a:	2301      	movs	r3, #1
     31c:	9301      	str	r3, [sp, #4]
        while (c==1) {
     31e:	9b01      	ldr	r3, [sp, #4]
     320:	2b01      	cmp	r3, #1
     322:	d0fc      	beq.n	31e <Dummy_Handler+0x6>
        }
}
     324:	b002      	add	sp, #8
     326:	4770      	bx	lr

00000328 <Reset_Handler>:
{
     328:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     32a:	4b1c      	ldr	r3, [pc, #112]	; (39c <Reset_Handler+0x74>)
     32c:	4a1c      	ldr	r2, [pc, #112]	; (3a0 <Reset_Handler+0x78>)
     32e:	429a      	cmp	r2, r3
     330:	d010      	beq.n	354 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     332:	4b1c      	ldr	r3, [pc, #112]	; (3a4 <Reset_Handler+0x7c>)
     334:	4a19      	ldr	r2, [pc, #100]	; (39c <Reset_Handler+0x74>)
     336:	429a      	cmp	r2, r3
     338:	d20c      	bcs.n	354 <Reset_Handler+0x2c>
     33a:	3b01      	subs	r3, #1
     33c:	1a9b      	subs	r3, r3, r2
     33e:	f023 0303 	bic.w	r3, r3, #3
     342:	3304      	adds	r3, #4
     344:	4413      	add	r3, r2
     346:	4916      	ldr	r1, [pc, #88]	; (3a0 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     348:	f851 0b04 	ldr.w	r0, [r1], #4
     34c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     350:	429a      	cmp	r2, r3
     352:	d1f9      	bne.n	348 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     354:	4b14      	ldr	r3, [pc, #80]	; (3a8 <Reset_Handler+0x80>)
     356:	4a15      	ldr	r2, [pc, #84]	; (3ac <Reset_Handler+0x84>)
     358:	429a      	cmp	r2, r3
     35a:	d20a      	bcs.n	372 <Reset_Handler+0x4a>
     35c:	3b01      	subs	r3, #1
     35e:	1a9b      	subs	r3, r3, r2
     360:	f023 0303 	bic.w	r3, r3, #3
     364:	3304      	adds	r3, #4
     366:	4413      	add	r3, r2
                *pDest++ = 0;
     368:	2100      	movs	r1, #0
     36a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     36e:	4293      	cmp	r3, r2
     370:	d1fb      	bne.n	36a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     372:	4b0f      	ldr	r3, [pc, #60]	; (3b0 <Reset_Handler+0x88>)
     374:	4a0f      	ldr	r2, [pc, #60]	; (3b4 <Reset_Handler+0x8c>)
     376:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     37a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     37c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     380:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     38c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     390:	4b09      	ldr	r3, [pc, #36]	; (3b8 <Reset_Handler+0x90>)
     392:	4798      	blx	r3
        main();
     394:	4b09      	ldr	r3, [pc, #36]	; (3bc <Reset_Handler+0x94>)
     396:	4798      	blx	r3
     398:	e7fe      	b.n	398 <Reset_Handler+0x70>
     39a:	bf00      	nop
     39c:	20000000 	.word	0x20000000
     3a0:	0000293c 	.word	0x0000293c
     3a4:	20000064 	.word	0x20000064
     3a8:	20000138 	.word	0x20000138
     3ac:	20000064 	.word	0x20000064
     3b0:	e000ed00 	.word	0xe000ed00
     3b4:	00000000 	.word	0x00000000
     3b8:	00002511 	.word	0x00002511
     3bc:	00001d05 	.word	0x00001d05

000003c0 <__SERCOM3_0_Handler>:
{
     3c0:	b508      	push	{r3, lr}
		_irq_clear(SERCOM3_0_IRQn);
     3c2:	203a      	movs	r0, #58	; 0x3a
     3c4:	4b01      	ldr	r3, [pc, #4]	; (3cc <__SERCOM3_0_Handler+0xc>)
     3c6:	4798      	blx	r3
     3c8:	bd08      	pop	{r3, pc}
     3ca:	bf00      	nop
     3cc:	000014b1 	.word	0x000014b1

000003d0 <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     3d0:	4a02      	ldr	r2, [pc, #8]	; (3dc <FLASH_0_CLOCK_init+0xc>)
     3d2:	6913      	ldr	r3, [r2, #16]
     3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     3d8:	6113      	str	r3, [r2, #16]
     3da:	4770      	bx	lr
     3dc:	40000800 	.word	0x40000800

000003e0 <FLASH_0_init>:
{
	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     3e0:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     3e2:	4b03      	ldr	r3, [pc, #12]	; (3f0 <FLASH_0_init+0x10>)
     3e4:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     3e6:	4903      	ldr	r1, [pc, #12]	; (3f4 <FLASH_0_init+0x14>)
     3e8:	4803      	ldr	r0, [pc, #12]	; (3f8 <FLASH_0_init+0x18>)
     3ea:	4b04      	ldr	r3, [pc, #16]	; (3fc <FLASH_0_init+0x1c>)
     3ec:	4798      	blx	r3
     3ee:	bd08      	pop	{r3, pc}
     3f0:	000003d1 	.word	0x000003d1
     3f4:	41004000 	.word	0x41004000
     3f8:	200000a8 	.word	0x200000a8
     3fc:	00000ea1 	.word	0x00000ea1

00000400 <QUAD_SPI_0_PORT_deinit>:
}

void QUAD_SPI_0_PORT_deinit(void) // set as inputs with pull off
{
     400:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     402:	4b29      	ldr	r3, [pc, #164]	; (4a8 <QUAD_SPI_0_PORT_deinit+0xa8>)
     404:	f44f 6600 	mov.w	r6, #2048	; 0x800
     408:	f8c3 6084 	str.w	r6, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     40c:	4d27      	ldr	r5, [pc, #156]	; (4ac <QUAD_SPI_0_PORT_deinit+0xac>)
     40e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     412:	4a27      	ldr	r2, [pc, #156]	; (4b0 <QUAD_SPI_0_PORT_deinit+0xb0>)
     414:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     418:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     41c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     420:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     424:	f44f 7180 	mov.w	r1, #256	; 0x100
     428:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     42e:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     432:	6299      	str	r1, [r3, #40]	; 0x28
     434:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     436:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
     43a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     43e:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     442:	f44f 7100 	mov.w	r1, #512	; 0x200
     446:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     448:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     44c:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     450:	6299      	str	r1, [r3, #40]	; 0x28
     452:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     454:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
     458:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     45c:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     460:	f44f 6480 	mov.w	r4, #1024	; 0x400
     464:	605c      	str	r4, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     466:	4813      	ldr	r0, [pc, #76]	; (4b4 <QUAD_SPI_0_PORT_deinit+0xb4>)
     468:	6298      	str	r0, [r3, #40]	; 0x28
     46a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     46c:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
     470:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     474:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     478:	605e      	str	r6, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47a:	629d      	str	r5, [r3, #40]	; 0x28
     47c:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     47e:	f893 104b 	ldrb.w	r1, [r3, #75]	; 0x4b
     482:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     486:	f883 104b 	strb.w	r1, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     48a:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     48e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     492:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     496:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     49a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     49e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	gpio_set_pin_direction(PA11, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(PA11, GPIO_PULL_OFF);
	
	gpio_set_pin_direction(PB10, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(PB10, GPIO_PULL_OFF);
}
     4a2:	bc70      	pop	{r4, r5, r6}
     4a4:	4770      	bx	lr
     4a6:	bf00      	nop
     4a8:	41008000 	.word	0x41008000
     4ac:	40020800 	.word	0x40020800
     4b0:	c0020000 	.word	0xc0020000
     4b4:	40020400 	.word	0x40020400

000004b8 <QUAD_SPI_0_PORT_init>:

void QUAD_SPI_0_PORT_init(void)
{
     4b8:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ba:	4b5a      	ldr	r3, [pc, #360]	; (624 <QUAD_SPI_0_PORT_init+0x16c>)
     4bc:	f44f 6500 	mov.w	r5, #2048	; 0x800
     4c0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c4:	4a58      	ldr	r2, [pc, #352]	; (628 <QUAD_SPI_0_PORT_init+0x170>)
     4c6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4ca:	4858      	ldr	r0, [pc, #352]	; (62c <QUAD_SPI_0_PORT_init+0x174>)
     4cc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4d0:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     4d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4d8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4dc:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4e4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ec:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4f0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4f4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4fc:	f44f 7280 	mov.w	r2, #256	; 0x100
     500:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     502:	494b      	ldr	r1, [pc, #300]	; (630 <QUAD_SPI_0_PORT_init+0x178>)
     504:	6299      	str	r1, [r3, #40]	; 0x28
     506:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     50a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     50c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     50e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     512:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     516:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     51a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     51e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     522:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     526:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     52a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     52e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     532:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     53a:	f44f 7200 	mov.w	r2, #512	; 0x200
     53e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     540:	f501 7180 	add.w	r1, r1, #256	; 0x100
     544:	6299      	str	r1, [r3, #40]	; 0x28
     546:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     548:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     54a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     54e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     552:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     556:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     55a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     55e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     562:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     566:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     56a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     56e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     576:	f44f 6180 	mov.w	r1, #1024	; 0x400
     57a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     57c:	4a2d      	ldr	r2, [pc, #180]	; (634 <QUAD_SPI_0_PORT_init+0x17c>)
     57e:	629a      	str	r2, [r3, #40]	; 0x28
     580:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     582:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     584:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     588:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     58c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     590:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     598:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5a0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a8:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5b0:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5b2:	4a21      	ldr	r2, [pc, #132]	; (638 <QUAD_SPI_0_PORT_init+0x180>)
     5b4:	629a      	str	r2, [r3, #40]	; 0x28
     5b6:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5b8:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5ba:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     5be:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5c2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c6:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     5ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5da:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5de:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5e6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5ea:	4a14      	ldr	r2, [pc, #80]	; (63c <QUAD_SPI_0_PORT_init+0x184>)
     5ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     5f0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5f4:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     5f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5fc:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     600:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     608:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60c:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     610:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     614:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     618:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     620:	bc30      	pop	{r4, r5}
     622:	4770      	bx	lr
     624:	41008000 	.word	0x41008000
     628:	40020800 	.word	0x40020800
     62c:	c0020000 	.word	0xc0020000
     630:	40000100 	.word	0x40000100
     634:	40000400 	.word	0x40000400
     638:	40000800 	.word	0x40000800
     63c:	40020400 	.word	0x40020400

00000640 <QUAD_SPI_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     640:	4b06      	ldr	r3, [pc, #24]	; (65c <QUAD_SPI_0_CLOCK_init+0x1c>)
     642:	691a      	ldr	r2, [r3, #16]
     644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     648:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     64a:	691a      	ldr	r2, [r3, #16]
     64c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     650:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     652:	69da      	ldr	r2, [r3, #28]
     654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     658:	61da      	str	r2, [r3, #28]
     65a:	4770      	bx	lr
     65c:	40000800 	.word	0x40000800

00000660 <QUAD_SPI_0_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QUAD_SPI_0_init(void)
{
     660:	b508      	push	{r3, lr}
	QUAD_SPI_0_CLOCK_init();
     662:	4b04      	ldr	r3, [pc, #16]	; (674 <QUAD_SPI_0_init+0x14>)
     664:	4798      	blx	r3
	qspi_sync_init(&QUAD_SPI_0, QSPI);
     666:	4904      	ldr	r1, [pc, #16]	; (678 <QUAD_SPI_0_init+0x18>)
     668:	4804      	ldr	r0, [pc, #16]	; (67c <QUAD_SPI_0_init+0x1c>)
     66a:	4b05      	ldr	r3, [pc, #20]	; (680 <QUAD_SPI_0_init+0x20>)
     66c:	4798      	blx	r3
	QUAD_SPI_0_PORT_init();
     66e:	4b05      	ldr	r3, [pc, #20]	; (684 <QUAD_SPI_0_init+0x24>)
     670:	4798      	blx	r3
     672:	bd08      	pop	{r3, pc}
     674:	00000641 	.word	0x00000641
     678:	42003400 	.word	0x42003400
     67c:	200000e0 	.word	0x200000e0
     680:	000010fd 	.word	0x000010fd
     684:	000004b9 	.word	0x000004b9

00000688 <QUAD_SPI_0_deinit>:
}

void QUAD_SPI_0_deinit(void)
{
     688:	b508      	push	{r3, lr}
	qspi_sync_deinit(&QUAD_SPI_0);
     68a:	4803      	ldr	r0, [pc, #12]	; (698 <QUAD_SPI_0_deinit+0x10>)
     68c:	4b03      	ldr	r3, [pc, #12]	; (69c <QUAD_SPI_0_deinit+0x14>)
     68e:	4798      	blx	r3
	QUAD_SPI_0_PORT_deinit();
     690:	4b03      	ldr	r3, [pc, #12]	; (6a0 <QUAD_SPI_0_deinit+0x18>)
     692:	4798      	blx	r3
     694:	bd08      	pop	{r3, pc}
     696:	bf00      	nop
     698:	200000e0 	.word	0x200000e0
     69c:	0000112d 	.word	0x0000112d
     6a0:	00000401 	.word	0x00000401

000006a4 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6a4:	4b28      	ldr	r3, [pc, #160]	; (748 <SPI_0_PORT_init+0xa4>)
     6a6:	2210      	movs	r2, #16
     6a8:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6aa:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6ac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6b0:	629a      	str	r2, [r3, #40]	; 0x28
     6b2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     6b6:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     6bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6c0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6c8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6cc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6d0:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     6d8:	2220      	movs	r2, #32
     6da:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     6dc:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     6e2:	629a      	str	r2, [r3, #40]	; 0x28
     6e4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6ee:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6f6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6fa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6fe:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     702:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     706:	2240      	movs	r2, #64	; 0x40
     708:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     70a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     70e:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     712:	629a      	str	r2, [r3, #40]	; 0x28
     714:	4a0d      	ldr	r2, [pc, #52]	; (74c <SPI_0_PORT_init+0xa8>)
     716:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     718:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     71c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     724:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     728:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     72c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     734:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     738:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     73c:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     740:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     744:	4770      	bx	lr
     746:	bf00      	nop
     748:	41008000 	.word	0x41008000
     74c:	c0020000 	.word	0xc0020000

00000750 <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     750:	4b06      	ldr	r3, [pc, #24]	; (76c <SPI_0_CLOCK_init+0x1c>)
     752:	2240      	movs	r2, #64	; 0x40
     754:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     758:	2243      	movs	r2, #67	; 0x43
     75a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     75e:	4a04      	ldr	r2, [pc, #16]	; (770 <SPI_0_CLOCK_init+0x20>)
     760:	6953      	ldr	r3, [r2, #20]
     762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     766:	6153      	str	r3, [r2, #20]
     768:	4770      	bx	lr
     76a:	bf00      	nop
     76c:	40001c00 	.word	0x40001c00
     770:	40000800 	.word	0x40000800

00000774 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     774:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     776:	4b04      	ldr	r3, [pc, #16]	; (788 <SPI_0_init+0x14>)
     778:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     77a:	4904      	ldr	r1, [pc, #16]	; (78c <SPI_0_init+0x18>)
     77c:	4804      	ldr	r0, [pc, #16]	; (790 <SPI_0_init+0x1c>)
     77e:	4b05      	ldr	r3, [pc, #20]	; (794 <SPI_0_init+0x20>)
     780:	4798      	blx	r3
	SPI_0_PORT_init();
     782:	4b05      	ldr	r3, [pc, #20]	; (798 <SPI_0_init+0x24>)
     784:	4798      	blx	r3
     786:	bd08      	pop	{r3, pc}
     788:	00000751 	.word	0x00000751
     78c:	40003000 	.word	0x40003000
     790:	200000c8 	.word	0x200000c8
     794:	000011ad 	.word	0x000011ad
     798:	000006a5 	.word	0x000006a5

0000079c <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     79c:	4b16      	ldr	r3, [pc, #88]	; (7f8 <I2C_0_PORT_init+0x5c>)
     79e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     7a2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7aa:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ba:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7be:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7c2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     7ca:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     7ce:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     7d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7d6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     7da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7de:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7e6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7ea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7ee:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     7f6:	4770      	bx	lr
     7f8:	41008000 	.word	0x41008000

000007fc <I2C_0_CLOCK_init>:
     7fc:	4b06      	ldr	r3, [pc, #24]	; (818 <I2C_0_CLOCK_init+0x1c>)
     7fe:	2240      	movs	r2, #64	; 0x40
     800:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     804:	2243      	movs	r2, #67	; 0x43
     806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     80a:	4a04      	ldr	r2, [pc, #16]	; (81c <I2C_0_CLOCK_init+0x20>)
     80c:	6993      	ldr	r3, [r2, #24]
     80e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     812:	6193      	str	r3, [r2, #24]
     814:	4770      	bx	lr
     816:	bf00      	nop
     818:	40001c00 	.word	0x40001c00
     81c:	40000800 	.word	0x40000800

00000820 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     820:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     822:	4b04      	ldr	r3, [pc, #16]	; (834 <I2C_0_init+0x14>)
     824:	4798      	blx	r3
	i2c_s_sync_init(&I2C_0, SERCOM3);
     826:	4904      	ldr	r1, [pc, #16]	; (838 <I2C_0_init+0x18>)
     828:	4804      	ldr	r0, [pc, #16]	; (83c <I2C_0_init+0x1c>)
     82a:	4b05      	ldr	r3, [pc, #20]	; (840 <I2C_0_init+0x20>)
     82c:	4798      	blx	r3
	I2C_0_PORT_init();
     82e:	4b05      	ldr	r3, [pc, #20]	; (844 <I2C_0_init+0x24>)
     830:	4798      	blx	r3
     832:	bd08      	pop	{r3, pc}
     834:	000007fd 	.word	0x000007fd
     838:	41014000 	.word	0x41014000
     83c:	200000e4 	.word	0x200000e4
     840:	00000fbd 	.word	0x00000fbd
     844:	0000079d 	.word	0x0000079d

00000848 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     848:	4a02      	ldr	r2, [pc, #8]	; (854 <WDT_0_CLOCK_init+0xc>)
     84a:	6953      	ldr	r3, [r2, #20]
     84c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     850:	6153      	str	r3, [r2, #20]
     852:	4770      	bx	lr
     854:	40000800 	.word	0x40000800

00000858 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     858:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     85a:	4b06      	ldr	r3, [pc, #24]	; (874 <WDT_0_init+0x1c>)
     85c:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     85e:	2248      	movs	r2, #72	; 0x48
     860:	4905      	ldr	r1, [pc, #20]	; (878 <WDT_0_init+0x20>)
     862:	2001      	movs	r0, #1
     864:	4b05      	ldr	r3, [pc, #20]	; (87c <WDT_0_init+0x24>)
     866:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     868:	4805      	ldr	r0, [pc, #20]	; (880 <WDT_0_init+0x28>)
     86a:	4b06      	ldr	r3, [pc, #24]	; (884 <WDT_0_init+0x2c>)
     86c:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     86e:	4b06      	ldr	r3, [pc, #24]	; (888 <WDT_0_init+0x30>)
     870:	4798      	blx	r3
     872:	bd08      	pop	{r3, pc}
     874:	00000849 	.word	0x00000849
     878:	000026f4 	.word	0x000026f4
     87c:	0000141d 	.word	0x0000141d
     880:	200000c4 	.word	0x200000c4
     884:	40002000 	.word	0x40002000
     888:	00001c99 	.word	0x00001c99

0000088c <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     88c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     88e:	4b0b      	ldr	r3, [pc, #44]	; (8bc <system_init+0x30>)
     890:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     892:	4b0b      	ldr	r3, [pc, #44]	; (8c0 <system_init+0x34>)
     894:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     896:	4a0b      	ldr	r2, [pc, #44]	; (8c4 <system_init+0x38>)
     898:	6953      	ldr	r3, [r2, #20]
     89a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     89e:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     8a0:	4b09      	ldr	r3, [pc, #36]	; (8c8 <system_init+0x3c>)
     8a2:	4798      	blx	r3
     8a4:	4602      	mov	r2, r0
     8a6:	4909      	ldr	r1, [pc, #36]	; (8cc <system_init+0x40>)
     8a8:	4809      	ldr	r0, [pc, #36]	; (8d0 <system_init+0x44>)
     8aa:	4b0a      	ldr	r3, [pc, #40]	; (8d4 <system_init+0x48>)
     8ac:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     8ae:	4b0a      	ldr	r3, [pc, #40]	; (8d8 <system_init+0x4c>)
     8b0:	4798      	blx	r3

	I2C_0_init();
     8b2:	4b0a      	ldr	r3, [pc, #40]	; (8dc <system_init+0x50>)
     8b4:	4798      	blx	r3

	WDT_0_init();
     8b6:	4b0a      	ldr	r3, [pc, #40]	; (8e0 <system_init+0x54>)
     8b8:	4798      	blx	r3
     8ba:	bd08      	pop	{r3, pc}
     8bc:	000014f1 	.word	0x000014f1
     8c0:	000003e1 	.word	0x000003e1
     8c4:	40000800 	.word	0x40000800
     8c8:	00001881 	.word	0x00001881
     8cc:	40002400 	.word	0x40002400
     8d0:	200000f0 	.word	0x200000f0
     8d4:	000013e1 	.word	0x000013e1
     8d8:	00000775 	.word	0x00000775
     8dc:	00000821 	.word	0x00000821
     8e0:	00000859 	.word	0x00000859

000008e4 <nor_flash_qspi_init>:
}


void nor_flash_qspi_init(void)
{
     8e4:	b508      	push	{r3, lr}
	QUAD_SPI_0_init();
     8e6:	4b02      	ldr	r3, [pc, #8]	; (8f0 <nor_flash_qspi_init+0xc>)
     8e8:	4798      	blx	r3
	spi_nor_flash_init();
     8ea:	4b02      	ldr	r3, [pc, #8]	; (8f4 <nor_flash_qspi_init+0x10>)
     8ec:	4798      	blx	r3
     8ee:	bd08      	pop	{r3, pc}
     8f0:	00000661 	.word	0x00000661
     8f4:	0000230d 	.word	0x0000230d

000008f8 <nor_flash_qspi_deinit>:
}
void nor_flash_qspi_deinit(void)
{
     8f8:	b508      	push	{r3, lr}
	QUAD_SPI_0_deinit();
     8fa:	4b01      	ldr	r3, [pc, #4]	; (900 <nor_flash_qspi_deinit+0x8>)
     8fc:	4798      	blx	r3
     8fe:	bd08      	pop	{r3, pc}
     900:	00000689 	.word	0x00000689

00000904 <SWD_GPIO_init>:
}

void SWD_GPIO_init(void)
{
     904:	b410      	push	{r4}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     906:	4b2d      	ldr	r3, [pc, #180]	; (9bc <SWD_GPIO_init+0xb8>)
     908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     90c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     90e:	492c      	ldr	r1, [pc, #176]	; (9c0 <SWD_GPIO_init+0xbc>)
     910:	6299      	str	r1, [r3, #40]	; 0x28
     912:	482c      	ldr	r0, [pc, #176]	; (9c4 <SWD_GPIO_init+0xc0>)
     914:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     916:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     918:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
     91c:	f041 0104 	orr.w	r1, r1, #4
     920:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     924:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     92a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     92c:	4a26      	ldr	r2, [pc, #152]	; (9c8 <SWD_GPIO_init+0xc4>)
     92e:	629a      	str	r2, [r3, #40]	; 0x28
     930:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     934:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     936:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     938:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
     93c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     940:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     944:	2101      	movs	r1, #1
     946:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     948:	4c20      	ldr	r4, [pc, #128]	; (9cc <SWD_GPIO_init+0xc8>)
     94a:	629c      	str	r4, [r3, #40]	; 0x28
     94c:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     94e:	6199      	str	r1, [r3, #24]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     950:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
     954:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     958:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     95c:	2102      	movs	r1, #2
     95e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     960:	3401      	adds	r4, #1
     962:	629c      	str	r4, [r3, #40]	; 0x28
     964:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     966:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     968:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
     96c:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     970:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     974:	2108      	movs	r1, #8
     976:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     97a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     97e:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     982:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     986:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     98a:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
     98e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     992:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     996:	2104      	movs	r1, #4
     998:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     99c:	480c      	ldr	r0, [pc, #48]	; (9d0 <SWD_GPIO_init+0xcc>)
     99e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     9a2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9a6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     9aa:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
     9ae:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     9b2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	gpio_set_pin_direction(RST, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(RST, false);
	gpio_set_pin_pull_mode(RST, GPIO_PULL_OFF);
	
	
     9b6:	f85d 4b04 	ldr.w	r4, [sp], #4
     9ba:	4770      	bx	lr
     9bc:	41008000 	.word	0x41008000
     9c0:	40021000 	.word	0x40021000
     9c4:	c0020000 	.word	0xc0020000
     9c8:	40002000 	.word	0x40002000
     9cc:	40000001 	.word	0x40000001
     9d0:	40000004 	.word	0x40000004

000009d4 <SWD_tx>:
	timer_start(&TIMER_0);
}


void SWD_tx(uint8_t* buffer, uint16_t length) //SPI MOSI
{	
     9d4:	b570      	push	{r4, r5, r6, lr}
     9d6:	b082      	sub	sp, #8
     9d8:	4605      	mov	r5, r0
     9da:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     9dc:	4b09      	ldr	r3, [pc, #36]	; (a04 <SWD_tx+0x30>)
     9de:	2201      	movs	r2, #1
     9e0:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     9e2:	2202      	movs	r2, #2
     9e4:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(MOSI_EN, true);
	gpio_set_pin_level(MISO_EN, false);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     9e6:	4c08      	ldr	r4, [pc, #32]	; (a08 <SWD_tx+0x34>)
     9e8:	a901      	add	r1, sp, #4
     9ea:	4620      	mov	r0, r4
     9ec:	4b07      	ldr	r3, [pc, #28]	; (a0c <SWD_tx+0x38>)
     9ee:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     9f0:	4620      	mov	r0, r4
     9f2:	4b07      	ldr	r3, [pc, #28]	; (a10 <SWD_tx+0x3c>)
     9f4:	4798      	blx	r3
	io_write(io, buffer, length);
     9f6:	4632      	mov	r2, r6
     9f8:	4629      	mov	r1, r5
     9fa:	9801      	ldr	r0, [sp, #4]
     9fc:	4b05      	ldr	r3, [pc, #20]	; (a14 <SWD_tx+0x40>)
     9fe:	4798      	blx	r3
}
     a00:	b002      	add	sp, #8
     a02:	bd70      	pop	{r4, r5, r6, pc}
     a04:	41008000 	.word	0x41008000
     a08:	200000c8 	.word	0x200000c8
     a0c:	000012dd 	.word	0x000012dd
     a10:	000011fd 	.word	0x000011fd
     a14:	0000109d 	.word	0x0000109d

00000a18 <SWD_rx>:

void SWD_rx(uint8_t* buffer, uint16_t length) //SPI MISO
{
     a18:	b570      	push	{r4, r5, r6, lr}
     a1a:	b082      	sub	sp, #8
     a1c:	4605      	mov	r5, r0
     a1e:	460e      	mov	r6, r1
     a20:	4b09      	ldr	r3, [pc, #36]	; (a48 <SWD_rx+0x30>)
     a22:	2201      	movs	r2, #1
     a24:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a26:	2202      	movs	r2, #2
     a28:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(MOSI_EN, false);
	gpio_set_pin_level(MISO_EN, true);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     a2a:	4c08      	ldr	r4, [pc, #32]	; (a4c <SWD_rx+0x34>)
     a2c:	a901      	add	r1, sp, #4
     a2e:	4620      	mov	r0, r4
     a30:	4b07      	ldr	r3, [pc, #28]	; (a50 <SWD_rx+0x38>)
     a32:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     a34:	4620      	mov	r0, r4
     a36:	4b07      	ldr	r3, [pc, #28]	; (a54 <SWD_rx+0x3c>)
     a38:	4798      	blx	r3
	io_read(io, buffer, length);
     a3a:	4632      	mov	r2, r6
     a3c:	4629      	mov	r1, r5
     a3e:	9801      	ldr	r0, [sp, #4]
     a40:	4b05      	ldr	r3, [pc, #20]	; (a58 <SWD_rx+0x40>)
     a42:	4798      	blx	r3
}
     a44:	b002      	add	sp, #8
     a46:	bd70      	pop	{r4, r5, r6, pc}
     a48:	41008000 	.word	0x41008000
     a4c:	200000c8 	.word	0x200000c8
     a50:	000012dd 	.word	0x000012dd
     a54:	000011fd 	.word	0x000011fd
     a58:	000010cd 	.word	0x000010cd

00000a5c <I2C_read>:
	spi_m_sync_enable(&SPI_0);
	_spi_m_sync_trans(&SPI_0.dev, &spi_istruct);//(struct _spi_m_sync_dev *dev, const struct spi_msg *msg);
}

void I2C_read(uint8_t* buffer, uint16_t length)
{
     a5c:	b570      	push	{r4, r5, r6, lr}
     a5e:	b082      	sub	sp, #8
     a60:	4605      	mov	r5, r0
     a62:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     a64:	4c09      	ldr	r4, [pc, #36]	; (a8c <I2C_read+0x30>)
     a66:	a901      	add	r1, sp, #4
     a68:	4620      	mov	r0, r4
     a6a:	4b09      	ldr	r3, [pc, #36]	; (a90 <I2C_read+0x34>)
     a6c:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     a6e:	2110      	movs	r1, #16
     a70:	4620      	mov	r0, r4
     a72:	4b08      	ldr	r3, [pc, #32]	; (a94 <I2C_read+0x38>)
     a74:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     a76:	4620      	mov	r0, r4
     a78:	4b07      	ldr	r3, [pc, #28]	; (a98 <I2C_read+0x3c>)
     a7a:	4798      	blx	r3

	io_read(io, buffer, length);
     a7c:	4632      	mov	r2, r6
     a7e:	4629      	mov	r1, r5
     a80:	9801      	ldr	r0, [sp, #4]
     a82:	4b06      	ldr	r3, [pc, #24]	; (a9c <I2C_read+0x40>)
     a84:	4798      	blx	r3
}
     a86:	b002      	add	sp, #8
     a88:	bd70      	pop	{r4, r5, r6, pc}
     a8a:	bf00      	nop
     a8c:	200000e4 	.word	0x200000e4
     a90:	00001071 	.word	0x00001071
     a94:	00001005 	.word	0x00001005
     a98:	00001049 	.word	0x00001049
     a9c:	000010cd 	.word	0x000010cd

00000aa0 <I2C_write>:

void I2C_write(uint8_t* buffer, uint16_t length)
{
     aa0:	b570      	push	{r4, r5, r6, lr}
     aa2:	b082      	sub	sp, #8
     aa4:	4605      	mov	r5, r0
     aa6:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     aa8:	4c09      	ldr	r4, [pc, #36]	; (ad0 <I2C_write+0x30>)
     aaa:	a901      	add	r1, sp, #4
     aac:	4620      	mov	r0, r4
     aae:	4b09      	ldr	r3, [pc, #36]	; (ad4 <I2C_write+0x34>)
     ab0:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     ab2:	2110      	movs	r1, #16
     ab4:	4620      	mov	r0, r4
     ab6:	4b08      	ldr	r3, [pc, #32]	; (ad8 <I2C_write+0x38>)
     ab8:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     aba:	4620      	mov	r0, r4
     abc:	4b07      	ldr	r3, [pc, #28]	; (adc <I2C_write+0x3c>)
     abe:	4798      	blx	r3

	io_write(io, buffer, length);
     ac0:	4632      	mov	r2, r6
     ac2:	4629      	mov	r1, r5
     ac4:	9801      	ldr	r0, [sp, #4]
     ac6:	4b06      	ldr	r3, [pc, #24]	; (ae0 <I2C_write+0x40>)
     ac8:	4798      	blx	r3
}
     aca:	b002      	add	sp, #8
     acc:	bd70      	pop	{r4, r5, r6, pc}
     ace:	bf00      	nop
     ad0:	200000e4 	.word	0x200000e4
     ad4:	00001071 	.word	0x00001071
     ad8:	00001005 	.word	0x00001005
     adc:	00001049 	.word	0x00001049
     ae0:	0000109d 	.word	0x0000109d

00000ae4 <swd_m4_reset>:
	//NOTE 1: AP reads return result from previous read so it's necessary to read twice and discard first
	//NOTE 2: Driving the line low results in a small current drain at target
}

void swd_m4_reset(void)
{
     ae4:	b510      	push	{r4, lr}
	//reset core
	swd_clear_abort_reg();
     ae6:	4b08      	ldr	r3, [pc, #32]	; (b08 <swd_m4_reset+0x24>)
     ae8:	4798      	blx	r3
	swd_write(req_write_select, AP_PORT_0);
     aea:	2100      	movs	r1, #0
     aec:	20b1      	movs	r0, #177	; 0xb1
     aee:	4c07      	ldr	r4, [pc, #28]	; (b0c <swd_m4_reset+0x28>)
     af0:	47a0      	blx	r4
	swd_write(req_write_tar, _AIRCR);
     af2:	4907      	ldr	r1, [pc, #28]	; (b10 <swd_m4_reset+0x2c>)
     af4:	208b      	movs	r0, #139	; 0x8b
     af6:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     af8:	4906      	ldr	r1, [pc, #24]	; (b14 <swd_m4_reset+0x30>)
     afa:	20a3      	movs	r0, #163	; 0xa3
     afc:	47a0      	blx	r4
	swd_write(req_write_drw, RESET_CORE);
     afe:	4906      	ldr	r1, [pc, #24]	; (b18 <swd_m4_reset+0x34>)
     b00:	20bb      	movs	r0, #187	; 0xbb
     b02:	47a0      	blx	r4
     b04:	bd10      	pop	{r4, pc}
     b06:	bf00      	nop
     b08:	0000233d 	.word	0x0000233d
     b0c:	000023c5 	.word	0x000023c5
     b10:	e000ed0c 	.word	0xe000ed0c
     b14:	23000012 	.word	0x23000012
     b18:	05fa0004 	.word	0x05fa0004

00000b1c <swd_m4_startup>:
}

uint32_t swd_m4_startup(void)
{
     b1c:	b570      	push	{r4, r5, r6, lr}
	uint32_t ctrl_reg = swd_read(req_read_ctrl_stat); // should return 0x00
     b1e:	208d      	movs	r0, #141	; 0x8d
     b20:	4c29      	ldr	r4, [pc, #164]	; (bc8 <swd_m4_startup+0xac>)
     b22:	47a0      	blx	r4
		
	swd_write(req_write_ctrl_stat, SYS_DBG_PWRUP); // pwrup debug and sys
     b24:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
     b28:	20a9      	movs	r0, #169	; 0xa9
     b2a:	4b28      	ldr	r3, [pc, #160]	; (bcc <swd_m4_startup+0xb0>)
     b2c:	4798      	blx	r3
	ctrl_reg = swd_read(req_read_ctrl_stat);
     b2e:	208d      	movs	r0, #141	; 0x8d
     b30:	47a0      	blx	r4
	if((ctrl_reg & PWRUP_MASK) != PWRUP_MASK) // check pwrup status
     b32:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
     b36:	f1b0 4f70 	cmp.w	r0, #4026531840	; 0xf0000000
     b3a:	d004      	beq.n	b46 <swd_m4_startup+0x2a>
	{
		i2c_send_error(error_no_dbg_pwr);
     b3c:	2001      	movs	r0, #1
     b3e:	4b24      	ldr	r3, [pc, #144]	; (bd0 <swd_m4_startup+0xb4>)
     b40:	4798      	blx	r3
		return f_err; 
     b42:	2001      	movs	r0, #1
     b44:	bd70      	pop	{r4, r5, r6, pc}
	}
				
	swd_write(req_write_csw, CSW_AUTOINC_OFF);
     b46:	4923      	ldr	r1, [pc, #140]	; (bd4 <swd_m4_startup+0xb8>)
     b48:	20a3      	movs	r0, #163	; 0xa3
     b4a:	4c20      	ldr	r4, [pc, #128]	; (bcc <swd_m4_startup+0xb0>)
     b4c:	47a0      	blx	r4
	swd_write(req_write_select, AP_PORT_F);// select AP port 0
     b4e:	21f0      	movs	r1, #240	; 0xf0
     b50:	20b1      	movs	r0, #177	; 0xb1
     b52:	47a0      	blx	r4
	swd_read(req_read_idr);
     b54:	209f      	movs	r0, #159	; 0x9f
     b56:	4c1c      	ldr	r4, [pc, #112]	; (bc8 <swd_m4_startup+0xac>)
     b58:	47a0      	blx	r4
	uint32_t idr_value = swd_read(req_read_idr);
     b5a:	209f      	movs	r0, #159	; 0x9f
     b5c:	47a0      	blx	r4
	if(idr_value == IDR_DEBUG_LOCKED)
     b5e:	4b1e      	ldr	r3, [pc, #120]	; (bd8 <swd_m4_startup+0xbc>)
     b60:	4298      	cmp	r0, r3
     b62:	d02b      	beq.n	bbc <swd_m4_startup+0xa0>
		i2c_send_error(error_dbg_locked);
		return f_err; 
	}
				
	//halt core
	swd_clear_abort_reg();
     b64:	4e1d      	ldr	r6, [pc, #116]	; (bdc <swd_m4_startup+0xc0>)
     b66:	47b0      	blx	r6
	swd_write(req_write_select, AP_PORT_0);
     b68:	2100      	movs	r1, #0
     b6a:	20b1      	movs	r0, #177	; 0xb1
     b6c:	4c17      	ldr	r4, [pc, #92]	; (bcc <swd_m4_startup+0xb0>)
     b6e:	47a0      	blx	r4
	swd_write(req_write_tar, _DHCSR);
     b70:	491b      	ldr	r1, [pc, #108]	; (be0 <swd_m4_startup+0xc4>)
     b72:	208b      	movs	r0, #139	; 0x8b
     b74:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     b76:	4d1b      	ldr	r5, [pc, #108]	; (be4 <swd_m4_startup+0xc8>)
     b78:	4629      	mov	r1, r5
     b7a:	20a3      	movs	r0, #163	; 0xa3
     b7c:	47a0      	blx	r4
	swd_write(req_write_drw, HALT_CORE);
     b7e:	491a      	ldr	r1, [pc, #104]	; (be8 <swd_m4_startup+0xcc>)
     b80:	20bb      	movs	r0, #187	; 0xbb
     b82:	47a0      	blx	r4
				
	//enable halt on reset
	swd_clear_abort_reg();
     b84:	47b0      	blx	r6
	swd_write(req_write_select, AP_PORT_0);
     b86:	2100      	movs	r1, #0
     b88:	20b1      	movs	r0, #177	; 0xb1
     b8a:	47a0      	blx	r4
	swd_write(req_write_tar, _DEMCR);
     b8c:	4917      	ldr	r1, [pc, #92]	; (bec <swd_m4_startup+0xd0>)
     b8e:	208b      	movs	r0, #139	; 0x8b
     b90:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     b92:	4629      	mov	r1, r5
     b94:	20a3      	movs	r0, #163	; 0xa3
     b96:	47a0      	blx	r4
	swd_write(req_write_drw, EN_HALT_ON_RST);
     b98:	2101      	movs	r1, #1
     b9a:	20bb      	movs	r0, #187	; 0xbb
     b9c:	47a0      	blx	r4
				
	//reset core
	swd_clear_abort_reg();
     b9e:	47b0      	blx	r6
	swd_write(req_write_select, AP_PORT_0);
     ba0:	2100      	movs	r1, #0
     ba2:	20b1      	movs	r0, #177	; 0xb1
     ba4:	47a0      	blx	r4
	swd_write(req_write_tar, _AIRCR);
     ba6:	4912      	ldr	r1, [pc, #72]	; (bf0 <swd_m4_startup+0xd4>)
     ba8:	208b      	movs	r0, #139	; 0x8b
     baa:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     bac:	4629      	mov	r1, r5
     bae:	20a3      	movs	r0, #163	; 0xa3
     bb0:	47a0      	blx	r4
	swd_write(req_write_drw, RESET_CORE);
     bb2:	4910      	ldr	r1, [pc, #64]	; (bf4 <swd_m4_startup+0xd8>)
     bb4:	20bb      	movs	r0, #187	; 0xbb
     bb6:	47a0      	blx	r4
	
	return f_ok; 
     bb8:	2000      	movs	r0, #0
}
     bba:	bd70      	pop	{r4, r5, r6, pc}
		i2c_send_error(error_dbg_locked);
     bbc:	2002      	movs	r0, #2
     bbe:	4b04      	ldr	r3, [pc, #16]	; (bd0 <swd_m4_startup+0xb4>)
     bc0:	4798      	blx	r3
		return f_err; 
     bc2:	2001      	movs	r0, #1
     bc4:	bd70      	pop	{r4, r5, r6, pc}
     bc6:	bf00      	nop
     bc8:	00002425 	.word	0x00002425
     bcc:	000023c5 	.word	0x000023c5
     bd0:	000024c1 	.word	0x000024c1
     bd4:	23000002 	.word	0x23000002
     bd8:	16e60001 	.word	0x16e60001
     bdc:	0000233d 	.word	0x0000233d
     be0:	e000edf0 	.word	0xe000edf0
     be4:	23000012 	.word	0x23000012
     be8:	a05f0003 	.word	0xa05f0003
     bec:	e000edfc 	.word	0xe000edfc
     bf0:	e000ed0c 	.word	0xe000ed0c
     bf4:	05fa0004 	.word	0x05fa0004

00000bf8 <NRF52840_program>:

uint32_t NRF52840_program(uint8_t* qspi_buff, uint32_t start_address)
{
     bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bfc:	b083      	sub	sp, #12
     bfe:	4606      	mov	r6, r0
     c00:	4688      	mov	r8, r1
	//-------------------------------NRF52840 specific-------------------------------// 
	
	swd_clear_abort_reg();
     c02:	4d53      	ldr	r5, [pc, #332]	; (d50 <NRF52840_program+0x158>)
     c04:	47a8      	blx	r5
	swd_write(req_write_select, AP_PORT_0);
     c06:	2100      	movs	r1, #0
     c08:	20b1      	movs	r0, #177	; 0xb1
     c0a:	4c52      	ldr	r4, [pc, #328]	; (d54 <NRF52840_program+0x15c>)
     c0c:	47a0      	blx	r4
	swd_write(req_write_tar, NRF52_NVMC_CONFIG);
     c0e:	4952      	ldr	r1, [pc, #328]	; (d58 <NRF52840_program+0x160>)
     c10:	208b      	movs	r0, #139	; 0x8b
     c12:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     c14:	4f51      	ldr	r7, [pc, #324]	; (d5c <NRF52840_program+0x164>)
     c16:	4639      	mov	r1, r7
     c18:	20a3      	movs	r0, #163	; 0xa3
     c1a:	47a0      	blx	r4
	swd_write(req_write_drw, ERASE_ENABLE); //enable erase cmd
     c1c:	2102      	movs	r1, #2
     c1e:	20bb      	movs	r0, #187	; 0xbb
     c20:	47a0      	blx	r4
				
	swd_clear_abort_reg();
     c22:	47a8      	blx	r5
	swd_write(req_write_select, AP_PORT_0);
     c24:	2100      	movs	r1, #0
     c26:	20b1      	movs	r0, #177	; 0xb1
     c28:	47a0      	blx	r4
	swd_write(req_write_tar, NRF52_NVMC_ERASE_ALL);
     c2a:	494d      	ldr	r1, [pc, #308]	; (d60 <NRF52840_program+0x168>)
     c2c:	208b      	movs	r0, #139	; 0x8b
     c2e:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     c30:	4639      	mov	r1, r7
     c32:	20a3      	movs	r0, #163	; 0xa3
     c34:	47a0      	blx	r4
	swd_write(req_write_drw, ERASE_ALL); //erase all cmd
     c36:	2101      	movs	r1, #1
     c38:	20bb      	movs	r0, #187	; 0xbb
     c3a:	47a0      	blx	r4
	delay_ms(200); //should take 167ms to erase all 
     c3c:	20c8      	movs	r0, #200	; 0xc8
     c3e:	4b49      	ldr	r3, [pc, #292]	; (d64 <NRF52840_program+0x16c>)
     c40:	4798      	blx	r3
				
	swd_clear_abort_reg();
     c42:	47a8      	blx	r5
	swd_write(req_write_select, AP_PORT_0);
     c44:	2100      	movs	r1, #0
     c46:	20b1      	movs	r0, #177	; 0xb1
     c48:	47a0      	blx	r4
	swd_write(req_write_tar, NRF52_NVMC_READY);
     c4a:	4947      	ldr	r1, [pc, #284]	; (d68 <NRF52840_program+0x170>)
     c4c:	208b      	movs	r0, #139	; 0x8b
     c4e:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_OFF);
     c50:	4946      	ldr	r1, [pc, #280]	; (d6c <NRF52840_program+0x174>)
     c52:	20a3      	movs	r0, #163	; 0xa3
     c54:	47a0      	blx	r4
	swd_read(req_read_drw);
     c56:	209f      	movs	r0, #159	; 0x9f
     c58:	4c45      	ldr	r4, [pc, #276]	; (d70 <NRF52840_program+0x178>)
     c5a:	47a0      	blx	r4
	uint32_t ready_val = swd_read(req_read_drw);
     c5c:	209f      	movs	r0, #159	; 0x9f
     c5e:	47a0      	blx	r4
	while(!ready_val) //not ready
     c60:	b938      	cbnz	r0, c72 <NRF52840_program+0x7a>
	{
		delay_ms(50);
     c62:	2732      	movs	r7, #50	; 0x32
     c64:	4d3f      	ldr	r5, [pc, #252]	; (d64 <NRF52840_program+0x16c>)
     c66:	4638      	mov	r0, r7
     c68:	47a8      	blx	r5
		ready_val = swd_read(req_read_drw);
     c6a:	209f      	movs	r0, #159	; 0x9f
     c6c:	47a0      	blx	r4
	while(!ready_val) //not ready
     c6e:	2800      	cmp	r0, #0
     c70:	d0f9      	beq.n	c66 <NRF52840_program+0x6e>
	}
				
	swd_clear_abort_reg();
     c72:	4b37      	ldr	r3, [pc, #220]	; (d50 <NRF52840_program+0x158>)
     c74:	4798      	blx	r3
	swd_write(req_write_select, AP_PORT_0);
     c76:	2100      	movs	r1, #0
     c78:	20b1      	movs	r0, #177	; 0xb1
     c7a:	4c36      	ldr	r4, [pc, #216]	; (d54 <NRF52840_program+0x15c>)
     c7c:	47a0      	blx	r4
	swd_write(req_write_tar, NRF52_NVMC_CONFIG);
     c7e:	4936      	ldr	r1, [pc, #216]	; (d58 <NRF52840_program+0x160>)
     c80:	208b      	movs	r0, #139	; 0x8b
     c82:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     c84:	4935      	ldr	r1, [pc, #212]	; (d5c <NRF52840_program+0x164>)
     c86:	20a3      	movs	r0, #163	; 0xa3
     c88:	47a0      	blx	r4
	swd_write(req_write_drw, WRITE_ENABLE); //enable write cmd
     c8a:	2101      	movs	r1, #1
     c8c:	20bb      	movs	r0, #187	; 0xbb
     c8e:	47a0      	blx	r4
				
	uint32_t progress_track = 0;
	uint32_t progress_chunk = num_words/124; 
     c90:	4b38      	ldr	r3, [pc, #224]	; (d74 <NRF52840_program+0x17c>)
     c92:	681b      	ldr	r3, [r3, #0]
     c94:	ea4f 0a93 	mov.w	sl, r3, lsr #2
     c98:	4a37      	ldr	r2, [pc, #220]	; (d78 <NRF52840_program+0x180>)
     c9a:	fba2 2a0a 	umull	r2, sl, r2, sl
     c9e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
	uint8_t packet_count = 0;
				
	for(int i=0; i<num_words; i++) //will there be remainder / non-full word sent?
     ca2:	2b00      	cmp	r3, #0
     ca4:	d050      	beq.n	d48 <NRF52840_program+0x150>
     ca6:	9600      	str	r6, [sp, #0]
     ca8:	2300      	movs	r3, #0
     caa:	9301      	str	r3, [sp, #4]
     cac:	461f      	mov	r7, r3
	{
		uint32_t word = *(qspi_buff +(i+3)) << 24 | *(qspi_buff + (i+2)) << 16 | *(qspi_buff + (i+1)) << 8 | *(qspi_buff + i); //LSB
					
		swd_clear_abort_reg();
     cae:	f8df 90a0 	ldr.w	r9, [pc, #160]	; d50 <NRF52840_program+0x158>
     cb2:	e007      	b.n	cc4 <NRF52840_program+0xcc>
     cb4:	f108 0804 	add.w	r8, r8, #4
	for(int i=0; i<num_words; i++) //will there be remainder / non-full word sent?
     cb8:	9b00      	ldr	r3, [sp, #0]
     cba:	1af3      	subs	r3, r6, r3
     cbc:	4a2d      	ldr	r2, [pc, #180]	; (d74 <NRF52840_program+0x17c>)
     cbe:	6812      	ldr	r2, [r2, #0]
     cc0:	429a      	cmp	r2, r3
     cc2:	d941      	bls.n	d48 <NRF52840_program+0x150>
     cc4:	4633      	mov	r3, r6
		uint32_t word = *(qspi_buff +(i+3)) << 24 | *(qspi_buff + (i+2)) << 16 | *(qspi_buff + (i+1)) << 8 | *(qspi_buff + i); //LSB
     cc6:	78f2      	ldrb	r2, [r6, #3]
     cc8:	3601      	adds	r6, #1
     cca:	789c      	ldrb	r4, [r3, #2]
     ccc:	0424      	lsls	r4, r4, #16
     cce:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
     cd2:	781a      	ldrb	r2, [r3, #0]
     cd4:	4314      	orrs	r4, r2
     cd6:	785b      	ldrb	r3, [r3, #1]
     cd8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
		swd_clear_abort_reg();
     cdc:	47c8      	blx	r9
		swd_write(req_write_select, AP_PORT_0);
     cde:	2100      	movs	r1, #0
     ce0:	20b1      	movs	r0, #177	; 0xb1
     ce2:	4d1c      	ldr	r5, [pc, #112]	; (d54 <NRF52840_program+0x15c>)
     ce4:	47a8      	blx	r5
		swd_write(req_write_tar, start_address + (i*WORD_SIZE)); //set flash address
     ce6:	4641      	mov	r1, r8
     ce8:	208b      	movs	r0, #139	; 0x8b
     cea:	47a8      	blx	r5
		swd_write(req_write_csw, CSW_AUTOINC_OFF);
     cec:	f8df b07c 	ldr.w	fp, [pc, #124]	; d6c <NRF52840_program+0x174>
     cf0:	4659      	mov	r1, fp
     cf2:	20a3      	movs	r0, #163	; 0xa3
     cf4:	47a8      	blx	r5
		swd_write(req_write_drw, word); 
     cf6:	4621      	mov	r1, r4
     cf8:	20bb      	movs	r0, #187	; 0xbb
     cfa:	47a8      	blx	r5
					
		swd_clear_abort_reg();
     cfc:	47c8      	blx	r9
		swd_write(req_write_select, AP_PORT_0);
     cfe:	2100      	movs	r1, #0
     d00:	20b1      	movs	r0, #177	; 0xb1
     d02:	47a8      	blx	r5
		swd_write(req_write_tar, NRF52_NVMC_READY_NEXT);
     d04:	491d      	ldr	r1, [pc, #116]	; (d7c <NRF52840_program+0x184>)
     d06:	208b      	movs	r0, #139	; 0x8b
     d08:	47a8      	blx	r5
		swd_write(req_write_csw, CSW_AUTOINC_OFF);
     d0a:	4659      	mov	r1, fp
     d0c:	20a3      	movs	r0, #163	; 0xa3
     d0e:	47a8      	blx	r5
		swd_read(req_read_drw);
     d10:	209f      	movs	r0, #159	; 0x9f
     d12:	4c17      	ldr	r4, [pc, #92]	; (d70 <NRF52840_program+0x178>)
     d14:	47a0      	blx	r4
		uint32_t ready_val = swd_read(req_read_drw);
     d16:	209f      	movs	r0, #159	; 0x9f
     d18:	47a0      	blx	r4
		while(!ready_val) //not ready
     d1a:	b940      	cbnz	r0, d2e <NRF52840_program+0x136>
		{
			delay_ms(1);
     d1c:	f04f 0b01 	mov.w	fp, #1
     d20:	4d10      	ldr	r5, [pc, #64]	; (d64 <NRF52840_program+0x16c>)
     d22:	4658      	mov	r0, fp
     d24:	47a8      	blx	r5
			ready_val = swd_read(req_read_drw);
     d26:	209f      	movs	r0, #159	; 0x9f
     d28:	47a0      	blx	r4
		while(!ready_val) //not ready
     d2a:	2800      	cmp	r0, #0
     d2c:	d0f9      	beq.n	d22 <NRF52840_program+0x12a>
		}
					
		progress_track++; // Once programming begins send progress bytes 1-124
     d2e:	3701      	adds	r7, #1
		if(progress_track >= progress_chunk) //chunk size reached notify nordic	
     d30:	45ba      	cmp	sl, r7
     d32:	d8bf      	bhi.n	cb4 <NRF52840_program+0xbc>
		{
			i2c_send_progress(packet_count);//send progress to nordic in 124 increments
     d34:	9c01      	ldr	r4, [sp, #4]
     d36:	4620      	mov	r0, r4
     d38:	4b11      	ldr	r3, [pc, #68]	; (d80 <NRF52840_program+0x188>)
     d3a:	4798      	blx	r3
			packet_count++; 
     d3c:	4623      	mov	r3, r4
     d3e:	3301      	adds	r3, #1
     d40:	b2db      	uxtb	r3, r3
     d42:	9301      	str	r3, [sp, #4]
			progress_track = 0;
     d44:	2700      	movs	r7, #0
     d46:	e7b5      	b.n	cb4 <NRF52840_program+0xbc>
		}		
	}
	
	return f_ok;
     d48:	2000      	movs	r0, #0
     d4a:	b003      	add	sp, #12
     d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d50:	0000233d 	.word	0x0000233d
     d54:	000023c5 	.word	0x000023c5
     d58:	4001e504 	.word	0x4001e504
     d5c:	23000012 	.word	0x23000012
     d60:	4001e50c 	.word	0x4001e50c
     d64:	00000e6d 	.word	0x00000e6d
     d68:	4001e400 	.word	0x4001e400
     d6c:	23000002 	.word	0x23000002
     d70:	00002425 	.word	0x00002425
     d74:	20000080 	.word	0x20000080
     d78:	21084211 	.word	0x21084211
     d7c:	4001e408 	.word	0x4001e408
     d80:	000024e9 	.word	0x000024e9

00000d84 <branch_target>:
{	
     d84:	b570      	push	{r4, r5, r6, lr}
	switch(chip_type)
     d86:	b111      	cbz	r1, d8e <branch_target+0xa>
	uint32_t ret = f_ok; 
     d88:	2400      	movs	r4, #0
}
     d8a:	4620      	mov	r0, r4
     d8c:	bd70      	pop	{r4, r5, r6, pc}
     d8e:	4616      	mov	r6, r2
     d90:	4605      	mov	r5, r0
			ret = swd_m4_startup(); 
     d92:	4b06      	ldr	r3, [pc, #24]	; (dac <branch_target+0x28>)
     d94:	4798      	blx	r3
			if(ret == f_ok)
     d96:	4604      	mov	r4, r0
     d98:	2800      	cmp	r0, #0
     d9a:	d1f6      	bne.n	d8a <branch_target+0x6>
				NRF52840_program(qspi_buff, start_address);
     d9c:	4631      	mov	r1, r6
     d9e:	4628      	mov	r0, r5
     da0:	4b03      	ldr	r3, [pc, #12]	; (db0 <branch_target+0x2c>)
     da2:	4798      	blx	r3
				swd_m4_reset();
     da4:	4b03      	ldr	r3, [pc, #12]	; (db4 <branch_target+0x30>)
     da6:	4798      	blx	r3
     da8:	e7ef      	b.n	d8a <branch_target+0x6>
     daa:	bf00      	nop
     dac:	00000b1d 	.word	0x00000b1d
     db0:	00000bf9 	.word	0x00000bf9
     db4:	00000ae5 	.word	0x00000ae5

00000db8 <flash_target>:
{
     db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     dbc:	4680      	mov	r8, r0
     dbe:	460c      	mov	r4, r1
     dc0:	4691      	mov	r9, r2
     dc2:	461f      	mov	r7, r3
	nor_flash_qspi_init();
     dc4:	4b17      	ldr	r3, [pc, #92]	; (e24 <flash_target+0x6c>)
     dc6:	4798      	blx	r3
	uint8_t* qspi_buff = malloc(sizeof(data_len)); 
     dc8:	2004      	movs	r0, #4
     dca:	4b17      	ldr	r3, [pc, #92]	; (e28 <flash_target+0x70>)
     dcc:	4798      	blx	r3
     dce:	4605      	mov	r5, r0
	spi_nor_flash_read(SPI_NOR_FLASH_0, qspi_buff, data_addr, data_len); //data_len
     dd0:	4623      	mov	r3, r4
     dd2:	4642      	mov	r2, r8
     dd4:	4601      	mov	r1, r0
     dd6:	4815      	ldr	r0, [pc, #84]	; (e2c <flash_target+0x74>)
     dd8:	6800      	ldr	r0, [r0, #0]
     dda:	4e15      	ldr	r6, [pc, #84]	; (e30 <flash_target+0x78>)
     ddc:	47b0      	blx	r6
	jtag_to_swd();			
     dde:	4b15      	ldr	r3, [pc, #84]	; (e34 <flash_target+0x7c>)
     de0:	4798      	blx	r3
	uint32_t idcode = swd_read(req_read_idcode); 
     de2:	20a5      	movs	r0, #165	; 0xa5
     de4:	4b14      	ldr	r3, [pc, #80]	; (e38 <flash_target+0x80>)
     de6:	4798      	blx	r3
	if(idcode == 0x00000000 || idcode == 0xFFFFFFFF)
     de8:	3801      	subs	r0, #1
     dea:	f110 0f03 	cmn.w	r0, #3
     dee:	d810      	bhi.n	e12 <flash_target+0x5a>
	num_words = data_len/WORD_SIZE; // global word count, accurate?
     df0:	08a4      	lsrs	r4, r4, #2
     df2:	4b12      	ldr	r3, [pc, #72]	; (e3c <flash_target+0x84>)
     df4:	601c      	str	r4, [r3, #0]
		ret = branch_target(qspi_buff, chip_type, start_address);
     df6:	463a      	mov	r2, r7
     df8:	4649      	mov	r1, r9
     dfa:	4628      	mov	r0, r5
     dfc:	4b10      	ldr	r3, [pc, #64]	; (e40 <flash_target+0x88>)
     dfe:	4798      	blx	r3
     e00:	4604      	mov	r4, r0
	free(qspi_buff);
     e02:	4628      	mov	r0, r5
     e04:	4b0f      	ldr	r3, [pc, #60]	; (e44 <flash_target+0x8c>)
     e06:	4798      	blx	r3
	nor_flash_qspi_deinit(); // deinit after flashing to allow nordic to navigate
     e08:	4b0f      	ldr	r3, [pc, #60]	; (e48 <flash_target+0x90>)
     e0a:	4798      	blx	r3
}
     e0c:	4620      	mov	r0, r4
     e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		i2c_send_error(error_no_target);
     e12:	2000      	movs	r0, #0
     e14:	4b0d      	ldr	r3, [pc, #52]	; (e4c <flash_target+0x94>)
     e16:	4798      	blx	r3
	num_words = data_len/WORD_SIZE; // global word count, accurate?
     e18:	08a4      	lsrs	r4, r4, #2
     e1a:	4b08      	ldr	r3, [pc, #32]	; (e3c <flash_target+0x84>)
     e1c:	601c      	str	r4, [r3, #0]
     e1e:	2401      	movs	r4, #1
     e20:	e7ef      	b.n	e02 <flash_target+0x4a>
     e22:	bf00      	nop
     e24:	000008e5 	.word	0x000008e5
     e28:	00002559 	.word	0x00002559
     e2c:	20000130 	.word	0x20000130
     e30:	00002303 	.word	0x00002303
     e34:	00002361 	.word	0x00002361
     e38:	00002425 	.word	0x00002425
     e3c:	20000080 	.word	0x20000080
     e40:	00000d85 	.word	0x00000d85
     e44:	00002569 	.word	0x00002569
     e48:	000008f9 	.word	0x000008f9
     e4c:	000024c1 	.word	0x000024c1

00000e50 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     e50:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     e54:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     e56:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e58:	f3bf 8f5f 	dmb	sy
     e5c:	4770      	bx	lr

00000e5e <atomic_leave_critical>:
     e5e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     e62:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     e64:	f383 8810 	msr	PRIMASK, r3
     e68:	4770      	bx	lr
	...

00000e6c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     e6c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     e6e:	4b04      	ldr	r3, [pc, #16]	; (e80 <delay_ms+0x14>)
     e70:	681c      	ldr	r4, [r3, #0]
     e72:	4b04      	ldr	r3, [pc, #16]	; (e84 <delay_ms+0x18>)
     e74:	4798      	blx	r3
     e76:	4601      	mov	r1, r0
     e78:	4620      	mov	r0, r4
     e7a:	4b03      	ldr	r3, [pc, #12]	; (e88 <delay_ms+0x1c>)
     e7c:	4798      	blx	r3
     e7e:	bd10      	pop	{r4, pc}
     e80:	20000084 	.word	0x20000084
     e84:	000014cd 	.word	0x000014cd
     e88:	000014e9 	.word	0x000014e9

00000e8c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     e8c:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     e8e:	6943      	ldr	r3, [r0, #20]
     e90:	b103      	cbz	r3, e94 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     e92:	4798      	blx	r3
     e94:	bd08      	pop	{r3, pc}

00000e96 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     e96:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     e98:	6983      	ldr	r3, [r0, #24]
     e9a:	b103      	cbz	r3, e9e <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     e9c:	4798      	blx	r3
     e9e:	bd08      	pop	{r3, pc}

00000ea0 <flash_init>:
{
     ea0:	b538      	push	{r3, r4, r5, lr}
     ea2:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     ea4:	4604      	mov	r4, r0
     ea6:	b190      	cbz	r0, ece <flash_init+0x2e>
     ea8:	1c08      	adds	r0, r1, #0
     eaa:	bf18      	it	ne
     eac:	2001      	movne	r0, #1
     eae:	2238      	movs	r2, #56	; 0x38
     eb0:	4908      	ldr	r1, [pc, #32]	; (ed4 <flash_init+0x34>)
     eb2:	4b09      	ldr	r3, [pc, #36]	; (ed8 <flash_init+0x38>)
     eb4:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     eb6:	4629      	mov	r1, r5
     eb8:	4620      	mov	r0, r4
     eba:	4b08      	ldr	r3, [pc, #32]	; (edc <flash_init+0x3c>)
     ebc:	4798      	blx	r3
	if (rc) {
     ebe:	4603      	mov	r3, r0
     ec0:	b918      	cbnz	r0, eca <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     ec2:	4a07      	ldr	r2, [pc, #28]	; (ee0 <flash_init+0x40>)
     ec4:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     ec6:	4a07      	ldr	r2, [pc, #28]	; (ee4 <flash_init+0x44>)
     ec8:	6062      	str	r2, [r4, #4]
}
     eca:	4618      	mov	r0, r3
     ecc:	bd38      	pop	{r3, r4, r5, pc}
     ece:	2000      	movs	r0, #0
     ed0:	e7ed      	b.n	eae <flash_init+0xe>
     ed2:	bf00      	nop
     ed4:	00002710 	.word	0x00002710
     ed8:	0000141d 	.word	0x0000141d
     edc:	00001589 	.word	0x00001589
     ee0:	00000e8d 	.word	0x00000e8d
     ee4:	00000e97 	.word	0x00000e97

00000ee8 <i2c_s_sync_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_sync_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     eec:	460f      	mov	r7, r1
     eee:	4690      	mov	r8, r2
	uint16_t                      offset = 0;
	struct i2c_s_sync_descriptor *descr  = CONTAINER_OF(io, struct i2c_s_sync_descriptor, io);

	ASSERT(io && buf && length);
     ef0:	4604      	mov	r4, r0
     ef2:	b320      	cbz	r0, f3e <i2c_s_sync_write+0x56>
     ef4:	b329      	cbz	r1, f42 <i2c_s_sync_write+0x5a>
     ef6:	1c10      	adds	r0, r2, #0
     ef8:	bf18      	it	ne
     efa:	2001      	movne	r0, #1
     efc:	22b6      	movs	r2, #182	; 0xb6
     efe:	4912      	ldr	r1, [pc, #72]	; (f48 <i2c_s_sync_write+0x60>)
     f00:	4b12      	ldr	r3, [pc, #72]	; (f4c <i2c_s_sync_write+0x64>)
     f02:	4798      	blx	r3

	while (!_i2c_s_sync_is_byte_sent(&descr->device))
     f04:	3c04      	subs	r4, #4
     f06:	4d12      	ldr	r5, [pc, #72]	; (f50 <i2c_s_sync_write+0x68>)
     f08:	4620      	mov	r0, r4
     f0a:	47a8      	blx	r5
     f0c:	2800      	cmp	r0, #0
     f0e:	d0fb      	beq.n	f08 <i2c_s_sync_write+0x20>
     f10:	3f01      	subs	r7, #1
     f12:	2600      	movs	r6, #0
		;
	do {
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     f14:	f8df 9040 	ldr.w	r9, [pc, #64]	; f58 <i2c_s_sync_write+0x70>
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     f18:	4d0d      	ldr	r5, [pc, #52]	; (f50 <i2c_s_sync_write+0x68>)
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     f1a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     f1e:	4620      	mov	r0, r4
     f20:	47c8      	blx	r9
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     f22:	4620      	mov	r0, r4
     f24:	47a8      	blx	r5
     f26:	2800      	cmp	r0, #0
     f28:	d0fb      	beq.n	f22 <i2c_s_sync_write+0x3a>
			;
	} while (++offset < length);
     f2a:	3601      	adds	r6, #1
     f2c:	b2b6      	uxth	r6, r6
     f2e:	45b0      	cmp	r8, r6
     f30:	d8f3      	bhi.n	f1a <i2c_s_sync_write+0x32>

	/* To ensure no more data needs to be sent */
	_i2c_s_sync_clear_data_ready_flag(&descr->device);
     f32:	4620      	mov	r0, r4
     f34:	4b07      	ldr	r3, [pc, #28]	; (f54 <i2c_s_sync_write+0x6c>)
     f36:	4798      	blx	r3

	return (int32_t)offset;
}
     f38:	4630      	mov	r0, r6
     f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     f3e:	2000      	movs	r0, #0
     f40:	e7dc      	b.n	efc <i2c_s_sync_write+0x14>
     f42:	2000      	movs	r0, #0
     f44:	e7da      	b.n	efc <i2c_s_sync_write+0x14>
     f46:	bf00      	nop
     f48:	00002728 	.word	0x00002728
     f4c:	0000141d 	.word	0x0000141d
     f50:	00001a77 	.word	0x00001a77
     f54:	00001a8b 	.word	0x00001a8b
     f58:	00001a69 	.word	0x00001a69

00000f5c <i2c_s_sync_read>:
{
     f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f60:	460f      	mov	r7, r1
     f62:	4690      	mov	r8, r2
	ASSERT(io && buf && length);
     f64:	4604      	mov	r4, r0
     f66:	b1e0      	cbz	r0, fa2 <i2c_s_sync_read+0x46>
     f68:	b1e9      	cbz	r1, fa6 <i2c_s_sync_read+0x4a>
     f6a:	1c10      	adds	r0, r2, #0
     f6c:	bf18      	it	ne
     f6e:	2001      	movne	r0, #1
     f70:	229c      	movs	r2, #156	; 0x9c
     f72:	490e      	ldr	r1, [pc, #56]	; (fac <i2c_s_sync_read+0x50>)
     f74:	4b0e      	ldr	r3, [pc, #56]	; (fb0 <i2c_s_sync_read+0x54>)
     f76:	4798      	blx	r3
     f78:	3f01      	subs	r7, #1
	uint16_t                      offset = 0;
     f7a:	2600      	movs	r6, #0
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     f7c:	3c04      	subs	r4, #4
     f7e:	4d0d      	ldr	r5, [pc, #52]	; (fb4 <i2c_s_sync_read+0x58>)
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     f80:	f8df 9034 	ldr.w	r9, [pc, #52]	; fb8 <i2c_s_sync_read+0x5c>
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     f84:	4620      	mov	r0, r4
     f86:	47a8      	blx	r5
     f88:	2800      	cmp	r0, #0
     f8a:	d0fb      	beq.n	f84 <i2c_s_sync_read+0x28>
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     f8c:	4620      	mov	r0, r4
     f8e:	47c8      	blx	r9
     f90:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     f94:	3601      	adds	r6, #1
     f96:	b2b6      	uxth	r6, r6
     f98:	45b0      	cmp	r8, r6
     f9a:	d8f3      	bhi.n	f84 <i2c_s_sync_read+0x28>
}
     f9c:	4630      	mov	r0, r6
     f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     fa2:	2000      	movs	r0, #0
     fa4:	e7e4      	b.n	f70 <i2c_s_sync_read+0x14>
     fa6:	2000      	movs	r0, #0
     fa8:	e7e2      	b.n	f70 <i2c_s_sync_read+0x14>
     faa:	bf00      	nop
     fac:	00002728 	.word	0x00002728
     fb0:	0000141d 	.word	0x0000141d
     fb4:	00001a81 	.word	0x00001a81
     fb8:	00001a6f 	.word	0x00001a6f

00000fbc <i2c_s_sync_init>:
{
     fbc:	b538      	push	{r3, r4, r5, lr}
     fbe:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     fc0:	4604      	mov	r4, r0
     fc2:	b190      	cbz	r0, fea <i2c_s_sync_init+0x2e>
     fc4:	1c08      	adds	r0, r1, #0
     fc6:	bf18      	it	ne
     fc8:	2001      	movne	r0, #1
     fca:	2235      	movs	r2, #53	; 0x35
     fcc:	4908      	ldr	r1, [pc, #32]	; (ff0 <i2c_s_sync_init+0x34>)
     fce:	4b09      	ldr	r3, [pc, #36]	; (ff4 <i2c_s_sync_init+0x38>)
     fd0:	4798      	blx	r3
	init_status = _i2c_s_sync_init(&descr->device, hw);
     fd2:	4629      	mov	r1, r5
     fd4:	4620      	mov	r0, r4
     fd6:	4b08      	ldr	r3, [pc, #32]	; (ff8 <i2c_s_sync_init+0x3c>)
     fd8:	4798      	blx	r3
	if (init_status) {
     fda:	4603      	mov	r3, r0
     fdc:	b918      	cbnz	r0, fe6 <i2c_s_sync_init+0x2a>
	descr->io.read  = i2c_s_sync_read;
     fde:	4a07      	ldr	r2, [pc, #28]	; (ffc <i2c_s_sync_init+0x40>)
     fe0:	60a2      	str	r2, [r4, #8]
	descr->io.write = i2c_s_sync_write;
     fe2:	4a07      	ldr	r2, [pc, #28]	; (1000 <i2c_s_sync_init+0x44>)
     fe4:	6062      	str	r2, [r4, #4]
}
     fe6:	4618      	mov	r0, r3
     fe8:	bd38      	pop	{r3, r4, r5, pc}
     fea:	2000      	movs	r0, #0
     fec:	e7ed      	b.n	fca <i2c_s_sync_init+0xe>
     fee:	bf00      	nop
     ff0:	00002728 	.word	0x00002728
     ff4:	0000141d 	.word	0x0000141d
     ff8:	00001a05 	.word	0x00001a05
     ffc:	00000f5d 	.word	0x00000f5d
    1000:	00000ee9 	.word	0x00000ee9

00001004 <i2c_s_sync_set_addr>:
{
    1004:	b538      	push	{r3, r4, r5, lr}
    1006:	460d      	mov	r5, r1
	ASSERT(descr);
    1008:	4604      	mov	r4, r0
    100a:	2251      	movs	r2, #81	; 0x51
    100c:	490a      	ldr	r1, [pc, #40]	; (1038 <i2c_s_sync_set_addr+0x34>)
    100e:	3000      	adds	r0, #0
    1010:	bf18      	it	ne
    1012:	2001      	movne	r0, #1
    1014:	4b09      	ldr	r3, [pc, #36]	; (103c <i2c_s_sync_set_addr+0x38>)
    1016:	4798      	blx	r3
	if (!_i2c_s_sync_is_10bit_addressing_on(&descr->device)) {
    1018:	4620      	mov	r0, r4
    101a:	4b09      	ldr	r3, [pc, #36]	; (1040 <i2c_s_sync_set_addr+0x3c>)
    101c:	4798      	blx	r3
    101e:	b120      	cbz	r0, 102a <i2c_s_sync_set_addr+0x26>
	return _i2c_s_sync_set_address(&descr->device, address);
    1020:	4629      	mov	r1, r5
    1022:	4620      	mov	r0, r4
    1024:	4b07      	ldr	r3, [pc, #28]	; (1044 <i2c_s_sync_set_addr+0x40>)
    1026:	4798      	blx	r3
}
    1028:	bd38      	pop	{r3, r4, r5, pc}
		return _i2c_s_sync_set_address(&descr->device, address & 0x7F);
    102a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
    102e:	4620      	mov	r0, r4
    1030:	4b04      	ldr	r3, [pc, #16]	; (1044 <i2c_s_sync_set_addr+0x40>)
    1032:	4798      	blx	r3
    1034:	bd38      	pop	{r3, r4, r5, pc}
    1036:	bf00      	nop
    1038:	00002728 	.word	0x00002728
    103c:	0000141d 	.word	0x0000141d
    1040:	00001a4f 	.word	0x00001a4f
    1044:	00001a59 	.word	0x00001a59

00001048 <i2c_s_sync_enable>:
{
    1048:	b510      	push	{r4, lr}
	ASSERT(descr);
    104a:	4604      	mov	r4, r0
    104c:	225f      	movs	r2, #95	; 0x5f
    104e:	4905      	ldr	r1, [pc, #20]	; (1064 <i2c_s_sync_enable+0x1c>)
    1050:	3000      	adds	r0, #0
    1052:	bf18      	it	ne
    1054:	2001      	movne	r0, #1
    1056:	4b04      	ldr	r3, [pc, #16]	; (1068 <i2c_s_sync_enable+0x20>)
    1058:	4798      	blx	r3
	return _i2c_s_sync_enable(&descr->device);
    105a:	4620      	mov	r0, r4
    105c:	4b03      	ldr	r3, [pc, #12]	; (106c <i2c_s_sync_enable+0x24>)
    105e:	4798      	blx	r3
}
    1060:	bd10      	pop	{r4, pc}
    1062:	bf00      	nop
    1064:	00002728 	.word	0x00002728
    1068:	0000141d 	.word	0x0000141d
    106c:	00001a39 	.word	0x00001a39

00001070 <i2c_s_sync_get_io_descriptor>:
{
    1070:	b538      	push	{r3, r4, r5, lr}
    1072:	460d      	mov	r5, r1
	ASSERT(descr && io);
    1074:	4604      	mov	r4, r0
    1076:	b150      	cbz	r0, 108e <i2c_s_sync_get_io_descriptor+0x1e>
    1078:	1c08      	adds	r0, r1, #0
    107a:	bf18      	it	ne
    107c:	2001      	movne	r0, #1
    107e:	2273      	movs	r2, #115	; 0x73
    1080:	4904      	ldr	r1, [pc, #16]	; (1094 <i2c_s_sync_get_io_descriptor+0x24>)
    1082:	4b05      	ldr	r3, [pc, #20]	; (1098 <i2c_s_sync_get_io_descriptor+0x28>)
    1084:	4798      	blx	r3
	*io = &descr->io;
    1086:	3404      	adds	r4, #4
    1088:	602c      	str	r4, [r5, #0]
}
    108a:	2000      	movs	r0, #0
    108c:	bd38      	pop	{r3, r4, r5, pc}
    108e:	2000      	movs	r0, #0
    1090:	e7f5      	b.n	107e <i2c_s_sync_get_io_descriptor+0xe>
    1092:	bf00      	nop
    1094:	00002728 	.word	0x00002728
    1098:	0000141d 	.word	0x0000141d

0000109c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    109c:	b570      	push	{r4, r5, r6, lr}
    109e:	460d      	mov	r5, r1
    10a0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    10a2:	4604      	mov	r4, r0
    10a4:	b160      	cbz	r0, 10c0 <io_write+0x24>
    10a6:	1c08      	adds	r0, r1, #0
    10a8:	bf18      	it	ne
    10aa:	2001      	movne	r0, #1
    10ac:	2234      	movs	r2, #52	; 0x34
    10ae:	4905      	ldr	r1, [pc, #20]	; (10c4 <io_write+0x28>)
    10b0:	4b05      	ldr	r3, [pc, #20]	; (10c8 <io_write+0x2c>)
    10b2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    10b4:	6823      	ldr	r3, [r4, #0]
    10b6:	4632      	mov	r2, r6
    10b8:	4629      	mov	r1, r5
    10ba:	4620      	mov	r0, r4
    10bc:	4798      	blx	r3
}
    10be:	bd70      	pop	{r4, r5, r6, pc}
    10c0:	2000      	movs	r0, #0
    10c2:	e7f3      	b.n	10ac <io_write+0x10>
    10c4:	00002744 	.word	0x00002744
    10c8:	0000141d 	.word	0x0000141d

000010cc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    10cc:	b570      	push	{r4, r5, r6, lr}
    10ce:	460d      	mov	r5, r1
    10d0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
    10d2:	4604      	mov	r4, r0
    10d4:	b160      	cbz	r0, 10f0 <io_read+0x24>
    10d6:	1c08      	adds	r0, r1, #0
    10d8:	bf18      	it	ne
    10da:	2001      	movne	r0, #1
    10dc:	223d      	movs	r2, #61	; 0x3d
    10de:	4905      	ldr	r1, [pc, #20]	; (10f4 <io_read+0x28>)
    10e0:	4b05      	ldr	r3, [pc, #20]	; (10f8 <io_read+0x2c>)
    10e2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    10e4:	6863      	ldr	r3, [r4, #4]
    10e6:	4632      	mov	r2, r6
    10e8:	4629      	mov	r1, r5
    10ea:	4620      	mov	r0, r4
    10ec:	4798      	blx	r3
}
    10ee:	bd70      	pop	{r4, r5, r6, pc}
    10f0:	2000      	movs	r0, #0
    10f2:	e7f3      	b.n	10dc <io_read+0x10>
    10f4:	00002744 	.word	0x00002744
    10f8:	0000141d 	.word	0x0000141d

000010fc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
    10fc:	b538      	push	{r3, r4, r5, lr}
    10fe:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
    1100:	4605      	mov	r5, r0
    1102:	b158      	cbz	r0, 111c <qspi_sync_init+0x20>
    1104:	1c08      	adds	r0, r1, #0
    1106:	bf18      	it	ne
    1108:	2001      	movne	r0, #1
    110a:	2231      	movs	r2, #49	; 0x31
    110c:	4904      	ldr	r1, [pc, #16]	; (1120 <qspi_sync_init+0x24>)
    110e:	4b05      	ldr	r3, [pc, #20]	; (1124 <qspi_sync_init+0x28>)
    1110:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
    1112:	4621      	mov	r1, r4
    1114:	4628      	mov	r0, r5
    1116:	4b04      	ldr	r3, [pc, #16]	; (1128 <qspi_sync_init+0x2c>)
    1118:	4798      	blx	r3
}
    111a:	bd38      	pop	{r3, r4, r5, pc}
    111c:	2000      	movs	r0, #0
    111e:	e7f4      	b.n	110a <qspi_sync_init+0xe>
    1120:	00002758 	.word	0x00002758
    1124:	0000141d 	.word	0x0000141d
    1128:	000016b1 	.word	0x000016b1

0000112c <qspi_sync_deinit>:

int32_t qspi_sync_deinit(struct qspi_sync_descriptor *qspi)
{
    112c:	b510      	push	{r4, lr}
	ASSERT(qspi);
    112e:	4604      	mov	r4, r0
    1130:	2238      	movs	r2, #56	; 0x38
    1132:	4905      	ldr	r1, [pc, #20]	; (1148 <qspi_sync_deinit+0x1c>)
    1134:	3000      	adds	r0, #0
    1136:	bf18      	it	ne
    1138:	2001      	movne	r0, #1
    113a:	4b04      	ldr	r3, [pc, #16]	; (114c <qspi_sync_deinit+0x20>)
    113c:	4798      	blx	r3

	return _qspi_sync_deinit(&qspi->dev);
    113e:	4620      	mov	r0, r4
    1140:	4b03      	ldr	r3, [pc, #12]	; (1150 <qspi_sync_deinit+0x24>)
    1142:	4798      	blx	r3
}
    1144:	bd10      	pop	{r4, pc}
    1146:	bf00      	nop
    1148:	00002758 	.word	0x00002758
    114c:	0000141d 	.word	0x0000141d
    1150:	000016e9 	.word	0x000016e9

00001154 <qspi_sync_enable>:

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    1154:	b510      	push	{r4, lr}
	ASSERT(qspi);
    1156:	4604      	mov	r4, r0
    1158:	223f      	movs	r2, #63	; 0x3f
    115a:	4905      	ldr	r1, [pc, #20]	; (1170 <qspi_sync_enable+0x1c>)
    115c:	3000      	adds	r0, #0
    115e:	bf18      	it	ne
    1160:	2001      	movne	r0, #1
    1162:	4b04      	ldr	r3, [pc, #16]	; (1174 <qspi_sync_enable+0x20>)
    1164:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    1166:	4620      	mov	r0, r4
    1168:	4b03      	ldr	r3, [pc, #12]	; (1178 <qspi_sync_enable+0x24>)
    116a:	4798      	blx	r3
}
    116c:	bd10      	pop	{r4, pc}
    116e:	bf00      	nop
    1170:	00002758 	.word	0x00002758
    1174:	0000141d 	.word	0x0000141d
    1178:	000016f3 	.word	0x000016f3

0000117c <qspi_sync_serial_run_command>:

	return _qspi_sync_disable(&qspi->dev);
}

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    117c:	b538      	push	{r3, r4, r5, lr}
    117e:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
    1180:	4605      	mov	r5, r0
    1182:	b158      	cbz	r0, 119c <qspi_sync_serial_run_command+0x20>
    1184:	1c08      	adds	r0, r1, #0
    1186:	bf18      	it	ne
    1188:	2001      	movne	r0, #1
    118a:	224d      	movs	r2, #77	; 0x4d
    118c:	4904      	ldr	r1, [pc, #16]	; (11a0 <qspi_sync_serial_run_command+0x24>)
    118e:	4b05      	ldr	r3, [pc, #20]	; (11a4 <qspi_sync_serial_run_command+0x28>)
    1190:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    1192:	4621      	mov	r1, r4
    1194:	4628      	mov	r0, r5
    1196:	4b04      	ldr	r3, [pc, #16]	; (11a8 <qspi_sync_serial_run_command+0x2c>)
    1198:	4798      	blx	r3
}
    119a:	bd38      	pop	{r3, r4, r5, pc}
    119c:	2000      	movs	r0, #0
    119e:	e7f4      	b.n	118a <qspi_sync_serial_run_command+0xe>
    11a0:	00002758 	.word	0x00002758
    11a4:	0000141d 	.word	0x0000141d
    11a8:	000016fd 	.word	0x000016fd

000011ac <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    11ac:	b538      	push	{r3, r4, r5, lr}
    11ae:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    11b0:	4604      	mov	r4, r0
    11b2:	b1b8      	cbz	r0, 11e4 <spi_m_sync_init+0x38>
    11b4:	1c08      	adds	r0, r1, #0
    11b6:	bf18      	it	ne
    11b8:	2001      	movne	r0, #1
    11ba:	2240      	movs	r2, #64	; 0x40
    11bc:	490a      	ldr	r1, [pc, #40]	; (11e8 <spi_m_sync_init+0x3c>)
    11be:	4b0b      	ldr	r3, [pc, #44]	; (11ec <spi_m_sync_init+0x40>)
    11c0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    11c2:	4620      	mov	r0, r4
    11c4:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    11c8:	4629      	mov	r1, r5
    11ca:	4b09      	ldr	r3, [pc, #36]	; (11f0 <spi_m_sync_init+0x44>)
    11cc:	4798      	blx	r3

	if (rc < 0) {
    11ce:	2800      	cmp	r0, #0
    11d0:	db07      	blt.n	11e2 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    11d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    11d6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    11d8:	4b06      	ldr	r3, [pc, #24]	; (11f4 <spi_m_sync_init+0x48>)
    11da:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    11dc:	4b06      	ldr	r3, [pc, #24]	; (11f8 <spi_m_sync_init+0x4c>)
    11de:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    11e0:	2000      	movs	r0, #0
}
    11e2:	bd38      	pop	{r3, r4, r5, pc}
    11e4:	2000      	movs	r0, #0
    11e6:	e7e8      	b.n	11ba <spi_m_sync_init+0xe>
    11e8:	00002774 	.word	0x00002774
    11ec:	0000141d 	.word	0x0000141d
    11f0:	00001a95 	.word	0x00001a95
    11f4:	000012a1 	.word	0x000012a1
    11f8:	00001265 	.word	0x00001265

000011fc <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    11fc:	b510      	push	{r4, lr}
	ASSERT(spi);
    11fe:	4604      	mov	r4, r0
    1200:	2257      	movs	r2, #87	; 0x57
    1202:	4905      	ldr	r1, [pc, #20]	; (1218 <spi_m_sync_enable+0x1c>)
    1204:	3000      	adds	r0, #0
    1206:	bf18      	it	ne
    1208:	2001      	movne	r0, #1
    120a:	4b04      	ldr	r3, [pc, #16]	; (121c <spi_m_sync_enable+0x20>)
    120c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    120e:	1d20      	adds	r0, r4, #4
    1210:	4b03      	ldr	r3, [pc, #12]	; (1220 <spi_m_sync_enable+0x24>)
    1212:	4798      	blx	r3
    1214:	bd10      	pop	{r4, pc}
    1216:	bf00      	nop
    1218:	00002774 	.word	0x00002774
    121c:	0000141d 	.word	0x0000141d
    1220:	00001b89 	.word	0x00001b89

00001224 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1224:	b530      	push	{r4, r5, lr}
    1226:	b085      	sub	sp, #20
    1228:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    122a:	4605      	mov	r5, r0
    122c:	b190      	cbz	r0, 1254 <spi_m_sync_transfer+0x30>
    122e:	1c08      	adds	r0, r1, #0
    1230:	bf18      	it	ne
    1232:	2001      	movne	r0, #1
    1234:	22b3      	movs	r2, #179	; 0xb3
    1236:	4908      	ldr	r1, [pc, #32]	; (1258 <spi_m_sync_transfer+0x34>)
    1238:	4b08      	ldr	r3, [pc, #32]	; (125c <spi_m_sync_transfer+0x38>)
    123a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    123c:	6823      	ldr	r3, [r4, #0]
    123e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1240:	6863      	ldr	r3, [r4, #4]
    1242:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1244:	68a3      	ldr	r3, [r4, #8]
    1246:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1248:	a901      	add	r1, sp, #4
    124a:	1d28      	adds	r0, r5, #4
    124c:	4b04      	ldr	r3, [pc, #16]	; (1260 <spi_m_sync_transfer+0x3c>)
    124e:	4798      	blx	r3
}
    1250:	b005      	add	sp, #20
    1252:	bd30      	pop	{r4, r5, pc}
    1254:	2000      	movs	r0, #0
    1256:	e7ed      	b.n	1234 <spi_m_sync_transfer+0x10>
    1258:	00002774 	.word	0x00002774
    125c:	0000141d 	.word	0x0000141d
    1260:	00001bb9 	.word	0x00001bb9

00001264 <_spi_m_sync_io_write>:
{
    1264:	b570      	push	{r4, r5, r6, lr}
    1266:	b084      	sub	sp, #16
    1268:	460e      	mov	r6, r1
    126a:	4615      	mov	r5, r2
	ASSERT(io);
    126c:	4604      	mov	r4, r0
    126e:	22a3      	movs	r2, #163	; 0xa3
    1270:	4908      	ldr	r1, [pc, #32]	; (1294 <_spi_m_sync_io_write+0x30>)
    1272:	3000      	adds	r0, #0
    1274:	bf18      	it	ne
    1276:	2001      	movne	r0, #1
    1278:	4b07      	ldr	r3, [pc, #28]	; (1298 <_spi_m_sync_io_write+0x34>)
    127a:	4798      	blx	r3
	xfer.rxbuf = 0;
    127c:	2300      	movs	r3, #0
    127e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1280:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1282:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1284:	a901      	add	r1, sp, #4
    1286:	f1a4 000c 	sub.w	r0, r4, #12
    128a:	4b04      	ldr	r3, [pc, #16]	; (129c <_spi_m_sync_io_write+0x38>)
    128c:	4798      	blx	r3
}
    128e:	b004      	add	sp, #16
    1290:	bd70      	pop	{r4, r5, r6, pc}
    1292:	bf00      	nop
    1294:	00002774 	.word	0x00002774
    1298:	0000141d 	.word	0x0000141d
    129c:	00001225 	.word	0x00001225

000012a0 <_spi_m_sync_io_read>:
{
    12a0:	b570      	push	{r4, r5, r6, lr}
    12a2:	b084      	sub	sp, #16
    12a4:	460e      	mov	r6, r1
    12a6:	4615      	mov	r5, r2
	ASSERT(io);
    12a8:	4604      	mov	r4, r0
    12aa:	2287      	movs	r2, #135	; 0x87
    12ac:	4908      	ldr	r1, [pc, #32]	; (12d0 <_spi_m_sync_io_read+0x30>)
    12ae:	3000      	adds	r0, #0
    12b0:	bf18      	it	ne
    12b2:	2001      	movne	r0, #1
    12b4:	4b07      	ldr	r3, [pc, #28]	; (12d4 <_spi_m_sync_io_read+0x34>)
    12b6:	4798      	blx	r3
	xfer.rxbuf = buf;
    12b8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    12ba:	2300      	movs	r3, #0
    12bc:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    12be:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    12c0:	a901      	add	r1, sp, #4
    12c2:	f1a4 000c 	sub.w	r0, r4, #12
    12c6:	4b04      	ldr	r3, [pc, #16]	; (12d8 <_spi_m_sync_io_read+0x38>)
    12c8:	4798      	blx	r3
}
    12ca:	b004      	add	sp, #16
    12cc:	bd70      	pop	{r4, r5, r6, pc}
    12ce:	bf00      	nop
    12d0:	00002774 	.word	0x00002774
    12d4:	0000141d 	.word	0x0000141d
    12d8:	00001225 	.word	0x00001225

000012dc <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    12dc:	b538      	push	{r3, r4, r5, lr}
    12de:	460d      	mov	r5, r1
	ASSERT(spi && io);
    12e0:	4604      	mov	r4, r0
    12e2:	b150      	cbz	r0, 12fa <spi_m_sync_get_io_descriptor+0x1e>
    12e4:	1c08      	adds	r0, r1, #0
    12e6:	bf18      	it	ne
    12e8:	2001      	movne	r0, #1
    12ea:	22bd      	movs	r2, #189	; 0xbd
    12ec:	4904      	ldr	r1, [pc, #16]	; (1300 <spi_m_sync_get_io_descriptor+0x24>)
    12ee:	4b05      	ldr	r3, [pc, #20]	; (1304 <spi_m_sync_get_io_descriptor+0x28>)
    12f0:	4798      	blx	r3
	*io = &spi->io;
    12f2:	340c      	adds	r4, #12
    12f4:	602c      	str	r4, [r5, #0]
	return 0;
}
    12f6:	2000      	movs	r0, #0
    12f8:	bd38      	pop	{r3, r4, r5, pc}
    12fa:	2000      	movs	r0, #0
    12fc:	e7f5      	b.n	12ea <spi_m_sync_get_io_descriptor+0xe>
    12fe:	bf00      	nop
    1300:	00002774 	.word	0x00002774
    1304:	0000141d 	.word	0x0000141d

00001308 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    130a:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    130c:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    130e:	b12f      	cbz	r7, 131c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1310:	688d      	ldr	r5, [r1, #8]
    1312:	463c      	mov	r4, r7
    1314:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1316:	f1c2 0e01 	rsb	lr, r2, #1
    131a:	e00b      	b.n	1334 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    131c:	4b0e      	ldr	r3, [pc, #56]	; (1358 <timer_add_timer_task+0x50>)
    131e:	4798      	blx	r3
		return;
    1320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1322:	4473      	add	r3, lr
    1324:	68a0      	ldr	r0, [r4, #8]
    1326:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1328:	42ab      	cmp	r3, r5
    132a:	d20a      	bcs.n	1342 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    132c:	6823      	ldr	r3, [r4, #0]
    132e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1330:	b153      	cbz	r3, 1348 <timer_add_timer_task+0x40>
    1332:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1334:	6863      	ldr	r3, [r4, #4]
    1336:	4293      	cmp	r3, r2
    1338:	d8f3      	bhi.n	1322 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    133a:	68a0      	ldr	r0, [r4, #8]
    133c:	4403      	add	r3, r0
    133e:	1a9b      	subs	r3, r3, r2
    1340:	e7f2      	b.n	1328 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1342:	42a7      	cmp	r7, r4
    1344:	d004      	beq.n	1350 <timer_add_timer_task+0x48>
    1346:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1348:	4620      	mov	r0, r4
    134a:	4b04      	ldr	r3, [pc, #16]	; (135c <timer_add_timer_task+0x54>)
    134c:	4798      	blx	r3
    134e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1350:	4660      	mov	r0, ip
    1352:	4b01      	ldr	r3, [pc, #4]	; (1358 <timer_add_timer_task+0x50>)
    1354:	4798      	blx	r3
    1356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1358:	00001445 	.word	0x00001445
    135c:	00001471 	.word	0x00001471

00001360 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1364:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1366:	6907      	ldr	r7, [r0, #16]
    1368:	3701      	adds	r7, #1
    136a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    136c:	7e03      	ldrb	r3, [r0, #24]
    136e:	f013 0f01 	tst.w	r3, #1
    1372:	d113      	bne.n	139c <timer_process_counted+0x3c>
    1374:	7e03      	ldrb	r3, [r0, #24]
    1376:	f013 0f02 	tst.w	r3, #2
    137a:	d10f      	bne.n	139c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    137c:	b354      	cbz	r4, 13d4 <timer_process_counted+0x74>
    137e:	6863      	ldr	r3, [r4, #4]
    1380:	1afb      	subs	r3, r7, r3
    1382:	68a2      	ldr	r2, [r4, #8]
    1384:	4293      	cmp	r3, r2
    1386:	d307      	bcc.n	1398 <timer_process_counted+0x38>
    1388:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    138a:	f100 0814 	add.w	r8, r0, #20
    138e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 13d8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1392:	f8df a048 	ldr.w	sl, [pc, #72]	; 13dc <timer_process_counted+0x7c>
    1396:	e012      	b.n	13be <timer_process_counted+0x5e>
    1398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    139c:	7e03      	ldrb	r3, [r0, #24]
    139e:	f043 0302 	orr.w	r3, r3, #2
    13a2:	7603      	strb	r3, [r0, #24]
		return;
    13a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13a8:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    13aa:	68e3      	ldr	r3, [r4, #12]
    13ac:	4620      	mov	r0, r4
    13ae:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    13b0:	b185      	cbz	r5, 13d4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    13b2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    13b4:	686b      	ldr	r3, [r5, #4]
    13b6:	1afb      	subs	r3, r7, r3
    13b8:	68aa      	ldr	r2, [r5, #8]
    13ba:	4293      	cmp	r3, r2
    13bc:	d30a      	bcc.n	13d4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    13be:	4640      	mov	r0, r8
    13c0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    13c2:	7c23      	ldrb	r3, [r4, #16]
    13c4:	2b01      	cmp	r3, #1
    13c6:	d1ef      	bne.n	13a8 <timer_process_counted+0x48>
			tmp->time_label = time;
    13c8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    13ca:	463a      	mov	r2, r7
    13cc:	4621      	mov	r1, r4
    13ce:	4640      	mov	r0, r8
    13d0:	47d0      	blx	sl
    13d2:	e7e9      	b.n	13a8 <timer_process_counted+0x48>
    13d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13d8:	00001479 	.word	0x00001479
    13dc:	00001309 	.word	0x00001309

000013e0 <timer_init>:
{
    13e0:	b538      	push	{r3, r4, r5, lr}
    13e2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    13e4:	4604      	mov	r4, r0
    13e6:	b178      	cbz	r0, 1408 <timer_init+0x28>
    13e8:	1c08      	adds	r0, r1, #0
    13ea:	bf18      	it	ne
    13ec:	2001      	movne	r0, #1
    13ee:	223b      	movs	r2, #59	; 0x3b
    13f0:	4906      	ldr	r1, [pc, #24]	; (140c <timer_init+0x2c>)
    13f2:	4b07      	ldr	r3, [pc, #28]	; (1410 <timer_init+0x30>)
    13f4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    13f6:	4629      	mov	r1, r5
    13f8:	4620      	mov	r0, r4
    13fa:	4b06      	ldr	r3, [pc, #24]	; (1414 <timer_init+0x34>)
    13fc:	4798      	blx	r3
	descr->time                           = 0;
    13fe:	2000      	movs	r0, #0
    1400:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1402:	4b05      	ldr	r3, [pc, #20]	; (1418 <timer_init+0x38>)
    1404:	6023      	str	r3, [r4, #0]
}
    1406:	bd38      	pop	{r3, r4, r5, pc}
    1408:	2000      	movs	r0, #0
    140a:	e7f0      	b.n	13ee <timer_init+0xe>
    140c:	00002790 	.word	0x00002790
    1410:	0000141d 	.word	0x0000141d
    1414:	00001819 	.word	0x00001819
    1418:	00001361 	.word	0x00001361

0000141c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    141c:	b900      	cbnz	r0, 1420 <assert+0x4>
		__asm("BKPT #0");
    141e:	be00      	bkpt	0x0000
    1420:	4770      	bx	lr

00001422 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1422:	6803      	ldr	r3, [r0, #0]
    1424:	b14b      	cbz	r3, 143a <is_list_element+0x18>
		if (it == element) {
    1426:	428b      	cmp	r3, r1
    1428:	d009      	beq.n	143e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	b11b      	cbz	r3, 1436 <is_list_element+0x14>
		if (it == element) {
    142e:	4299      	cmp	r1, r3
    1430:	d1fb      	bne.n	142a <is_list_element+0x8>
			return true;
    1432:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1434:	4770      	bx	lr
	return false;
    1436:	2000      	movs	r0, #0
    1438:	4770      	bx	lr
    143a:	2000      	movs	r0, #0
    143c:	4770      	bx	lr
			return true;
    143e:	2001      	movs	r0, #1
    1440:	4770      	bx	lr
	...

00001444 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1444:	b538      	push	{r3, r4, r5, lr}
    1446:	4604      	mov	r4, r0
    1448:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    144a:	4b06      	ldr	r3, [pc, #24]	; (1464 <list_insert_as_head+0x20>)
    144c:	4798      	blx	r3
    144e:	f080 0001 	eor.w	r0, r0, #1
    1452:	2239      	movs	r2, #57	; 0x39
    1454:	4904      	ldr	r1, [pc, #16]	; (1468 <list_insert_as_head+0x24>)
    1456:	b2c0      	uxtb	r0, r0
    1458:	4b04      	ldr	r3, [pc, #16]	; (146c <list_insert_as_head+0x28>)
    145a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    145c:	6823      	ldr	r3, [r4, #0]
    145e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1460:	6025      	str	r5, [r4, #0]
    1462:	bd38      	pop	{r3, r4, r5, pc}
    1464:	00001423 	.word	0x00001423
    1468:	000027a8 	.word	0x000027a8
    146c:	0000141d 	.word	0x0000141d

00001470 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1470:	6803      	ldr	r3, [r0, #0]
    1472:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1474:	6001      	str	r1, [r0, #0]
    1476:	4770      	bx	lr

00001478 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1478:	6803      	ldr	r3, [r0, #0]
    147a:	b10b      	cbz	r3, 1480 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    147c:	681a      	ldr	r2, [r3, #0]
    147e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1480:	4618      	mov	r0, r3
    1482:	4770      	bx	lr

00001484 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1484:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1486:	4a06      	ldr	r2, [pc, #24]	; (14a0 <_sbrk+0x1c>)
    1488:	6812      	ldr	r2, [r2, #0]
    148a:	b122      	cbz	r2, 1496 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    148c:	4a04      	ldr	r2, [pc, #16]	; (14a0 <_sbrk+0x1c>)
    148e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1490:	4403      	add	r3, r0
    1492:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1494:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1496:	4903      	ldr	r1, [pc, #12]	; (14a4 <_sbrk+0x20>)
    1498:	4a01      	ldr	r2, [pc, #4]	; (14a0 <_sbrk+0x1c>)
    149a:	6011      	str	r1, [r2, #0]
    149c:	e7f6      	b.n	148c <_sbrk+0x8>
    149e:	bf00      	nop
    14a0:	20000088 	.word	0x20000088
    14a4:	2000c138 	.word	0x2000c138

000014a8 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
    14a8:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
    14ac:	bf30      	wfi
    14ae:	4770      	bx	lr

000014b0 <_irq_clear>:
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14b0:	0943      	lsrs	r3, r0, #5
    14b2:	f000 001f 	and.w	r0, r0, #31
    14b6:	2201      	movs	r2, #1
    14b8:	fa02 f000 	lsl.w	r0, r2, r0
    14bc:	3360      	adds	r3, #96	; 0x60
    14be:	4a02      	ldr	r2, [pc, #8]	; (14c8 <_irq_clear+0x18>)
    14c0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    14c4:	4770      	bx	lr
    14c6:	bf00      	nop
    14c8:	e000e100 	.word	0xe000e100

000014cc <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    14cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    14d0:	00c3      	lsls	r3, r0, #3
    14d2:	3302      	adds	r3, #2
    14d4:	4803      	ldr	r0, [pc, #12]	; (14e4 <_get_cycles_for_ms+0x18>)
    14d6:	fba0 2303 	umull	r2, r3, r0, r3
    14da:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    14dc:	2064      	movs	r0, #100	; 0x64
    14de:	fb00 f003 	mul.w	r0, r0, r3
    14e2:	4770      	bx	lr
    14e4:	aaaaaaab 	.word	0xaaaaaaab

000014e8 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    14e8:	3901      	subs	r1, #1
    14ea:	d8fd      	bhi.n	14e8 <_delay_cycles>
    14ec:	4770      	bx	lr
    14ee:	bf00      	nop

000014f0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    14f0:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    14f2:	4a08      	ldr	r2, [pc, #32]	; (1514 <_init_chip+0x24>)
    14f4:	8813      	ldrh	r3, [r2, #0]
    14f6:	b29b      	uxth	r3, r3
    14f8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    14fa:	4b07      	ldr	r3, [pc, #28]	; (1518 <_init_chip+0x28>)
    14fc:	4798      	blx	r3
	_oscctrl_init_sources();
    14fe:	4b07      	ldr	r3, [pc, #28]	; (151c <_init_chip+0x2c>)
    1500:	4798      	blx	r3
	_mclk_init();
    1502:	4b07      	ldr	r3, [pc, #28]	; (1520 <_init_chip+0x30>)
    1504:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    1506:	4b07      	ldr	r3, [pc, #28]	; (1524 <_init_chip+0x34>)
    1508:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    150a:	f640 70ff 	movw	r0, #4095	; 0xfff
    150e:	4b06      	ldr	r3, [pc, #24]	; (1528 <_init_chip+0x38>)
    1510:	4798      	blx	r3
    1512:	bd08      	pop	{r3, pc}
    1514:	41004000 	.word	0x41004000
    1518:	00001629 	.word	0x00001629
    151c:	0000163d 	.word	0x0000163d
    1520:	00001551 	.word	0x00001551
    1524:	00001659 	.word	0x00001659
    1528:	0000152d 	.word	0x0000152d

0000152c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    152c:	f010 0f01 	tst.w	r0, #1
    1530:	d008      	beq.n	1544 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1532:	4a05      	ldr	r2, [pc, #20]	; (1548 <_gclk_init_generators_by_fref+0x1c>)
    1534:	4b05      	ldr	r3, [pc, #20]	; (154c <_gclk_init_generators_by_fref+0x20>)
    1536:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1538:	4619      	mov	r1, r3
    153a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    153e:	684b      	ldr	r3, [r1, #4]
    1540:	4213      	tst	r3, r2
    1542:	d1fc      	bne.n	153e <_gclk_init_generators_by_fref+0x12>
    1544:	4770      	bx	lr
    1546:	bf00      	nop
    1548:	00010108 	.word	0x00010108
    154c:	40001c00 	.word	0x40001c00

00001550 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1550:	2201      	movs	r2, #1
    1552:	4b01      	ldr	r3, [pc, #4]	; (1558 <_mclk_init+0x8>)
    1554:	715a      	strb	r2, [r3, #5]
    1556:	4770      	bx	lr
    1558:	40000800 	.word	0x40000800

0000155c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    155c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    155e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1560:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1562:	f012 0f01 	tst.w	r2, #1
    1566:	d005      	beq.n	1574 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1568:	2201      	movs	r2, #1
    156a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    156c:	6803      	ldr	r3, [r0, #0]
    156e:	b153      	cbz	r3, 1586 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1570:	4798      	blx	r3
    1572:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1574:	8a1a      	ldrh	r2, [r3, #16]
    1576:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1578:	b12a      	cbz	r2, 1586 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    157a:	f240 225e 	movw	r2, #606	; 0x25e
    157e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1580:	6843      	ldr	r3, [r0, #4]
    1582:	b103      	cbz	r3, 1586 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1584:	4798      	blx	r3
    1586:	bd08      	pop	{r3, pc}

00001588 <_flash_init>:
{
    1588:	b538      	push	{r3, r4, r5, lr}
    158a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    158c:	4605      	mov	r5, r0
    158e:	b350      	cbz	r0, 15e6 <_flash_init+0x5e>
    1590:	4816      	ldr	r0, [pc, #88]	; (15ec <_flash_init+0x64>)
    1592:	4281      	cmp	r1, r0
    1594:	bf14      	ite	ne
    1596:	2000      	movne	r0, #0
    1598:	2001      	moveq	r0, #1
    159a:	224b      	movs	r2, #75	; 0x4b
    159c:	4914      	ldr	r1, [pc, #80]	; (15f0 <_flash_init+0x68>)
    159e:	4b15      	ldr	r3, [pc, #84]	; (15f4 <_flash_init+0x6c>)
    15a0:	4798      	blx	r3
	device->hw = hw;
    15a2:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    15a4:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    15a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    15aa:	049b      	lsls	r3, r3, #18
    15ac:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    15ae:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    15b0:	4b11      	ldr	r3, [pc, #68]	; (15f8 <_flash_init+0x70>)
    15b2:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15b4:	4b11      	ldr	r3, [pc, #68]	; (15fc <_flash_init+0x74>)
    15b6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    15ba:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    15be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15c2:	f3bf 8f6f 	isb	sy
    15c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    15ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    15ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15d2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15d6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    15da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15de:	6019      	str	r1, [r3, #0]
    15e0:	601a      	str	r2, [r3, #0]
}
    15e2:	2000      	movs	r0, #0
    15e4:	bd38      	pop	{r3, r4, r5, pc}
    15e6:	2000      	movs	r0, #0
    15e8:	e7d7      	b.n	159a <_flash_init+0x12>
    15ea:	bf00      	nop
    15ec:	41004000 	.word	0x41004000
    15f0:	000027c8 	.word	0x000027c8
    15f4:	0000141d 	.word	0x0000141d
    15f8:	2000008c 	.word	0x2000008c
    15fc:	e000e100 	.word	0xe000e100

00001600 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1600:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1602:	4b02      	ldr	r3, [pc, #8]	; (160c <NVMCTRL_0_Handler+0xc>)
    1604:	6818      	ldr	r0, [r3, #0]
    1606:	4b02      	ldr	r3, [pc, #8]	; (1610 <NVMCTRL_0_Handler+0x10>)
    1608:	4798      	blx	r3
    160a:	bd08      	pop	{r3, pc}
    160c:	2000008c 	.word	0x2000008c
    1610:	0000155d 	.word	0x0000155d

00001614 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1614:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1616:	4b02      	ldr	r3, [pc, #8]	; (1620 <NVMCTRL_1_Handler+0xc>)
    1618:	6818      	ldr	r0, [r3, #0]
    161a:	4b02      	ldr	r3, [pc, #8]	; (1624 <NVMCTRL_1_Handler+0x10>)
    161c:	4798      	blx	r3
    161e:	bd08      	pop	{r3, pc}
    1620:	2000008c 	.word	0x2000008c
    1624:	0000155d 	.word	0x0000155d

00001628 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1628:	4b03      	ldr	r3, [pc, #12]	; (1638 <_osc32kctrl_init_sources+0x10>)
    162a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    162c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1630:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1632:	2201      	movs	r2, #1
    1634:	741a      	strb	r2, [r3, #16]
    1636:	4770      	bx	lr
    1638:	40001400 	.word	0x40001400

0000163c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    163c:	4a04      	ldr	r2, [pc, #16]	; (1650 <_oscctrl_init_sources+0x14>)
    163e:	4b05      	ldr	r3, [pc, #20]	; (1654 <_oscctrl_init_sources+0x18>)
    1640:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1642:	461a      	mov	r2, r3
    1644:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1646:	f013 0f02 	tst.w	r3, #2
    164a:	d0fb      	beq.n	1644 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    164c:	4770      	bx	lr
    164e:	bf00      	nop
    1650:	03002606 	.word	0x03002606
    1654:	40001000 	.word	0x40001000

00001658 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1658:	f240 123f 	movw	r2, #319	; 0x13f
    165c:	4b13      	ldr	r3, [pc, #76]	; (16ac <_oscctrl_init_referenced_generators+0x54>)
    165e:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1660:	461a      	mov	r2, r3
    1662:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1664:	f013 0f06 	tst.w	r3, #6
    1668:	d1fb      	bne.n	1662 <_oscctrl_init_referenced_generators+0xa>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    166a:	4b10      	ldr	r3, [pc, #64]	; (16ac <_oscctrl_init_referenced_generators+0x54>)
    166c:	2230      	movs	r2, #48	; 0x30
    166e:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1670:	2202      	movs	r2, #2
    1672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1676:	461a      	mov	r2, r3
    1678:	6d13      	ldr	r3, [r2, #80]	; 0x50
    167a:	f013 0f02 	tst.w	r3, #2
    167e:	d1fb      	bne.n	1678 <_oscctrl_init_referenced_generators+0x20>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1680:	4b0a      	ldr	r3, [pc, #40]	; (16ac <_oscctrl_init_referenced_generators+0x54>)
    1682:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1684:	f012 0f01 	tst.w	r2, #1
    1688:	d103      	bne.n	1692 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    168a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    168c:	f012 0f02 	tst.w	r2, #2
    1690:	d0f7      	beq.n	1682 <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
    1692:	4a06      	ldr	r2, [pc, #24]	; (16ac <_oscctrl_init_referenced_generators+0x54>)
    1694:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    1698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    169c:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    16a0:	6d13      	ldr	r3, [r2, #80]	; 0x50
    16a2:	f013 0f06 	tst.w	r3, #6
    16a6:	d1fb      	bne.n	16a0 <_oscctrl_init_referenced_generators+0x48>
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    16a8:	4770      	bx	lr
    16aa:	bf00      	nop
    16ac:	40001000 	.word	0x40001000

000016b0 <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    16b0:	b538      	push	{r3, r4, r5, lr}
    16b2:	460c      	mov	r4, r1
	ASSERT(dev && hw);
    16b4:	4605      	mov	r5, r0
    16b6:	b180      	cbz	r0, 16da <_qspi_sync_init+0x2a>
    16b8:	1c08      	adds	r0, r1, #0
    16ba:	bf18      	it	ne
    16bc:	2001      	movne	r0, #1
    16be:	2240      	movs	r2, #64	; 0x40
    16c0:	4907      	ldr	r1, [pc, #28]	; (16e0 <_qspi_sync_init+0x30>)
    16c2:	4b08      	ldr	r3, [pc, #32]	; (16e4 <_qspi_sync_init+0x34>)
    16c4:	4798      	blx	r3
	dev->prvt = hw;
    16c6:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    16c8:	2301      	movs	r3, #1
    16ca:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    16cc:	2311      	movs	r3, #17
    16ce:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    16d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    16d4:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
    16d6:	2000      	movs	r0, #0
    16d8:	bd38      	pop	{r3, r4, r5, pc}
    16da:	2000      	movs	r0, #0
    16dc:	e7ef      	b.n	16be <_qspi_sync_init+0xe>
    16de:	bf00      	nop
    16e0:	000027e8 	.word	0x000027e8
    16e4:	0000141d 	.word	0x0000141d

000016e8 <_qspi_sync_deinit>:

int32_t _qspi_sync_deinit(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    16e8:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    16ea:	2201      	movs	r2, #1
    16ec:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    16ee:	2000      	movs	r0, #0
    16f0:	4770      	bx	lr

000016f2 <_qspi_sync_enable>:

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    16f2:	6803      	ldr	r3, [r0, #0]
    16f4:	2202      	movs	r2, #2
    16f6:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    16f8:	2000      	movs	r0, #0
    16fa:	4770      	bx	lr

000016fc <_qspi_sync_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    16fc:	b570      	push	{r4, r5, r6, lr}
    16fe:	4605      	mov	r5, r0
    1700:	460c      	mov	r4, r1
	void *hw = dev->prvt;
    1702:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
    1704:	780a      	ldrb	r2, [r1, #0]
    1706:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    170a:	bf1c      	itt	ne
    170c:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    170e:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
    1710:	780a      	ldrb	r2, [r1, #0]
    1712:	f012 0f10 	tst.w	r2, #16
    1716:	d005      	beq.n	1724 <_qspi_sync_serial_run_command+0x28>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    1718:	6b59      	ldr	r1, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    171a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    171e:	7922      	ldrb	r2, [r4, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    1720:	430a      	orrs	r2, r1
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    1722:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
    1724:	7822      	ldrb	r2, [r4, #0]
    1726:	f012 0f40 	tst.w	r2, #64	; 0x40
    172a:	d006      	beq.n	173a <_qspi_sync_serial_run_command+0x3e>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    172c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    172e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    1732:	7961      	ldrb	r1, [r4, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    1734:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    1738:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    173a:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    173c:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_sync_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
    173e:	7823      	ldrb	r3, [r4, #0]
    1740:	f013 0f80 	tst.w	r3, #128	; 0x80
    1744:	d10c      	bne.n	1760 <_qspi_sync_serial_run_command+0x64>
		_qspi_sync_run_transfer(dev, cmd);
	}

	_qspi_end_transfer(dev->prvt);
    1746:	682b      	ldr	r3, [r5, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    1748:	4a1f      	ldr	r2, [pc, #124]	; (17c8 <_qspi_sync_serial_run_command+0xcc>)
    174a:	601a      	str	r2, [r3, #0]

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    174c:	682a      	ldr	r2, [r5, #0]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    174e:	69d3      	ldr	r3, [r2, #28]
    1750:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1754:	d0fb      	beq.n	174e <_qspi_sync_serial_run_command+0x52>
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    1756:	f44f 6380 	mov.w	r3, #1024	; 0x400
    175a:	61d3      	str	r3, [r2, #28]
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
	return ERR_NONE;
}
    175c:	2000      	movs	r0, #0
    175e:	bd70      	pop	{r4, r5, r6, pc}
	void *   hw       = dev->prvt;
    1760:	6829      	ldr	r1, [r5, #0]
	if (cmd->inst_frame.bits.addr_en)
    1762:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
    1766:	bf1a      	itte	ne
    1768:	68a2      	ldrne	r2, [r4, #8]
    176a:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    176e:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
    1772:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    1774:	6923      	ldr	r3, [r4, #16]
    1776:	b1ab      	cbz	r3, 17a4 <_qspi_sync_serial_run_command+0xa8>
    1778:	2001      	movs	r0, #1
    177a:	2282      	movs	r2, #130	; 0x82
    177c:	4913      	ldr	r1, [pc, #76]	; (17cc <_qspi_sync_serial_run_command+0xd0>)
    177e:	4b14      	ldr	r3, [pc, #80]	; (17d0 <_qspi_sync_serial_run_command+0xd4>)
    1780:	4798      	blx	r3
	if (cmd->tx_buf) {
    1782:	6923      	ldr	r3, [r4, #16]
    1784:	b19b      	cbz	r3, 17ae <_qspi_sync_serial_run_command+0xb2>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    1786:	68e0      	ldr	r0, [r4, #12]
	while (count--) {
    1788:	b138      	cbz	r0, 179a <_qspi_sync_serial_run_command+0x9e>
    178a:	1e72      	subs	r2, r6, #1
    178c:	4418      	add	r0, r3
		*dst++ = *src++;
    178e:	f813 1b01 	ldrb.w	r1, [r3], #1
    1792:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (count--) {
    1796:	4283      	cmp	r3, r0
    1798:	d1f9      	bne.n	178e <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
    179a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    179e:	f3bf 8f6f 	isb	sy
    17a2:	e7d0      	b.n	1746 <_qspi_sync_serial_run_command+0x4a>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    17a4:	6960      	ldr	r0, [r4, #20]
    17a6:	3000      	adds	r0, #0
    17a8:	bf18      	it	ne
    17aa:	2001      	movne	r0, #1
    17ac:	e7e5      	b.n	177a <_qspi_sync_serial_run_command+0x7e>
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    17ae:	6963      	ldr	r3, [r4, #20]
    17b0:	68e1      	ldr	r1, [r4, #12]
	while (count--) {
    17b2:	2900      	cmp	r1, #0
    17b4:	d0f1      	beq.n	179a <_qspi_sync_serial_run_command+0x9e>
    17b6:	3b01      	subs	r3, #1
    17b8:	4431      	add	r1, r6
		*dst++ = *src++;
    17ba:	f816 2b01 	ldrb.w	r2, [r6], #1
    17be:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (count--) {
    17c2:	42b1      	cmp	r1, r6
    17c4:	d1f9      	bne.n	17ba <_qspi_sync_serial_run_command+0xbe>
    17c6:	e7e8      	b.n	179a <_qspi_sync_serial_run_command+0x9e>
    17c8:	01000002 	.word	0x01000002
    17cc:	000027e8 	.word	0x000027e8
    17d0:	0000141d 	.word	0x0000141d

000017d4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    17d4:	b500      	push	{lr}
    17d6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    17d8:	4b0d      	ldr	r3, [pc, #52]	; (1810 <RAMECC_Handler+0x3c>)
    17da:	789b      	ldrb	r3, [r3, #2]
    17dc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    17de:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    17e0:	9b01      	ldr	r3, [sp, #4]
    17e2:	f013 0f02 	tst.w	r3, #2
    17e6:	d006      	beq.n	17f6 <RAMECC_Handler+0x22>
    17e8:	4b0a      	ldr	r3, [pc, #40]	; (1814 <RAMECC_Handler+0x40>)
    17ea:	681b      	ldr	r3, [r3, #0]
    17ec:	b11b      	cbz	r3, 17f6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    17ee:	4a08      	ldr	r2, [pc, #32]	; (1810 <RAMECC_Handler+0x3c>)
    17f0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    17f2:	4798      	blx	r3
    17f4:	e009      	b.n	180a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    17f6:	9b01      	ldr	r3, [sp, #4]
    17f8:	f013 0f01 	tst.w	r3, #1
    17fc:	d005      	beq.n	180a <RAMECC_Handler+0x36>
    17fe:	4b05      	ldr	r3, [pc, #20]	; (1814 <RAMECC_Handler+0x40>)
    1800:	685b      	ldr	r3, [r3, #4]
    1802:	b113      	cbz	r3, 180a <RAMECC_Handler+0x36>
    1804:	4a02      	ldr	r2, [pc, #8]	; (1810 <RAMECC_Handler+0x3c>)
    1806:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1808:	4798      	blx	r3
	} else {
		return;
	}
}
    180a:	b003      	add	sp, #12
    180c:	f85d fb04 	ldr.w	pc, [sp], #4
    1810:	41020000 	.word	0x41020000
    1814:	2000010c 	.word	0x2000010c

00001818 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1818:	b538      	push	{r3, r4, r5, lr}
    181a:	460c      	mov	r4, r1
	ASSERT(dev);
    181c:	4605      	mov	r5, r0
    181e:	2230      	movs	r2, #48	; 0x30
    1820:	4914      	ldr	r1, [pc, #80]	; (1874 <_timer_init+0x5c>)
    1822:	3000      	adds	r0, #0
    1824:	bf18      	it	ne
    1826:	2001      	movne	r0, #1
    1828:	4b13      	ldr	r3, [pc, #76]	; (1878 <_timer_init+0x60>)
    182a:	4798      	blx	r3

	dev->hw = hw;
    182c:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    182e:	2301      	movs	r3, #1
    1830:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1832:	f248 0203 	movw	r2, #32771	; 0x8003
    1836:	6923      	ldr	r3, [r4, #16]
    1838:	4213      	tst	r3, r2
    183a:	d1fc      	bne.n	1836 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    183c:	68eb      	ldr	r3, [r5, #12]
    183e:	691a      	ldr	r2, [r3, #16]
    1840:	f012 0f01 	tst.w	r2, #1
    1844:	d1fb      	bne.n	183e <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1846:	f248 0280 	movw	r2, #32896	; 0x8080
    184a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    184c:	f248 0103 	movw	r1, #32771	; 0x8003
    1850:	691a      	ldr	r2, [r3, #16]
    1852:	420a      	tst	r2, r1
    1854:	d1fc      	bne.n	1850 <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1856:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1858:	2320      	movs	r3, #32
    185a:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    185c:	6913      	ldr	r3, [r2, #16]
    185e:	f013 0f60 	tst.w	r3, #96	; 0x60
    1862:	d1fb      	bne.n	185c <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1864:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1866:	f44f 7280 	mov.w	r2, #256	; 0x100
    186a:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    186c:	4b03      	ldr	r3, [pc, #12]	; (187c <_timer_init+0x64>)
    186e:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    1870:	2000      	movs	r0, #0
    1872:	bd38      	pop	{r3, r4, r5, pc}
    1874:	00002800 	.word	0x00002800
    1878:	0000141d 	.word	0x0000141d
    187c:	20000090 	.word	0x20000090

00001880 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1880:	2000      	movs	r0, #0
    1882:	4770      	bx	lr

00001884 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1884:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1886:	4b08      	ldr	r3, [pc, #32]	; (18a8 <RTC_Handler+0x24>)
    1888:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    188a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    188c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    188e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1892:	d007      	beq.n	18a4 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    1894:	6823      	ldr	r3, [r4, #0]
    1896:	b10b      	cbz	r3, 189c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1898:	4620      	mov	r0, r4
    189a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    189c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    189e:	f44f 7280 	mov.w	r2, #256	; 0x100
    18a2:	819a      	strh	r2, [r3, #12]
    18a4:	bd10      	pop	{r4, pc}
    18a6:	bf00      	nop
    18a8:	20000090 	.word	0x20000090

000018ac <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    18ac:	b470      	push	{r4, r5, r6}
    18ae:	b087      	sub	sp, #28
    18b0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    18b2:	466c      	mov	r4, sp
    18b4:	4d0c      	ldr	r5, [pc, #48]	; (18e8 <_sercom_get_hardware_index+0x3c>)
    18b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    18b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    18ba:	e895 0003 	ldmia.w	r5, {r0, r1}
    18be:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    18c2:	9b00      	ldr	r3, [sp, #0]
    18c4:	42b3      	cmp	r3, r6
    18c6:	d00c      	beq.n	18e2 <_sercom_get_hardware_index+0x36>
    18c8:	4632      	mov	r2, r6
    18ca:	2001      	movs	r0, #1
    18cc:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    18d0:	4293      	cmp	r3, r2
    18d2:	d007      	beq.n	18e4 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18d4:	3001      	adds	r0, #1
    18d6:	2806      	cmp	r0, #6
    18d8:	d1f8      	bne.n	18cc <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    18da:	2000      	movs	r0, #0
}
    18dc:	b007      	add	sp, #28
    18de:	bc70      	pop	{r4, r5, r6}
    18e0:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18e2:	2000      	movs	r0, #0
			return i;
    18e4:	b2c0      	uxtb	r0, r0
    18e6:	e7f9      	b.n	18dc <_sercom_get_hardware_index+0x30>
    18e8:	00002818 	.word	0x00002818

000018ec <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    18ec:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    18ee:	f013 0f01 	tst.w	r3, #1
    18f2:	d109      	bne.n	1908 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    18f4:	6803      	ldr	r3, [r0, #0]
    18f6:	f043 0302 	orr.w	r3, r3, #2
    18fa:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    18fc:	69c3      	ldr	r3, [r0, #28]
    18fe:	f013 0f03 	tst.w	r3, #3
    1902:	d1fb      	bne.n	18fc <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    1904:	2000      	movs	r0, #0
    1906:	4770      	bx	lr
		return ERR_BUSY;
    1908:	f06f 0003 	mvn.w	r0, #3
}
    190c:	4770      	bx	lr
	...

00001910 <_i2c_s_init>:
{
    1910:	b510      	push	{r4, lr}
    1912:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1914:	4b1d      	ldr	r3, [pc, #116]	; (198c <_i2c_s_init+0x7c>)
    1916:	4798      	blx	r3
		if (_i2css[i].number == sercom_offset) {
    1918:	2803      	cmp	r0, #3
    191a:	d008      	beq.n	192e <_i2c_s_init+0x1e>
	ASSERT(false);
    191c:	f240 72b7 	movw	r2, #1975	; 0x7b7
    1920:	491b      	ldr	r1, [pc, #108]	; (1990 <_i2c_s_init+0x80>)
    1922:	2000      	movs	r0, #0
    1924:	4b1b      	ldr	r3, [pc, #108]	; (1994 <_i2c_s_init+0x84>)
    1926:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1928:	f06f 000c 	mvn.w	r0, #12
}
    192c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    192e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    1930:	f013 0f01 	tst.w	r3, #1
    1934:	d119      	bne.n	196a <_i2c_s_init+0x5a>
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1936:	69e3      	ldr	r3, [r4, #28]
    1938:	f013 0f03 	tst.w	r3, #3
    193c:	d1fb      	bne.n	1936 <_i2c_s_init+0x26>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    193e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    1940:	f013 0f02 	tst.w	r3, #2
    1944:	d00b      	beq.n	195e <_i2c_s_init+0x4e>
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1946:	6823      	ldr	r3, [r4, #0]
    1948:	f023 0302 	bic.w	r3, r3, #2
    194c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    194e:	69e3      	ldr	r3, [r4, #28]
    1950:	f013 0f03 	tst.w	r3, #3
    1954:	d1fb      	bne.n	194e <_i2c_s_init+0x3e>
    1956:	69e3      	ldr	r3, [r4, #28]
    1958:	f013 0f02 	tst.w	r3, #2
    195c:	d1fb      	bne.n	1956 <_i2c_s_init+0x46>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    195e:	2311      	movs	r3, #17
    1960:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1962:	69e3      	ldr	r3, [r4, #28]
    1964:	f013 0f03 	tst.w	r3, #3
    1968:	d1fb      	bne.n	1962 <_i2c_s_init+0x52>
    196a:	69e3      	ldr	r3, [r4, #28]
    196c:	f013 0f01 	tst.w	r3, #1
    1970:	d1fb      	bne.n	196a <_i2c_s_init+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    1972:	4b09      	ldr	r3, [pc, #36]	; (1998 <_i2c_s_init+0x88>)
    1974:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1976:	69e3      	ldr	r3, [r4, #28]
    1978:	f013 0f03 	tst.w	r3, #3
    197c:	d1fb      	bne.n	1976 <_i2c_s_init+0x66>
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    197e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    1982:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    1984:	2320      	movs	r3, #32
    1986:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    1988:	2000      	movs	r0, #0
    198a:	bd10      	pop	{r4, pc}
    198c:	000018ad 	.word	0x000018ad
    1990:	00002848 	.word	0x00002848
    1994:	0000141d 	.word	0x0000141d
    1998:	00200090 	.word	0x00200090

0000199c <_i2c_s_set_address>:
{
    199c:	b570      	push	{r4, r5, r6, lr}
    199e:	b082      	sub	sp, #8
    19a0:	4604      	mov	r4, r0
    19a2:	460e      	mov	r6, r1
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    19a4:	69e3      	ldr	r3, [r4, #28]
    19a6:	f013 0f03 	tst.w	r3, #3
    19aa:	d1fb      	bne.n	19a4 <_i2c_s_set_address+0x8>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    19ac:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_I2CS_CTRLA_ENABLE) >> SERCOM_I2CS_CTRLA_ENABLE_Pos;
    19ae:	f3c5 0540 	ubfx	r5, r5, #1, #1
	CRITICAL_SECTION_ENTER()
    19b2:	a801      	add	r0, sp, #4
    19b4:	4b11      	ldr	r3, [pc, #68]	; (19fc <_i2c_s_set_address+0x60>)
    19b6:	4798      	blx	r3
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    19b8:	6823      	ldr	r3, [r4, #0]
    19ba:	f023 0302 	bic.w	r3, r3, #2
    19be:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    19c0:	69e3      	ldr	r3, [r4, #28]
    19c2:	f013 0f03 	tst.w	r3, #3
    19c6:	d1fb      	bne.n	19c0 <_i2c_s_set_address+0x24>
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    19c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CS_ADDR_ADDR_Msk;
    19ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    19ce:	f023 0306 	bic.w	r3, r3, #6
	tmp |= SERCOM_I2CS_ADDR_ADDR(data);
    19d2:	f240 71fe 	movw	r1, #2046	; 0x7fe
    19d6:	ea01 0146 	and.w	r1, r1, r6, lsl #1
    19da:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CS.ADDR.reg = tmp;
    19dc:	6261      	str	r1, [r4, #36]	; 0x24
	CRITICAL_SECTION_LEAVE()
    19de:	a801      	add	r0, sp, #4
    19e0:	4b07      	ldr	r3, [pc, #28]	; (1a00 <_i2c_s_set_address+0x64>)
    19e2:	4798      	blx	r3
	if (enabled) {
    19e4:	b13d      	cbz	r5, 19f6 <_i2c_s_set_address+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    19e6:	6823      	ldr	r3, [r4, #0]
    19e8:	f043 0302 	orr.w	r3, r3, #2
    19ec:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    19ee:	69e3      	ldr	r3, [r4, #28]
    19f0:	f013 0f03 	tst.w	r3, #3
    19f4:	d1fb      	bne.n	19ee <_i2c_s_set_address+0x52>
}
    19f6:	2000      	movs	r0, #0
    19f8:	b002      	add	sp, #8
    19fa:	bd70      	pop	{r4, r5, r6, pc}
    19fc:	00000e51 	.word	0x00000e51
    1a00:	00000e5f 	.word	0x00000e5f

00001a04 <_i2c_s_sync_init>:
{
    1a04:	b538      	push	{r3, r4, r5, lr}
    1a06:	460c      	mov	r4, r1
	ASSERT(device);
    1a08:	4605      	mov	r5, r0
    1a0a:	f240 62a6 	movw	r2, #1702	; 0x6a6
    1a0e:	4907      	ldr	r1, [pc, #28]	; (1a2c <_i2c_s_sync_init+0x28>)
    1a10:	3000      	adds	r0, #0
    1a12:	bf18      	it	ne
    1a14:	2001      	movne	r0, #1
    1a16:	4b06      	ldr	r3, [pc, #24]	; (1a30 <_i2c_s_sync_init+0x2c>)
    1a18:	4798      	blx	r3
	status = _i2c_s_init(hw);
    1a1a:	4620      	mov	r0, r4
    1a1c:	4b05      	ldr	r3, [pc, #20]	; (1a34 <_i2c_s_sync_init+0x30>)
    1a1e:	4798      	blx	r3
	if (status) {
    1a20:	4603      	mov	r3, r0
    1a22:	b900      	cbnz	r0, 1a26 <_i2c_s_sync_init+0x22>
	device->hw = hw;
    1a24:	602c      	str	r4, [r5, #0]
}
    1a26:	4618      	mov	r0, r3
    1a28:	bd38      	pop	{r3, r4, r5, pc}
    1a2a:	bf00      	nop
    1a2c:	00002848 	.word	0x00002848
    1a30:	0000141d 	.word	0x0000141d
    1a34:	00001911 	.word	0x00001911

00001a38 <_i2c_s_sync_enable>:
	hri_sercomi2cs_set_CTRLA_ENABLE_bit(device->hw);
    1a38:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1a3a:	6813      	ldr	r3, [r2, #0]
    1a3c:	f043 0302 	orr.w	r3, r3, #2
    1a40:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1a42:	69d3      	ldr	r3, [r2, #28]
    1a44:	f013 0f03 	tst.w	r3, #3
    1a48:	d1fb      	bne.n	1a42 <_i2c_s_sync_enable+0xa>
}
    1a4a:	2000      	movs	r0, #0
    1a4c:	4770      	bx	lr

00001a4e <_i2c_s_sync_is_10bit_addressing_on>:
	return hri_sercomi2cs_get_ADDR_TENBITEN_bit(device->hw);
    1a4e:	6803      	ldr	r3, [r0, #0]
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1a50:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1a52:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    1a56:	4770      	bx	lr

00001a58 <_i2c_s_sync_set_address>:
{
    1a58:	b508      	push	{r3, lr}
	return _i2c_s_set_address(device->hw, address);
    1a5a:	6800      	ldr	r0, [r0, #0]
    1a5c:	4b01      	ldr	r3, [pc, #4]	; (1a64 <_i2c_s_sync_set_address+0xc>)
    1a5e:	4798      	blx	r3
}
    1a60:	bd08      	pop	{r3, pc}
    1a62:	bf00      	nop
    1a64:	0000199d 	.word	0x0000199d

00001a68 <_i2c_s_sync_write_byte>:
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    1a68:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    1a6a:	6299      	str	r1, [r3, #40]	; 0x28
    1a6c:	4770      	bx	lr

00001a6e <_i2c_s_sync_read_byte>:
	return hri_sercomi2cs_read_DATA_reg(device->hw);
    1a6e:	6803      	ldr	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->I2CS.DATA.reg;
    1a70:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1a72:	b2c0      	uxtb	r0, r0
    1a74:	4770      	bx	lr

00001a76 <_i2c_s_sync_is_byte_sent>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1a76:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) >> SERCOM_I2CS_INTFLAG_DRDY_Pos;
    1a78:	7e18      	ldrb	r0, [r3, #24]
}
    1a7a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1a7e:	4770      	bx	lr

00001a80 <_i2c_s_sync_is_byte_received>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1a80:	6803      	ldr	r3, [r0, #0]
    1a82:	7e18      	ldrb	r0, [r3, #24]
}
    1a84:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1a88:	4770      	bx	lr

00001a8a <_i2c_s_sync_clear_data_ready_flag>:
	hri_sercomi2cs_clear_INTFLAG_DRDY_bit(device->hw);
    1a8a:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_DRDY;
    1a8c:	2204      	movs	r2, #4
    1a8e:	761a      	strb	r2, [r3, #24]
}
    1a90:	2000      	movs	r0, #0
    1a92:	4770      	bx	lr

00001a94 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1a94:	b538      	push	{r3, r4, r5, lr}
    1a96:	4605      	mov	r5, r0
    1a98:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1a9a:	4608      	mov	r0, r1
    1a9c:	4b36      	ldr	r3, [pc, #216]	; (1b78 <_spi_m_sync_init+0xe4>)
    1a9e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1aa0:	b160      	cbz	r0, 1abc <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1aa2:	2d00      	cmp	r5, #0
    1aa4:	d055      	beq.n	1b52 <_spi_m_sync_init+0xbe>
    1aa6:	f640 123c 	movw	r2, #2364	; 0x93c
    1aaa:	4934      	ldr	r1, [pc, #208]	; (1b7c <_spi_m_sync_init+0xe8>)
    1aac:	1c20      	adds	r0, r4, #0
    1aae:	bf18      	it	ne
    1ab0:	2001      	movne	r0, #1
    1ab2:	4b33      	ldr	r3, [pc, #204]	; (1b80 <_spi_m_sync_init+0xec>)
    1ab4:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1ab6:	f06f 000c 	mvn.w	r0, #12
    1aba:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1abc:	2d00      	cmp	r5, #0
    1abe:	d151      	bne.n	1b64 <_spi_m_sync_init+0xd0>
    1ac0:	f640 123c 	movw	r2, #2364	; 0x93c
    1ac4:	492d      	ldr	r1, [pc, #180]	; (1b7c <_spi_m_sync_init+0xe8>)
    1ac6:	2000      	movs	r0, #0
    1ac8:	4b2d      	ldr	r3, [pc, #180]	; (1b80 <_spi_m_sync_init+0xec>)
    1aca:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1acc:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1ace:	f013 0f01 	tst.w	r3, #1
    1ad2:	d119      	bne.n	1b08 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ad4:	69e3      	ldr	r3, [r4, #28]
    1ad6:	f013 0f03 	tst.w	r3, #3
    1ada:	d1fb      	bne.n	1ad4 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1adc:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1ade:	f013 0f02 	tst.w	r3, #2
    1ae2:	d00b      	beq.n	1afc <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1ae4:	6823      	ldr	r3, [r4, #0]
    1ae6:	f023 0302 	bic.w	r3, r3, #2
    1aea:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1aec:	69e3      	ldr	r3, [r4, #28]
    1aee:	f013 0f03 	tst.w	r3, #3
    1af2:	d1fb      	bne.n	1aec <_spi_m_sync_init+0x58>
    1af4:	69e3      	ldr	r3, [r4, #28]
    1af6:	f013 0f02 	tst.w	r3, #2
    1afa:	d1fb      	bne.n	1af4 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1afc:	230d      	movs	r3, #13
    1afe:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b00:	69e3      	ldr	r3, [r4, #28]
    1b02:	f013 0f03 	tst.w	r3, #3
    1b06:	d1fb      	bne.n	1b00 <_spi_m_sync_init+0x6c>
    1b08:	69e3      	ldr	r3, [r4, #28]
    1b0a:	f013 0f01 	tst.w	r3, #1
    1b0e:	d1fb      	bne.n	1b08 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1b10:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    1b12:	f640 1206 	movw	r2, #2310	; 0x906
    1b16:	4919      	ldr	r1, [pc, #100]	; (1b7c <_spi_m_sync_init+0xe8>)
    1b18:	1c20      	adds	r0, r4, #0
    1b1a:	bf18      	it	ne
    1b1c:	2001      	movne	r0, #1
    1b1e:	4b18      	ldr	r3, [pc, #96]	; (1b80 <_spi_m_sync_init+0xec>)
    1b20:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1b22:	4b18      	ldr	r3, [pc, #96]	; (1b84 <_spi_m_sync_init+0xf0>)
    1b24:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b26:	69e3      	ldr	r3, [r4, #28]
    1b28:	f013 0f03 	tst.w	r3, #3
    1b2c:	d1fb      	bne.n	1b26 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1b32:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1b34:	69e3      	ldr	r3, [r4, #28]
    1b36:	f013 0f17 	tst.w	r3, #23
    1b3a:	d1fb      	bne.n	1b34 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1b3c:	230e      	movs	r3, #14
    1b3e:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1b40:	2000      	movs	r0, #0
    1b42:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1b46:	2301      	movs	r3, #1
    1b48:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1b4a:	f240 13ff 	movw	r3, #511	; 0x1ff
    1b4e:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1b50:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1b52:	f640 123c 	movw	r2, #2364	; 0x93c
    1b56:	4909      	ldr	r1, [pc, #36]	; (1b7c <_spi_m_sync_init+0xe8>)
    1b58:	2000      	movs	r0, #0
    1b5a:	4b09      	ldr	r3, [pc, #36]	; (1b80 <_spi_m_sync_init+0xec>)
    1b5c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1b5e:	f06f 000c 	mvn.w	r0, #12
    1b62:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1b64:	f640 123c 	movw	r2, #2364	; 0x93c
    1b68:	4904      	ldr	r1, [pc, #16]	; (1b7c <_spi_m_sync_init+0xe8>)
    1b6a:	1c20      	adds	r0, r4, #0
    1b6c:	bf18      	it	ne
    1b6e:	2001      	movne	r0, #1
    1b70:	4b03      	ldr	r3, [pc, #12]	; (1b80 <_spi_m_sync_init+0xec>)
    1b72:	4798      	blx	r3
    1b74:	e7aa      	b.n	1acc <_spi_m_sync_init+0x38>
    1b76:	bf00      	nop
    1b78:	000018ad 	.word	0x000018ad
    1b7c:	00002848 	.word	0x00002848
    1b80:	0000141d 	.word	0x0000141d
    1b84:	4020000c 	.word	0x4020000c

00001b88 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1b88:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1b8a:	4604      	mov	r4, r0
    1b8c:	b160      	cbz	r0, 1ba8 <_spi_m_sync_enable+0x20>
    1b8e:	6800      	ldr	r0, [r0, #0]
    1b90:	3000      	adds	r0, #0
    1b92:	bf18      	it	ne
    1b94:	2001      	movne	r0, #1
    1b96:	f640 129b 	movw	r2, #2459	; 0x99b
    1b9a:	4904      	ldr	r1, [pc, #16]	; (1bac <_spi_m_sync_enable+0x24>)
    1b9c:	4b04      	ldr	r3, [pc, #16]	; (1bb0 <_spi_m_sync_enable+0x28>)
    1b9e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1ba0:	6820      	ldr	r0, [r4, #0]
    1ba2:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <_spi_m_sync_enable+0x2c>)
    1ba4:	4798      	blx	r3
}
    1ba6:	bd10      	pop	{r4, pc}
    1ba8:	2000      	movs	r0, #0
    1baa:	e7f4      	b.n	1b96 <_spi_m_sync_enable+0xe>
    1bac:	00002848 	.word	0x00002848
    1bb0:	0000141d 	.word	0x0000141d
    1bb4:	000018ed 	.word	0x000018ed

00001bb8 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1bbc:	4681      	mov	r9, r0
    1bbe:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    1bc0:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1bc2:	f8d1 8000 	ldr.w	r8, [r1]
    1bc6:	684d      	ldr	r5, [r1, #4]
    1bc8:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    1bca:	b1a8      	cbz	r0, 1bf8 <_spi_m_sync_trans+0x40>
    1bcc:	1c20      	adds	r0, r4, #0
    1bce:	bf18      	it	ne
    1bd0:	2001      	movne	r0, #1
    1bd2:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    1bd6:	492e      	ldr	r1, [pc, #184]	; (1c90 <_spi_m_sync_trans+0xd8>)
    1bd8:	4b2e      	ldr	r3, [pc, #184]	; (1c94 <_spi_m_sync_trans+0xdc>)
    1bda:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1bdc:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1bde:	f013 0f07 	tst.w	r3, #7
    1be2:	d134      	bne.n	1c4e <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1be4:	69e0      	ldr	r0, [r4, #28]
    1be6:	f010 0003 	ands.w	r0, r0, #3
    1bea:	d1fb      	bne.n	1be4 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1bec:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1bee:	f013 0f02 	tst.w	r3, #2
    1bf2:	d030      	beq.n	1c56 <_spi_m_sync_trans+0x9e>
    1bf4:	4602      	mov	r2, r0
    1bf6:	e008      	b.n	1c0a <_spi_m_sync_trans+0x52>
    1bf8:	2000      	movs	r0, #0
    1bfa:	e7ea      	b.n	1bd2 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    1bfc:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1bfe:	f013 0f80 	tst.w	r3, #128	; 0x80
    1c02:	d112      	bne.n	1c2a <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1c04:	68b3      	ldr	r3, [r6, #8]
    1c06:	4283      	cmp	r3, r0
    1c08:	d91e      	bls.n	1c48 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1c0a:	7e23      	ldrb	r3, [r4, #24]
    1c0c:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1c0e:	f013 0f04 	tst.w	r3, #4
    1c12:	d024      	beq.n	1c5e <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1c14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1c16:	2d00      	cmp	r5, #0
    1c18:	d0f0      	beq.n	1bfc <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    1c1a:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    1c1c:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    1c1e:	bf91      	iteee	ls
    1c20:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1c22:	0a09      	lsrhi	r1, r1, #8
    1c24:	7069      	strbhi	r1, [r5, #1]
    1c26:	3502      	addhi	r5, #2
    1c28:	e7e8      	b.n	1bfc <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1c2e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1c30:	2380      	movs	r3, #128	; 0x80
    1c32:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1c34:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1c38:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1c3a:	f013 0f03 	tst.w	r3, #3
    1c3e:	d0fb      	beq.n	1c38 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1c40:	2303      	movs	r3, #3
    1c42:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    1c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1c48:	4293      	cmp	r3, r2
    1c4a:	d8de      	bhi.n	1c0a <_spi_m_sync_trans+0x52>
    1c4c:	e7f4      	b.n	1c38 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    1c4e:	f06f 0003 	mvn.w	r0, #3
    1c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    1c56:	f06f 0013 	mvn.w	r0, #19
    1c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1c5e:	4290      	cmp	r0, r2
    1c60:	d8cd      	bhi.n	1bfe <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1c62:	f013 0f01 	tst.w	r3, #1
    1c66:	d0ca      	beq.n	1bfe <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1c68:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    1c6c:	f1b8 0f00 	cmp.w	r8, #0
    1c70:	d00b      	beq.n	1c8a <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    1c72:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    1c76:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    1c78:	bf91      	iteee	ls
    1c7a:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    1c7e:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    1c82:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    1c86:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    1c8a:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1c8c:	62a1      	str	r1, [r4, #40]	; 0x28
    1c8e:	e7b6      	b.n	1bfe <_spi_m_sync_trans+0x46>
    1c90:	00002848 	.word	0x00002848
    1c94:	0000141d 	.word	0x0000141d

00001c98 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    1c98:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1c9a:	4604      	mov	r4, r0
    1c9c:	b330      	cbz	r0, 1cec <_wdt_init+0x54>
    1c9e:	6800      	ldr	r0, [r0, #0]
    1ca0:	3000      	adds	r0, #0
    1ca2:	bf18      	it	ne
    1ca4:	2001      	movne	r0, #1
    1ca6:	2250      	movs	r2, #80	; 0x50
    1ca8:	4914      	ldr	r1, [pc, #80]	; (1cfc <_wdt_init+0x64>)
    1caa:	4b15      	ldr	r3, [pc, #84]	; (1d00 <_wdt_init+0x68>)
    1cac:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    1cae:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1cb0:	689a      	ldr	r2, [r3, #8]
    1cb2:	f012 0f0e 	tst.w	r2, #14
    1cb6:	d1fb      	bne.n	1cb0 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1cb8:	781a      	ldrb	r2, [r3, #0]
    1cba:	09d2      	lsrs	r2, r2, #7
    1cbc:	d118      	bne.n	1cf0 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1cbe:	689a      	ldr	r2, [r3, #8]
    1cc0:	f012 0f0e 	tst.w	r2, #14
    1cc4:	d1fb      	bne.n	1cbe <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1cc6:	781a      	ldrb	r2, [r3, #0]
    1cc8:	f012 0f02 	tst.w	r2, #2
    1ccc:	d113      	bne.n	1cf6 <_wdt_init+0x5e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    1cce:	781a      	ldrb	r2, [r3, #0]
    1cd0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1cd4:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1cd6:	689a      	ldr	r2, [r3, #8]
    1cd8:	f012 0f0e 	tst.w	r2, #14
    1cdc:	d1fb      	bne.n	1cd6 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    1cde:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    1ce0:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    1ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    1ce6:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    1ce8:	2000      	movs	r0, #0
    1cea:	bd10      	pop	{r4, pc}
    1cec:	2000      	movs	r0, #0
    1cee:	e7da      	b.n	1ca6 <_wdt_init+0xe>
		return ERR_DENIED;
    1cf0:	f06f 0010 	mvn.w	r0, #16
    1cf4:	bd10      	pop	{r4, pc}
    1cf6:	f06f 0010 	mvn.w	r0, #16
}
    1cfa:	bd10      	pop	{r4, pc}
    1cfc:	00002864 	.word	0x00002864
    1d00:	0000141d 	.word	0x0000141d

00001d04 <main>:

uint8_t i2c_buf[RX_LENGTH]; 


int main(void)
{	
    1d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d08:	b083      	sub	sp, #12
	uint32_t ret; 
	atmel_start_init();
    1d0a:	4b2d      	ldr	r3, [pc, #180]	; (1dc0 <main+0xbc>)
    1d0c:	4798      	blx	r3
	
	QUAD_SPI_0_PORT_deinit(); //float qspi pins, if atmel is not held in reset
    1d0e:	4b2d      	ldr	r3, [pc, #180]	; (1dc4 <main+0xc0>)
    1d10:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1d12:	4f2d      	ldr	r7, [pc, #180]	; (1dc8 <main+0xc4>)
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1d14:	4d2d      	ldr	r5, [pc, #180]	; (1dcc <main+0xc8>)
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    1d16:	4e2e      	ldr	r6, [pc, #184]	; (1dd0 <main+0xcc>)
	CRITICAL_SECTION_ENTER();
    1d18:	a801      	add	r0, sp, #4
    1d1a:	47b8      	blx	r7
    1d1c:	682a      	ldr	r2, [r5, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1d1e:	6a2b      	ldr	r3, [r5, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1d20:	692c      	ldr	r4, [r5, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    1d22:	405c      	eors	r4, r3
    1d24:	4014      	ands	r4, r2
    1d26:	405c      	eors	r4, r3
	CRITICAL_SECTION_LEAVE();
    1d28:	a801      	add	r0, sp, #4
    1d2a:	47b0      	blx	r6
	
	//TIMER_0_example(); //shutoff timer not working
	
	while (gpio_get_pin_level(BOOT_PIN)) 
    1d2c:	f414 5f80 	tst.w	r4, #4096	; 0x1000
    1d30:	d03f      	beq.n	1db2 <main+0xae>
	{
		
		I2C_read(i2c_buf, RX_LENGTH);
    1d32:	4c28      	ldr	r4, [pc, #160]	; (1dd4 <main+0xd0>)
    1d34:	2112      	movs	r1, #18
    1d36:	4620      	mov	r0, r4
    1d38:	4b27      	ldr	r3, [pc, #156]	; (1dd8 <main+0xd4>)
    1d3a:	4798      	blx	r3
				
		if(i2c_buf[0] == start_byte) //start byte CC 
    1d3c:	7823      	ldrb	r3, [r4, #0]
    1d3e:	2bcc      	cmp	r3, #204	; 0xcc
    1d40:	d1ea      	bne.n	1d18 <main+0x14>
		{
			if(i2c_buf[1] == target_cmd) //target cmd BB (data address, data length, target flash address, and SOC type to follow, atmel begins programming)
    1d42:	7863      	ldrb	r3, [r4, #1]
    1d44:	2bbb      	cmp	r3, #187	; 0xbb
    1d46:	d1e7      	bne.n	1d18 <main+0x14>
			{
				uint32_t data_addr = i2c_buf[2] << 24 | i2c_buf[3] << 16 | i2c_buf[4] << 8 | i2c_buf[5];
				uint32_t data_len = i2c_buf[6] << 24 | i2c_buf[7] << 16 | i2c_buf[8] << 8 | i2c_buf[9];
				uint32_t start_address = i2c_buf[10] << 24 | i2c_buf[11] << 16 | i2c_buf[12] << 8 | i2c_buf[13]; //flash start address
    1d48:	7aa2      	ldrb	r2, [r4, #10]
    1d4a:	7ae3      	ldrb	r3, [r4, #11]
    1d4c:	041b      	lsls	r3, r3, #16
    1d4e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1d52:	7b62      	ldrb	r2, [r4, #13]
    1d54:	4313      	orrs	r3, r2
    1d56:	f894 800c 	ldrb.w	r8, [r4, #12]
				uint32_t chip_type = i2c_buf[14] << 24 | i2c_buf[15] << 16 | i2c_buf[16] << 8 | i2c_buf[17];
    1d5a:	7ba1      	ldrb	r1, [r4, #14]
    1d5c:	7be2      	ldrb	r2, [r4, #15]
    1d5e:	0412      	lsls	r2, r2, #16
    1d60:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    1d64:	7c61      	ldrb	r1, [r4, #17]
    1d66:	430a      	orrs	r2, r1
    1d68:	f894 c010 	ldrb.w	ip, [r4, #16]
				uint32_t data_len = i2c_buf[6] << 24 | i2c_buf[7] << 16 | i2c_buf[8] << 8 | i2c_buf[9];
    1d6c:	79a0      	ldrb	r0, [r4, #6]
    1d6e:	79e1      	ldrb	r1, [r4, #7]
    1d70:	0409      	lsls	r1, r1, #16
    1d72:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    1d76:	7a60      	ldrb	r0, [r4, #9]
    1d78:	4301      	orrs	r1, r0
    1d7a:	f894 e008 	ldrb.w	lr, [r4, #8]
				uint32_t data_addr = i2c_buf[2] << 24 | i2c_buf[3] << 16 | i2c_buf[4] << 8 | i2c_buf[5];
    1d7e:	f894 9002 	ldrb.w	r9, [r4, #2]
    1d82:	78e0      	ldrb	r0, [r4, #3]
    1d84:	0400      	lsls	r0, r0, #16
    1d86:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
    1d8a:	f894 9005 	ldrb.w	r9, [r4, #5]
    1d8e:	ea40 0009 	orr.w	r0, r0, r9
    1d92:	7924      	ldrb	r4, [r4, #4]
				
				ret = flash_target(data_addr, data_len, chip_type, start_address);
    1d94:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
    1d98:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
    1d9c:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
    1da0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    1da4:	4c0d      	ldr	r4, [pc, #52]	; (1ddc <main+0xd8>)
    1da6:	47a0      	blx	r4
				if(ret == f_ok || ret == f_err)
    1da8:	2801      	cmp	r0, #1
    1daa:	d8b5      	bhi.n	1d18 <main+0x14>
				{
					system_off();  //NOTE: red light indicates atmel is in off state
    1dac:	4b0c      	ldr	r3, [pc, #48]	; (1de0 <main+0xdc>)
    1dae:	4798      	blx	r3
    1db0:	e7b2      	b.n	1d18 <main+0x14>
				}
			}
		}
	}
	
	system_off();
    1db2:	4b0b      	ldr	r3, [pc, #44]	; (1de0 <main+0xdc>)
    1db4:	4798      	blx	r3
	
}
    1db6:	2000      	movs	r0, #0
    1db8:	b003      	add	sp, #12
    1dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1dbe:	bf00      	nop
    1dc0:	000002d1 	.word	0x000002d1
    1dc4:	00000401 	.word	0x00000401
    1dc8:	00000e51 	.word	0x00000e51
    1dcc:	41008000 	.word	0x41008000
    1dd0:	00000e5f 	.word	0x00000e5f
    1dd4:	2000011c 	.word	0x2000011c
    1dd8:	00000a5d 	.word	0x00000a5d
    1ddc:	00000db9 	.word	0x00000db9
    1de0:	000002e5 	.word	0x000002e5

00001de4 <s25fl116k_read_reg>:
	cmd.instruction = S25FL1_SOFT_RESET;
	qspi_sync_serial_run_command(descr, &cmd);
}

static uint8_t s25fl116k_read_reg(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst)
{
    1de4:	b500      	push	{lr}
    1de6:	b089      	sub	sp, #36	; 0x24
	uint32_t status;
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 1 */
	struct _qspi_command cmd = {
    1de8:	2300      	movs	r3, #0
    1dea:	9301      	str	r3, [sp, #4]
    1dec:	9302      	str	r3, [sp, #8]
    1dee:	9303      	str	r3, [sp, #12]
    1df0:	9305      	str	r3, [sp, #20]
    1df2:	f001 0107 	and.w	r1, r1, #7
    1df6:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    1dfa:	f88d 1004 	strb.w	r1, [sp, #4]
    1dfe:	f88d 2008 	strb.w	r2, [sp, #8]
    1e02:	2304      	movs	r3, #4
    1e04:	9304      	str	r3, [sp, #16]
    1e06:	ab07      	add	r3, sp, #28
    1e08:	9306      	str	r3, [sp, #24]
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .rx_buf                   = &status,
	};

	qspi_sync_serial_run_command(descr, &cmd);
    1e0a:	a901      	add	r1, sp, #4
    1e0c:	4b03      	ldr	r3, [pc, #12]	; (1e1c <s25fl116k_read_reg+0x38>)
    1e0e:	4798      	blx	r3
	return (uint8_t)status;
}
    1e10:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1e14:	b009      	add	sp, #36	; 0x24
    1e16:	f85d fb04 	ldr.w	pc, [sp], #4
    1e1a:	bf00      	nop
    1e1c:	0000117d 	.word	0x0000117d

00001e20 <s25fl116k_wait_memory_access_ready>:

static void s25fl116k_wait_memory_access_ready(struct qspi_sync_descriptor *descr)
{
    1e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e22:	4607      	mov	r7, r0
	while (s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1) & S25FL1_STATUS_RDYBSY)
    1e24:	2605      	movs	r6, #5
    1e26:	2500      	movs	r5, #0
    1e28:	4c04      	ldr	r4, [pc, #16]	; (1e3c <s25fl116k_wait_memory_access_ready+0x1c>)
    1e2a:	4632      	mov	r2, r6
    1e2c:	4629      	mov	r1, r5
    1e2e:	4638      	mov	r0, r7
    1e30:	47a0      	blx	r4
    1e32:	f010 0f01 	tst.w	r0, #1
    1e36:	d1f8      	bne.n	1e2a <s25fl116k_wait_memory_access_ready+0xa>
		;
}
    1e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e3a:	bf00      	nop
    1e3c:	00001de5 	.word	0x00001de5

00001e40 <s25fl116k_write_enable>:

static void s25fl116k_write_enable(struct qspi_sync_descriptor *descr, uint8_t width, bool en)
{
    1e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e42:	b087      	sub	sp, #28
    1e44:	4604      	mov	r4, r0
	uint8_t              inst   = (en == true ? S25FL1_WRITE_ENABLE : S25FL1_WRITE_DISABLE);
    1e46:	4616      	mov	r6, r2
    1e48:	2a00      	cmp	r2, #0
    1e4a:	bf14      	ite	ne
    1e4c:	2206      	movne	r2, #6
    1e4e:	2204      	moveq	r2, #4
	uint8_t              status = 0;
	struct _qspi_command cmd    = {
    1e50:	2300      	movs	r3, #0
    1e52:	9300      	str	r3, [sp, #0]
    1e54:	9301      	str	r3, [sp, #4]
    1e56:	9302      	str	r3, [sp, #8]
    1e58:	9303      	str	r3, [sp, #12]
    1e5a:	9304      	str	r3, [sp, #16]
    1e5c:	9305      	str	r3, [sp, #20]
    1e5e:	f001 0107 	and.w	r1, r1, #7
    1e62:	f041 0110 	orr.w	r1, r1, #16
    1e66:	f88d 1000 	strb.w	r1, [sp]
    1e6a:	f88d 2004 	strb.w	r2, [sp, #4]
        .inst_frame.bits.width   = width,
        .inst_frame.bits.inst_en = 1,
        .instruction             = inst,
    };

	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1e6e:	2205      	movs	r2, #5
    1e70:	4619      	mov	r1, r3
    1e72:	4b0b      	ldr	r3, [pc, #44]	; (1ea0 <s25fl116k_write_enable+0x60>)
    1e74:	4798      	blx	r3
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    1e76:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1e7a:	42b0      	cmp	r0, r6
    1e7c:	d00d      	beq.n	1e9a <s25fl116k_write_enable+0x5a>
    1e7e:	4635      	mov	r5, r6
		qspi_sync_serial_run_command(descr, &cmd);
    1e80:	4f08      	ldr	r7, [pc, #32]	; (1ea4 <s25fl116k_write_enable+0x64>)
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1e82:	4e07      	ldr	r6, [pc, #28]	; (1ea0 <s25fl116k_write_enable+0x60>)
		qspi_sync_serial_run_command(descr, &cmd);
    1e84:	4669      	mov	r1, sp
    1e86:	4620      	mov	r0, r4
    1e88:	47b8      	blx	r7
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1e8a:	2205      	movs	r2, #5
    1e8c:	2100      	movs	r1, #0
    1e8e:	4620      	mov	r0, r4
    1e90:	47b0      	blx	r6
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    1e92:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1e96:	42a8      	cmp	r0, r5
    1e98:	d1f4      	bne.n	1e84 <s25fl116k_write_enable+0x44>
	}
}
    1e9a:	b007      	add	sp, #28
    1e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e9e:	bf00      	nop
    1ea0:	00001de5 	.word	0x00001de5
    1ea4:	0000117d 	.word	0x0000117d

00001ea8 <s25fl116k_write_status>:

static void s25fl116k_write_status(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst, uint8_t *data)
{
    1ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eaa:	b087      	sub	sp, #28
    1eac:	4606      	mov	r6, r0
    1eae:	460f      	mov	r7, r1
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 3 */
	struct _qspi_command cmd = {
    1eb0:	2400      	movs	r4, #0
    1eb2:	9400      	str	r4, [sp, #0]
    1eb4:	9401      	str	r4, [sp, #4]
    1eb6:	9402      	str	r4, [sp, #8]
    1eb8:	9405      	str	r4, [sp, #20]
    1eba:	f001 0507 	and.w	r5, r1, #7
    1ebe:	f045 0590 	orr.w	r5, r5, #144	; 0x90
    1ec2:	f88d 5000 	strb.w	r5, [sp]
    1ec6:	f04f 0500 	mov.w	r5, #0
    1eca:	f04f 0e02 	mov.w	lr, #2
    1ece:	f36e 1505 	bfi	r5, lr, #4, #2
    1ed2:	f88d 5001 	strb.w	r5, [sp, #1]
    1ed6:	f88d 2004 	strb.w	r2, [sp, #4]
    1eda:	2204      	movs	r2, #4
    1edc:	9203      	str	r2, [sp, #12]
    1ede:	9304      	str	r3, [sp, #16]
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .tx_buf                   = data,
	};
	s25fl116k_write_enable(descr, width, true);
    1ee0:	2201      	movs	r2, #1
    1ee2:	4d06      	ldr	r5, [pc, #24]	; (1efc <s25fl116k_write_status+0x54>)
    1ee4:	47a8      	blx	r5
	qspi_sync_serial_run_command(descr, &cmd);
    1ee6:	4669      	mov	r1, sp
    1ee8:	4630      	mov	r0, r6
    1eea:	4b05      	ldr	r3, [pc, #20]	; (1f00 <s25fl116k_write_status+0x58>)
    1eec:	4798      	blx	r3
	s25fl116k_write_enable(descr, width, false);
    1eee:	4622      	mov	r2, r4
    1ef0:	4639      	mov	r1, r7
    1ef2:	4630      	mov	r0, r6
    1ef4:	47a8      	blx	r5
}
    1ef6:	b007      	add	sp, #28
    1ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1efa:	bf00      	nop
    1efc:	00001e41 	.word	0x00001e41
    1f00:	0000117d 	.word	0x0000117d

00001f04 <s25fl116k_read>:
	}
	return me;
}

int32_t s25fl116k_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1f04:	b570      	push	{r4, r5, r6, lr}
    1f06:	b086      	sub	sp, #24
	struct s25fl116k *           s25fl1 = (struct s25fl116k *)me;
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    1f08:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    1f0a:	2400      	movs	r4, #0
    1f0c:	9400      	str	r4, [sp, #0]
    1f0e:	9401      	str	r4, [sp, #4]
    1f10:	9404      	str	r4, [sp, #16]
    1f12:	24b0      	movs	r4, #176	; 0xb0
    1f14:	f88d 4000 	strb.w	r4, [sp]
    1f18:	f04f 0400 	mov.w	r4, #0
    1f1c:	2601      	movs	r6, #1
    1f1e:	f366 1405 	bfi	r4, r6, #4, #2
    1f22:	f88d 4001 	strb.w	r4, [sp, #1]
    1f26:	2408      	movs	r4, #8
    1f28:	f88d 4002 	strb.w	r4, [sp, #2]
    1f2c:	240b      	movs	r4, #11
    1f2e:	f88d 4004 	strb.w	r4, [sp, #4]
    1f32:	9202      	str	r2, [sp, #8]
    1f34:	9303      	str	r3, [sp, #12]
    1f36:	9105      	str	r1, [sp, #20]
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};

	if (s25fl1->quad_mode) {
    1f38:	7a03      	ldrb	r3, [r0, #8]
    1f3a:	b14b      	cbz	r3, 1f50 <s25fl116k_read+0x4c>
		cmd.instruction           = S25FL1_READ_ARRAY_QUAD;
    1f3c:	236b      	movs	r3, #107	; 0x6b
    1f3e:	f88d 3004 	strb.w	r3, [sp, #4]
		cmd.inst_frame.bits.width = QSPI_INST1_ADDR1_DATA4;
    1f42:	f89d 3000 	ldrb.w	r3, [sp]
    1f46:	2202      	movs	r2, #2
    1f48:	f362 0302 	bfi	r3, r2, #0, #3
    1f4c:	f88d 3000 	strb.w	r3, [sp]
	}
	qspi_sync_serial_run_command(descr, &cmd);
    1f50:	4669      	mov	r1, sp
    1f52:	4628      	mov	r0, r5
    1f54:	4b02      	ldr	r3, [pc, #8]	; (1f60 <s25fl116k_read+0x5c>)
    1f56:	4798      	blx	r3
	return ERR_NONE;
}
    1f58:	2000      	movs	r0, #0
    1f5a:	b006      	add	sp, #24
    1f5c:	bd70      	pop	{r4, r5, r6, pc}
    1f5e:	bf00      	nop
    1f60:	0000117d 	.word	0x0000117d

00001f64 <s25fl116k_page_program>:
{
    1f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f66:	4604      	mov	r4, r0
    1f68:	460f      	mov	r7, r1
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    1f6a:	2201      	movs	r2, #1
    1f6c:	2100      	movs	r1, #0
    1f6e:	4d08      	ldr	r5, [pc, #32]	; (1f90 <s25fl116k_page_program+0x2c>)
    1f70:	47a8      	blx	r5
	s25fl116k_wait_memory_access_ready(descr);
    1f72:	4620      	mov	r0, r4
    1f74:	4e07      	ldr	r6, [pc, #28]	; (1f94 <s25fl116k_page_program+0x30>)
    1f76:	47b0      	blx	r6
	qspi_sync_serial_run_command(descr, cmd);
    1f78:	4639      	mov	r1, r7
    1f7a:	4620      	mov	r0, r4
    1f7c:	4b06      	ldr	r3, [pc, #24]	; (1f98 <s25fl116k_page_program+0x34>)
    1f7e:	4798      	blx	r3
	s25fl116k_wait_memory_access_ready(descr);
    1f80:	4620      	mov	r0, r4
    1f82:	47b0      	blx	r6
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    1f84:	2200      	movs	r2, #0
    1f86:	4611      	mov	r1, r2
    1f88:	4620      	mov	r0, r4
    1f8a:	47a8      	blx	r5
    1f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f8e:	bf00      	nop
    1f90:	00001e41 	.word	0x00001e41
    1f94:	00001e21 	.word	0x00001e21
    1f98:	0000117d 	.word	0x0000117d

00001f9c <s25fl116k_write>:

int32_t s25fl116k_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa0:	b089      	sub	sp, #36	; 0x24
    1fa2:	9201      	str	r2, [sp, #4]
    1fa4:	461e      	mov	r6, r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1fa6:	6803      	ldr	r3, [r0, #0]
    1fa8:	9300      	str	r3, [sp, #0]
	uint32_t i = 0;

	/** Size / page_size */
	uint32_t number_of_writes = (length >> 8);

	struct _qspi_command cmd = {
    1faa:	2300      	movs	r3, #0
    1fac:	9302      	str	r3, [sp, #8]
    1fae:	9303      	str	r3, [sp, #12]
    1fb0:	9307      	str	r3, [sp, #28]
    1fb2:	23b0      	movs	r3, #176	; 0xb0
    1fb4:	f88d 3008 	strb.w	r3, [sp, #8]
    1fb8:	2330      	movs	r3, #48	; 0x30
    1fba:	f88d 3009 	strb.w	r3, [sp, #9]
    1fbe:	2302      	movs	r3, #2
    1fc0:	f88d 300c 	strb.w	r3, [sp, #12]
    1fc4:	9204      	str	r2, [sp, #16]
    1fc6:	9605      	str	r6, [sp, #20]
    1fc8:	9106      	str	r1, [sp, #24]
	    .buf_len                  = length,
	    .tx_buf                   = buf,
	};

	/** If less than page size */
	if (number_of_writes == 0) {
    1fca:	0a37      	lsrs	r7, r6, #8
    1fcc:	d023      	beq.n	2016 <s25fl116k_write+0x7a>
    1fce:	468b      	mov	fp, r1
    1fd0:	460c      	mov	r4, r1
    1fd2:	2500      	movs	r5, #0
		s25fl116k_page_program(descr, &cmd);
	} else {
		/** Multiple page */
		for (i = 0; i < number_of_writes; i++) {
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1fd4:	f44f 7a80 	mov.w	sl, #256	; 0x100
			cmd.address = address;
    1fd8:	9b01      	ldr	r3, [sp, #4]
    1fda:	eba3 0901 	sub.w	r9, r3, r1
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1fde:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2030 <s25fl116k_write+0x94>
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1fe2:	f8cd a014 	str.w	sl, [sp, #20]
			cmd.address = address;
    1fe6:	eb04 0309 	add.w	r3, r4, r9
    1fea:	9304      	str	r3, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1fec:	9406      	str	r4, [sp, #24]
    1fee:	a902      	add	r1, sp, #8
    1ff0:	9800      	ldr	r0, [sp, #0]
    1ff2:	47c0      	blx	r8
			buf += S25FL1_PAGE_SIZE;
    1ff4:	f504 7480 	add.w	r4, r4, #256	; 0x100
		for (i = 0; i < number_of_writes; i++) {
    1ff8:	3501      	adds	r5, #1
    1ffa:	42af      	cmp	r7, r5
    1ffc:	d1f1      	bne.n	1fe2 <s25fl116k_write+0x46>
    1ffe:	022d      	lsls	r5, r5, #8
    2000:	eb0b 0205 	add.w	r2, fp, r5
    2004:	9b01      	ldr	r3, [sp, #4]
    2006:	441d      	add	r5, r3
			address += S25FL1_PAGE_SIZE;
		}
		if (length % S25FL1_PAGE_SIZE) {
    2008:	f016 03ff 	ands.w	r3, r6, #255	; 0xff
    200c:	d108      	bne.n	2020 <s25fl116k_write+0x84>
			cmd.address = address;
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
		}
	}
	return ERR_NONE;
}
    200e:	2000      	movs	r0, #0
    2010:	b009      	add	sp, #36	; 0x24
    2012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s25fl116k_page_program(descr, &cmd);
    2016:	a902      	add	r1, sp, #8
    2018:	9800      	ldr	r0, [sp, #0]
    201a:	4b05      	ldr	r3, [pc, #20]	; (2030 <s25fl116k_write+0x94>)
    201c:	4798      	blx	r3
    201e:	e7f6      	b.n	200e <s25fl116k_write+0x72>
			cmd.buf_len = length % S25FL1_PAGE_SIZE;
    2020:	9305      	str	r3, [sp, #20]
			cmd.address = address;
    2022:	9504      	str	r5, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    2024:	9206      	str	r2, [sp, #24]
    2026:	a902      	add	r1, sp, #8
    2028:	9800      	ldr	r0, [sp, #0]
    202a:	4b01      	ldr	r3, [pc, #4]	; (2030 <s25fl116k_write+0x94>)
    202c:	4798      	blx	r3
    202e:	e7ee      	b.n	200e <s25fl116k_write+0x72>
    2030:	00001f65 	.word	0x00001f65

00002034 <s25fl116k_erase>:

int32_t s25fl116k_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    2034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2038:	b087      	sub	sp, #28
    203a:	4615      	mov	r5, r2
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    203c:	6806      	ldr	r6, [r0, #0]

	uint32_t temp_addr = address;
	uint32_t temp_len  = length;
	uint8_t  status;

	struct _qspi_command cmd = {
    203e:	2300      	movs	r3, #0
    2040:	9300      	str	r3, [sp, #0]
    2042:	9301      	str	r3, [sp, #4]
    2044:	9302      	str	r3, [sp, #8]
    2046:	9303      	str	r3, [sp, #12]
    2048:	9304      	str	r3, [sp, #16]
    204a:	9305      	str	r3, [sp, #20]
    204c:	2330      	movs	r3, #48	; 0x30
    204e:	f88d 3000 	strb.w	r3, [sp]
    2052:	f04f 0300 	mov.w	r3, #0
    2056:	2202      	movs	r2, #2
    2058:	f362 1305 	bfi	r3, r2, #4, #2
    205c:	f88d 3001 	strb.w	r3, [sp, #1]
	    .inst_frame.bits.inst_en  = 1,
	    .inst_frame.bits.addr_en  = 1,
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	};

	if ((length % S25FL1_SECTOR_SIZE) || (address % S25FL1_SECTOR_SIZE)) {
    2060:	ea41 0305 	orr.w	r3, r1, r5
    2064:	f3c3 030b 	ubfx	r3, r3, #0, #12
    2068:	2b00      	cmp	r3, #0
    206a:	d15e      	bne.n	212a <s25fl116k_erase+0xf6>
    206c:	460c      	mov	r4, r1
		return ERR_INVALID_ARG;
	}
	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    206e:	2205      	movs	r2, #5
    2070:	2100      	movs	r1, #0
    2072:	4630      	mov	r0, r6
    2074:	4b31      	ldr	r3, [pc, #196]	; (213c <s25fl116k_erase+0x108>)
    2076:	4798      	blx	r3
	if ((status & S25FL1_STATUS_RDYBSY) != S25FL1_STATUS_RDYBSY_READY)
    2078:	f010 0f01 	tst.w	r0, #1
    207c:	d003      	beq.n	2086 <s25fl116k_erase+0x52>
		return S25FL1_ERROR_BUSY;
    207e:	2002      	movs	r0, #2
			return ERR_INVALID_ARG;
		}
	}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
	return ERR_NONE;
}
    2080:	b007      	add	sp, #28
    2082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    2086:	2201      	movs	r2, #1
    2088:	2100      	movs	r1, #0
    208a:	4630      	mov	r0, r6
    208c:	4b2c      	ldr	r3, [pc, #176]	; (2140 <s25fl116k_erase+0x10c>)
    208e:	4798      	blx	r3
	if (address == 0 && length >= S25FL1_FLASH_SIZE) {
    2090:	b914      	cbnz	r4, 2098 <s25fl116k_erase+0x64>
    2092:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
    2096:	d207      	bcs.n	20a8 <s25fl116k_erase+0x74>
	while (temp_len > 0) {
    2098:	2d00      	cmp	r5, #0
    209a:	d03f      	beq.n	211c <s25fl116k_erase+0xe8>
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    209c:	f04f 09d8 	mov.w	r9, #216	; 0xd8
			qspi_sync_serial_run_command(descr, &cmd);
    20a0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2148 <s25fl116k_erase+0x114>
			s25fl116k_wait_memory_access_ready(descr);
    20a4:	4f27      	ldr	r7, [pc, #156]	; (2144 <s25fl116k_erase+0x110>)
    20a6:	e026      	b.n	20f6 <s25fl116k_erase+0xc2>
		cmd.inst_frame.bits.addr_en = 0;
    20a8:	f89d 3000 	ldrb.w	r3, [sp]
    20ac:	f36f 1345 	bfc	r3, #5, #1
    20b0:	f88d 3000 	strb.w	r3, [sp]
		cmd.instruction             = S25FL1_CHIP_ERASE_2;
    20b4:	23c7      	movs	r3, #199	; 0xc7
    20b6:	f88d 3004 	strb.w	r3, [sp, #4]
		qspi_sync_serial_run_command(descr, &cmd);
    20ba:	4669      	mov	r1, sp
    20bc:	4630      	mov	r0, r6
    20be:	4b22      	ldr	r3, [pc, #136]	; (2148 <s25fl116k_erase+0x114>)
    20c0:	4798      	blx	r3
		temp_len -= S25FL1_FLASH_SIZE;
    20c2:	f5a5 1500 	sub.w	r5, r5, #2097152	; 0x200000
		s25fl116k_wait_memory_access_ready(descr);
    20c6:	4630      	mov	r0, r6
    20c8:	4b1e      	ldr	r3, [pc, #120]	; (2144 <s25fl116k_erase+0x110>)
    20ca:	4798      	blx	r3
    20cc:	e7e4      	b.n	2098 <s25fl116k_erase+0x64>
		} else if ((temp_addr % S25FL1_SECTOR_SIZE == 0) && (temp_len >= S25FL1_SECTOR_SIZE)) {
    20ce:	f3c4 030b 	ubfx	r3, r4, #0, #12
    20d2:	bb6b      	cbnz	r3, 2130 <s25fl116k_erase+0xfc>
    20d4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    20d8:	d32d      	bcc.n	2136 <s25fl116k_erase+0x102>
			cmd.address     = temp_addr;
    20da:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_4K;
    20dc:	2320      	movs	r3, #32
    20de:	f88d 3004 	strb.w	r3, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    20e2:	4669      	mov	r1, sp
    20e4:	4630      	mov	r0, r6
    20e6:	47c0      	blx	r8
			temp_addr += S25FL1_SECTOR_SIZE;
    20e8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
			temp_len -= S25FL1_SECTOR_SIZE;
    20ec:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
			s25fl116k_wait_memory_access_ready(descr);
    20f0:	4630      	mov	r0, r6
    20f2:	47b8      	blx	r7
	while (temp_len > 0) {
    20f4:	b195      	cbz	r5, 211c <s25fl116k_erase+0xe8>
		if ((temp_addr % S25FL1_BLOCK_SIZE == 0) && (temp_len >= S25FL1_BLOCK_SIZE)) {
    20f6:	b2a3      	uxth	r3, r4
    20f8:	2b00      	cmp	r3, #0
    20fa:	d1e8      	bne.n	20ce <s25fl116k_erase+0x9a>
    20fc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    2100:	d3e5      	bcc.n	20ce <s25fl116k_erase+0x9a>
			cmd.address     = temp_addr;
    2102:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    2104:	f88d 9004 	strb.w	r9, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    2108:	4669      	mov	r1, sp
    210a:	4630      	mov	r0, r6
    210c:	47c0      	blx	r8
			temp_addr += S25FL1_BLOCK_SIZE;
    210e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
			temp_len -= S25FL1_BLOCK_SIZE;
    2112:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
			s25fl116k_wait_memory_access_ready(descr);
    2116:	4630      	mov	r0, r6
    2118:	47b8      	blx	r7
    211a:	e7eb      	b.n	20f4 <s25fl116k_erase+0xc0>
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    211c:	2200      	movs	r2, #0
    211e:	4611      	mov	r1, r2
    2120:	4630      	mov	r0, r6
    2122:	4b07      	ldr	r3, [pc, #28]	; (2140 <s25fl116k_erase+0x10c>)
    2124:	4798      	blx	r3
	return ERR_NONE;
    2126:	2000      	movs	r0, #0
    2128:	e7aa      	b.n	2080 <s25fl116k_erase+0x4c>
		return ERR_INVALID_ARG;
    212a:	f06f 000c 	mvn.w	r0, #12
    212e:	e7a7      	b.n	2080 <s25fl116k_erase+0x4c>
			return ERR_INVALID_ARG;
    2130:	f06f 000c 	mvn.w	r0, #12
    2134:	e7a4      	b.n	2080 <s25fl116k_erase+0x4c>
    2136:	f06f 000c 	mvn.w	r0, #12
    213a:	e7a1      	b.n	2080 <s25fl116k_erase+0x4c>
    213c:	00001de5 	.word	0x00001de5
    2140:	00001e41 	.word	0x00001e41
    2144:	00001e21 	.word	0x00001e21
    2148:	0000117d 	.word	0x0000117d

0000214c <s25fl116k_enable_xip>:

int32_t s25fl116k_enable_xip(const struct spi_nor_flash *const me)
{
    214c:	b5f0      	push	{r4, r5, r6, r7, lr}
    214e:	b089      	sub	sp, #36	; 0x24
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    2150:	6804      	ldr	r4, [r0, #0]

	uint8_t dummy_read, status[3];

	struct _qspi_command cmd = {
    2152:	2500      	movs	r5, #0
    2154:	9501      	str	r5, [sp, #4]
    2156:	9502      	str	r5, [sp, #8]
    2158:	9503      	str	r5, [sp, #12]
    215a:	9505      	str	r5, [sp, #20]
    215c:	23f4      	movs	r3, #244	; 0xf4
    215e:	f88d 3004 	strb.w	r3, [sp, #4]
    2162:	2302      	movs	r3, #2
    2164:	f043 0250 	orr.w	r2, r3, #80	; 0x50
    2168:	f88d 2005 	strb.w	r2, [sp, #5]
    216c:	2205      	movs	r2, #5
    216e:	f88d 2006 	strb.w	r2, [sp, #6]
    2172:	21eb      	movs	r1, #235	; 0xeb
    2174:	f88d 1008 	strb.w	r1, [sp, #8]
    2178:	f88d 3009 	strb.w	r3, [sp, #9]
    217c:	2301      	movs	r3, #1
    217e:	9304      	str	r3, [sp, #16]
    2180:	f10d 031f 	add.w	r3, sp, #31
    2184:	9306      	str	r3, [sp, #24]
	    .address                        = 0,
	    .buf_len                        = 1,
	    .rx_buf                         = &dummy_read,
	};

	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    2186:	4629      	mov	r1, r5
    2188:	4620      	mov	r0, r4
    218a:	4e17      	ldr	r6, [pc, #92]	; (21e8 <s25fl116k_enable_xip+0x9c>)
    218c:	47b0      	blx	r6
    218e:	f88d 001c 	strb.w	r0, [sp, #28]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    2192:	2235      	movs	r2, #53	; 0x35
    2194:	4629      	mov	r1, r5
    2196:	4620      	mov	r0, r4
    2198:	47b0      	blx	r6
    219a:	f88d 001d 	strb.w	r0, [sp, #29]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    219e:	2233      	movs	r2, #51	; 0x33
    21a0:	4629      	mov	r1, r5
    21a2:	4620      	mov	r0, r4
    21a4:	47b0      	blx	r6
    21a6:	f88d 001e 	strb.w	r0, [sp, #30]

	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    21aa:	f89d 001d 	ldrb.w	r0, [sp, #29]
    21ae:	f010 0f02 	tst.w	r0, #2
    21b2:	d112      	bne.n	21da <s25fl116k_enable_xip+0x8e>
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    21b4:	4f0d      	ldr	r7, [pc, #52]	; (21ec <s25fl116k_enable_xip+0xa0>)
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    21b6:	f040 0002 	orr.w	r0, r0, #2
    21ba:	f88d 001d 	strb.w	r0, [sp, #29]
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    21be:	ab07      	add	r3, sp, #28
    21c0:	2201      	movs	r2, #1
    21c2:	4629      	mov	r1, r5
    21c4:	4620      	mov	r0, r4
    21c6:	47b8      	blx	r7
		status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    21c8:	2235      	movs	r2, #53	; 0x35
    21ca:	4629      	mov	r1, r5
    21cc:	4620      	mov	r0, r4
    21ce:	47b0      	blx	r6
    21d0:	f88d 001d 	strb.w	r0, [sp, #29]
	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    21d4:	f010 0f02 	tst.w	r0, #2
    21d8:	d0ed      	beq.n	21b6 <s25fl116k_enable_xip+0x6a>
	}

	qspi_sync_serial_run_command(descr, &cmd);
    21da:	a901      	add	r1, sp, #4
    21dc:	4620      	mov	r0, r4
    21de:	4b04      	ldr	r3, [pc, #16]	; (21f0 <s25fl116k_enable_xip+0xa4>)
    21e0:	4798      	blx	r3
	return ERR_NONE;
}
    21e2:	2000      	movs	r0, #0
    21e4:	b009      	add	sp, #36	; 0x24
    21e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21e8:	00001de5 	.word	0x00001de5
    21ec:	00001ea9 	.word	0x00001ea9
    21f0:	0000117d 	.word	0x0000117d

000021f4 <s25fl116k_disable_xip>:

int32_t s25fl116k_disable_xip(const struct spi_nor_flash *const me)
{
    21f4:	b530      	push	{r4, r5, lr}
    21f6:	b087      	sub	sp, #28
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    21f8:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    21fa:	2400      	movs	r4, #0
    21fc:	9400      	str	r4, [sp, #0]
    21fe:	9401      	str	r4, [sp, #4]
    2200:	9402      	str	r4, [sp, #8]
    2202:	9403      	str	r4, [sp, #12]
    2204:	9404      	str	r4, [sp, #16]
    2206:	9405      	str	r4, [sp, #20]
    2208:	2310      	movs	r3, #16
    220a:	f88d 3000 	strb.w	r3, [sp]
    220e:	23ff      	movs	r3, #255	; 0xff
    2210:	f88d 3004 	strb.w	r3, [sp, #4]
	    .inst_frame.bits.width   = QSPI_INST1_ADDR1_DATA1,
	    .inst_frame.bits.inst_en = 1,
	    .instruction             = S25FL1_CONT_MODE_RESET,
	};

	qspi_sync_init(descr, QSPI);
    2214:	4906      	ldr	r1, [pc, #24]	; (2230 <s25fl116k_disable_xip+0x3c>)
    2216:	4628      	mov	r0, r5
    2218:	4b06      	ldr	r3, [pc, #24]	; (2234 <s25fl116k_disable_xip+0x40>)
    221a:	4798      	blx	r3
	qspi_sync_enable(descr);
    221c:	4628      	mov	r0, r5
    221e:	4b06      	ldr	r3, [pc, #24]	; (2238 <s25fl116k_disable_xip+0x44>)
    2220:	4798      	blx	r3

	qspi_sync_serial_run_command(descr, &cmd);
    2222:	4669      	mov	r1, sp
    2224:	4628      	mov	r0, r5
    2226:	4b05      	ldr	r3, [pc, #20]	; (223c <s25fl116k_disable_xip+0x48>)
    2228:	4798      	blx	r3
	return ERR_NONE;
}
    222a:	4620      	mov	r0, r4
    222c:	b007      	add	sp, #28
    222e:	bd30      	pop	{r4, r5, pc}
    2230:	42003400 	.word	0x42003400
    2234:	000010fd 	.word	0x000010fd
    2238:	00001155 	.word	0x00001155
    223c:	0000117d 	.word	0x0000117d

00002240 <s25fl116k_construct>:
{
    2240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2244:	b082      	sub	sp, #8
    2246:	4606      	mov	r6, r0
    2248:	4617      	mov	r7, r2
	spi_nor_flash_construct(me, io, &s25fl116k_interface);
    224a:	4a28      	ldr	r2, [pc, #160]	; (22ec <s25fl116k_construct+0xac>)
    224c:	4b28      	ldr	r3, [pc, #160]	; (22f0 <s25fl116k_construct+0xb0>)
    224e:	4798      	blx	r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    2250:	6834      	ldr	r4, [r6, #0]
	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    2252:	2205      	movs	r2, #5
    2254:	2100      	movs	r1, #0
    2256:	4620      	mov	r0, r4
    2258:	4d26      	ldr	r5, [pc, #152]	; (22f4 <s25fl116k_construct+0xb4>)
    225a:	47a8      	blx	r5
    225c:	f88d 0004 	strb.w	r0, [sp, #4]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    2260:	2235      	movs	r2, #53	; 0x35
    2262:	2100      	movs	r1, #0
    2264:	4620      	mov	r0, r4
    2266:	47a8      	blx	r5
    2268:	f88d 0005 	strb.w	r0, [sp, #5]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    226c:	2233      	movs	r2, #51	; 0x33
    226e:	2100      	movs	r1, #0
    2270:	4620      	mov	r0, r4
    2272:	47a8      	blx	r5
    2274:	f88d 0006 	strb.w	r0, [sp, #6]
	s25fl1->quad_mode = quad_mode;
    2278:	7237      	strb	r7, [r6, #8]
	if (quad_mode) {
    227a:	b9cf      	cbnz	r7, 22b0 <s25fl116k_construct+0x70>
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    227c:	f89d 0005 	ldrb.w	r0, [sp, #5]
    2280:	f010 0f02 	tst.w	r0, #2
    2284:	d02d      	beq.n	22e2 <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    2286:	2500      	movs	r5, #0
    2288:	f8df 806c 	ldr.w	r8, [pc, #108]	; 22f8 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    228c:	4f19      	ldr	r7, [pc, #100]	; (22f4 <s25fl116k_construct+0xb4>)
			status[1] &= (~S25FL1_STATUS_QUAD_ENABLE);
    228e:	f020 0002 	bic.w	r0, r0, #2
    2292:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    2296:	ab01      	add	r3, sp, #4
    2298:	2201      	movs	r2, #1
    229a:	4629      	mov	r1, r5
    229c:	4620      	mov	r0, r4
    229e:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    22a0:	2235      	movs	r2, #53	; 0x35
    22a2:	4629      	mov	r1, r5
    22a4:	4620      	mov	r0, r4
    22a6:	47b8      	blx	r7
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    22a8:	f010 0f02 	tst.w	r0, #2
    22ac:	d1ef      	bne.n	228e <s25fl116k_construct+0x4e>
    22ae:	e018      	b.n	22e2 <s25fl116k_construct+0xa2>
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    22b0:	f89d 0005 	ldrb.w	r0, [sp, #5]
    22b4:	f010 0f02 	tst.w	r0, #2
    22b8:	d113      	bne.n	22e2 <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    22ba:	2500      	movs	r5, #0
    22bc:	f8df 8038 	ldr.w	r8, [pc, #56]	; 22f8 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    22c0:	4f0c      	ldr	r7, [pc, #48]	; (22f4 <s25fl116k_construct+0xb4>)
			status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    22c2:	f040 0002 	orr.w	r0, r0, #2
    22c6:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    22ca:	ab01      	add	r3, sp, #4
    22cc:	2201      	movs	r2, #1
    22ce:	4629      	mov	r1, r5
    22d0:	4620      	mov	r0, r4
    22d2:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    22d4:	2235      	movs	r2, #53	; 0x35
    22d6:	4629      	mov	r1, r5
    22d8:	4620      	mov	r0, r4
    22da:	47b8      	blx	r7
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    22dc:	f010 0f02 	tst.w	r0, #2
    22e0:	d0ef      	beq.n	22c2 <s25fl116k_construct+0x82>
}
    22e2:	4630      	mov	r0, r6
    22e4:	b002      	add	sp, #8
    22e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22ea:	bf00      	nop
    22ec:	0000287c 	.word	0x0000287c
    22f0:	000022fd 	.word	0x000022fd
    22f4:	00001de5 	.word	0x00001de5
    22f8:	00001ea9 	.word	0x00001ea9

000022fc <spi_nor_flash_construct>:
#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
    22fc:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    22fe:	6042      	str	r2, [r0, #4]

	return me;
}
    2300:	4770      	bx	lr

00002302 <spi_nor_flash_read>:

int32_t spi_nor_flash_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    2302:	b510      	push	{r4, lr}
	return me->interface->read(me, buf, address, length);
    2304:	6844      	ldr	r4, [r0, #4]
    2306:	6824      	ldr	r4, [r4, #0]
    2308:	47a0      	blx	r4
}
    230a:	bd10      	pop	{r4, pc}

0000230c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    230c:	b510      	push	{r4, lr}

	qspi_sync_enable(&QUAD_SPI_0);
    230e:	4c06      	ldr	r4, [pc, #24]	; (2328 <spi_nor_flash_init+0x1c>)
    2310:	4620      	mov	r0, r4
    2312:	4b06      	ldr	r3, [pc, #24]	; (232c <spi_nor_flash_init+0x20>)
    2314:	4798      	blx	r3
	SPI_NOR_FLASH_0 = s25fl116k_construct(&SPI_NOR_FLASH_0_descr.parent, &QUAD_SPI_0, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    2316:	2200      	movs	r2, #0
    2318:	4621      	mov	r1, r4
    231a:	4805      	ldr	r0, [pc, #20]	; (2330 <spi_nor_flash_init+0x24>)
    231c:	4b05      	ldr	r3, [pc, #20]	; (2334 <spi_nor_flash_init+0x28>)
    231e:	4798      	blx	r3
    2320:	4b05      	ldr	r3, [pc, #20]	; (2338 <spi_nor_flash_init+0x2c>)
    2322:	6018      	str	r0, [r3, #0]
    2324:	bd10      	pop	{r4, pc}
    2326:	bf00      	nop
    2328:	200000e0 	.word	0x200000e0
    232c:	00001155 	.word	0x00001155
    2330:	20000094 	.word	0x20000094
    2334:	00002241 	.word	0x00002241
    2338:	20000130 	.word	0x20000130

0000233c <swd_clear_abort_reg>:
#include "atmel_start_pins.h"
#include <hal_delay.h>
#include <stdbool.h>

void swd_clear_abort_reg(void)
{
    233c:	b500      	push	{lr}
    233e:	b083      	sub	sp, #12
	uint8_t clear_err_buf[8] ={0x00, 0x81, 0xd3, 0x03, 0x00, 0x00, 0x00, 0x00}; // includes request byte, ignores ack response for byte alignment
    2340:	4a05      	ldr	r2, [pc, #20]	; (2358 <swd_clear_abort_reg+0x1c>)
    2342:	e892 0003 	ldmia.w	r2, {r0, r1}
    2346:	e88d 0003 	stmia.w	sp, {r0, r1}
	SWD_tx(clear_err_buf, 8);
    234a:	2108      	movs	r1, #8
    234c:	4668      	mov	r0, sp
    234e:	4b03      	ldr	r3, [pc, #12]	; (235c <swd_clear_abort_reg+0x20>)
    2350:	4798      	blx	r3
}
    2352:	b003      	add	sp, #12
    2354:	f85d fb04 	ldr.w	pc, [sp], #4
    2358:	00002890 	.word	0x00002890
    235c:	000009d5 	.word	0x000009d5

00002360 <jtag_to_swd>:

void jtag_to_swd(void) //JTAG-to-SWD switch with 16bit value, MSB = 0x79E7, LSB = 0xE79E, then min 5 clock cycles with swdio high 
{
    2360:	b530      	push	{r4, r5, lr}
    2362:	b087      	sub	sp, #28
	uint8_t swd_seq_jtag_to_swd[] = {
    2364:	ac01      	add	r4, sp, #4
    2366:	4d05      	ldr	r5, [pc, #20]	; (237c <jtag_to_swd+0x1c>)
    2368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    236a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    236c:	682b      	ldr	r3, [r5, #0]
    236e:	7023      	strb	r3, [r4, #0]
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		/* At least 2 idle (low) cycles */
		0x00,
	};
	
	SWD_tx(swd_seq_jtag_to_swd, 17);
    2370:	2111      	movs	r1, #17
    2372:	a801      	add	r0, sp, #4
    2374:	4b02      	ldr	r3, [pc, #8]	; (2380 <jtag_to_swd+0x20>)
    2376:	4798      	blx	r3
}
    2378:	b007      	add	sp, #28
    237a:	bd30      	pop	{r4, r5, pc}
    237c:	00002898 	.word	0x00002898
    2380:	000009d5 	.word	0x000009d5

00002384 <swd_idcode_throwaway>:

void swd_idcode_throwaway(void)
{
    2384:	b500      	push	{lr}
    2386:	b083      	sub	sp, #12
	/// SWD Sequence to Read Register 0 (IDCODE), pre-padded with 2 null bits bits to fill up 6 bytes. Byte-aligned, will not cause overrun error.
	/// A transaction must be followed by another transaction or at least 8 idle cycles to ensure that data is clocked through the AP.
	/// After clocking out the data parity bit, continue to clock the SW-DP serial interface until it has clocked out at least 8 more clock rising edges, before stopping the clock.
	uint8_t swd_read_idcode_prepadded[]   = { 0x00, 0x94, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 };  //  With null byte (8 cycles idle) before and after
    2388:	4a05      	ldr	r2, [pc, #20]	; (23a0 <swd_idcode_throwaway+0x1c>)
    238a:	e892 0003 	ldmia.w	r2, {r0, r1}
    238e:	e88d 0003 	stmia.w	sp, {r0, r1}
	SWD_tx(swd_read_idcode_prepadded, 8);
    2392:	2108      	movs	r1, #8
    2394:	4668      	mov	r0, sp
    2396:	4b03      	ldr	r3, [pc, #12]	; (23a4 <swd_idcode_throwaway+0x20>)
    2398:	4798      	blx	r3

}
    239a:	b003      	add	sp, #12
    239c:	f85d fb04 	ldr.w	pc, [sp], #4
    23a0:	000028ac 	.word	0x000028ac
    23a4:	000009d5 	.word	0x000009d5

000023a8 <swd_calc_parity>:

bool swd_calc_parity(uint32_t n)
{
	
	uint8_t count = 0; 
    while (n) 
    23a8:	4603      	mov	r3, r0
    23aa:	b148      	cbz	r0, 23c0 <swd_calc_parity+0x18>
    23ac:	2000      	movs	r0, #0
	{ 
        count += n & 1; 
    23ae:	f003 0201 	and.w	r2, r3, #1
    23b2:	4410      	add	r0, r2
    23b4:	b2c0      	uxtb	r0, r0
    while (n) 
    23b6:	085b      	lsrs	r3, r3, #1
    23b8:	d1f9      	bne.n	23ae <swd_calc_parity+0x6>
	}
	else
	{
		return false; //even 
	}
}
    23ba:	f000 0001 	and.w	r0, r0, #1
    23be:	4770      	bx	lr
	uint8_t count = 0; 
    23c0:	2000      	movs	r0, #0
    23c2:	e7fa      	b.n	23ba <swd_calc_parity+0x12>

000023c4 <swd_write>:

void swd_write(uint8_t cmd, uint32_t payload)
{
    23c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23c6:	b083      	sub	sp, #12
    23c8:	4606      	mov	r6, r0
    23ca:	460c      	mov	r4, r1
	//uint8_t clear_err_buf[8] ={0x00, 0x81, 0xd3, 0x03, 0x00, 0x00, 0x00, 0x00}; // for test
	//SWD_tx(clear_err_buf, 8);
	
	uint8_t payload_lsbs = (payload & 0x00000007); //take three lsbs of payload 
	uint8_t ack_plus_lsbs = (payload_lsbs<<5) + 0x13; //value needed to fake ack read 
    23cc:	014d      	lsls	r5, r1, #5
    23ce:	3513      	adds	r5, #19
    23d0:	b2ed      	uxtb	r5, r5
	
	bool parity = swd_calc_parity(payload); 
    23d2:	4608      	mov	r0, r1
    23d4:	4b11      	ldr	r3, [pc, #68]	; (241c <swd_write+0x58>)
    23d6:	4798      	blx	r3
	payload >>= 3; //shift payload over by 3 bytes to compensate for lsbs already used
	uint8_t data_buf[4];                              
    data_buf[0] = (payload >> 24) & 0xFF; //bit shift 32bit address into 8bit array 
    23d8:	0ee3      	lsrs	r3, r4, #27
    data_buf[1] = (payload >> 16) & 0xFF;
    23da:	f3c4 41c7 	ubfx	r1, r4, #19, #8
    data_buf[2] = (payload >> 8) & 0xFF;
    23de:	f3c4 27c7 	ubfx	r7, r4, #11, #8
    data_buf[3] = (payload) & 0xFF; // 3 msbs of this byte include parity bit and trailing bits
    23e2:	f3c4 04c7 	ubfx	r4, r4, #3, #8
	
	if(parity)	//NOTE: sixth bit of data_buf[0] holds parity
    23e6:	b9b0      	cbnz	r0, 2416 <swd_write+0x52>
	else
	{
		data_buf[0] &= 0b11011111; //even number of 1's, set parity to 0
	}
	
	uint8_t swd_write_buf[8] ={0x00, cmd, ack_plus_lsbs, data_buf[3], data_buf[2], data_buf[1], data_buf[0], 0x00}; //3 lsbs of payload become msbs of byte after cmd
    23e8:	2200      	movs	r2, #0
    23ea:	f88d 2000 	strb.w	r2, [sp]
    23ee:	f88d 6001 	strb.w	r6, [sp, #1]
    23f2:	f88d 5002 	strb.w	r5, [sp, #2]
    23f6:	f88d 4003 	strb.w	r4, [sp, #3]
    23fa:	f88d 7004 	strb.w	r7, [sp, #4]
    23fe:	f88d 1005 	strb.w	r1, [sp, #5]
    2402:	f88d 3006 	strb.w	r3, [sp, #6]
    2406:	f88d 2007 	strb.w	r2, [sp, #7]
	SWD_tx(swd_write_buf, 8);
    240a:	2108      	movs	r1, #8
    240c:	4668      	mov	r0, sp
    240e:	4b04      	ldr	r3, [pc, #16]	; (2420 <swd_write+0x5c>)
    2410:	4798      	blx	r3
}
    2412:	b003      	add	sp, #12
    2414:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_buf[0] |= 0b00100000; //odd number of 1's, set parity to 1
    2416:	f043 0320 	orr.w	r3, r3, #32
    241a:	e7e5      	b.n	23e8 <swd_write+0x24>
    241c:	000023a9 	.word	0x000023a9
    2420:	000009d5 	.word	0x000009d5

00002424 <swd_read>:
/*
NOTE: if sync lost (ex: no stop bit) target leaves line un-driven and waits for host to retry 
(after some clk cycles w/ line low), or signals a reset by not driving line 
*/
uint32_t swd_read(uint8_t cmd)
{
    2424:	b530      	push	{r4, r5, lr}
    2426:	b085      	sub	sp, #20
    2428:	ab04      	add	r3, sp, #16
    242a:	f803 0d09 	strb.w	r0, [r3, #-9]!
	uint32_t Wdata = 0;	
	uint8_t swd_rx_buf[5];
	
	//hri_sercomspi_write_CTRLA_CPHA_bit(SERCOM0, false); //no effect/not needed
		
	SWD_tx(&cmd, 1);	
    242e:	2101      	movs	r1, #1
    2430:	4618      	mov	r0, r3
    2432:	4b1e      	ldr	r3, [pc, #120]	; (24ac <swd_read+0x88>)
    2434:	4798      	blx	r3
	SWD_rx(swd_rx_buf, 5);
    2436:	2105      	movs	r1, #5
    2438:	a802      	add	r0, sp, #8
    243a:	4b1d      	ldr	r3, [pc, #116]	; (24b0 <swd_read+0x8c>)
    243c:	4798      	blx	r3
					
	if(swd_rx_buf[0] & ACK_MASK) // check ACK
    243e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2442:	f012 0f02 	tst.w	r2, #2
    2446:	d02e      	beq.n	24a6 <swd_read+0x82>
	{				
		swd_rx_buf[4] = (swd_rx_buf[4]  << 4 ) | (swd_rx_buf[3] >> 4); //first byte
    2448:	f89d 100b 	ldrb.w	r1, [sp, #11]
    244c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2450:	090c      	lsrs	r4, r1, #4
    2452:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    2456:	b2e4      	uxtb	r4, r4
    2458:	f88d 400c 	strb.w	r4, [sp, #12]
		swd_rx_buf[3] = (swd_rx_buf[3]  << 4 ) | (swd_rx_buf[2] >> 4); //second
    245c:	f89d 500a 	ldrb.w	r5, [sp, #10]
    2460:	092b      	lsrs	r3, r5, #4
    2462:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    2466:	b2db      	uxtb	r3, r3
    2468:	f88d 300b 	strb.w	r3, [sp, #11]
		swd_rx_buf[2] = (swd_rx_buf[2]  << 4 ) | (swd_rx_buf[1] >> 4); //third
    246c:	f89d 0009 	ldrb.w	r0, [sp, #9]
    2470:	0901      	lsrs	r1, r0, #4
    2472:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    2476:	b2c9      	uxtb	r1, r1
    2478:	f88d 100a 	strb.w	r1, [sp, #10]
		swd_rx_buf[1] = (swd_rx_buf[1]  << 4 ) | (swd_rx_buf[0] >> 4); //fourth
    247c:	0912      	lsrs	r2, r2, #4
    247e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    2482:	b2d2      	uxtb	r2, r2
    2484:	f88d 2009 	strb.w	r2, [sp, #9]
					
		Wdata = swd_rx_buf[4] << 24 | swd_rx_buf[3] << 16 | swd_rx_buf[2] << 8 | swd_rx_buf[1];
    2488:	041b      	lsls	r3, r3, #16
    248a:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
    248e:	4314      	orrs	r4, r2
    2490:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
		//else confirm even 1's				
	}
	//else ACK WAIT or FAULT was received
	
	//NOTE: this sequence must be repeated after every read to correct for bit alignment errors
	swd_clear_abort_reg(); //error flagged due to misaligned bit during previous read
    2494:	4b07      	ldr	r3, [pc, #28]	; (24b4 <swd_read+0x90>)
    2496:	4798      	blx	r3
	jtag_to_swd();
    2498:	4b07      	ldr	r3, [pc, #28]	; (24b8 <swd_read+0x94>)
    249a:	4798      	blx	r3
	swd_idcode_throwaway(); //fakes a byte-aligned read of idcode, as is required by the arm spec after reset
    249c:	4b07      	ldr	r3, [pc, #28]	; (24bc <swd_read+0x98>)
    249e:	4798      	blx	r3
	
	return Wdata; 
}
    24a0:	4620      	mov	r0, r4
    24a2:	b005      	add	sp, #20
    24a4:	bd30      	pop	{r4, r5, pc}
	uint32_t Wdata = 0;	
    24a6:	2400      	movs	r4, #0
    24a8:	e7f4      	b.n	2494 <swd_read+0x70>
    24aa:	bf00      	nop
    24ac:	000009d5 	.word	0x000009d5
    24b0:	00000a19 	.word	0x00000a19
    24b4:	0000233d 	.word	0x0000233d
    24b8:	00002361 	.word	0x00002361
    24bc:	00002385 	.word	0x00002385

000024c0 <i2c_send_error>:


void i2c_send_error(uint8_t err_id) //TODO: use gpio to signal i2c master to read
{
    24c0:	b500      	push	{lr}
    24c2:	b083      	sub	sp, #12
	uint8_t error_packet[3] = {start_byte, error_cmd, err_id};
    24c4:	23cc      	movs	r3, #204	; 0xcc
    24c6:	f88d 3004 	strb.w	r3, [sp, #4]
    24ca:	23ee      	movs	r3, #238	; 0xee
    24cc:	f88d 3005 	strb.w	r3, [sp, #5]
    24d0:	f88d 0006 	strb.w	r0, [sp, #6]
	I2C_write(error_packet, 3); //use gpio to signal master read (new boards)
    24d4:	2103      	movs	r1, #3
    24d6:	a801      	add	r0, sp, #4
    24d8:	4b02      	ldr	r3, [pc, #8]	; (24e4 <i2c_send_error+0x24>)
    24da:	4798      	blx	r3
}
    24dc:	b003      	add	sp, #12
    24de:	f85d fb04 	ldr.w	pc, [sp], #4
    24e2:	bf00      	nop
    24e4:	00000aa1 	.word	0x00000aa1

000024e8 <i2c_send_progress>:

void i2c_send_progress(uint8_t progress)
{
    24e8:	b500      	push	{lr}
    24ea:	b083      	sub	sp, #12
	uint8_t progress_packet[3] = {start_byte, progress_cmd, progress};
    24ec:	23cc      	movs	r3, #204	; 0xcc
    24ee:	f88d 3004 	strb.w	r3, [sp, #4]
    24f2:	23aa      	movs	r3, #170	; 0xaa
    24f4:	f88d 3005 	strb.w	r3, [sp, #5]
    24f8:	f88d 0006 	strb.w	r0, [sp, #6]
	I2C_write(progress_packet, 3);
    24fc:	2103      	movs	r1, #3
    24fe:	a801      	add	r0, sp, #4
    2500:	4b02      	ldr	r3, [pc, #8]	; (250c <i2c_send_progress+0x24>)
    2502:	4798      	blx	r3
}
    2504:	b003      	add	sp, #12
    2506:	f85d fb04 	ldr.w	pc, [sp], #4
    250a:	bf00      	nop
    250c:	00000aa1 	.word	0x00000aa1

00002510 <__libc_init_array>:
    2510:	b570      	push	{r4, r5, r6, lr}
    2512:	4e0d      	ldr	r6, [pc, #52]	; (2548 <__libc_init_array+0x38>)
    2514:	4c0d      	ldr	r4, [pc, #52]	; (254c <__libc_init_array+0x3c>)
    2516:	1ba4      	subs	r4, r4, r6
    2518:	10a4      	asrs	r4, r4, #2
    251a:	2500      	movs	r5, #0
    251c:	42a5      	cmp	r5, r4
    251e:	d109      	bne.n	2534 <__libc_init_array+0x24>
    2520:	4e0b      	ldr	r6, [pc, #44]	; (2550 <__libc_init_array+0x40>)
    2522:	4c0c      	ldr	r4, [pc, #48]	; (2554 <__libc_init_array+0x44>)
    2524:	f000 f9fa 	bl	291c <_init>
    2528:	1ba4      	subs	r4, r4, r6
    252a:	10a4      	asrs	r4, r4, #2
    252c:	2500      	movs	r5, #0
    252e:	42a5      	cmp	r5, r4
    2530:	d105      	bne.n	253e <__libc_init_array+0x2e>
    2532:	bd70      	pop	{r4, r5, r6, pc}
    2534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2538:	4798      	blx	r3
    253a:	3501      	adds	r5, #1
    253c:	e7ee      	b.n	251c <__libc_init_array+0xc>
    253e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2542:	4798      	blx	r3
    2544:	3501      	adds	r5, #1
    2546:	e7f2      	b.n	252e <__libc_init_array+0x1e>
    2548:	00002928 	.word	0x00002928
    254c:	00002928 	.word	0x00002928
    2550:	00002928 	.word	0x00002928
    2554:	0000292c 	.word	0x0000292c

00002558 <malloc>:
    2558:	4b02      	ldr	r3, [pc, #8]	; (2564 <malloc+0xc>)
    255a:	4601      	mov	r1, r0
    255c:	6818      	ldr	r0, [r3, #0]
    255e:	f000 b859 	b.w	2614 <_malloc_r>
    2562:	bf00      	nop
    2564:	20000000 	.word	0x20000000

00002568 <free>:
    2568:	4b02      	ldr	r3, [pc, #8]	; (2574 <free+0xc>)
    256a:	4601      	mov	r1, r0
    256c:	6818      	ldr	r0, [r3, #0]
    256e:	f000 b803 	b.w	2578 <_free_r>
    2572:	bf00      	nop
    2574:	20000000 	.word	0x20000000

00002578 <_free_r>:
    2578:	b538      	push	{r3, r4, r5, lr}
    257a:	4605      	mov	r5, r0
    257c:	2900      	cmp	r1, #0
    257e:	d045      	beq.n	260c <_free_r+0x94>
    2580:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2584:	1f0c      	subs	r4, r1, #4
    2586:	2b00      	cmp	r3, #0
    2588:	bfb8      	it	lt
    258a:	18e4      	addlt	r4, r4, r3
    258c:	f000 f8b0 	bl	26f0 <__malloc_lock>
    2590:	4a1f      	ldr	r2, [pc, #124]	; (2610 <_free_r+0x98>)
    2592:	6813      	ldr	r3, [r2, #0]
    2594:	4610      	mov	r0, r2
    2596:	b933      	cbnz	r3, 25a6 <_free_r+0x2e>
    2598:	6063      	str	r3, [r4, #4]
    259a:	6014      	str	r4, [r2, #0]
    259c:	4628      	mov	r0, r5
    259e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    25a2:	f000 b8a6 	b.w	26f2 <__malloc_unlock>
    25a6:	42a3      	cmp	r3, r4
    25a8:	d90c      	bls.n	25c4 <_free_r+0x4c>
    25aa:	6821      	ldr	r1, [r4, #0]
    25ac:	1862      	adds	r2, r4, r1
    25ae:	4293      	cmp	r3, r2
    25b0:	bf04      	itt	eq
    25b2:	681a      	ldreq	r2, [r3, #0]
    25b4:	685b      	ldreq	r3, [r3, #4]
    25b6:	6063      	str	r3, [r4, #4]
    25b8:	bf04      	itt	eq
    25ba:	1852      	addeq	r2, r2, r1
    25bc:	6022      	streq	r2, [r4, #0]
    25be:	6004      	str	r4, [r0, #0]
    25c0:	e7ec      	b.n	259c <_free_r+0x24>
    25c2:	4613      	mov	r3, r2
    25c4:	685a      	ldr	r2, [r3, #4]
    25c6:	b10a      	cbz	r2, 25cc <_free_r+0x54>
    25c8:	42a2      	cmp	r2, r4
    25ca:	d9fa      	bls.n	25c2 <_free_r+0x4a>
    25cc:	6819      	ldr	r1, [r3, #0]
    25ce:	1858      	adds	r0, r3, r1
    25d0:	42a0      	cmp	r0, r4
    25d2:	d10b      	bne.n	25ec <_free_r+0x74>
    25d4:	6820      	ldr	r0, [r4, #0]
    25d6:	4401      	add	r1, r0
    25d8:	1858      	adds	r0, r3, r1
    25da:	4282      	cmp	r2, r0
    25dc:	6019      	str	r1, [r3, #0]
    25de:	d1dd      	bne.n	259c <_free_r+0x24>
    25e0:	6810      	ldr	r0, [r2, #0]
    25e2:	6852      	ldr	r2, [r2, #4]
    25e4:	605a      	str	r2, [r3, #4]
    25e6:	4401      	add	r1, r0
    25e8:	6019      	str	r1, [r3, #0]
    25ea:	e7d7      	b.n	259c <_free_r+0x24>
    25ec:	d902      	bls.n	25f4 <_free_r+0x7c>
    25ee:	230c      	movs	r3, #12
    25f0:	602b      	str	r3, [r5, #0]
    25f2:	e7d3      	b.n	259c <_free_r+0x24>
    25f4:	6820      	ldr	r0, [r4, #0]
    25f6:	1821      	adds	r1, r4, r0
    25f8:	428a      	cmp	r2, r1
    25fa:	bf04      	itt	eq
    25fc:	6811      	ldreq	r1, [r2, #0]
    25fe:	6852      	ldreq	r2, [r2, #4]
    2600:	6062      	str	r2, [r4, #4]
    2602:	bf04      	itt	eq
    2604:	1809      	addeq	r1, r1, r0
    2606:	6021      	streq	r1, [r4, #0]
    2608:	605c      	str	r4, [r3, #4]
    260a:	e7c7      	b.n	259c <_free_r+0x24>
    260c:	bd38      	pop	{r3, r4, r5, pc}
    260e:	bf00      	nop
    2610:	200000a0 	.word	0x200000a0

00002614 <_malloc_r>:
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	1ccd      	adds	r5, r1, #3
    2618:	f025 0503 	bic.w	r5, r5, #3
    261c:	3508      	adds	r5, #8
    261e:	2d0c      	cmp	r5, #12
    2620:	bf38      	it	cc
    2622:	250c      	movcc	r5, #12
    2624:	2d00      	cmp	r5, #0
    2626:	4606      	mov	r6, r0
    2628:	db01      	blt.n	262e <_malloc_r+0x1a>
    262a:	42a9      	cmp	r1, r5
    262c:	d903      	bls.n	2636 <_malloc_r+0x22>
    262e:	230c      	movs	r3, #12
    2630:	6033      	str	r3, [r6, #0]
    2632:	2000      	movs	r0, #0
    2634:	bd70      	pop	{r4, r5, r6, pc}
    2636:	f000 f85b 	bl	26f0 <__malloc_lock>
    263a:	4a23      	ldr	r2, [pc, #140]	; (26c8 <_malloc_r+0xb4>)
    263c:	6814      	ldr	r4, [r2, #0]
    263e:	4621      	mov	r1, r4
    2640:	b991      	cbnz	r1, 2668 <_malloc_r+0x54>
    2642:	4c22      	ldr	r4, [pc, #136]	; (26cc <_malloc_r+0xb8>)
    2644:	6823      	ldr	r3, [r4, #0]
    2646:	b91b      	cbnz	r3, 2650 <_malloc_r+0x3c>
    2648:	4630      	mov	r0, r6
    264a:	f000 f841 	bl	26d0 <_sbrk_r>
    264e:	6020      	str	r0, [r4, #0]
    2650:	4629      	mov	r1, r5
    2652:	4630      	mov	r0, r6
    2654:	f000 f83c 	bl	26d0 <_sbrk_r>
    2658:	1c43      	adds	r3, r0, #1
    265a:	d126      	bne.n	26aa <_malloc_r+0x96>
    265c:	230c      	movs	r3, #12
    265e:	6033      	str	r3, [r6, #0]
    2660:	4630      	mov	r0, r6
    2662:	f000 f846 	bl	26f2 <__malloc_unlock>
    2666:	e7e4      	b.n	2632 <_malloc_r+0x1e>
    2668:	680b      	ldr	r3, [r1, #0]
    266a:	1b5b      	subs	r3, r3, r5
    266c:	d41a      	bmi.n	26a4 <_malloc_r+0x90>
    266e:	2b0b      	cmp	r3, #11
    2670:	d90f      	bls.n	2692 <_malloc_r+0x7e>
    2672:	600b      	str	r3, [r1, #0]
    2674:	50cd      	str	r5, [r1, r3]
    2676:	18cc      	adds	r4, r1, r3
    2678:	4630      	mov	r0, r6
    267a:	f000 f83a 	bl	26f2 <__malloc_unlock>
    267e:	f104 000b 	add.w	r0, r4, #11
    2682:	1d23      	adds	r3, r4, #4
    2684:	f020 0007 	bic.w	r0, r0, #7
    2688:	1ac3      	subs	r3, r0, r3
    268a:	d01b      	beq.n	26c4 <_malloc_r+0xb0>
    268c:	425a      	negs	r2, r3
    268e:	50e2      	str	r2, [r4, r3]
    2690:	bd70      	pop	{r4, r5, r6, pc}
    2692:	428c      	cmp	r4, r1
    2694:	bf0d      	iteet	eq
    2696:	6863      	ldreq	r3, [r4, #4]
    2698:	684b      	ldrne	r3, [r1, #4]
    269a:	6063      	strne	r3, [r4, #4]
    269c:	6013      	streq	r3, [r2, #0]
    269e:	bf18      	it	ne
    26a0:	460c      	movne	r4, r1
    26a2:	e7e9      	b.n	2678 <_malloc_r+0x64>
    26a4:	460c      	mov	r4, r1
    26a6:	6849      	ldr	r1, [r1, #4]
    26a8:	e7ca      	b.n	2640 <_malloc_r+0x2c>
    26aa:	1cc4      	adds	r4, r0, #3
    26ac:	f024 0403 	bic.w	r4, r4, #3
    26b0:	42a0      	cmp	r0, r4
    26b2:	d005      	beq.n	26c0 <_malloc_r+0xac>
    26b4:	1a21      	subs	r1, r4, r0
    26b6:	4630      	mov	r0, r6
    26b8:	f000 f80a 	bl	26d0 <_sbrk_r>
    26bc:	3001      	adds	r0, #1
    26be:	d0cd      	beq.n	265c <_malloc_r+0x48>
    26c0:	6025      	str	r5, [r4, #0]
    26c2:	e7d9      	b.n	2678 <_malloc_r+0x64>
    26c4:	bd70      	pop	{r4, r5, r6, pc}
    26c6:	bf00      	nop
    26c8:	200000a0 	.word	0x200000a0
    26cc:	200000a4 	.word	0x200000a4

000026d0 <_sbrk_r>:
    26d0:	b538      	push	{r3, r4, r5, lr}
    26d2:	4c06      	ldr	r4, [pc, #24]	; (26ec <_sbrk_r+0x1c>)
    26d4:	2300      	movs	r3, #0
    26d6:	4605      	mov	r5, r0
    26d8:	4608      	mov	r0, r1
    26da:	6023      	str	r3, [r4, #0]
    26dc:	f7fe fed2 	bl	1484 <_sbrk>
    26e0:	1c43      	adds	r3, r0, #1
    26e2:	d102      	bne.n	26ea <_sbrk_r+0x1a>
    26e4:	6823      	ldr	r3, [r4, #0]
    26e6:	b103      	cbz	r3, 26ea <_sbrk_r+0x1a>
    26e8:	602b      	str	r3, [r5, #0]
    26ea:	bd38      	pop	{r3, r4, r5, pc}
    26ec:	20000134 	.word	0x20000134

000026f0 <__malloc_lock>:
    26f0:	4770      	bx	lr

000026f2 <__malloc_unlock>:
    26f2:	4770      	bx	lr
    26f4:	682f2e2e 	.word	0x682f2e2e
    26f8:	692f6c61 	.word	0x692f6c61
    26fc:	756c636e 	.word	0x756c636e
    2700:	682f6564 	.word	0x682f6564
    2704:	775f6c61 	.word	0x775f6c61
    2708:	682e7464 	.word	0x682e7464
    270c:	00000000 	.word	0x00000000
    2710:	682f2e2e 	.word	0x682f2e2e
    2714:	732f6c61 	.word	0x732f6c61
    2718:	682f6372 	.word	0x682f6372
    271c:	665f6c61 	.word	0x665f6c61
    2720:	6873616c 	.word	0x6873616c
    2724:	0000632e 	.word	0x0000632e
    2728:	682f2e2e 	.word	0x682f2e2e
    272c:	732f6c61 	.word	0x732f6c61
    2730:	682f6372 	.word	0x682f6372
    2734:	695f6c61 	.word	0x695f6c61
    2738:	735f6332 	.word	0x735f6332
    273c:	6e79735f 	.word	0x6e79735f
    2740:	00632e63 	.word	0x00632e63
    2744:	682f2e2e 	.word	0x682f2e2e
    2748:	732f6c61 	.word	0x732f6c61
    274c:	682f6372 	.word	0x682f6372
    2750:	695f6c61 	.word	0x695f6c61
    2754:	00632e6f 	.word	0x00632e6f
    2758:	682f2e2e 	.word	0x682f2e2e
    275c:	732f6c61 	.word	0x732f6c61
    2760:	682f6372 	.word	0x682f6372
    2764:	715f6c61 	.word	0x715f6c61
    2768:	5f697073 	.word	0x5f697073
    276c:	636e7973 	.word	0x636e7973
    2770:	0000632e 	.word	0x0000632e
    2774:	682f2e2e 	.word	0x682f2e2e
    2778:	732f6c61 	.word	0x732f6c61
    277c:	682f6372 	.word	0x682f6372
    2780:	735f6c61 	.word	0x735f6c61
    2784:	6d5f6970 	.word	0x6d5f6970
    2788:	6e79735f 	.word	0x6e79735f
    278c:	00632e63 	.word	0x00632e63
    2790:	682f2e2e 	.word	0x682f2e2e
    2794:	732f6c61 	.word	0x732f6c61
    2798:	682f6372 	.word	0x682f6372
    279c:	745f6c61 	.word	0x745f6c61
    27a0:	72656d69 	.word	0x72656d69
    27a4:	0000632e 	.word	0x0000632e
    27a8:	682f2e2e 	.word	0x682f2e2e
    27ac:	752f6c61 	.word	0x752f6c61
    27b0:	736c6974 	.word	0x736c6974
    27b4:	6372732f 	.word	0x6372732f
    27b8:	6974752f 	.word	0x6974752f
    27bc:	6c5f736c 	.word	0x6c5f736c
    27c0:	2e747369 	.word	0x2e747369
    27c4:	00000063 	.word	0x00000063
    27c8:	682f2e2e 	.word	0x682f2e2e
    27cc:	6e2f6c70 	.word	0x6e2f6c70
    27d0:	74636d76 	.word	0x74636d76
    27d4:	682f6c72 	.word	0x682f6c72
    27d8:	6e5f6c70 	.word	0x6e5f6c70
    27dc:	74636d76 	.word	0x74636d76
    27e0:	632e6c72 	.word	0x632e6c72
    27e4:	00000000 	.word	0x00000000
    27e8:	682f2e2e 	.word	0x682f2e2e
    27ec:	712f6c70 	.word	0x712f6c70
    27f0:	2f697073 	.word	0x2f697073
    27f4:	5f6c7068 	.word	0x5f6c7068
    27f8:	69707371 	.word	0x69707371
    27fc:	0000632e 	.word	0x0000632e
    2800:	682f2e2e 	.word	0x682f2e2e
    2804:	722f6c70 	.word	0x722f6c70
    2808:	682f6374 	.word	0x682f6374
    280c:	725f6c70 	.word	0x725f6c70
    2810:	632e6374 	.word	0x632e6374
    2814:	00000000 	.word	0x00000000
    2818:	40003000 	.word	0x40003000
    281c:	40003400 	.word	0x40003400
    2820:	41012000 	.word	0x41012000
    2824:	41014000 	.word	0x41014000
    2828:	43000000 	.word	0x43000000
    282c:	43000400 	.word	0x43000400

00002830 <_i2cms>:
	...
    2848:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2858:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    2868:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    2878:	00000000                                ....

0000287c <s25fl116k_interface>:
    287c:	00001f05 00001f9d 00002035 0000214d     ........5 ..M!..
    288c:	000021f5 03d38100 00000000 ffffffff     .!..............
    289c:	9effffff ffffffe7 ffffffff 00000000     ................
    28ac:	00029400 00000000 ffffffff 00ffffff     ................

000028bc <__sf_fake_stderr>:
	...

000028dc <__sf_fake_stdin>:
	...

000028fc <__sf_fake_stdout>:
	...

0000291c <_init>:
    291c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    291e:	bf00      	nop
    2920:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2922:	bc08      	pop	{r3}
    2924:	469e      	mov	lr, r3
    2926:	4770      	bx	lr

00002928 <__init_array_start>:
    2928:	00000289 	.word	0x00000289

0000292c <_fini>:
    292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    292e:	bf00      	nop
    2930:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2932:	bc08      	pop	{r3}
    2934:	469e      	mov	lr, r3
    2936:	4770      	bx	lr

00002938 <__fini_array_start>:
    2938:	00000265 	.word	0x00000265
