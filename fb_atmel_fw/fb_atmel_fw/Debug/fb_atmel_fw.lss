
fb_atmel_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cb0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011cb0  2**0
                  CONTENTS
  2 .bkupram      00000000  47000000  47000000  00011cb0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00011cb0  2**0
                  CONTENTS
  4 .bss          000000a8  20000000  20000000  00020000  2**2
                  ALLOC
  5 .stack        0000c000  200000a8  200000a8  00020000  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00011cb0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00011cde  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002aa81  00000000  00000000  00011d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003ee8  00000000  00000000  0003c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f5e5  00000000  00000000  000406a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000cb0  00000000  00000000  0004fc85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000010b8  00000000  00000000  00050935  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002b3f6  00000000  00000000  000519ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017e06  00000000  00000000  0007cde3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e4a48  00000000  00000000  00094be9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002140  00000000  00000000  00179634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 c0 00 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	b1 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 89 0e 00 00 9d 0e 00 00     ................
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	01 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     190:	00 00 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d0:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
	...
     20c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     21c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     22c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     23c:	dd 02 00 00 00 00 00 00 dd 02 00 00 dd 02 00 00     ................
     24c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     25c:	dd 02 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000000 	.word	0x20000000
     280:	00000000 	.word	0x00000000
     284:	00001cb0 	.word	0x00001cb0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00001cb0 	.word	0x00001cb0
     2c4:	20000004 	.word	0x20000004
     2c8:	00001cb0 	.word	0x00001cb0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
#include "driver_init.h"
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000761 	.word	0x00000761

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	00001cb0 	.word	0x00001cb0
     35c:	20000000 	.word	0x20000000
     360:	200000a8 	.word	0x200000a8
     364:	20000000 	.word	0x20000000
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00001aad 	.word	0x00001aad
     374:	000014d9 	.word	0x000014d9

00000378 <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     378:	4a02      	ldr	r2, [pc, #8]	; (384 <FLASH_0_CLOCK_init+0xc>)
     37a:	6913      	ldr	r3, [r2, #16]
     37c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     380:	6113      	str	r3, [r2, #16]
     382:	4770      	bx	lr
     384:	40000800 	.word	0x40000800

00000388 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     388:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     38a:	4b03      	ldr	r3, [pc, #12]	; (398 <FLASH_0_init+0x10>)
     38c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     38e:	4903      	ldr	r1, [pc, #12]	; (39c <FLASH_0_init+0x14>)
     390:	4803      	ldr	r0, [pc, #12]	; (3a0 <FLASH_0_init+0x18>)
     392:	4b04      	ldr	r3, [pc, #16]	; (3a4 <FLASH_0_init+0x1c>)
     394:	4798      	blx	r3
     396:	bd08      	pop	{r3, pc}
     398:	00000379 	.word	0x00000379
     39c:	41004000 	.word	0x41004000
     3a0:	20000030 	.word	0x20000030
     3a4:	00000841 	.word	0x00000841

000003a8 <QUAD_SPI_0_PORT_init>:
}

void QUAD_SPI_0_PORT_init(void)
{
     3a8:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3aa:	4b5a      	ldr	r3, [pc, #360]	; (514 <QUAD_SPI_0_PORT_init+0x16c>)
     3ac:	f44f 6500 	mov.w	r5, #2048	; 0x800
     3b0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3b4:	4a58      	ldr	r2, [pc, #352]	; (518 <QUAD_SPI_0_PORT_init+0x170>)
     3b6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3ba:	4858      	ldr	r0, [pc, #352]	; (51c <QUAD_SPI_0_PORT_init+0x174>)
     3bc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3c0:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     3c4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3c8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3cc:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3d4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d8:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3dc:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3e0:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     3e4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3e8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3ec:	f44f 7280 	mov.w	r2, #256	; 0x100
     3f0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3f2:	494b      	ldr	r1, [pc, #300]	; (520 <QUAD_SPI_0_PORT_init+0x178>)
     3f4:	6299      	str	r1, [r3, #40]	; 0x28
     3f6:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     3fa:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     3fc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3fe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     402:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     406:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     40a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     40e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     412:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     416:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     41a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     41e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     422:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     42a:	f44f 7200 	mov.w	r2, #512	; 0x200
     42e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     430:	f501 7180 	add.w	r1, r1, #256	; 0x100
     434:	6299      	str	r1, [r3, #40]	; 0x28
     436:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     438:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     43a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     43e:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     442:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     446:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     44a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     44e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     452:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     456:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     45a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     45e:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     466:	f44f 6180 	mov.w	r1, #1024	; 0x400
     46a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46c:	4a2d      	ldr	r2, [pc, #180]	; (524 <QUAD_SPI_0_PORT_init+0x17c>)
     46e:	629a      	str	r2, [r3, #40]	; 0x28
     470:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     472:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     474:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     478:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     47c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     480:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     488:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     48c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     490:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     494:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     498:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     49c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4a0:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a2:	4a21      	ldr	r2, [pc, #132]	; (528 <QUAD_SPI_0_PORT_init+0x180>)
     4a4:	629a      	str	r2, [r3, #40]	; 0x28
     4a6:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a8:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4aa:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     4ae:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4b2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b6:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4ce:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4d6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4da:	4a14      	ldr	r2, [pc, #80]	; (52c <QUAD_SPI_0_PORT_init+0x184>)
     4dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     4e0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4e4:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     4e8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4ec:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4f0:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     4f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4f8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4fc:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     500:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     504:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     508:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     510:	bc30      	pop	{r4, r5}
     512:	4770      	bx	lr
     514:	41008000 	.word	0x41008000
     518:	40020800 	.word	0x40020800
     51c:	c0020000 	.word	0xc0020000
     520:	40000100 	.word	0x40000100
     524:	40000400 	.word	0x40000400
     528:	40000800 	.word	0x40000800
     52c:	40020400 	.word	0x40020400

00000530 <QUAD_SPI_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     530:	4b06      	ldr	r3, [pc, #24]	; (54c <QUAD_SPI_0_CLOCK_init+0x1c>)
     532:	691a      	ldr	r2, [r3, #16]
     534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     538:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     53a:	691a      	ldr	r2, [r3, #16]
     53c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     540:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     542:	69da      	ldr	r2, [r3, #28]
     544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     548:	61da      	str	r2, [r3, #28]
     54a:	4770      	bx	lr
     54c:	40000800 	.word	0x40000800

00000550 <QUAD_SPI_0_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QUAD_SPI_0_init(void)
{
     550:	b508      	push	{r3, lr}
	QUAD_SPI_0_CLOCK_init();
     552:	4b04      	ldr	r3, [pc, #16]	; (564 <QUAD_SPI_0_init+0x14>)
     554:	4798      	blx	r3
	qspi_sync_init(&QUAD_SPI_0, QSPI);
     556:	4904      	ldr	r1, [pc, #16]	; (568 <QUAD_SPI_0_init+0x18>)
     558:	4804      	ldr	r0, [pc, #16]	; (56c <QUAD_SPI_0_init+0x1c>)
     55a:	4b05      	ldr	r3, [pc, #20]	; (570 <QUAD_SPI_0_init+0x20>)
     55c:	4798      	blx	r3
	QUAD_SPI_0_PORT_init();
     55e:	4b05      	ldr	r3, [pc, #20]	; (574 <QUAD_SPI_0_init+0x24>)
     560:	4798      	blx	r3
     562:	bd08      	pop	{r3, pc}
     564:	00000531 	.word	0x00000531
     568:	42003400 	.word	0x42003400
     56c:	20000068 	.word	0x20000068
     570:	00000a6d 	.word	0x00000a6d
     574:	000003a9 	.word	0x000003a9

00000578 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     578:	4b28      	ldr	r3, [pc, #160]	; (61c <SPI_0_PORT_init+0xa4>)
     57a:	2210      	movs	r2, #16
     57c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     57e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     580:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     584:	629a      	str	r2, [r3, #40]	; 0x28
     586:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     58a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     594:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5a4:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5ac:	2220      	movs	r2, #32
     5ae:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5b0:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5b2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5b6:	629a      	str	r2, [r3, #40]	; 0x28
     5b8:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5ba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     5be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5c2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ca:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5ce:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5d2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5da:	2240      	movs	r2, #64	; 0x40
     5dc:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5e2:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     5e6:	629a      	str	r2, [r3, #40]	; 0x28
     5e8:	4a0d      	ldr	r2, [pc, #52]	; (620 <SPI_0_PORT_init+0xa8>)
     5ea:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5ec:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     5f0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5f8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     5fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     600:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     608:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     60c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     610:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     614:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     618:	4770      	bx	lr
     61a:	bf00      	nop
     61c:	41008000 	.word	0x41008000
     620:	c0020000 	.word	0xc0020000

00000624 <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     624:	4b06      	ldr	r3, [pc, #24]	; (640 <SPI_0_CLOCK_init+0x1c>)
     626:	2240      	movs	r2, #64	; 0x40
     628:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     62c:	2243      	movs	r2, #67	; 0x43
     62e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     632:	4a04      	ldr	r2, [pc, #16]	; (644 <SPI_0_CLOCK_init+0x20>)
     634:	6953      	ldr	r3, [r2, #20]
     636:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     63a:	6153      	str	r3, [r2, #20]
     63c:	4770      	bx	lr
     63e:	bf00      	nop
     640:	40001c00 	.word	0x40001c00
     644:	40000800 	.word	0x40000800

00000648 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     648:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     64a:	4b04      	ldr	r3, [pc, #16]	; (65c <SPI_0_init+0x14>)
     64c:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     64e:	4904      	ldr	r1, [pc, #16]	; (660 <SPI_0_init+0x18>)
     650:	4804      	ldr	r0, [pc, #16]	; (664 <SPI_0_init+0x1c>)
     652:	4b05      	ldr	r3, [pc, #20]	; (668 <SPI_0_init+0x20>)
     654:	4798      	blx	r3
	SPI_0_PORT_init();
     656:	4b05      	ldr	r3, [pc, #20]	; (66c <SPI_0_init+0x24>)
     658:	4798      	blx	r3
     65a:	bd08      	pop	{r3, pc}
     65c:	00000625 	.word	0x00000625
     660:	40003000 	.word	0x40003000
     664:	20000050 	.word	0x20000050
     668:	00000af5 	.word	0x00000af5
     66c:	00000579 	.word	0x00000579

00000670 <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     670:	4b16      	ldr	r3, [pc, #88]	; (6cc <I2C_0_PORT_init+0x5c>)
     672:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     676:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     67a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     67e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     682:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     686:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     68a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     68e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     692:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     696:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     69a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     69e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     6a2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6aa:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6ba:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6be:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6c2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     6ca:	4770      	bx	lr
     6cc:	41008000 	.word	0x41008000

000006d0 <I2C_0_CLOCK_init>:
     6d0:	4b06      	ldr	r3, [pc, #24]	; (6ec <I2C_0_CLOCK_init+0x1c>)
     6d2:	2240      	movs	r2, #64	; 0x40
     6d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     6d8:	2243      	movs	r2, #67	; 0x43
     6da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     6de:	4a04      	ldr	r2, [pc, #16]	; (6f0 <I2C_0_CLOCK_init+0x20>)
     6e0:	6993      	ldr	r3, [r2, #24]
     6e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     6e6:	6193      	str	r3, [r2, #24]
     6e8:	4770      	bx	lr
     6ea:	bf00      	nop
     6ec:	40001c00 	.word	0x40001c00
     6f0:	40000800 	.word	0x40000800

000006f4 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     6f4:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     6f6:	4b04      	ldr	r3, [pc, #16]	; (708 <I2C_0_init+0x14>)
     6f8:	4798      	blx	r3
	i2c_s_sync_init(&I2C_0, SERCOM3);
     6fa:	4904      	ldr	r1, [pc, #16]	; (70c <I2C_0_init+0x18>)
     6fc:	4804      	ldr	r0, [pc, #16]	; (710 <I2C_0_init+0x1c>)
     6fe:	4b05      	ldr	r3, [pc, #20]	; (714 <I2C_0_init+0x20>)
     700:	4798      	blx	r3
	I2C_0_PORT_init();
     702:	4b05      	ldr	r3, [pc, #20]	; (718 <I2C_0_init+0x24>)
     704:	4798      	blx	r3
     706:	bd08      	pop	{r3, pc}
     708:	000006d1 	.word	0x000006d1
     70c:	41014000 	.word	0x41014000
     710:	2000006c 	.word	0x2000006c
     714:	0000095d 	.word	0x0000095d
     718:	00000671 	.word	0x00000671

0000071c <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     71c:	4a02      	ldr	r2, [pc, #8]	; (728 <WDT_0_CLOCK_init+0xc>)
     71e:	6953      	ldr	r3, [r2, #20]
     720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     724:	6153      	str	r3, [r2, #20]
     726:	4770      	bx	lr
     728:	40000800 	.word	0x40000800

0000072c <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     72c:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     72e:	4b06      	ldr	r3, [pc, #24]	; (748 <WDT_0_init+0x1c>)
     730:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     732:	2248      	movs	r2, #72	; 0x48
     734:	4905      	ldr	r1, [pc, #20]	; (74c <WDT_0_init+0x20>)
     736:	2001      	movs	r0, #1
     738:	4b05      	ldr	r3, [pc, #20]	; (750 <WDT_0_init+0x24>)
     73a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     73c:	4805      	ldr	r0, [pc, #20]	; (754 <WDT_0_init+0x28>)
     73e:	4b06      	ldr	r3, [pc, #24]	; (758 <WDT_0_init+0x2c>)
     740:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     742:	4b06      	ldr	r3, [pc, #24]	; (75c <WDT_0_init+0x30>)
     744:	4798      	blx	r3
     746:	bd08      	pop	{r3, pc}
     748:	0000071d 	.word	0x0000071d
     74c:	00001af4 	.word	0x00001af4
     750:	00000d11 	.word	0x00000d11
     754:	2000004c 	.word	0x2000004c
     758:	40002000 	.word	0x40002000
     75c:	0000146d 	.word	0x0000146d

00000760 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     760:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     762:	4b0b      	ldr	r3, [pc, #44]	; (790 <system_init+0x30>)
     764:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     766:	4b0b      	ldr	r3, [pc, #44]	; (794 <system_init+0x34>)
     768:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     76a:	4a0b      	ldr	r2, [pc, #44]	; (798 <system_init+0x38>)
     76c:	6953      	ldr	r3, [r2, #20]
     76e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     772:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     774:	4b09      	ldr	r3, [pc, #36]	; (79c <system_init+0x3c>)
     776:	4798      	blx	r3
     778:	4602      	mov	r2, r0
     77a:	4909      	ldr	r1, [pc, #36]	; (7a0 <system_init+0x40>)
     77c:	4809      	ldr	r0, [pc, #36]	; (7a4 <system_init+0x44>)
     77e:	4b0a      	ldr	r3, [pc, #40]	; (7a8 <system_init+0x48>)
     780:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     782:	4b0a      	ldr	r3, [pc, #40]	; (7ac <system_init+0x4c>)
     784:	4798      	blx	r3

	I2C_0_init();
     786:	4b0a      	ldr	r3, [pc, #40]	; (7b0 <system_init+0x50>)
     788:	4798      	blx	r3

	WDT_0_init();
     78a:	4b0a      	ldr	r3, [pc, #40]	; (7b4 <system_init+0x54>)
     78c:	4798      	blx	r3
     78e:	bd08      	pop	{r3, pc}
     790:	00000d79 	.word	0x00000d79
     794:	00000389 	.word	0x00000389
     798:	40000800 	.word	0x40000800
     79c:	000010ad 	.word	0x000010ad
     7a0:	40002400 	.word	0x40002400
     7a4:	20000078 	.word	0x20000078
     7a8:	00000cd5 	.word	0x00000cd5
     7ac:	00000649 	.word	0x00000649
     7b0:	000006f5 	.word	0x000006f5
     7b4:	0000072d 	.word	0x0000072d

000007b8 <nor_flash_qspi_init>:
}


void nor_flash_qspi_init(void)
{
     7b8:	b508      	push	{r3, lr}
	QUAD_SPI_0_init();
     7ba:	4b02      	ldr	r3, [pc, #8]	; (7c4 <nor_flash_qspi_init+0xc>)
     7bc:	4798      	blx	r3
	spi_nor_flash_init();
     7be:	4b02      	ldr	r3, [pc, #8]	; (7c8 <nor_flash_qspi_init+0x10>)
     7c0:	4798      	blx	r3
     7c2:	bd08      	pop	{r3, pc}
     7c4:	00000551 	.word	0x00000551
     7c8:	00001a7d 	.word	0x00001a7d

000007cc <I2C_read>:
	spi_m_sync_enable(&SPI_0);
	io_write(io, example_SPI_0, 12);
}

void I2C_read(uint8_t* buffer, uint16_t length)
{
     7cc:	b570      	push	{r4, r5, r6, lr}
     7ce:	b082      	sub	sp, #8
     7d0:	4605      	mov	r5, r0
     7d2:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     7d4:	4c09      	ldr	r4, [pc, #36]	; (7fc <I2C_read+0x30>)
     7d6:	a901      	add	r1, sp, #4
     7d8:	4620      	mov	r0, r4
     7da:	4b09      	ldr	r3, [pc, #36]	; (800 <I2C_read+0x34>)
     7dc:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     7de:	2110      	movs	r1, #16
     7e0:	4620      	mov	r0, r4
     7e2:	4b08      	ldr	r3, [pc, #32]	; (804 <I2C_read+0x38>)
     7e4:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     7e6:	4620      	mov	r0, r4
     7e8:	4b07      	ldr	r3, [pc, #28]	; (808 <I2C_read+0x3c>)
     7ea:	4798      	blx	r3

	io_read(io, buffer, length);
     7ec:	4632      	mov	r2, r6
     7ee:	4629      	mov	r1, r5
     7f0:	9801      	ldr	r0, [sp, #4]
     7f2:	4b06      	ldr	r3, [pc, #24]	; (80c <I2C_read+0x40>)
     7f4:	4798      	blx	r3
}
     7f6:	b002      	add	sp, #8
     7f8:	bd70      	pop	{r4, r5, r6, pc}
     7fa:	bf00      	nop
     7fc:	2000006c 	.word	0x2000006c
     800:	00000a11 	.word	0x00000a11
     804:	000009a5 	.word	0x000009a5
     808:	000009e9 	.word	0x000009e9
     80c:	00000a3d 	.word	0x00000a3d

00000810 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     810:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     814:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     816:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     818:	f3bf 8f5f 	dmb	sy
     81c:	4770      	bx	lr

0000081e <atomic_leave_critical>:
     81e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     822:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     824:	f383 8810 	msr	PRIMASK, r3
     828:	4770      	bx	lr

0000082a <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     82a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     82c:	6943      	ldr	r3, [r0, #20]
     82e:	b103      	cbz	r3, 832 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     830:	4798      	blx	r3
     832:	bd08      	pop	{r3, pc}

00000834 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     834:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     836:	6983      	ldr	r3, [r0, #24]
     838:	b103      	cbz	r3, 83c <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     83a:	4798      	blx	r3
     83c:	bd08      	pop	{r3, pc}
	...

00000840 <flash_init>:
{
     840:	b538      	push	{r3, r4, r5, lr}
     842:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     844:	4604      	mov	r4, r0
     846:	b190      	cbz	r0, 86e <flash_init+0x2e>
     848:	1c08      	adds	r0, r1, #0
     84a:	bf18      	it	ne
     84c:	2001      	movne	r0, #1
     84e:	2238      	movs	r2, #56	; 0x38
     850:	4908      	ldr	r1, [pc, #32]	; (874 <flash_init+0x34>)
     852:	4b09      	ldr	r3, [pc, #36]	; (878 <flash_init+0x38>)
     854:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     856:	4629      	mov	r1, r5
     858:	4620      	mov	r0, r4
     85a:	4b08      	ldr	r3, [pc, #32]	; (87c <flash_init+0x3c>)
     85c:	4798      	blx	r3
	if (rc) {
     85e:	4603      	mov	r3, r0
     860:	b918      	cbnz	r0, 86a <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     862:	4a07      	ldr	r2, [pc, #28]	; (880 <flash_init+0x40>)
     864:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     866:	4a07      	ldr	r2, [pc, #28]	; (884 <flash_init+0x44>)
     868:	6062      	str	r2, [r4, #4]
}
     86a:	4618      	mov	r0, r3
     86c:	bd38      	pop	{r3, r4, r5, pc}
     86e:	2000      	movs	r0, #0
     870:	e7ed      	b.n	84e <flash_init+0xe>
     872:	bf00      	nop
     874:	00001b10 	.word	0x00001b10
     878:	00000d11 	.word	0x00000d11
     87c:	00000e11 	.word	0x00000e11
     880:	0000082b 	.word	0x0000082b
     884:	00000835 	.word	0x00000835

00000888 <i2c_s_sync_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_sync_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     88c:	460f      	mov	r7, r1
     88e:	4690      	mov	r8, r2
	uint16_t                      offset = 0;
	struct i2c_s_sync_descriptor *descr  = CONTAINER_OF(io, struct i2c_s_sync_descriptor, io);

	ASSERT(io && buf && length);
     890:	4604      	mov	r4, r0
     892:	b320      	cbz	r0, 8de <i2c_s_sync_write+0x56>
     894:	b329      	cbz	r1, 8e2 <i2c_s_sync_write+0x5a>
     896:	1c10      	adds	r0, r2, #0
     898:	bf18      	it	ne
     89a:	2001      	movne	r0, #1
     89c:	22b6      	movs	r2, #182	; 0xb6
     89e:	4912      	ldr	r1, [pc, #72]	; (8e8 <i2c_s_sync_write+0x60>)
     8a0:	4b12      	ldr	r3, [pc, #72]	; (8ec <i2c_s_sync_write+0x64>)
     8a2:	4798      	blx	r3

	while (!_i2c_s_sync_is_byte_sent(&descr->device))
     8a4:	3c04      	subs	r4, #4
     8a6:	4d12      	ldr	r5, [pc, #72]	; (8f0 <i2c_s_sync_write+0x68>)
     8a8:	4620      	mov	r0, r4
     8aa:	47a8      	blx	r5
     8ac:	2800      	cmp	r0, #0
     8ae:	d0fb      	beq.n	8a8 <i2c_s_sync_write+0x20>
     8b0:	3f01      	subs	r7, #1
     8b2:	2600      	movs	r6, #0
		;
	do {
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     8b4:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8f8 <i2c_s_sync_write+0x70>
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     8b8:	4d0d      	ldr	r5, [pc, #52]	; (8f0 <i2c_s_sync_write+0x68>)
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     8ba:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     8be:	4620      	mov	r0, r4
     8c0:	47c8      	blx	r9
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     8c2:	4620      	mov	r0, r4
     8c4:	47a8      	blx	r5
     8c6:	2800      	cmp	r0, #0
     8c8:	d0fb      	beq.n	8c2 <i2c_s_sync_write+0x3a>
			;
	} while (++offset < length);
     8ca:	3601      	adds	r6, #1
     8cc:	b2b6      	uxth	r6, r6
     8ce:	45b0      	cmp	r8, r6
     8d0:	d8f3      	bhi.n	8ba <i2c_s_sync_write+0x32>

	/* To ensure no more data needs to be sent */
	_i2c_s_sync_clear_data_ready_flag(&descr->device);
     8d2:	4620      	mov	r0, r4
     8d4:	4b07      	ldr	r3, [pc, #28]	; (8f4 <i2c_s_sync_write+0x6c>)
     8d6:	4798      	blx	r3

	return (int32_t)offset;
}
     8d8:	4630      	mov	r0, r6
     8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     8de:	2000      	movs	r0, #0
     8e0:	e7dc      	b.n	89c <i2c_s_sync_write+0x14>
     8e2:	2000      	movs	r0, #0
     8e4:	e7da      	b.n	89c <i2c_s_sync_write+0x14>
     8e6:	bf00      	nop
     8e8:	00001b28 	.word	0x00001b28
     8ec:	00000d11 	.word	0x00000d11
     8f0:	0000127f 	.word	0x0000127f
     8f4:	00001293 	.word	0x00001293
     8f8:	00001271 	.word	0x00001271

000008fc <i2c_s_sync_read>:
{
     8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     900:	460f      	mov	r7, r1
     902:	4690      	mov	r8, r2
	ASSERT(io && buf && length);
     904:	4604      	mov	r4, r0
     906:	b1e0      	cbz	r0, 942 <i2c_s_sync_read+0x46>
     908:	b1e9      	cbz	r1, 946 <i2c_s_sync_read+0x4a>
     90a:	1c10      	adds	r0, r2, #0
     90c:	bf18      	it	ne
     90e:	2001      	movne	r0, #1
     910:	229c      	movs	r2, #156	; 0x9c
     912:	490e      	ldr	r1, [pc, #56]	; (94c <i2c_s_sync_read+0x50>)
     914:	4b0e      	ldr	r3, [pc, #56]	; (950 <i2c_s_sync_read+0x54>)
     916:	4798      	blx	r3
     918:	3f01      	subs	r7, #1
	uint16_t                      offset = 0;
     91a:	2600      	movs	r6, #0
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     91c:	3c04      	subs	r4, #4
     91e:	4d0d      	ldr	r5, [pc, #52]	; (954 <i2c_s_sync_read+0x58>)
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     920:	f8df 9034 	ldr.w	r9, [pc, #52]	; 958 <i2c_s_sync_read+0x5c>
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     924:	4620      	mov	r0, r4
     926:	47a8      	blx	r5
     928:	2800      	cmp	r0, #0
     92a:	d0fb      	beq.n	924 <i2c_s_sync_read+0x28>
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     92c:	4620      	mov	r0, r4
     92e:	47c8      	blx	r9
     930:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     934:	3601      	adds	r6, #1
     936:	b2b6      	uxth	r6, r6
     938:	45b0      	cmp	r8, r6
     93a:	d8f3      	bhi.n	924 <i2c_s_sync_read+0x28>
}
     93c:	4630      	mov	r0, r6
     93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     942:	2000      	movs	r0, #0
     944:	e7e4      	b.n	910 <i2c_s_sync_read+0x14>
     946:	2000      	movs	r0, #0
     948:	e7e2      	b.n	910 <i2c_s_sync_read+0x14>
     94a:	bf00      	nop
     94c:	00001b28 	.word	0x00001b28
     950:	00000d11 	.word	0x00000d11
     954:	00001289 	.word	0x00001289
     958:	00001277 	.word	0x00001277

0000095c <i2c_s_sync_init>:
{
     95c:	b538      	push	{r3, r4, r5, lr}
     95e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     960:	4604      	mov	r4, r0
     962:	b190      	cbz	r0, 98a <i2c_s_sync_init+0x2e>
     964:	1c08      	adds	r0, r1, #0
     966:	bf18      	it	ne
     968:	2001      	movne	r0, #1
     96a:	2235      	movs	r2, #53	; 0x35
     96c:	4908      	ldr	r1, [pc, #32]	; (990 <i2c_s_sync_init+0x34>)
     96e:	4b09      	ldr	r3, [pc, #36]	; (994 <i2c_s_sync_init+0x38>)
     970:	4798      	blx	r3
	init_status = _i2c_s_sync_init(&descr->device, hw);
     972:	4629      	mov	r1, r5
     974:	4620      	mov	r0, r4
     976:	4b08      	ldr	r3, [pc, #32]	; (998 <i2c_s_sync_init+0x3c>)
     978:	4798      	blx	r3
	if (init_status) {
     97a:	4603      	mov	r3, r0
     97c:	b918      	cbnz	r0, 986 <i2c_s_sync_init+0x2a>
	descr->io.read  = i2c_s_sync_read;
     97e:	4a07      	ldr	r2, [pc, #28]	; (99c <i2c_s_sync_init+0x40>)
     980:	60a2      	str	r2, [r4, #8]
	descr->io.write = i2c_s_sync_write;
     982:	4a07      	ldr	r2, [pc, #28]	; (9a0 <i2c_s_sync_init+0x44>)
     984:	6062      	str	r2, [r4, #4]
}
     986:	4618      	mov	r0, r3
     988:	bd38      	pop	{r3, r4, r5, pc}
     98a:	2000      	movs	r0, #0
     98c:	e7ed      	b.n	96a <i2c_s_sync_init+0xe>
     98e:	bf00      	nop
     990:	00001b28 	.word	0x00001b28
     994:	00000d11 	.word	0x00000d11
     998:	0000120d 	.word	0x0000120d
     99c:	000008fd 	.word	0x000008fd
     9a0:	00000889 	.word	0x00000889

000009a4 <i2c_s_sync_set_addr>:
{
     9a4:	b538      	push	{r3, r4, r5, lr}
     9a6:	460d      	mov	r5, r1
	ASSERT(descr);
     9a8:	4604      	mov	r4, r0
     9aa:	2251      	movs	r2, #81	; 0x51
     9ac:	490a      	ldr	r1, [pc, #40]	; (9d8 <i2c_s_sync_set_addr+0x34>)
     9ae:	3000      	adds	r0, #0
     9b0:	bf18      	it	ne
     9b2:	2001      	movne	r0, #1
     9b4:	4b09      	ldr	r3, [pc, #36]	; (9dc <i2c_s_sync_set_addr+0x38>)
     9b6:	4798      	blx	r3
	if (!_i2c_s_sync_is_10bit_addressing_on(&descr->device)) {
     9b8:	4620      	mov	r0, r4
     9ba:	4b09      	ldr	r3, [pc, #36]	; (9e0 <i2c_s_sync_set_addr+0x3c>)
     9bc:	4798      	blx	r3
     9be:	b120      	cbz	r0, 9ca <i2c_s_sync_set_addr+0x26>
	return _i2c_s_sync_set_address(&descr->device, address);
     9c0:	4629      	mov	r1, r5
     9c2:	4620      	mov	r0, r4
     9c4:	4b07      	ldr	r3, [pc, #28]	; (9e4 <i2c_s_sync_set_addr+0x40>)
     9c6:	4798      	blx	r3
}
     9c8:	bd38      	pop	{r3, r4, r5, pc}
		return _i2c_s_sync_set_address(&descr->device, address & 0x7F);
     9ca:	f005 017f 	and.w	r1, r5, #127	; 0x7f
     9ce:	4620      	mov	r0, r4
     9d0:	4b04      	ldr	r3, [pc, #16]	; (9e4 <i2c_s_sync_set_addr+0x40>)
     9d2:	4798      	blx	r3
     9d4:	bd38      	pop	{r3, r4, r5, pc}
     9d6:	bf00      	nop
     9d8:	00001b28 	.word	0x00001b28
     9dc:	00000d11 	.word	0x00000d11
     9e0:	00001257 	.word	0x00001257
     9e4:	00001261 	.word	0x00001261

000009e8 <i2c_s_sync_enable>:
{
     9e8:	b510      	push	{r4, lr}
	ASSERT(descr);
     9ea:	4604      	mov	r4, r0
     9ec:	225f      	movs	r2, #95	; 0x5f
     9ee:	4905      	ldr	r1, [pc, #20]	; (a04 <i2c_s_sync_enable+0x1c>)
     9f0:	3000      	adds	r0, #0
     9f2:	bf18      	it	ne
     9f4:	2001      	movne	r0, #1
     9f6:	4b04      	ldr	r3, [pc, #16]	; (a08 <i2c_s_sync_enable+0x20>)
     9f8:	4798      	blx	r3
	return _i2c_s_sync_enable(&descr->device);
     9fa:	4620      	mov	r0, r4
     9fc:	4b03      	ldr	r3, [pc, #12]	; (a0c <i2c_s_sync_enable+0x24>)
     9fe:	4798      	blx	r3
}
     a00:	bd10      	pop	{r4, pc}
     a02:	bf00      	nop
     a04:	00001b28 	.word	0x00001b28
     a08:	00000d11 	.word	0x00000d11
     a0c:	00001241 	.word	0x00001241

00000a10 <i2c_s_sync_get_io_descriptor>:
{
     a10:	b538      	push	{r3, r4, r5, lr}
     a12:	460d      	mov	r5, r1
	ASSERT(descr && io);
     a14:	4604      	mov	r4, r0
     a16:	b150      	cbz	r0, a2e <i2c_s_sync_get_io_descriptor+0x1e>
     a18:	1c08      	adds	r0, r1, #0
     a1a:	bf18      	it	ne
     a1c:	2001      	movne	r0, #1
     a1e:	2273      	movs	r2, #115	; 0x73
     a20:	4904      	ldr	r1, [pc, #16]	; (a34 <i2c_s_sync_get_io_descriptor+0x24>)
     a22:	4b05      	ldr	r3, [pc, #20]	; (a38 <i2c_s_sync_get_io_descriptor+0x28>)
     a24:	4798      	blx	r3
	*io = &descr->io;
     a26:	3404      	adds	r4, #4
     a28:	602c      	str	r4, [r5, #0]
}
     a2a:	2000      	movs	r0, #0
     a2c:	bd38      	pop	{r3, r4, r5, pc}
     a2e:	2000      	movs	r0, #0
     a30:	e7f5      	b.n	a1e <i2c_s_sync_get_io_descriptor+0xe>
     a32:	bf00      	nop
     a34:	00001b28 	.word	0x00001b28
     a38:	00000d11 	.word	0x00000d11

00000a3c <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     a3c:	b570      	push	{r4, r5, r6, lr}
     a3e:	460d      	mov	r5, r1
     a40:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     a42:	4604      	mov	r4, r0
     a44:	b160      	cbz	r0, a60 <io_read+0x24>
     a46:	1c08      	adds	r0, r1, #0
     a48:	bf18      	it	ne
     a4a:	2001      	movne	r0, #1
     a4c:	223d      	movs	r2, #61	; 0x3d
     a4e:	4905      	ldr	r1, [pc, #20]	; (a64 <io_read+0x28>)
     a50:	4b05      	ldr	r3, [pc, #20]	; (a68 <io_read+0x2c>)
     a52:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     a54:	6863      	ldr	r3, [r4, #4]
     a56:	4632      	mov	r2, r6
     a58:	4629      	mov	r1, r5
     a5a:	4620      	mov	r0, r4
     a5c:	4798      	blx	r3
}
     a5e:	bd70      	pop	{r4, r5, r6, pc}
     a60:	2000      	movs	r0, #0
     a62:	e7f3      	b.n	a4c <io_read+0x10>
     a64:	00001b44 	.word	0x00001b44
     a68:	00000d11 	.word	0x00000d11

00000a6c <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
     a6c:	b538      	push	{r3, r4, r5, lr}
     a6e:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
     a70:	4605      	mov	r5, r0
     a72:	b158      	cbz	r0, a8c <qspi_sync_init+0x20>
     a74:	1c08      	adds	r0, r1, #0
     a76:	bf18      	it	ne
     a78:	2001      	movne	r0, #1
     a7a:	2231      	movs	r2, #49	; 0x31
     a7c:	4904      	ldr	r1, [pc, #16]	; (a90 <qspi_sync_init+0x24>)
     a7e:	4b05      	ldr	r3, [pc, #20]	; (a94 <qspi_sync_init+0x28>)
     a80:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
     a82:	4621      	mov	r1, r4
     a84:	4628      	mov	r0, r5
     a86:	4b04      	ldr	r3, [pc, #16]	; (a98 <qspi_sync_init+0x2c>)
     a88:	4798      	blx	r3
}
     a8a:	bd38      	pop	{r3, r4, r5, pc}
     a8c:	2000      	movs	r0, #0
     a8e:	e7f4      	b.n	a7a <qspi_sync_init+0xe>
     a90:	00001b58 	.word	0x00001b58
     a94:	00000d11 	.word	0x00000d11
     a98:	00000ee5 	.word	0x00000ee5

00000a9c <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
     a9c:	b510      	push	{r4, lr}
	ASSERT(qspi);
     a9e:	4604      	mov	r4, r0
     aa0:	223f      	movs	r2, #63	; 0x3f
     aa2:	4905      	ldr	r1, [pc, #20]	; (ab8 <qspi_sync_enable+0x1c>)
     aa4:	3000      	adds	r0, #0
     aa6:	bf18      	it	ne
     aa8:	2001      	movne	r0, #1
     aaa:	4b04      	ldr	r3, [pc, #16]	; (abc <qspi_sync_enable+0x20>)
     aac:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
     aae:	4620      	mov	r0, r4
     ab0:	4b03      	ldr	r3, [pc, #12]	; (ac0 <qspi_sync_enable+0x24>)
     ab2:	4798      	blx	r3
}
     ab4:	bd10      	pop	{r4, pc}
     ab6:	bf00      	nop
     ab8:	00001b58 	.word	0x00001b58
     abc:	00000d11 	.word	0x00000d11
     ac0:	00000f1d 	.word	0x00000f1d

00000ac4 <qspi_sync_serial_run_command>:

	return _qspi_sync_disable(&qspi->dev);
}

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
     ac4:	b538      	push	{r3, r4, r5, lr}
     ac6:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
     ac8:	4605      	mov	r5, r0
     aca:	b158      	cbz	r0, ae4 <qspi_sync_serial_run_command+0x20>
     acc:	1c08      	adds	r0, r1, #0
     ace:	bf18      	it	ne
     ad0:	2001      	movne	r0, #1
     ad2:	224d      	movs	r2, #77	; 0x4d
     ad4:	4904      	ldr	r1, [pc, #16]	; (ae8 <qspi_sync_serial_run_command+0x24>)
     ad6:	4b05      	ldr	r3, [pc, #20]	; (aec <qspi_sync_serial_run_command+0x28>)
     ad8:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
     ada:	4621      	mov	r1, r4
     adc:	4628      	mov	r0, r5
     ade:	4b04      	ldr	r3, [pc, #16]	; (af0 <qspi_sync_serial_run_command+0x2c>)
     ae0:	4798      	blx	r3
}
     ae2:	bd38      	pop	{r3, r4, r5, pc}
     ae4:	2000      	movs	r0, #0
     ae6:	e7f4      	b.n	ad2 <qspi_sync_serial_run_command+0xe>
     ae8:	00001b58 	.word	0x00001b58
     aec:	00000d11 	.word	0x00000d11
     af0:	00000f29 	.word	0x00000f29

00000af4 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     af4:	b538      	push	{r3, r4, r5, lr}
     af6:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     af8:	4604      	mov	r4, r0
     afa:	b1b8      	cbz	r0, b2c <spi_m_sync_init+0x38>
     afc:	1c08      	adds	r0, r1, #0
     afe:	bf18      	it	ne
     b00:	2001      	movne	r0, #1
     b02:	2240      	movs	r2, #64	; 0x40
     b04:	490a      	ldr	r1, [pc, #40]	; (b30 <spi_m_sync_init+0x3c>)
     b06:	4b0b      	ldr	r3, [pc, #44]	; (b34 <spi_m_sync_init+0x40>)
     b08:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     b0a:	4620      	mov	r0, r4
     b0c:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     b10:	4629      	mov	r1, r5
     b12:	4b09      	ldr	r3, [pc, #36]	; (b38 <spi_m_sync_init+0x44>)
     b14:	4798      	blx	r3

	if (rc < 0) {
     b16:	2800      	cmp	r0, #0
     b18:	db07      	blt.n	b2a <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     b1e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     b20:	4b06      	ldr	r3, [pc, #24]	; (b3c <spi_m_sync_init+0x48>)
     b22:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     b24:	4b06      	ldr	r3, [pc, #24]	; (b40 <spi_m_sync_init+0x4c>)
     b26:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     b28:	2000      	movs	r0, #0
}
     b2a:	bd38      	pop	{r3, r4, r5, pc}
     b2c:	2000      	movs	r0, #0
     b2e:	e7e8      	b.n	b02 <spi_m_sync_init+0xe>
     b30:	00001b74 	.word	0x00001b74
     b34:	00000d11 	.word	0x00000d11
     b38:	0000129d 	.word	0x0000129d
     b3c:	00000bc1 	.word	0x00000bc1
     b40:	00000b85 	.word	0x00000b85

00000b44 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     b44:	b530      	push	{r4, r5, lr}
     b46:	b085      	sub	sp, #20
     b48:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     b4a:	4605      	mov	r5, r0
     b4c:	b190      	cbz	r0, b74 <spi_m_sync_transfer+0x30>
     b4e:	1c08      	adds	r0, r1, #0
     b50:	bf18      	it	ne
     b52:	2001      	movne	r0, #1
     b54:	22b3      	movs	r2, #179	; 0xb3
     b56:	4908      	ldr	r1, [pc, #32]	; (b78 <spi_m_sync_transfer+0x34>)
     b58:	4b08      	ldr	r3, [pc, #32]	; (b7c <spi_m_sync_transfer+0x38>)
     b5a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     b5c:	6823      	ldr	r3, [r4, #0]
     b5e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     b60:	6863      	ldr	r3, [r4, #4]
     b62:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     b64:	68a3      	ldr	r3, [r4, #8]
     b66:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     b68:	a901      	add	r1, sp, #4
     b6a:	1d28      	adds	r0, r5, #4
     b6c:	4b04      	ldr	r3, [pc, #16]	; (b80 <spi_m_sync_transfer+0x3c>)
     b6e:	4798      	blx	r3
}
     b70:	b005      	add	sp, #20
     b72:	bd30      	pop	{r4, r5, pc}
     b74:	2000      	movs	r0, #0
     b76:	e7ed      	b.n	b54 <spi_m_sync_transfer+0x10>
     b78:	00001b74 	.word	0x00001b74
     b7c:	00000d11 	.word	0x00000d11
     b80:	0000138d 	.word	0x0000138d

00000b84 <_spi_m_sync_io_write>:
{
     b84:	b570      	push	{r4, r5, r6, lr}
     b86:	b084      	sub	sp, #16
     b88:	460e      	mov	r6, r1
     b8a:	4615      	mov	r5, r2
	ASSERT(io);
     b8c:	4604      	mov	r4, r0
     b8e:	22a3      	movs	r2, #163	; 0xa3
     b90:	4908      	ldr	r1, [pc, #32]	; (bb4 <_spi_m_sync_io_write+0x30>)
     b92:	3000      	adds	r0, #0
     b94:	bf18      	it	ne
     b96:	2001      	movne	r0, #1
     b98:	4b07      	ldr	r3, [pc, #28]	; (bb8 <_spi_m_sync_io_write+0x34>)
     b9a:	4798      	blx	r3
	xfer.rxbuf = 0;
     b9c:	2300      	movs	r3, #0
     b9e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     ba0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     ba2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     ba4:	a901      	add	r1, sp, #4
     ba6:	f1a4 000c 	sub.w	r0, r4, #12
     baa:	4b04      	ldr	r3, [pc, #16]	; (bbc <_spi_m_sync_io_write+0x38>)
     bac:	4798      	blx	r3
}
     bae:	b004      	add	sp, #16
     bb0:	bd70      	pop	{r4, r5, r6, pc}
     bb2:	bf00      	nop
     bb4:	00001b74 	.word	0x00001b74
     bb8:	00000d11 	.word	0x00000d11
     bbc:	00000b45 	.word	0x00000b45

00000bc0 <_spi_m_sync_io_read>:
{
     bc0:	b570      	push	{r4, r5, r6, lr}
     bc2:	b084      	sub	sp, #16
     bc4:	460e      	mov	r6, r1
     bc6:	4615      	mov	r5, r2
	ASSERT(io);
     bc8:	4604      	mov	r4, r0
     bca:	2287      	movs	r2, #135	; 0x87
     bcc:	4908      	ldr	r1, [pc, #32]	; (bf0 <_spi_m_sync_io_read+0x30>)
     bce:	3000      	adds	r0, #0
     bd0:	bf18      	it	ne
     bd2:	2001      	movne	r0, #1
     bd4:	4b07      	ldr	r3, [pc, #28]	; (bf4 <_spi_m_sync_io_read+0x34>)
     bd6:	4798      	blx	r3
	xfer.rxbuf = buf;
     bd8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     bda:	2300      	movs	r3, #0
     bdc:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     bde:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     be0:	a901      	add	r1, sp, #4
     be2:	f1a4 000c 	sub.w	r0, r4, #12
     be6:	4b04      	ldr	r3, [pc, #16]	; (bf8 <_spi_m_sync_io_read+0x38>)
     be8:	4798      	blx	r3
}
     bea:	b004      	add	sp, #16
     bec:	bd70      	pop	{r4, r5, r6, pc}
     bee:	bf00      	nop
     bf0:	00001b74 	.word	0x00001b74
     bf4:	00000d11 	.word	0x00000d11
     bf8:	00000b45 	.word	0x00000b45

00000bfc <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bfe:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     c00:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     c02:	b12f      	cbz	r7, c10 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     c04:	688d      	ldr	r5, [r1, #8]
     c06:	463c      	mov	r4, r7
     c08:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c0a:	f1c2 0e01 	rsb	lr, r2, #1
     c0e:	e00b      	b.n	c28 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     c10:	4b0e      	ldr	r3, [pc, #56]	; (c4c <timer_add_timer_task+0x50>)
     c12:	4798      	blx	r3
		return;
     c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     c16:	4473      	add	r3, lr
     c18:	68a0      	ldr	r0, [r4, #8]
     c1a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     c1c:	42ab      	cmp	r3, r5
     c1e:	d20a      	bcs.n	c36 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     c20:	6823      	ldr	r3, [r4, #0]
     c22:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     c24:	b153      	cbz	r3, c3c <timer_add_timer_task+0x40>
     c26:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     c28:	6863      	ldr	r3, [r4, #4]
     c2a:	4293      	cmp	r3, r2
     c2c:	d8f3      	bhi.n	c16 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     c2e:	68a0      	ldr	r0, [r4, #8]
     c30:	4403      	add	r3, r0
     c32:	1a9b      	subs	r3, r3, r2
     c34:	e7f2      	b.n	c1c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     c36:	42a7      	cmp	r7, r4
     c38:	d004      	beq.n	c44 <timer_add_timer_task+0x48>
     c3a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     c3c:	4620      	mov	r0, r4
     c3e:	4b04      	ldr	r3, [pc, #16]	; (c50 <timer_add_timer_task+0x54>)
     c40:	4798      	blx	r3
     c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     c44:	4660      	mov	r0, ip
     c46:	4b01      	ldr	r3, [pc, #4]	; (c4c <timer_add_timer_task+0x50>)
     c48:	4798      	blx	r3
     c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c4c:	00000d39 	.word	0x00000d39
     c50:	00000d65 	.word	0x00000d65

00000c54 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     c58:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     c5a:	6907      	ldr	r7, [r0, #16]
     c5c:	3701      	adds	r7, #1
     c5e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     c60:	7e03      	ldrb	r3, [r0, #24]
     c62:	f013 0f01 	tst.w	r3, #1
     c66:	d113      	bne.n	c90 <timer_process_counted+0x3c>
     c68:	7e03      	ldrb	r3, [r0, #24]
     c6a:	f013 0f02 	tst.w	r3, #2
     c6e:	d10f      	bne.n	c90 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     c70:	b354      	cbz	r4, cc8 <timer_process_counted+0x74>
     c72:	6863      	ldr	r3, [r4, #4]
     c74:	1afb      	subs	r3, r7, r3
     c76:	68a2      	ldr	r2, [r4, #8]
     c78:	4293      	cmp	r3, r2
     c7a:	d307      	bcc.n	c8c <timer_process_counted+0x38>
     c7c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     c7e:	f100 0814 	add.w	r8, r0, #20
     c82:	f8df 9048 	ldr.w	r9, [pc, #72]	; ccc <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     c86:	f8df a048 	ldr.w	sl, [pc, #72]	; cd0 <timer_process_counted+0x7c>
     c8a:	e012      	b.n	cb2 <timer_process_counted+0x5e>
     c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     c90:	7e03      	ldrb	r3, [r0, #24]
     c92:	f043 0302 	orr.w	r3, r3, #2
     c96:	7603      	strb	r3, [r0, #24]
		return;
     c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c9c:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     c9e:	68e3      	ldr	r3, [r4, #12]
     ca0:	4620      	mov	r0, r4
     ca2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     ca4:	b185      	cbz	r5, cc8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     ca6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     ca8:	686b      	ldr	r3, [r5, #4]
     caa:	1afb      	subs	r3, r7, r3
     cac:	68aa      	ldr	r2, [r5, #8]
     cae:	4293      	cmp	r3, r2
     cb0:	d30a      	bcc.n	cc8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     cb2:	4640      	mov	r0, r8
     cb4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     cb6:	7c23      	ldrb	r3, [r4, #16]
     cb8:	2b01      	cmp	r3, #1
     cba:	d1ef      	bne.n	c9c <timer_process_counted+0x48>
			tmp->time_label = time;
     cbc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     cbe:	463a      	mov	r2, r7
     cc0:	4621      	mov	r1, r4
     cc2:	4640      	mov	r0, r8
     cc4:	47d0      	blx	sl
     cc6:	e7e9      	b.n	c9c <timer_process_counted+0x48>
     cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ccc:	00000d6d 	.word	0x00000d6d
     cd0:	00000bfd 	.word	0x00000bfd

00000cd4 <timer_init>:
{
     cd4:	b538      	push	{r3, r4, r5, lr}
     cd6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     cd8:	4604      	mov	r4, r0
     cda:	b178      	cbz	r0, cfc <timer_init+0x28>
     cdc:	1c08      	adds	r0, r1, #0
     cde:	bf18      	it	ne
     ce0:	2001      	movne	r0, #1
     ce2:	223b      	movs	r2, #59	; 0x3b
     ce4:	4906      	ldr	r1, [pc, #24]	; (d00 <timer_init+0x2c>)
     ce6:	4b07      	ldr	r3, [pc, #28]	; (d04 <timer_init+0x30>)
     ce8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     cea:	4629      	mov	r1, r5
     cec:	4620      	mov	r0, r4
     cee:	4b06      	ldr	r3, [pc, #24]	; (d08 <timer_init+0x34>)
     cf0:	4798      	blx	r3
	descr->time                           = 0;
     cf2:	2000      	movs	r0, #0
     cf4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     cf6:	4b05      	ldr	r3, [pc, #20]	; (d0c <timer_init+0x38>)
     cf8:	6023      	str	r3, [r4, #0]
}
     cfa:	bd38      	pop	{r3, r4, r5, pc}
     cfc:	2000      	movs	r0, #0
     cfe:	e7f0      	b.n	ce2 <timer_init+0xe>
     d00:	00001b90 	.word	0x00001b90
     d04:	00000d11 	.word	0x00000d11
     d08:	00001045 	.word	0x00001045
     d0c:	00000c55 	.word	0x00000c55

00000d10 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     d10:	b900      	cbnz	r0, d14 <assert+0x4>
		__asm("BKPT #0");
     d12:	be00      	bkpt	0x0000
     d14:	4770      	bx	lr

00000d16 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     d16:	6803      	ldr	r3, [r0, #0]
     d18:	b14b      	cbz	r3, d2e <is_list_element+0x18>
		if (it == element) {
     d1a:	428b      	cmp	r3, r1
     d1c:	d009      	beq.n	d32 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     d1e:	681b      	ldr	r3, [r3, #0]
     d20:	b11b      	cbz	r3, d2a <is_list_element+0x14>
		if (it == element) {
     d22:	4299      	cmp	r1, r3
     d24:	d1fb      	bne.n	d1e <is_list_element+0x8>
			return true;
     d26:	2001      	movs	r0, #1
		}
	}

	return false;
}
     d28:	4770      	bx	lr
	return false;
     d2a:	2000      	movs	r0, #0
     d2c:	4770      	bx	lr
     d2e:	2000      	movs	r0, #0
     d30:	4770      	bx	lr
			return true;
     d32:	2001      	movs	r0, #1
     d34:	4770      	bx	lr
	...

00000d38 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     d38:	b538      	push	{r3, r4, r5, lr}
     d3a:	4604      	mov	r4, r0
     d3c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     d3e:	4b06      	ldr	r3, [pc, #24]	; (d58 <list_insert_as_head+0x20>)
     d40:	4798      	blx	r3
     d42:	f080 0001 	eor.w	r0, r0, #1
     d46:	2239      	movs	r2, #57	; 0x39
     d48:	4904      	ldr	r1, [pc, #16]	; (d5c <list_insert_as_head+0x24>)
     d4a:	b2c0      	uxtb	r0, r0
     d4c:	4b04      	ldr	r3, [pc, #16]	; (d60 <list_insert_as_head+0x28>)
     d4e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     d50:	6823      	ldr	r3, [r4, #0]
     d52:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     d54:	6025      	str	r5, [r4, #0]
     d56:	bd38      	pop	{r3, r4, r5, pc}
     d58:	00000d17 	.word	0x00000d17
     d5c:	00001ba8 	.word	0x00001ba8
     d60:	00000d11 	.word	0x00000d11

00000d64 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     d64:	6803      	ldr	r3, [r0, #0]
     d66:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     d68:	6001      	str	r1, [r0, #0]
     d6a:	4770      	bx	lr

00000d6c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     d6c:	6803      	ldr	r3, [r0, #0]
     d6e:	b10b      	cbz	r3, d74 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     d70:	681a      	ldr	r2, [r3, #0]
     d72:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     d74:	4618      	mov	r0, r3
     d76:	4770      	bx	lr

00000d78 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     d78:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     d7a:	4a08      	ldr	r2, [pc, #32]	; (d9c <_init_chip+0x24>)
     d7c:	8813      	ldrh	r3, [r2, #0]
     d7e:	b29b      	uxth	r3, r3
     d80:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     d82:	4b07      	ldr	r3, [pc, #28]	; (da0 <_init_chip+0x28>)
     d84:	4798      	blx	r3
	_oscctrl_init_sources();
     d86:	4b07      	ldr	r3, [pc, #28]	; (da4 <_init_chip+0x2c>)
     d88:	4798      	blx	r3
	_mclk_init();
     d8a:	4b07      	ldr	r3, [pc, #28]	; (da8 <_init_chip+0x30>)
     d8c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     d8e:	4b07      	ldr	r3, [pc, #28]	; (dac <_init_chip+0x34>)
     d90:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     d92:	f640 70ff 	movw	r0, #4095	; 0xfff
     d96:	4b06      	ldr	r3, [pc, #24]	; (db0 <_init_chip+0x38>)
     d98:	4798      	blx	r3
     d9a:	bd08      	pop	{r3, pc}
     d9c:	41004000 	.word	0x41004000
     da0:	00000eb1 	.word	0x00000eb1
     da4:	00000ec5 	.word	0x00000ec5
     da8:	00000dd9 	.word	0x00000dd9
     dac:	00000ee1 	.word	0x00000ee1
     db0:	00000db5 	.word	0x00000db5

00000db4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     db4:	f010 0f01 	tst.w	r0, #1
     db8:	d008      	beq.n	dcc <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     dba:	4a05      	ldr	r2, [pc, #20]	; (dd0 <_gclk_init_generators_by_fref+0x1c>)
     dbc:	4b05      	ldr	r3, [pc, #20]	; (dd4 <_gclk_init_generators_by_fref+0x20>)
     dbe:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     dc0:	4619      	mov	r1, r3
     dc2:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     dc6:	684b      	ldr	r3, [r1, #4]
     dc8:	4213      	tst	r3, r2
     dca:	d1fc      	bne.n	dc6 <_gclk_init_generators_by_fref+0x12>
     dcc:	4770      	bx	lr
     dce:	bf00      	nop
     dd0:	00010101 	.word	0x00010101
     dd4:	40001c00 	.word	0x40001c00

00000dd8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     dd8:	2201      	movs	r2, #1
     dda:	4b01      	ldr	r3, [pc, #4]	; (de0 <_mclk_init+0x8>)
     ddc:	715a      	strb	r2, [r3, #5]
     dde:	4770      	bx	lr
     de0:	40000800 	.word	0x40000800

00000de4 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
     de4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
     de6:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
     de8:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
     dea:	f012 0f01 	tst.w	r2, #1
     dee:	d005      	beq.n	dfc <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
     df0:	2201      	movs	r2, #1
     df2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
     df4:	6803      	ldr	r3, [r0, #0]
     df6:	b153      	cbz	r3, e0e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
     df8:	4798      	blx	r3
     dfa:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
     dfc:	8a1a      	ldrh	r2, [r3, #16]
     dfe:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
     e00:	b12a      	cbz	r2, e0e <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
     e02:	f240 225e 	movw	r2, #606	; 0x25e
     e06:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
     e08:	6843      	ldr	r3, [r0, #4]
     e0a:	b103      	cbz	r3, e0e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
     e0c:	4798      	blx	r3
     e0e:	bd08      	pop	{r3, pc}

00000e10 <_flash_init>:
{
     e10:	b538      	push	{r3, r4, r5, lr}
     e12:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     e14:	4605      	mov	r5, r0
     e16:	b350      	cbz	r0, e6e <_flash_init+0x5e>
     e18:	4816      	ldr	r0, [pc, #88]	; (e74 <_flash_init+0x64>)
     e1a:	4281      	cmp	r1, r0
     e1c:	bf14      	ite	ne
     e1e:	2000      	movne	r0, #0
     e20:	2001      	moveq	r0, #1
     e22:	224b      	movs	r2, #75	; 0x4b
     e24:	4914      	ldr	r1, [pc, #80]	; (e78 <_flash_init+0x68>)
     e26:	4b15      	ldr	r3, [pc, #84]	; (e7c <_flash_init+0x6c>)
     e28:	4798      	blx	r3
	device->hw = hw;
     e2a:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
     e2c:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
     e2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
     e32:	049b      	lsls	r3, r3, #18
     e34:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
     e36:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
     e38:	4b11      	ldr	r3, [pc, #68]	; (e80 <_flash_init+0x70>)
     e3a:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e3c:	4b11      	ldr	r3, [pc, #68]	; (e84 <_flash_init+0x74>)
     e3e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     e42:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     e46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e4a:	f3bf 8f6f 	isb	sy
     e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     e56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e5a:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e5e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
     e62:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e66:	6019      	str	r1, [r3, #0]
     e68:	601a      	str	r2, [r3, #0]
}
     e6a:	2000      	movs	r0, #0
     e6c:	bd38      	pop	{r3, r4, r5, pc}
     e6e:	2000      	movs	r0, #0
     e70:	e7d7      	b.n	e22 <_flash_init+0x12>
     e72:	bf00      	nop
     e74:	41004000 	.word	0x41004000
     e78:	00001bc8 	.word	0x00001bc8
     e7c:	00000d11 	.word	0x00000d11
     e80:	2000001c 	.word	0x2000001c
     e84:	e000e100 	.word	0xe000e100

00000e88 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
     e88:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
     e8a:	4b02      	ldr	r3, [pc, #8]	; (e94 <NVMCTRL_0_Handler+0xc>)
     e8c:	6818      	ldr	r0, [r3, #0]
     e8e:	4b02      	ldr	r3, [pc, #8]	; (e98 <NVMCTRL_0_Handler+0x10>)
     e90:	4798      	blx	r3
     e92:	bd08      	pop	{r3, pc}
     e94:	2000001c 	.word	0x2000001c
     e98:	00000de5 	.word	0x00000de5

00000e9c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
     e9c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
     e9e:	4b02      	ldr	r3, [pc, #8]	; (ea8 <NVMCTRL_1_Handler+0xc>)
     ea0:	6818      	ldr	r0, [r3, #0]
     ea2:	4b02      	ldr	r3, [pc, #8]	; (eac <NVMCTRL_1_Handler+0x10>)
     ea4:	4798      	blx	r3
     ea6:	bd08      	pop	{r3, pc}
     ea8:	2000001c 	.word	0x2000001c
     eac:	00000de5 	.word	0x00000de5

00000eb0 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     eb0:	4b03      	ldr	r3, [pc, #12]	; (ec0 <_osc32kctrl_init_sources+0x10>)
     eb2:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     eb4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     eb8:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     eba:	2201      	movs	r2, #1
     ebc:	741a      	strb	r2, [r3, #16]
     ebe:	4770      	bx	lr
     ec0:	40001400 	.word	0x40001400

00000ec4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     ec4:	4a04      	ldr	r2, [pc, #16]	; (ed8 <_oscctrl_init_sources+0x14>)
     ec6:	4b05      	ldr	r3, [pc, #20]	; (edc <_oscctrl_init_sources+0x18>)
     ec8:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     eca:	461a      	mov	r2, r3
     ecc:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     ece:	f013 0f02 	tst.w	r3, #2
     ed2:	d0fb      	beq.n	ecc <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     ed4:	4770      	bx	lr
     ed6:	bf00      	nop
     ed8:	03002606 	.word	0x03002606
     edc:	40001000 	.word	0x40001000

00000ee0 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     ee0:	4770      	bx	lr
	...

00000ee4 <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
     ee4:	b538      	push	{r3, r4, r5, lr}
     ee6:	460c      	mov	r4, r1
	ASSERT(dev && hw);
     ee8:	4605      	mov	r5, r0
     eea:	b180      	cbz	r0, f0e <_qspi_sync_init+0x2a>
     eec:	1c08      	adds	r0, r1, #0
     eee:	bf18      	it	ne
     ef0:	2001      	movne	r0, #1
     ef2:	2240      	movs	r2, #64	; 0x40
     ef4:	4907      	ldr	r1, [pc, #28]	; (f14 <_qspi_sync_init+0x30>)
     ef6:	4b08      	ldr	r3, [pc, #32]	; (f18 <_qspi_sync_init+0x34>)
     ef8:	4798      	blx	r3
	dev->prvt = hw;
     efa:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
     efc:	2301      	movs	r3, #1
     efe:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
     f00:	2311      	movs	r3, #17
     f02:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
     f04:	f44f 7300 	mov.w	r3, #512	; 0x200
     f08:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
     f0a:	2000      	movs	r0, #0
     f0c:	bd38      	pop	{r3, r4, r5, pc}
     f0e:	2000      	movs	r0, #0
     f10:	e7ef      	b.n	ef2 <_qspi_sync_init+0xe>
     f12:	bf00      	nop
     f14:	00001be8 	.word	0x00001be8
     f18:	00000d11 	.word	0x00000d11

00000f1c <_qspi_sync_enable>:
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
     f1c:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
     f1e:	2202      	movs	r2, #2
     f20:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
     f22:	2000      	movs	r0, #0
     f24:	4770      	bx	lr
	...

00000f28 <_qspi_sync_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
     f28:	b570      	push	{r4, r5, r6, lr}
     f2a:	4605      	mov	r5, r0
     f2c:	460c      	mov	r4, r1
	void *hw = dev->prvt;
     f2e:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
     f30:	780a      	ldrb	r2, [r1, #0]
     f32:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
     f36:	bf1c      	itt	ne
     f38:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
     f3a:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
     f3c:	780a      	ldrb	r2, [r1, #0]
     f3e:	f012 0f10 	tst.w	r2, #16
     f42:	d005      	beq.n	f50 <_qspi_sync_serial_run_command+0x28>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
     f44:	6b59      	ldr	r1, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
     f46:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
     f4a:	7922      	ldrb	r2, [r4, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
     f4c:	430a      	orrs	r2, r1
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
     f4e:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
     f50:	7822      	ldrb	r2, [r4, #0]
     f52:	f012 0f40 	tst.w	r2, #64	; 0x40
     f56:	d006      	beq.n	f66 <_qspi_sync_serial_run_command+0x3e>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
     f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
     f5a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
     f5e:	7961      	ldrb	r1, [r4, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
     f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
     f64:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
     f66:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
     f68:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_sync_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
     f6a:	7823      	ldrb	r3, [r4, #0]
     f6c:	f013 0f80 	tst.w	r3, #128	; 0x80
     f70:	d10c      	bne.n	f8c <_qspi_sync_serial_run_command+0x64>
		_qspi_sync_run_transfer(dev, cmd);
	}

	_qspi_end_transfer(dev->prvt);
     f72:	682b      	ldr	r3, [r5, #0]
	((Qspi *)hw)->CTRLA.reg = data;
     f74:	4a1f      	ldr	r2, [pc, #124]	; (ff4 <_qspi_sync_serial_run_command+0xcc>)
     f76:	601a      	str	r2, [r3, #0]

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
     f78:	682a      	ldr	r2, [r5, #0]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
     f7a:	69d3      	ldr	r3, [r2, #28]
     f7c:	f413 6f80 	tst.w	r3, #1024	; 0x400
     f80:	d0fb      	beq.n	f7a <_qspi_sync_serial_run_command+0x52>
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
     f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
     f86:	61d3      	str	r3, [r2, #28]
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
	return ERR_NONE;
}
     f88:	2000      	movs	r0, #0
     f8a:	bd70      	pop	{r4, r5, r6, pc}
	void *   hw       = dev->prvt;
     f8c:	6829      	ldr	r1, [r5, #0]
	if (cmd->inst_frame.bits.addr_en)
     f8e:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
     f92:	bf1a      	itte	ne
     f94:	68a2      	ldrne	r2, [r4, #8]
     f96:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
     f9a:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
     f9e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
     fa0:	6923      	ldr	r3, [r4, #16]
     fa2:	b1ab      	cbz	r3, fd0 <_qspi_sync_serial_run_command+0xa8>
     fa4:	2001      	movs	r0, #1
     fa6:	2282      	movs	r2, #130	; 0x82
     fa8:	4913      	ldr	r1, [pc, #76]	; (ff8 <_qspi_sync_serial_run_command+0xd0>)
     faa:	4b14      	ldr	r3, [pc, #80]	; (ffc <_qspi_sync_serial_run_command+0xd4>)
     fac:	4798      	blx	r3
	if (cmd->tx_buf) {
     fae:	6923      	ldr	r3, [r4, #16]
     fb0:	b19b      	cbz	r3, fda <_qspi_sync_serial_run_command+0xb2>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
     fb2:	68e0      	ldr	r0, [r4, #12]
	while (count--) {
     fb4:	b138      	cbz	r0, fc6 <_qspi_sync_serial_run_command+0x9e>
     fb6:	1e72      	subs	r2, r6, #1
     fb8:	4418      	add	r0, r3
		*dst++ = *src++;
     fba:	f813 1b01 	ldrb.w	r1, [r3], #1
     fbe:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (count--) {
     fc2:	4283      	cmp	r3, r0
     fc4:	d1f9      	bne.n	fba <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
     fc6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fca:	f3bf 8f6f 	isb	sy
     fce:	e7d0      	b.n	f72 <_qspi_sync_serial_run_command+0x4a>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
     fd0:	6960      	ldr	r0, [r4, #20]
     fd2:	3000      	adds	r0, #0
     fd4:	bf18      	it	ne
     fd6:	2001      	movne	r0, #1
     fd8:	e7e5      	b.n	fa6 <_qspi_sync_serial_run_command+0x7e>
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
     fda:	6963      	ldr	r3, [r4, #20]
     fdc:	68e1      	ldr	r1, [r4, #12]
	while (count--) {
     fde:	2900      	cmp	r1, #0
     fe0:	d0f1      	beq.n	fc6 <_qspi_sync_serial_run_command+0x9e>
     fe2:	3b01      	subs	r3, #1
     fe4:	4431      	add	r1, r6
		*dst++ = *src++;
     fe6:	f816 2b01 	ldrb.w	r2, [r6], #1
     fea:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (count--) {
     fee:	42b1      	cmp	r1, r6
     ff0:	d1f9      	bne.n	fe6 <_qspi_sync_serial_run_command+0xbe>
     ff2:	e7e8      	b.n	fc6 <_qspi_sync_serial_run_command+0x9e>
     ff4:	01000002 	.word	0x01000002
     ff8:	00001be8 	.word	0x00001be8
     ffc:	00000d11 	.word	0x00000d11

00001000 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1000:	b500      	push	{lr}
    1002:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1004:	4b0d      	ldr	r3, [pc, #52]	; (103c <RAMECC_Handler+0x3c>)
    1006:	789b      	ldrb	r3, [r3, #2]
    1008:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    100a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    100c:	9b01      	ldr	r3, [sp, #4]
    100e:	f013 0f02 	tst.w	r3, #2
    1012:	d006      	beq.n	1022 <RAMECC_Handler+0x22>
    1014:	4b0a      	ldr	r3, [pc, #40]	; (1040 <RAMECC_Handler+0x40>)
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	b11b      	cbz	r3, 1022 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    101a:	4a08      	ldr	r2, [pc, #32]	; (103c <RAMECC_Handler+0x3c>)
    101c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    101e:	4798      	blx	r3
    1020:	e009      	b.n	1036 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1022:	9b01      	ldr	r3, [sp, #4]
    1024:	f013 0f01 	tst.w	r3, #1
    1028:	d005      	beq.n	1036 <RAMECC_Handler+0x36>
    102a:	4b05      	ldr	r3, [pc, #20]	; (1040 <RAMECC_Handler+0x40>)
    102c:	685b      	ldr	r3, [r3, #4]
    102e:	b113      	cbz	r3, 1036 <RAMECC_Handler+0x36>
    1030:	4a02      	ldr	r2, [pc, #8]	; (103c <RAMECC_Handler+0x3c>)
    1032:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1034:	4798      	blx	r3
	} else {
		return;
	}
}
    1036:	b003      	add	sp, #12
    1038:	f85d fb04 	ldr.w	pc, [sp], #4
    103c:	41020000 	.word	0x41020000
    1040:	20000094 	.word	0x20000094

00001044 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1044:	b538      	push	{r3, r4, r5, lr}
    1046:	460c      	mov	r4, r1
	ASSERT(dev);
    1048:	4605      	mov	r5, r0
    104a:	2230      	movs	r2, #48	; 0x30
    104c:	4914      	ldr	r1, [pc, #80]	; (10a0 <_timer_init+0x5c>)
    104e:	3000      	adds	r0, #0
    1050:	bf18      	it	ne
    1052:	2001      	movne	r0, #1
    1054:	4b13      	ldr	r3, [pc, #76]	; (10a4 <_timer_init+0x60>)
    1056:	4798      	blx	r3

	dev->hw = hw;
    1058:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    105a:	2301      	movs	r3, #1
    105c:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    105e:	f248 0203 	movw	r2, #32771	; 0x8003
    1062:	6923      	ldr	r3, [r4, #16]
    1064:	4213      	tst	r3, r2
    1066:	d1fc      	bne.n	1062 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1068:	68eb      	ldr	r3, [r5, #12]
    106a:	691a      	ldr	r2, [r3, #16]
    106c:	f012 0f01 	tst.w	r2, #1
    1070:	d1fb      	bne.n	106a <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1072:	f248 0280 	movw	r2, #32896	; 0x8080
    1076:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1078:	f248 0103 	movw	r1, #32771	; 0x8003
    107c:	691a      	ldr	r2, [r3, #16]
    107e:	420a      	tst	r2, r1
    1080:	d1fc      	bne.n	107c <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1082:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1084:	2320      	movs	r3, #32
    1086:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1088:	6913      	ldr	r3, [r2, #16]
    108a:	f013 0f60 	tst.w	r3, #96	; 0x60
    108e:	d1fb      	bne.n	1088 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1090:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1092:	f44f 7280 	mov.w	r2, #256	; 0x100
    1096:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    1098:	4b03      	ldr	r3, [pc, #12]	; (10a8 <_timer_init+0x64>)
    109a:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    109c:	2000      	movs	r0, #0
    109e:	bd38      	pop	{r3, r4, r5, pc}
    10a0:	00001c00 	.word	0x00001c00
    10a4:	00000d11 	.word	0x00000d11
    10a8:	20000020 	.word	0x20000020

000010ac <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    10ac:	2000      	movs	r0, #0
    10ae:	4770      	bx	lr

000010b0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    10b0:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    10b2:	4b08      	ldr	r3, [pc, #32]	; (10d4 <RTC_Handler+0x24>)
    10b4:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    10b6:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    10b8:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    10ba:	f413 7f80 	tst.w	r3, #256	; 0x100
    10be:	d007      	beq.n	10d0 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    10c0:	6823      	ldr	r3, [r4, #0]
    10c2:	b10b      	cbz	r3, 10c8 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    10c4:	4620      	mov	r0, r4
    10c6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    10c8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    10ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    10ce:	819a      	strh	r2, [r3, #12]
    10d0:	bd10      	pop	{r4, pc}
    10d2:	bf00      	nop
    10d4:	20000020 	.word	0x20000020

000010d8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    10d8:	b470      	push	{r4, r5, r6}
    10da:	b087      	sub	sp, #28
    10dc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    10de:	466c      	mov	r4, sp
    10e0:	4d0c      	ldr	r5, [pc, #48]	; (1114 <_sercom_get_hardware_index+0x3c>)
    10e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10e6:	e895 0003 	ldmia.w	r5, {r0, r1}
    10ea:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    10ee:	9b00      	ldr	r3, [sp, #0]
    10f0:	42b3      	cmp	r3, r6
    10f2:	d00c      	beq.n	110e <_sercom_get_hardware_index+0x36>
    10f4:	4632      	mov	r2, r6
    10f6:	2001      	movs	r0, #1
    10f8:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    10fc:	4293      	cmp	r3, r2
    10fe:	d007      	beq.n	1110 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1100:	3001      	adds	r0, #1
    1102:	2806      	cmp	r0, #6
    1104:	d1f8      	bne.n	10f8 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    1106:	2000      	movs	r0, #0
}
    1108:	b007      	add	sp, #28
    110a:	bc70      	pop	{r4, r5, r6}
    110c:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    110e:	2000      	movs	r0, #0
			return i;
    1110:	b2c0      	uxtb	r0, r0
    1112:	e7f9      	b.n	1108 <_sercom_get_hardware_index+0x30>
    1114:	00001c18 	.word	0x00001c18

00001118 <_i2c_s_init>:
 * \param[in] p The pointer to hardware instance
 *
 *\ return status of initialization
 */
static int32_t _i2c_s_init(void *const hw)
{
    1118:	b510      	push	{r4, lr}
    111a:	4604      	mov	r4, r0
 *
 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2c_s_index(const void *const hw)
{
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    111c:	4b1d      	ldr	r3, [pc, #116]	; (1194 <_i2c_s_init+0x7c>)
    111e:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2css); i++) {
		if (_i2css[i].number == sercom_offset) {
    1120:	2803      	cmp	r0, #3
    1122:	d008      	beq.n	1136 <_i2c_s_init+0x1e>
			return i;
		}
	}

	ASSERT(false);
    1124:	f240 72b7 	movw	r2, #1975	; 0x7b7
    1128:	491b      	ldr	r1, [pc, #108]	; (1198 <_i2c_s_init+0x80>)
    112a:	2000      	movs	r0, #0
    112c:	4b1b      	ldr	r3, [pc, #108]	; (119c <_i2c_s_init+0x84>)
    112e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1130:	f06f 000c 	mvn.w	r0, #12
}
    1134:	bd10      	pop	{r4, pc}
	};
}

static inline bool hri_sercomi2cs_is_syncing(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    1136:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    1138:	f013 0f01 	tst.w	r3, #1
    113c:	d119      	bne.n	1172 <_i2c_s_init+0x5a>
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    113e:	69e3      	ldr	r3, [r4, #28]
    1140:	f013 0f03 	tst.w	r3, #3
    1144:	d1fb      	bne.n	113e <_i2c_s_init+0x26>
static inline hri_sercomi2cs_ctrla_reg_t hri_sercomi2cs_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cs_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    1146:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    1148:	f013 0f02 	tst.w	r3, #2
    114c:	d00b      	beq.n	1166 <_i2c_s_init+0x4e>
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    114e:	6823      	ldr	r3, [r4, #0]
    1150:	f023 0302 	bic.w	r3, r3, #2
    1154:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1156:	69e3      	ldr	r3, [r4, #28]
    1158:	f013 0f03 	tst.w	r3, #3
    115c:	d1fb      	bne.n	1156 <_i2c_s_init+0x3e>
    115e:	69e3      	ldr	r3, [r4, #28]
    1160:	f013 0f02 	tst.w	r3, #2
    1164:	d1fb      	bne.n	115e <_i2c_s_init+0x46>
}

static inline void hri_sercomi2cs_write_CTRLA_reg(const void *const hw, hri_sercomi2cs_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    1166:	2311      	movs	r3, #17
    1168:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    116a:	69e3      	ldr	r3, [r4, #28]
    116c:	f013 0f03 	tst.w	r3, #3
    1170:	d1fb      	bne.n	116a <_i2c_s_init+0x52>
    1172:	69e3      	ldr	r3, [r4, #28]
    1174:	f013 0f01 	tst.w	r3, #1
    1178:	d1fb      	bne.n	1172 <_i2c_s_init+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    117a:	4b09      	ldr	r3, [pc, #36]	; (11a0 <_i2c_s_init+0x88>)
    117c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    117e:	69e3      	ldr	r3, [r4, #28]
    1180:	f013 0f03 	tst.w	r3, #3
    1184:	d1fb      	bne.n	117e <_i2c_s_init+0x66>
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    1186:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    118a:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    118c:	2320      	movs	r3, #32
    118e:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    1190:	2000      	movs	r0, #0
    1192:	bd10      	pop	{r4, pc}
    1194:	000010d9 	.word	0x000010d9
    1198:	00001c48 	.word	0x00001c48
    119c:	00000d11 	.word	0x00000d11
    11a0:	00200010 	.word	0x00200010

000011a4 <_i2c_s_set_address>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] address Address to set
 */
static int32_t _i2c_s_set_address(void *const hw, const uint16_t address)
{
    11a4:	b570      	push	{r4, r5, r6, lr}
    11a6:	b082      	sub	sp, #8
    11a8:	4604      	mov	r4, r0
    11aa:	460e      	mov	r6, r1
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    11ac:	69e3      	ldr	r3, [r4, #28]
    11ae:	f013 0f03 	tst.w	r3, #3
    11b2:	d1fb      	bne.n	11ac <_i2c_s_set_address+0x8>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    11b4:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_I2CS_CTRLA_ENABLE) >> SERCOM_I2CS_CTRLA_ENABLE_Pos;
    11b6:	f3c5 0540 	ubfx	r5, r5, #1, #1
	bool enabled;

	enabled = hri_sercomi2cs_get_CTRLA_ENABLE_bit(hw);

	CRITICAL_SECTION_ENTER()
    11ba:	a801      	add	r0, sp, #4
    11bc:	4b11      	ldr	r3, [pc, #68]	; (1204 <_i2c_s_set_address+0x60>)
    11be:	4798      	blx	r3
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    11c0:	6823      	ldr	r3, [r4, #0]
    11c2:	f023 0302 	bic.w	r3, r3, #2
    11c6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    11c8:	69e3      	ldr	r3, [r4, #28]
    11ca:	f013 0f03 	tst.w	r3, #3
    11ce:	d1fb      	bne.n	11c8 <_i2c_s_set_address+0x24>
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    11d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CS_ADDR_ADDR_Msk;
    11d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    11d6:	f023 0306 	bic.w	r3, r3, #6
	tmp |= SERCOM_I2CS_ADDR_ADDR(data);
    11da:	f240 71fe 	movw	r1, #2046	; 0x7fe
    11de:	ea01 0146 	and.w	r1, r1, r6, lsl #1
    11e2:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CS.ADDR.reg = tmp;
    11e4:	6261      	str	r1, [r4, #36]	; 0x24
	hri_sercomi2cs_clear_CTRLA_ENABLE_bit(hw);
	hri_sercomi2cs_write_ADDR_ADDR_bf(hw, address);
	CRITICAL_SECTION_LEAVE()
    11e6:	a801      	add	r0, sp, #4
    11e8:	4b07      	ldr	r3, [pc, #28]	; (1208 <_i2c_s_set_address+0x64>)
    11ea:	4798      	blx	r3

	if (enabled) {
    11ec:	b13d      	cbz	r5, 11fe <_i2c_s_set_address+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    11ee:	6823      	ldr	r3, [r4, #0]
    11f0:	f043 0302 	orr.w	r3, r3, #2
    11f4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    11f6:	69e3      	ldr	r3, [r4, #28]
    11f8:	f013 0f03 	tst.w	r3, #3
    11fc:	d1fb      	bne.n	11f6 <_i2c_s_set_address+0x52>
		hri_sercomi2cs_set_CTRLA_ENABLE_bit(hw);
	}

	return ERR_NONE;
}
    11fe:	2000      	movs	r0, #0
    1200:	b002      	add	sp, #8
    1202:	bd70      	pop	{r4, r5, r6, pc}
    1204:	00000811 	.word	0x00000811
    1208:	0000081f 	.word	0x0000081f

0000120c <_i2c_s_sync_init>:
{
    120c:	b538      	push	{r3, r4, r5, lr}
    120e:	460c      	mov	r4, r1
	ASSERT(device);
    1210:	4605      	mov	r5, r0
    1212:	f240 62a6 	movw	r2, #1702	; 0x6a6
    1216:	4907      	ldr	r1, [pc, #28]	; (1234 <_i2c_s_sync_init+0x28>)
    1218:	3000      	adds	r0, #0
    121a:	bf18      	it	ne
    121c:	2001      	movne	r0, #1
    121e:	4b06      	ldr	r3, [pc, #24]	; (1238 <_i2c_s_sync_init+0x2c>)
    1220:	4798      	blx	r3
	status = _i2c_s_init(hw);
    1222:	4620      	mov	r0, r4
    1224:	4b05      	ldr	r3, [pc, #20]	; (123c <_i2c_s_sync_init+0x30>)
    1226:	4798      	blx	r3
	if (status) {
    1228:	4603      	mov	r3, r0
    122a:	b900      	cbnz	r0, 122e <_i2c_s_sync_init+0x22>
	device->hw = hw;
    122c:	602c      	str	r4, [r5, #0]
}
    122e:	4618      	mov	r0, r3
    1230:	bd38      	pop	{r3, r4, r5, pc}
    1232:	bf00      	nop
    1234:	00001c48 	.word	0x00001c48
    1238:	00000d11 	.word	0x00000d11
    123c:	00001119 	.word	0x00001119

00001240 <_i2c_s_sync_enable>:
	hri_sercomi2cs_set_CTRLA_ENABLE_bit(device->hw);
    1240:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1242:	6813      	ldr	r3, [r2, #0]
    1244:	f043 0302 	orr.w	r3, r3, #2
    1248:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    124a:	69d3      	ldr	r3, [r2, #28]
    124c:	f013 0f03 	tst.w	r3, #3
    1250:	d1fb      	bne.n	124a <_i2c_s_sync_enable+0xa>
}
    1252:	2000      	movs	r0, #0
    1254:	4770      	bx	lr

00001256 <_i2c_s_sync_is_10bit_addressing_on>:
	return hri_sercomi2cs_get_ADDR_TENBITEN_bit(device->hw);
    1256:	6803      	ldr	r3, [r0, #0]
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1258:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    125a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    125e:	4770      	bx	lr

00001260 <_i2c_s_sync_set_address>:
{
    1260:	b508      	push	{r3, lr}
	return _i2c_s_set_address(device->hw, address);
    1262:	6800      	ldr	r0, [r0, #0]
    1264:	4b01      	ldr	r3, [pc, #4]	; (126c <_i2c_s_sync_set_address+0xc>)
    1266:	4798      	blx	r3
}
    1268:	bd08      	pop	{r3, pc}
    126a:	bf00      	nop
    126c:	000011a5 	.word	0x000011a5

00001270 <_i2c_s_sync_write_byte>:
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    1270:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    1272:	6299      	str	r1, [r3, #40]	; 0x28
    1274:	4770      	bx	lr

00001276 <_i2c_s_sync_read_byte>:
	return hri_sercomi2cs_read_DATA_reg(device->hw);
    1276:	6803      	ldr	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->I2CS.DATA.reg;
    1278:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    127a:	b2c0      	uxtb	r0, r0
    127c:	4770      	bx	lr

0000127e <_i2c_s_sync_is_byte_sent>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    127e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) >> SERCOM_I2CS_INTFLAG_DRDY_Pos;
    1280:	7e18      	ldrb	r0, [r3, #24]
}
    1282:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1286:	4770      	bx	lr

00001288 <_i2c_s_sync_is_byte_received>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1288:	6803      	ldr	r3, [r0, #0]
    128a:	7e18      	ldrb	r0, [r3, #24]
}
    128c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1290:	4770      	bx	lr

00001292 <_i2c_s_sync_clear_data_ready_flag>:
	hri_sercomi2cs_clear_INTFLAG_DRDY_bit(device->hw);
    1292:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_DRDY;
    1294:	2204      	movs	r2, #4
    1296:	761a      	strb	r2, [r3, #24]
}
    1298:	2000      	movs	r0, #0
    129a:	4770      	bx	lr

0000129c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    129c:	b538      	push	{r3, r4, r5, lr}
    129e:	4605      	mov	r5, r0
    12a0:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    12a2:	4608      	mov	r0, r1
    12a4:	4b35      	ldr	r3, [pc, #212]	; (137c <_spi_m_sync_init+0xe0>)
    12a6:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    12a8:	b160      	cbz	r0, 12c4 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    12aa:	2d00      	cmp	r5, #0
    12ac:	d054      	beq.n	1358 <_spi_m_sync_init+0xbc>
    12ae:	f640 123c 	movw	r2, #2364	; 0x93c
    12b2:	4933      	ldr	r1, [pc, #204]	; (1380 <_spi_m_sync_init+0xe4>)
    12b4:	1c20      	adds	r0, r4, #0
    12b6:	bf18      	it	ne
    12b8:	2001      	movne	r0, #1
    12ba:	4b32      	ldr	r3, [pc, #200]	; (1384 <_spi_m_sync_init+0xe8>)
    12bc:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    12be:	f06f 000c 	mvn.w	r0, #12
    12c2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    12c4:	2d00      	cmp	r5, #0
    12c6:	d150      	bne.n	136a <_spi_m_sync_init+0xce>
    12c8:	f640 123c 	movw	r2, #2364	; 0x93c
    12cc:	492c      	ldr	r1, [pc, #176]	; (1380 <_spi_m_sync_init+0xe4>)
    12ce:	2000      	movs	r0, #0
    12d0:	4b2c      	ldr	r3, [pc, #176]	; (1384 <_spi_m_sync_init+0xe8>)
    12d2:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    12d4:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    12d6:	f013 0f01 	tst.w	r3, #1
    12da:	d119      	bne.n	1310 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12dc:	69e3      	ldr	r3, [r4, #28]
    12de:	f013 0f03 	tst.w	r3, #3
    12e2:	d1fb      	bne.n	12dc <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    12e4:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    12e6:	f013 0f02 	tst.w	r3, #2
    12ea:	d00b      	beq.n	1304 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    12ec:	6823      	ldr	r3, [r4, #0]
    12ee:	f023 0302 	bic.w	r3, r3, #2
    12f2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    12f4:	69e3      	ldr	r3, [r4, #28]
    12f6:	f013 0f03 	tst.w	r3, #3
    12fa:	d1fb      	bne.n	12f4 <_spi_m_sync_init+0x58>
    12fc:	69e3      	ldr	r3, [r4, #28]
    12fe:	f013 0f02 	tst.w	r3, #2
    1302:	d1fb      	bne.n	12fc <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1304:	230d      	movs	r3, #13
    1306:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1308:	69e3      	ldr	r3, [r4, #28]
    130a:	f013 0f03 	tst.w	r3, #3
    130e:	d1fb      	bne.n	1308 <_spi_m_sync_init+0x6c>
    1310:	69e3      	ldr	r3, [r4, #28]
    1312:	f013 0f01 	tst.w	r3, #1
    1316:	d1fb      	bne.n	1310 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    1318:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    131a:	f640 1206 	movw	r2, #2310	; 0x906
    131e:	4918      	ldr	r1, [pc, #96]	; (1380 <_spi_m_sync_init+0xe4>)
    1320:	1c20      	adds	r0, r4, #0
    1322:	bf18      	it	ne
    1324:	2001      	movne	r0, #1
    1326:	4b17      	ldr	r3, [pc, #92]	; (1384 <_spi_m_sync_init+0xe8>)
    1328:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    132a:	4b17      	ldr	r3, [pc, #92]	; (1388 <_spi_m_sync_init+0xec>)
    132c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    132e:	69e3      	ldr	r3, [r4, #28]
    1330:	f013 0f03 	tst.w	r3, #3
    1334:	d1fb      	bne.n	132e <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    133a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    133c:	69e3      	ldr	r3, [r4, #28]
    133e:	f013 0f17 	tst.w	r3, #23
    1342:	d1fb      	bne.n	133c <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1344:	2000      	movs	r0, #0
    1346:	7320      	strb	r0, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1348:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    134c:	2301      	movs	r3, #1
    134e:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1350:	f240 13ff 	movw	r3, #511	; 0x1ff
    1354:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1356:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1358:	f640 123c 	movw	r2, #2364	; 0x93c
    135c:	4908      	ldr	r1, [pc, #32]	; (1380 <_spi_m_sync_init+0xe4>)
    135e:	2000      	movs	r0, #0
    1360:	4b08      	ldr	r3, [pc, #32]	; (1384 <_spi_m_sync_init+0xe8>)
    1362:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1364:	f06f 000c 	mvn.w	r0, #12
    1368:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    136a:	f640 123c 	movw	r2, #2364	; 0x93c
    136e:	4904      	ldr	r1, [pc, #16]	; (1380 <_spi_m_sync_init+0xe4>)
    1370:	1c20      	adds	r0, r4, #0
    1372:	bf18      	it	ne
    1374:	2001      	movne	r0, #1
    1376:	4b03      	ldr	r3, [pc, #12]	; (1384 <_spi_m_sync_init+0xe8>)
    1378:	4798      	blx	r3
    137a:	e7ab      	b.n	12d4 <_spi_m_sync_init+0x38>
    137c:	000010d9 	.word	0x000010d9
    1380:	00001c48 	.word	0x00001c48
    1384:	00000d11 	.word	0x00000d11
    1388:	0020000c 	.word	0x0020000c

0000138c <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    138c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1390:	4681      	mov	r9, r0
    1392:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    1394:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1396:	f8d1 8000 	ldr.w	r8, [r1]
    139a:	684d      	ldr	r5, [r1, #4]
    139c:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    139e:	b1a8      	cbz	r0, 13cc <_spi_m_sync_trans+0x40>
    13a0:	1c20      	adds	r0, r4, #0
    13a2:	bf18      	it	ne
    13a4:	2001      	movne	r0, #1
    13a6:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    13aa:	492e      	ldr	r1, [pc, #184]	; (1464 <_spi_m_sync_trans+0xd8>)
    13ac:	4b2e      	ldr	r3, [pc, #184]	; (1468 <_spi_m_sync_trans+0xdc>)
    13ae:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    13b0:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    13b2:	f013 0f07 	tst.w	r3, #7
    13b6:	d134      	bne.n	1422 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13b8:	69e0      	ldr	r0, [r4, #28]
    13ba:	f010 0003 	ands.w	r0, r0, #3
    13be:	d1fb      	bne.n	13b8 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    13c0:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    13c2:	f013 0f02 	tst.w	r3, #2
    13c6:	d030      	beq.n	142a <_spi_m_sync_trans+0x9e>
    13c8:	4602      	mov	r2, r0
    13ca:	e008      	b.n	13de <_spi_m_sync_trans+0x52>
    13cc:	2000      	movs	r0, #0
    13ce:	e7ea      	b.n	13a6 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    13d0:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    13d2:	f013 0f80 	tst.w	r3, #128	; 0x80
    13d6:	d112      	bne.n	13fe <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    13d8:	68b3      	ldr	r3, [r6, #8]
    13da:	4283      	cmp	r3, r0
    13dc:	d91e      	bls.n	141c <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    13de:	7e23      	ldrb	r3, [r4, #24]
    13e0:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    13e2:	f013 0f04 	tst.w	r3, #4
    13e6:	d024      	beq.n	1432 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    13e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    13ea:	2d00      	cmp	r5, #0
    13ec:	d0f0      	beq.n	13d0 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    13ee:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    13f0:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    13f2:	bf91      	iteee	ls
    13f4:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    13f6:	0a09      	lsrhi	r1, r1, #8
    13f8:	7069      	strbhi	r1, [r5, #1]
    13fa:	3502      	addhi	r5, #2
    13fc:	e7e8      	b.n	13d0 <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    13fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1402:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1404:	2380      	movs	r3, #128	; 0x80
    1406:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1408:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    140c:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    140e:	f013 0f03 	tst.w	r3, #3
    1412:	d0fb      	beq.n	140c <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1414:	2303      	movs	r3, #3
    1416:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    1418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    141c:	4293      	cmp	r3, r2
    141e:	d8de      	bhi.n	13de <_spi_m_sync_trans+0x52>
    1420:	e7f4      	b.n	140c <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    1422:	f06f 0003 	mvn.w	r0, #3
    1426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    142a:	f06f 0013 	mvn.w	r0, #19
    142e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1432:	4290      	cmp	r0, r2
    1434:	d8cd      	bhi.n	13d2 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1436:	f013 0f01 	tst.w	r3, #1
    143a:	d0ca      	beq.n	13d2 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    143c:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    1440:	f1b8 0f00 	cmp.w	r8, #0
    1444:	d00b      	beq.n	145e <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    1446:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    144a:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    144c:	bf91      	iteee	ls
    144e:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    1452:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    1456:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    145a:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    145e:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1460:	62a1      	str	r1, [r4, #40]	; 0x28
    1462:	e7b6      	b.n	13d2 <_spi_m_sync_trans+0x46>
    1464:	00001c48 	.word	0x00001c48
    1468:	00000d11 	.word	0x00000d11

0000146c <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    146c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    146e:	4604      	mov	r4, r0
    1470:	b330      	cbz	r0, 14c0 <_wdt_init+0x54>
    1472:	6800      	ldr	r0, [r0, #0]
    1474:	3000      	adds	r0, #0
    1476:	bf18      	it	ne
    1478:	2001      	movne	r0, #1
    147a:	2250      	movs	r2, #80	; 0x50
    147c:	4914      	ldr	r1, [pc, #80]	; (14d0 <_wdt_init+0x64>)
    147e:	4b15      	ldr	r3, [pc, #84]	; (14d4 <_wdt_init+0x68>)
    1480:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    1482:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1484:	689a      	ldr	r2, [r3, #8]
    1486:	f012 0f0e 	tst.w	r2, #14
    148a:	d1fb      	bne.n	1484 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    148c:	781a      	ldrb	r2, [r3, #0]
    148e:	09d2      	lsrs	r2, r2, #7
    1490:	d118      	bne.n	14c4 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1492:	689a      	ldr	r2, [r3, #8]
    1494:	f012 0f0e 	tst.w	r2, #14
    1498:	d1fb      	bne.n	1492 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    149a:	781a      	ldrb	r2, [r3, #0]
    149c:	f012 0f02 	tst.w	r2, #2
    14a0:	d113      	bne.n	14ca <_wdt_init+0x5e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    14a2:	781a      	ldrb	r2, [r3, #0]
    14a4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    14a8:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    14aa:	689a      	ldr	r2, [r3, #8]
    14ac:	f012 0f0e 	tst.w	r2, #14
    14b0:	d1fb      	bne.n	14aa <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    14b2:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    14b4:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    14b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    14ba:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    14bc:	2000      	movs	r0, #0
    14be:	bd10      	pop	{r4, pc}
    14c0:	2000      	movs	r0, #0
    14c2:	e7da      	b.n	147a <_wdt_init+0xe>
		return ERR_DENIED;
    14c4:	f06f 0010 	mvn.w	r0, #16
    14c8:	bd10      	pop	{r4, pc}
    14ca:	f06f 0010 	mvn.w	r0, #16
}
    14ce:	bd10      	pop	{r4, pc}
    14d0:	00001c64 	.word	0x00001c64
    14d4:	00000d11 	.word	0x00000d11

000014d8 <main>:
#include "driver_init.h"
#include "atmel_start_pins.h"


int main(void)
{
    14d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14dc:	b085      	sub	sp, #20
    14de:	af00      	add	r7, sp, #0
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    14e0:	4b17      	ldr	r3, [pc, #92]	; (1540 <main+0x68>)
    14e2:	4798      	blx	r3
			gpio_set_pin_level(SWCLK, true);
			delay_ms(50);
		}
		*/
	
		I2C_read(buffer, RX_LENGTH);
    14e4:	4d17      	ldr	r5, [pc, #92]	; (1544 <main+0x6c>)
		
		nor_flash_qspi_init();
    14e6:	4c18      	ldr	r4, [pc, #96]	; (1548 <main+0x70>)
				uint32_t data_addr = buffer[2] << 24 | buffer[3] << 16 | buffer[4] << 8 | buffer[5]; 
				uint32_t data_len = buffer[6] << 24 | buffer[7] << 16 | buffer[8] << 8 | buffer[9];
				//if data length is bigger than RAM program in chunks
				
				uint8_t qspi_buff[data_len];
				spi_nor_flash_read(SPI_NOR_FLASH_0, qspi_buff, data_addr, data_len);
    14e8:	4e18      	ldr	r6, [pc, #96]	; (154c <main+0x74>)
		I2C_read(buffer, RX_LENGTH);
    14ea:	210a      	movs	r1, #10
    14ec:	1d38      	adds	r0, r7, #4
    14ee:	47a8      	blx	r5
		nor_flash_qspi_init();
    14f0:	47a0      	blx	r4
		if(buffer[0] == 0xCC) //start byte CC 
    14f2:	793b      	ldrb	r3, [r7, #4]
    14f4:	2bcc      	cmp	r3, #204	; 0xcc
    14f6:	d1f8      	bne.n	14ea <main+0x12>
			if(buffer[1] == 0xBB) //target cmd BB
    14f8:	797b      	ldrb	r3, [r7, #5]
    14fa:	2bbb      	cmp	r3, #187	; 0xbb
    14fc:	d1f5      	bne.n	14ea <main+0x12>
			{
    14fe:	46e8      	mov	r8, sp
				uint32_t data_addr = buffer[2] << 24 | buffer[3] << 16 | buffer[4] << 8 | buffer[5]; 
    1500:	79bb      	ldrb	r3, [r7, #6]
    1502:	79fa      	ldrb	r2, [r7, #7]
    1504:	0412      	lsls	r2, r2, #16
    1506:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
    150a:	7a7b      	ldrb	r3, [r7, #9]
    150c:	431a      	orrs	r2, r3
    150e:	7a38      	ldrb	r0, [r7, #8]
				uint32_t data_len = buffer[6] << 24 | buffer[7] << 16 | buffer[8] << 8 | buffer[9];
    1510:	7ab9      	ldrb	r1, [r7, #10]
    1512:	7afb      	ldrb	r3, [r7, #11]
    1514:	041b      	lsls	r3, r3, #16
    1516:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    151a:	7b79      	ldrb	r1, [r7, #13]
    151c:	430b      	orrs	r3, r1
    151e:	7b39      	ldrb	r1, [r7, #12]
    1520:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
				uint8_t qspi_buff[data_len];
    1524:	1dd9      	adds	r1, r3, #7
    1526:	f021 0107 	bic.w	r1, r1, #7
    152a:	ebad 0d01 	sub.w	sp, sp, r1
				spi_nor_flash_read(SPI_NOR_FLASH_0, qspi_buff, data_addr, data_len);
    152e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    1532:	4669      	mov	r1, sp
    1534:	6830      	ldr	r0, [r6, #0]
    1536:	f8df 9018 	ldr.w	r9, [pc, #24]	; 1550 <main+0x78>
    153a:	47c8      	blx	r9
    153c:	46c5      	mov	sp, r8
    153e:	e7d4      	b.n	14ea <main+0x12>
    1540:	000002d1 	.word	0x000002d1
    1544:	000007cd 	.word	0x000007cd
    1548:	000007b9 	.word	0x000007b9
    154c:	200000a4 	.word	0x200000a4
    1550:	00001a73 	.word	0x00001a73

00001554 <s25fl116k_read_reg>:
	cmd.instruction = S25FL1_SOFT_RESET;
	qspi_sync_serial_run_command(descr, &cmd);
}

static uint8_t s25fl116k_read_reg(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst)
{
    1554:	b500      	push	{lr}
    1556:	b089      	sub	sp, #36	; 0x24
	uint32_t status;
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 1 */
	struct _qspi_command cmd = {
    1558:	2300      	movs	r3, #0
    155a:	9301      	str	r3, [sp, #4]
    155c:	9302      	str	r3, [sp, #8]
    155e:	9303      	str	r3, [sp, #12]
    1560:	9305      	str	r3, [sp, #20]
    1562:	f001 0107 	and.w	r1, r1, #7
    1566:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    156a:	f88d 1004 	strb.w	r1, [sp, #4]
    156e:	f88d 2008 	strb.w	r2, [sp, #8]
    1572:	2304      	movs	r3, #4
    1574:	9304      	str	r3, [sp, #16]
    1576:	ab07      	add	r3, sp, #28
    1578:	9306      	str	r3, [sp, #24]
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .rx_buf                   = &status,
	};

	qspi_sync_serial_run_command(descr, &cmd);
    157a:	a901      	add	r1, sp, #4
    157c:	4b03      	ldr	r3, [pc, #12]	; (158c <s25fl116k_read_reg+0x38>)
    157e:	4798      	blx	r3
	return (uint8_t)status;
}
    1580:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1584:	b009      	add	sp, #36	; 0x24
    1586:	f85d fb04 	ldr.w	pc, [sp], #4
    158a:	bf00      	nop
    158c:	00000ac5 	.word	0x00000ac5

00001590 <s25fl116k_wait_memory_access_ready>:

static void s25fl116k_wait_memory_access_ready(struct qspi_sync_descriptor *descr)
{
    1590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1592:	4607      	mov	r7, r0
	while (s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1) & S25FL1_STATUS_RDYBSY)
    1594:	2605      	movs	r6, #5
    1596:	2500      	movs	r5, #0
    1598:	4c04      	ldr	r4, [pc, #16]	; (15ac <s25fl116k_wait_memory_access_ready+0x1c>)
    159a:	4632      	mov	r2, r6
    159c:	4629      	mov	r1, r5
    159e:	4638      	mov	r0, r7
    15a0:	47a0      	blx	r4
    15a2:	f010 0f01 	tst.w	r0, #1
    15a6:	d1f8      	bne.n	159a <s25fl116k_wait_memory_access_ready+0xa>
		;
}
    15a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15aa:	bf00      	nop
    15ac:	00001555 	.word	0x00001555

000015b0 <s25fl116k_write_enable>:

static void s25fl116k_write_enable(struct qspi_sync_descriptor *descr, uint8_t width, bool en)
{
    15b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15b2:	b087      	sub	sp, #28
    15b4:	4604      	mov	r4, r0
	uint8_t              inst   = (en == true ? S25FL1_WRITE_ENABLE : S25FL1_WRITE_DISABLE);
    15b6:	4616      	mov	r6, r2
    15b8:	2a00      	cmp	r2, #0
    15ba:	bf14      	ite	ne
    15bc:	2206      	movne	r2, #6
    15be:	2204      	moveq	r2, #4
	uint8_t              status = 0;
	struct _qspi_command cmd    = {
    15c0:	2300      	movs	r3, #0
    15c2:	9300      	str	r3, [sp, #0]
    15c4:	9301      	str	r3, [sp, #4]
    15c6:	9302      	str	r3, [sp, #8]
    15c8:	9303      	str	r3, [sp, #12]
    15ca:	9304      	str	r3, [sp, #16]
    15cc:	9305      	str	r3, [sp, #20]
    15ce:	f001 0107 	and.w	r1, r1, #7
    15d2:	f041 0110 	orr.w	r1, r1, #16
    15d6:	f88d 1000 	strb.w	r1, [sp]
    15da:	f88d 2004 	strb.w	r2, [sp, #4]
        .inst_frame.bits.width   = width,
        .inst_frame.bits.inst_en = 1,
        .instruction             = inst,
    };

	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    15de:	2205      	movs	r2, #5
    15e0:	4619      	mov	r1, r3
    15e2:	4b0b      	ldr	r3, [pc, #44]	; (1610 <s25fl116k_write_enable+0x60>)
    15e4:	4798      	blx	r3
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    15e6:	f3c0 0040 	ubfx	r0, r0, #1, #1
    15ea:	42b0      	cmp	r0, r6
    15ec:	d00d      	beq.n	160a <s25fl116k_write_enable+0x5a>
    15ee:	4635      	mov	r5, r6
		qspi_sync_serial_run_command(descr, &cmd);
    15f0:	4f08      	ldr	r7, [pc, #32]	; (1614 <s25fl116k_write_enable+0x64>)
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    15f2:	4e07      	ldr	r6, [pc, #28]	; (1610 <s25fl116k_write_enable+0x60>)
		qspi_sync_serial_run_command(descr, &cmd);
    15f4:	4669      	mov	r1, sp
    15f6:	4620      	mov	r0, r4
    15f8:	47b8      	blx	r7
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    15fa:	2205      	movs	r2, #5
    15fc:	2100      	movs	r1, #0
    15fe:	4620      	mov	r0, r4
    1600:	47b0      	blx	r6
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    1602:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1606:	42a8      	cmp	r0, r5
    1608:	d1f4      	bne.n	15f4 <s25fl116k_write_enable+0x44>
	}
}
    160a:	b007      	add	sp, #28
    160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    160e:	bf00      	nop
    1610:	00001555 	.word	0x00001555
    1614:	00000ac5 	.word	0x00000ac5

00001618 <s25fl116k_write_status>:

static void s25fl116k_write_status(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst, uint8_t *data)
{
    1618:	b5f0      	push	{r4, r5, r6, r7, lr}
    161a:	b087      	sub	sp, #28
    161c:	4606      	mov	r6, r0
    161e:	460f      	mov	r7, r1
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 3 */
	struct _qspi_command cmd = {
    1620:	2400      	movs	r4, #0
    1622:	9400      	str	r4, [sp, #0]
    1624:	9401      	str	r4, [sp, #4]
    1626:	9402      	str	r4, [sp, #8]
    1628:	9405      	str	r4, [sp, #20]
    162a:	f001 0507 	and.w	r5, r1, #7
    162e:	f045 0590 	orr.w	r5, r5, #144	; 0x90
    1632:	f88d 5000 	strb.w	r5, [sp]
    1636:	f04f 0500 	mov.w	r5, #0
    163a:	f04f 0e02 	mov.w	lr, #2
    163e:	f36e 1505 	bfi	r5, lr, #4, #2
    1642:	f88d 5001 	strb.w	r5, [sp, #1]
    1646:	f88d 2004 	strb.w	r2, [sp, #4]
    164a:	2204      	movs	r2, #4
    164c:	9203      	str	r2, [sp, #12]
    164e:	9304      	str	r3, [sp, #16]
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .tx_buf                   = data,
	};
	s25fl116k_write_enable(descr, width, true);
    1650:	2201      	movs	r2, #1
    1652:	4d06      	ldr	r5, [pc, #24]	; (166c <s25fl116k_write_status+0x54>)
    1654:	47a8      	blx	r5
	qspi_sync_serial_run_command(descr, &cmd);
    1656:	4669      	mov	r1, sp
    1658:	4630      	mov	r0, r6
    165a:	4b05      	ldr	r3, [pc, #20]	; (1670 <s25fl116k_write_status+0x58>)
    165c:	4798      	blx	r3
	s25fl116k_write_enable(descr, width, false);
    165e:	4622      	mov	r2, r4
    1660:	4639      	mov	r1, r7
    1662:	4630      	mov	r0, r6
    1664:	47a8      	blx	r5
}
    1666:	b007      	add	sp, #28
    1668:	bdf0      	pop	{r4, r5, r6, r7, pc}
    166a:	bf00      	nop
    166c:	000015b1 	.word	0x000015b1
    1670:	00000ac5 	.word	0x00000ac5

00001674 <s25fl116k_read>:
	}
	return me;
}

int32_t s25fl116k_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1674:	b570      	push	{r4, r5, r6, lr}
    1676:	b086      	sub	sp, #24
	struct s25fl116k *           s25fl1 = (struct s25fl116k *)me;
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    1678:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    167a:	2400      	movs	r4, #0
    167c:	9400      	str	r4, [sp, #0]
    167e:	9401      	str	r4, [sp, #4]
    1680:	9404      	str	r4, [sp, #16]
    1682:	24b0      	movs	r4, #176	; 0xb0
    1684:	f88d 4000 	strb.w	r4, [sp]
    1688:	f04f 0400 	mov.w	r4, #0
    168c:	2601      	movs	r6, #1
    168e:	f366 1405 	bfi	r4, r6, #4, #2
    1692:	f88d 4001 	strb.w	r4, [sp, #1]
    1696:	2408      	movs	r4, #8
    1698:	f88d 4002 	strb.w	r4, [sp, #2]
    169c:	240b      	movs	r4, #11
    169e:	f88d 4004 	strb.w	r4, [sp, #4]
    16a2:	9202      	str	r2, [sp, #8]
    16a4:	9303      	str	r3, [sp, #12]
    16a6:	9105      	str	r1, [sp, #20]
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};

	if (s25fl1->quad_mode) {
    16a8:	7a03      	ldrb	r3, [r0, #8]
    16aa:	b14b      	cbz	r3, 16c0 <s25fl116k_read+0x4c>
		cmd.instruction           = S25FL1_READ_ARRAY_QUAD;
    16ac:	236b      	movs	r3, #107	; 0x6b
    16ae:	f88d 3004 	strb.w	r3, [sp, #4]
		cmd.inst_frame.bits.width = QSPI_INST1_ADDR1_DATA4;
    16b2:	f89d 3000 	ldrb.w	r3, [sp]
    16b6:	2202      	movs	r2, #2
    16b8:	f362 0302 	bfi	r3, r2, #0, #3
    16bc:	f88d 3000 	strb.w	r3, [sp]
	}
	qspi_sync_serial_run_command(descr, &cmd);
    16c0:	4669      	mov	r1, sp
    16c2:	4628      	mov	r0, r5
    16c4:	4b02      	ldr	r3, [pc, #8]	; (16d0 <s25fl116k_read+0x5c>)
    16c6:	4798      	blx	r3
	return ERR_NONE;
}
    16c8:	2000      	movs	r0, #0
    16ca:	b006      	add	sp, #24
    16cc:	bd70      	pop	{r4, r5, r6, pc}
    16ce:	bf00      	nop
    16d0:	00000ac5 	.word	0x00000ac5

000016d4 <s25fl116k_page_program>:
{
    16d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16d6:	4604      	mov	r4, r0
    16d8:	460f      	mov	r7, r1
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    16da:	2201      	movs	r2, #1
    16dc:	2100      	movs	r1, #0
    16de:	4d08      	ldr	r5, [pc, #32]	; (1700 <s25fl116k_page_program+0x2c>)
    16e0:	47a8      	blx	r5
	s25fl116k_wait_memory_access_ready(descr);
    16e2:	4620      	mov	r0, r4
    16e4:	4e07      	ldr	r6, [pc, #28]	; (1704 <s25fl116k_page_program+0x30>)
    16e6:	47b0      	blx	r6
	qspi_sync_serial_run_command(descr, cmd);
    16e8:	4639      	mov	r1, r7
    16ea:	4620      	mov	r0, r4
    16ec:	4b06      	ldr	r3, [pc, #24]	; (1708 <s25fl116k_page_program+0x34>)
    16ee:	4798      	blx	r3
	s25fl116k_wait_memory_access_ready(descr);
    16f0:	4620      	mov	r0, r4
    16f2:	47b0      	blx	r6
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    16f4:	2200      	movs	r2, #0
    16f6:	4611      	mov	r1, r2
    16f8:	4620      	mov	r0, r4
    16fa:	47a8      	blx	r5
    16fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16fe:	bf00      	nop
    1700:	000015b1 	.word	0x000015b1
    1704:	00001591 	.word	0x00001591
    1708:	00000ac5 	.word	0x00000ac5

0000170c <s25fl116k_write>:

int32_t s25fl116k_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1710:	b089      	sub	sp, #36	; 0x24
    1712:	9201      	str	r2, [sp, #4]
    1714:	461e      	mov	r6, r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1716:	6803      	ldr	r3, [r0, #0]
    1718:	9300      	str	r3, [sp, #0]
	uint32_t i = 0;

	/** Size / page_size */
	uint32_t number_of_writes = (length >> 8);

	struct _qspi_command cmd = {
    171a:	2300      	movs	r3, #0
    171c:	9302      	str	r3, [sp, #8]
    171e:	9303      	str	r3, [sp, #12]
    1720:	9307      	str	r3, [sp, #28]
    1722:	23b0      	movs	r3, #176	; 0xb0
    1724:	f88d 3008 	strb.w	r3, [sp, #8]
    1728:	2330      	movs	r3, #48	; 0x30
    172a:	f88d 3009 	strb.w	r3, [sp, #9]
    172e:	2302      	movs	r3, #2
    1730:	f88d 300c 	strb.w	r3, [sp, #12]
    1734:	9204      	str	r2, [sp, #16]
    1736:	9605      	str	r6, [sp, #20]
    1738:	9106      	str	r1, [sp, #24]
	    .buf_len                  = length,
	    .tx_buf                   = buf,
	};

	/** If less than page size */
	if (number_of_writes == 0) {
    173a:	0a37      	lsrs	r7, r6, #8
    173c:	d023      	beq.n	1786 <s25fl116k_write+0x7a>
    173e:	468b      	mov	fp, r1
    1740:	460c      	mov	r4, r1
    1742:	2500      	movs	r5, #0
		s25fl116k_page_program(descr, &cmd);
	} else {
		/** Multiple page */
		for (i = 0; i < number_of_writes; i++) {
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1744:	f44f 7a80 	mov.w	sl, #256	; 0x100
			cmd.address = address;
    1748:	9b01      	ldr	r3, [sp, #4]
    174a:	eba3 0901 	sub.w	r9, r3, r1
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    174e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 17a0 <s25fl116k_write+0x94>
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1752:	f8cd a014 	str.w	sl, [sp, #20]
			cmd.address = address;
    1756:	eb04 0309 	add.w	r3, r4, r9
    175a:	9304      	str	r3, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    175c:	9406      	str	r4, [sp, #24]
    175e:	a902      	add	r1, sp, #8
    1760:	9800      	ldr	r0, [sp, #0]
    1762:	47c0      	blx	r8
			buf += S25FL1_PAGE_SIZE;
    1764:	f504 7480 	add.w	r4, r4, #256	; 0x100
		for (i = 0; i < number_of_writes; i++) {
    1768:	3501      	adds	r5, #1
    176a:	42af      	cmp	r7, r5
    176c:	d1f1      	bne.n	1752 <s25fl116k_write+0x46>
    176e:	022d      	lsls	r5, r5, #8
    1770:	eb0b 0205 	add.w	r2, fp, r5
    1774:	9b01      	ldr	r3, [sp, #4]
    1776:	441d      	add	r5, r3
			address += S25FL1_PAGE_SIZE;
		}
		if (length % S25FL1_PAGE_SIZE) {
    1778:	f016 03ff 	ands.w	r3, r6, #255	; 0xff
    177c:	d108      	bne.n	1790 <s25fl116k_write+0x84>
			cmd.address = address;
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
		}
	}
	return ERR_NONE;
}
    177e:	2000      	movs	r0, #0
    1780:	b009      	add	sp, #36	; 0x24
    1782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s25fl116k_page_program(descr, &cmd);
    1786:	a902      	add	r1, sp, #8
    1788:	9800      	ldr	r0, [sp, #0]
    178a:	4b05      	ldr	r3, [pc, #20]	; (17a0 <s25fl116k_write+0x94>)
    178c:	4798      	blx	r3
    178e:	e7f6      	b.n	177e <s25fl116k_write+0x72>
			cmd.buf_len = length % S25FL1_PAGE_SIZE;
    1790:	9305      	str	r3, [sp, #20]
			cmd.address = address;
    1792:	9504      	str	r5, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1794:	9206      	str	r2, [sp, #24]
    1796:	a902      	add	r1, sp, #8
    1798:	9800      	ldr	r0, [sp, #0]
    179a:	4b01      	ldr	r3, [pc, #4]	; (17a0 <s25fl116k_write+0x94>)
    179c:	4798      	blx	r3
    179e:	e7ee      	b.n	177e <s25fl116k_write+0x72>
    17a0:	000016d5 	.word	0x000016d5

000017a4 <s25fl116k_erase>:

int32_t s25fl116k_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    17a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    17a8:	b087      	sub	sp, #28
    17aa:	4615      	mov	r5, r2
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    17ac:	6806      	ldr	r6, [r0, #0]

	uint32_t temp_addr = address;
	uint32_t temp_len  = length;
	uint8_t  status;

	struct _qspi_command cmd = {
    17ae:	2300      	movs	r3, #0
    17b0:	9300      	str	r3, [sp, #0]
    17b2:	9301      	str	r3, [sp, #4]
    17b4:	9302      	str	r3, [sp, #8]
    17b6:	9303      	str	r3, [sp, #12]
    17b8:	9304      	str	r3, [sp, #16]
    17ba:	9305      	str	r3, [sp, #20]
    17bc:	2330      	movs	r3, #48	; 0x30
    17be:	f88d 3000 	strb.w	r3, [sp]
    17c2:	f04f 0300 	mov.w	r3, #0
    17c6:	2202      	movs	r2, #2
    17c8:	f362 1305 	bfi	r3, r2, #4, #2
    17cc:	f88d 3001 	strb.w	r3, [sp, #1]
	    .inst_frame.bits.inst_en  = 1,
	    .inst_frame.bits.addr_en  = 1,
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	};

	if ((length % S25FL1_SECTOR_SIZE) || (address % S25FL1_SECTOR_SIZE)) {
    17d0:	ea41 0305 	orr.w	r3, r1, r5
    17d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    17d8:	2b00      	cmp	r3, #0
    17da:	d15e      	bne.n	189a <s25fl116k_erase+0xf6>
    17dc:	460c      	mov	r4, r1
		return ERR_INVALID_ARG;
	}
	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    17de:	2205      	movs	r2, #5
    17e0:	2100      	movs	r1, #0
    17e2:	4630      	mov	r0, r6
    17e4:	4b31      	ldr	r3, [pc, #196]	; (18ac <s25fl116k_erase+0x108>)
    17e6:	4798      	blx	r3
	if ((status & S25FL1_STATUS_RDYBSY) != S25FL1_STATUS_RDYBSY_READY)
    17e8:	f010 0f01 	tst.w	r0, #1
    17ec:	d003      	beq.n	17f6 <s25fl116k_erase+0x52>
		return S25FL1_ERROR_BUSY;
    17ee:	2002      	movs	r0, #2
			return ERR_INVALID_ARG;
		}
	}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
	return ERR_NONE;
}
    17f0:	b007      	add	sp, #28
    17f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    17f6:	2201      	movs	r2, #1
    17f8:	2100      	movs	r1, #0
    17fa:	4630      	mov	r0, r6
    17fc:	4b2c      	ldr	r3, [pc, #176]	; (18b0 <s25fl116k_erase+0x10c>)
    17fe:	4798      	blx	r3
	if (address == 0 && length >= S25FL1_FLASH_SIZE) {
    1800:	b914      	cbnz	r4, 1808 <s25fl116k_erase+0x64>
    1802:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
    1806:	d207      	bcs.n	1818 <s25fl116k_erase+0x74>
	while (temp_len > 0) {
    1808:	2d00      	cmp	r5, #0
    180a:	d03f      	beq.n	188c <s25fl116k_erase+0xe8>
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    180c:	f04f 09d8 	mov.w	r9, #216	; 0xd8
			qspi_sync_serial_run_command(descr, &cmd);
    1810:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 18b8 <s25fl116k_erase+0x114>
			s25fl116k_wait_memory_access_ready(descr);
    1814:	4f27      	ldr	r7, [pc, #156]	; (18b4 <s25fl116k_erase+0x110>)
    1816:	e026      	b.n	1866 <s25fl116k_erase+0xc2>
		cmd.inst_frame.bits.addr_en = 0;
    1818:	f89d 3000 	ldrb.w	r3, [sp]
    181c:	f36f 1345 	bfc	r3, #5, #1
    1820:	f88d 3000 	strb.w	r3, [sp]
		cmd.instruction             = S25FL1_CHIP_ERASE_2;
    1824:	23c7      	movs	r3, #199	; 0xc7
    1826:	f88d 3004 	strb.w	r3, [sp, #4]
		qspi_sync_serial_run_command(descr, &cmd);
    182a:	4669      	mov	r1, sp
    182c:	4630      	mov	r0, r6
    182e:	4b22      	ldr	r3, [pc, #136]	; (18b8 <s25fl116k_erase+0x114>)
    1830:	4798      	blx	r3
		temp_len -= S25FL1_FLASH_SIZE;
    1832:	f5a5 1500 	sub.w	r5, r5, #2097152	; 0x200000
		s25fl116k_wait_memory_access_ready(descr);
    1836:	4630      	mov	r0, r6
    1838:	4b1e      	ldr	r3, [pc, #120]	; (18b4 <s25fl116k_erase+0x110>)
    183a:	4798      	blx	r3
    183c:	e7e4      	b.n	1808 <s25fl116k_erase+0x64>
		} else if ((temp_addr % S25FL1_SECTOR_SIZE == 0) && (temp_len >= S25FL1_SECTOR_SIZE)) {
    183e:	f3c4 030b 	ubfx	r3, r4, #0, #12
    1842:	bb6b      	cbnz	r3, 18a0 <s25fl116k_erase+0xfc>
    1844:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    1848:	d32d      	bcc.n	18a6 <s25fl116k_erase+0x102>
			cmd.address     = temp_addr;
    184a:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_4K;
    184c:	2320      	movs	r3, #32
    184e:	f88d 3004 	strb.w	r3, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1852:	4669      	mov	r1, sp
    1854:	4630      	mov	r0, r6
    1856:	47c0      	blx	r8
			temp_addr += S25FL1_SECTOR_SIZE;
    1858:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
			temp_len -= S25FL1_SECTOR_SIZE;
    185c:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
			s25fl116k_wait_memory_access_ready(descr);
    1860:	4630      	mov	r0, r6
    1862:	47b8      	blx	r7
	while (temp_len > 0) {
    1864:	b195      	cbz	r5, 188c <s25fl116k_erase+0xe8>
		if ((temp_addr % S25FL1_BLOCK_SIZE == 0) && (temp_len >= S25FL1_BLOCK_SIZE)) {
    1866:	b2a3      	uxth	r3, r4
    1868:	2b00      	cmp	r3, #0
    186a:	d1e8      	bne.n	183e <s25fl116k_erase+0x9a>
    186c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    1870:	d3e5      	bcc.n	183e <s25fl116k_erase+0x9a>
			cmd.address     = temp_addr;
    1872:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    1874:	f88d 9004 	strb.w	r9, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1878:	4669      	mov	r1, sp
    187a:	4630      	mov	r0, r6
    187c:	47c0      	blx	r8
			temp_addr += S25FL1_BLOCK_SIZE;
    187e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
			temp_len -= S25FL1_BLOCK_SIZE;
    1882:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
			s25fl116k_wait_memory_access_ready(descr);
    1886:	4630      	mov	r0, r6
    1888:	47b8      	blx	r7
    188a:	e7eb      	b.n	1864 <s25fl116k_erase+0xc0>
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    188c:	2200      	movs	r2, #0
    188e:	4611      	mov	r1, r2
    1890:	4630      	mov	r0, r6
    1892:	4b07      	ldr	r3, [pc, #28]	; (18b0 <s25fl116k_erase+0x10c>)
    1894:	4798      	blx	r3
	return ERR_NONE;
    1896:	2000      	movs	r0, #0
    1898:	e7aa      	b.n	17f0 <s25fl116k_erase+0x4c>
		return ERR_INVALID_ARG;
    189a:	f06f 000c 	mvn.w	r0, #12
    189e:	e7a7      	b.n	17f0 <s25fl116k_erase+0x4c>
			return ERR_INVALID_ARG;
    18a0:	f06f 000c 	mvn.w	r0, #12
    18a4:	e7a4      	b.n	17f0 <s25fl116k_erase+0x4c>
    18a6:	f06f 000c 	mvn.w	r0, #12
    18aa:	e7a1      	b.n	17f0 <s25fl116k_erase+0x4c>
    18ac:	00001555 	.word	0x00001555
    18b0:	000015b1 	.word	0x000015b1
    18b4:	00001591 	.word	0x00001591
    18b8:	00000ac5 	.word	0x00000ac5

000018bc <s25fl116k_enable_xip>:

int32_t s25fl116k_enable_xip(const struct spi_nor_flash *const me)
{
    18bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    18be:	b089      	sub	sp, #36	; 0x24
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    18c0:	6804      	ldr	r4, [r0, #0]

	uint8_t dummy_read, status[3];

	struct _qspi_command cmd = {
    18c2:	2500      	movs	r5, #0
    18c4:	9501      	str	r5, [sp, #4]
    18c6:	9502      	str	r5, [sp, #8]
    18c8:	9503      	str	r5, [sp, #12]
    18ca:	9505      	str	r5, [sp, #20]
    18cc:	23f4      	movs	r3, #244	; 0xf4
    18ce:	f88d 3004 	strb.w	r3, [sp, #4]
    18d2:	2302      	movs	r3, #2
    18d4:	f043 0250 	orr.w	r2, r3, #80	; 0x50
    18d8:	f88d 2005 	strb.w	r2, [sp, #5]
    18dc:	2205      	movs	r2, #5
    18de:	f88d 2006 	strb.w	r2, [sp, #6]
    18e2:	21eb      	movs	r1, #235	; 0xeb
    18e4:	f88d 1008 	strb.w	r1, [sp, #8]
    18e8:	f88d 3009 	strb.w	r3, [sp, #9]
    18ec:	2301      	movs	r3, #1
    18ee:	9304      	str	r3, [sp, #16]
    18f0:	f10d 031f 	add.w	r3, sp, #31
    18f4:	9306      	str	r3, [sp, #24]
	    .address                        = 0,
	    .buf_len                        = 1,
	    .rx_buf                         = &dummy_read,
	};

	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    18f6:	4629      	mov	r1, r5
    18f8:	4620      	mov	r0, r4
    18fa:	4e17      	ldr	r6, [pc, #92]	; (1958 <s25fl116k_enable_xip+0x9c>)
    18fc:	47b0      	blx	r6
    18fe:	f88d 001c 	strb.w	r0, [sp, #28]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1902:	2235      	movs	r2, #53	; 0x35
    1904:	4629      	mov	r1, r5
    1906:	4620      	mov	r0, r4
    1908:	47b0      	blx	r6
    190a:	f88d 001d 	strb.w	r0, [sp, #29]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    190e:	2233      	movs	r2, #51	; 0x33
    1910:	4629      	mov	r1, r5
    1912:	4620      	mov	r0, r4
    1914:	47b0      	blx	r6
    1916:	f88d 001e 	strb.w	r0, [sp, #30]

	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    191a:	f89d 001d 	ldrb.w	r0, [sp, #29]
    191e:	f010 0f02 	tst.w	r0, #2
    1922:	d112      	bne.n	194a <s25fl116k_enable_xip+0x8e>
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1924:	4f0d      	ldr	r7, [pc, #52]	; (195c <s25fl116k_enable_xip+0xa0>)
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    1926:	f040 0002 	orr.w	r0, r0, #2
    192a:	f88d 001d 	strb.w	r0, [sp, #29]
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    192e:	ab07      	add	r3, sp, #28
    1930:	2201      	movs	r2, #1
    1932:	4629      	mov	r1, r5
    1934:	4620      	mov	r0, r4
    1936:	47b8      	blx	r7
		status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1938:	2235      	movs	r2, #53	; 0x35
    193a:	4629      	mov	r1, r5
    193c:	4620      	mov	r0, r4
    193e:	47b0      	blx	r6
    1940:	f88d 001d 	strb.w	r0, [sp, #29]
	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1944:	f010 0f02 	tst.w	r0, #2
    1948:	d0ed      	beq.n	1926 <s25fl116k_enable_xip+0x6a>
	}

	qspi_sync_serial_run_command(descr, &cmd);
    194a:	a901      	add	r1, sp, #4
    194c:	4620      	mov	r0, r4
    194e:	4b04      	ldr	r3, [pc, #16]	; (1960 <s25fl116k_enable_xip+0xa4>)
    1950:	4798      	blx	r3
	return ERR_NONE;
}
    1952:	2000      	movs	r0, #0
    1954:	b009      	add	sp, #36	; 0x24
    1956:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1958:	00001555 	.word	0x00001555
    195c:	00001619 	.word	0x00001619
    1960:	00000ac5 	.word	0x00000ac5

00001964 <s25fl116k_disable_xip>:

int32_t s25fl116k_disable_xip(const struct spi_nor_flash *const me)
{
    1964:	b530      	push	{r4, r5, lr}
    1966:	b087      	sub	sp, #28
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1968:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    196a:	2400      	movs	r4, #0
    196c:	9400      	str	r4, [sp, #0]
    196e:	9401      	str	r4, [sp, #4]
    1970:	9402      	str	r4, [sp, #8]
    1972:	9403      	str	r4, [sp, #12]
    1974:	9404      	str	r4, [sp, #16]
    1976:	9405      	str	r4, [sp, #20]
    1978:	2310      	movs	r3, #16
    197a:	f88d 3000 	strb.w	r3, [sp]
    197e:	23ff      	movs	r3, #255	; 0xff
    1980:	f88d 3004 	strb.w	r3, [sp, #4]
	    .inst_frame.bits.width   = QSPI_INST1_ADDR1_DATA1,
	    .inst_frame.bits.inst_en = 1,
	    .instruction             = S25FL1_CONT_MODE_RESET,
	};

	qspi_sync_init(descr, QSPI);
    1984:	4906      	ldr	r1, [pc, #24]	; (19a0 <s25fl116k_disable_xip+0x3c>)
    1986:	4628      	mov	r0, r5
    1988:	4b06      	ldr	r3, [pc, #24]	; (19a4 <s25fl116k_disable_xip+0x40>)
    198a:	4798      	blx	r3
	qspi_sync_enable(descr);
    198c:	4628      	mov	r0, r5
    198e:	4b06      	ldr	r3, [pc, #24]	; (19a8 <s25fl116k_disable_xip+0x44>)
    1990:	4798      	blx	r3

	qspi_sync_serial_run_command(descr, &cmd);
    1992:	4669      	mov	r1, sp
    1994:	4628      	mov	r0, r5
    1996:	4b05      	ldr	r3, [pc, #20]	; (19ac <s25fl116k_disable_xip+0x48>)
    1998:	4798      	blx	r3
	return ERR_NONE;
}
    199a:	4620      	mov	r0, r4
    199c:	b007      	add	sp, #28
    199e:	bd30      	pop	{r4, r5, pc}
    19a0:	42003400 	.word	0x42003400
    19a4:	00000a6d 	.word	0x00000a6d
    19a8:	00000a9d 	.word	0x00000a9d
    19ac:	00000ac5 	.word	0x00000ac5

000019b0 <s25fl116k_construct>:
{
    19b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19b4:	b082      	sub	sp, #8
    19b6:	4606      	mov	r6, r0
    19b8:	4617      	mov	r7, r2
	spi_nor_flash_construct(me, io, &s25fl116k_interface);
    19ba:	4a28      	ldr	r2, [pc, #160]	; (1a5c <s25fl116k_construct+0xac>)
    19bc:	4b28      	ldr	r3, [pc, #160]	; (1a60 <s25fl116k_construct+0xb0>)
    19be:	4798      	blx	r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    19c0:	6834      	ldr	r4, [r6, #0]
	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    19c2:	2205      	movs	r2, #5
    19c4:	2100      	movs	r1, #0
    19c6:	4620      	mov	r0, r4
    19c8:	4d26      	ldr	r5, [pc, #152]	; (1a64 <s25fl116k_construct+0xb4>)
    19ca:	47a8      	blx	r5
    19cc:	f88d 0004 	strb.w	r0, [sp, #4]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    19d0:	2235      	movs	r2, #53	; 0x35
    19d2:	2100      	movs	r1, #0
    19d4:	4620      	mov	r0, r4
    19d6:	47a8      	blx	r5
    19d8:	f88d 0005 	strb.w	r0, [sp, #5]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    19dc:	2233      	movs	r2, #51	; 0x33
    19de:	2100      	movs	r1, #0
    19e0:	4620      	mov	r0, r4
    19e2:	47a8      	blx	r5
    19e4:	f88d 0006 	strb.w	r0, [sp, #6]
	s25fl1->quad_mode = quad_mode;
    19e8:	7237      	strb	r7, [r6, #8]
	if (quad_mode) {
    19ea:	b9cf      	cbnz	r7, 1a20 <s25fl116k_construct+0x70>
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    19ec:	f89d 0005 	ldrb.w	r0, [sp, #5]
    19f0:	f010 0f02 	tst.w	r0, #2
    19f4:	d02d      	beq.n	1a52 <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    19f6:	2500      	movs	r5, #0
    19f8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a68 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    19fc:	4f19      	ldr	r7, [pc, #100]	; (1a64 <s25fl116k_construct+0xb4>)
			status[1] &= (~S25FL1_STATUS_QUAD_ENABLE);
    19fe:	f020 0002 	bic.w	r0, r0, #2
    1a02:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1a06:	ab01      	add	r3, sp, #4
    1a08:	2201      	movs	r2, #1
    1a0a:	4629      	mov	r1, r5
    1a0c:	4620      	mov	r0, r4
    1a0e:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1a10:	2235      	movs	r2, #53	; 0x35
    1a12:	4629      	mov	r1, r5
    1a14:	4620      	mov	r0, r4
    1a16:	47b8      	blx	r7
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    1a18:	f010 0f02 	tst.w	r0, #2
    1a1c:	d1ef      	bne.n	19fe <s25fl116k_construct+0x4e>
    1a1e:	e018      	b.n	1a52 <s25fl116k_construct+0xa2>
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1a20:	f89d 0005 	ldrb.w	r0, [sp, #5]
    1a24:	f010 0f02 	tst.w	r0, #2
    1a28:	d113      	bne.n	1a52 <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1a2a:	2500      	movs	r5, #0
    1a2c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1a68 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1a30:	4f0c      	ldr	r7, [pc, #48]	; (1a64 <s25fl116k_construct+0xb4>)
			status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    1a32:	f040 0002 	orr.w	r0, r0, #2
    1a36:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1a3a:	ab01      	add	r3, sp, #4
    1a3c:	2201      	movs	r2, #1
    1a3e:	4629      	mov	r1, r5
    1a40:	4620      	mov	r0, r4
    1a42:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1a44:	2235      	movs	r2, #53	; 0x35
    1a46:	4629      	mov	r1, r5
    1a48:	4620      	mov	r0, r4
    1a4a:	47b8      	blx	r7
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1a4c:	f010 0f02 	tst.w	r0, #2
    1a50:	d0ef      	beq.n	1a32 <s25fl116k_construct+0x82>
}
    1a52:	4630      	mov	r0, r6
    1a54:	b002      	add	sp, #8
    1a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a5a:	bf00      	nop
    1a5c:	00001c7c 	.word	0x00001c7c
    1a60:	00001a6d 	.word	0x00001a6d
    1a64:	00001555 	.word	0x00001555
    1a68:	00001619 	.word	0x00001619

00001a6c <spi_nor_flash_construct>:
#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
    1a6c:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    1a6e:	6042      	str	r2, [r0, #4]

	return me;
}
    1a70:	4770      	bx	lr

00001a72 <spi_nor_flash_read>:

int32_t spi_nor_flash_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1a72:	b510      	push	{r4, lr}
	return me->interface->read(me, buf, address, length);
    1a74:	6844      	ldr	r4, [r0, #4]
    1a76:	6824      	ldr	r4, [r4, #0]
    1a78:	47a0      	blx	r4
}
    1a7a:	bd10      	pop	{r4, pc}

00001a7c <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    1a7c:	b510      	push	{r4, lr}

	qspi_sync_enable(&QUAD_SPI_0);
    1a7e:	4c06      	ldr	r4, [pc, #24]	; (1a98 <spi_nor_flash_init+0x1c>)
    1a80:	4620      	mov	r0, r4
    1a82:	4b06      	ldr	r3, [pc, #24]	; (1a9c <spi_nor_flash_init+0x20>)
    1a84:	4798      	blx	r3
	SPI_NOR_FLASH_0 = s25fl116k_construct(&SPI_NOR_FLASH_0_descr.parent, &QUAD_SPI_0, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    1a86:	2200      	movs	r2, #0
    1a88:	4621      	mov	r1, r4
    1a8a:	4805      	ldr	r0, [pc, #20]	; (1aa0 <spi_nor_flash_init+0x24>)
    1a8c:	4b05      	ldr	r3, [pc, #20]	; (1aa4 <spi_nor_flash_init+0x28>)
    1a8e:	4798      	blx	r3
    1a90:	4b05      	ldr	r3, [pc, #20]	; (1aa8 <spi_nor_flash_init+0x2c>)
    1a92:	6018      	str	r0, [r3, #0]
    1a94:	bd10      	pop	{r4, pc}
    1a96:	bf00      	nop
    1a98:	20000068 	.word	0x20000068
    1a9c:	00000a9d 	.word	0x00000a9d
    1aa0:	20000024 	.word	0x20000024
    1aa4:	000019b1 	.word	0x000019b1
    1aa8:	200000a4 	.word	0x200000a4

00001aac <__libc_init_array>:
    1aac:	b570      	push	{r4, r5, r6, lr}
    1aae:	4e0d      	ldr	r6, [pc, #52]	; (1ae4 <__libc_init_array+0x38>)
    1ab0:	4c0d      	ldr	r4, [pc, #52]	; (1ae8 <__libc_init_array+0x3c>)
    1ab2:	1ba4      	subs	r4, r4, r6
    1ab4:	10a4      	asrs	r4, r4, #2
    1ab6:	2500      	movs	r5, #0
    1ab8:	42a5      	cmp	r5, r4
    1aba:	d109      	bne.n	1ad0 <__libc_init_array+0x24>
    1abc:	4e0b      	ldr	r6, [pc, #44]	; (1aec <__libc_init_array+0x40>)
    1abe:	4c0c      	ldr	r4, [pc, #48]	; (1af0 <__libc_init_array+0x44>)
    1ac0:	f000 f8e6 	bl	1c90 <_init>
    1ac4:	1ba4      	subs	r4, r4, r6
    1ac6:	10a4      	asrs	r4, r4, #2
    1ac8:	2500      	movs	r5, #0
    1aca:	42a5      	cmp	r5, r4
    1acc:	d105      	bne.n	1ada <__libc_init_array+0x2e>
    1ace:	bd70      	pop	{r4, r5, r6, pc}
    1ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1ad4:	4798      	blx	r3
    1ad6:	3501      	adds	r5, #1
    1ad8:	e7ee      	b.n	1ab8 <__libc_init_array+0xc>
    1ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1ade:	4798      	blx	r3
    1ae0:	3501      	adds	r5, #1
    1ae2:	e7f2      	b.n	1aca <__libc_init_array+0x1e>
    1ae4:	00001c9c 	.word	0x00001c9c
    1ae8:	00001c9c 	.word	0x00001c9c
    1aec:	00001c9c 	.word	0x00001c9c
    1af0:	00001ca0 	.word	0x00001ca0
    1af4:	682f2e2e 	.word	0x682f2e2e
    1af8:	692f6c61 	.word	0x692f6c61
    1afc:	756c636e 	.word	0x756c636e
    1b00:	682f6564 	.word	0x682f6564
    1b04:	775f6c61 	.word	0x775f6c61
    1b08:	682e7464 	.word	0x682e7464
    1b0c:	00000000 	.word	0x00000000
    1b10:	682f2e2e 	.word	0x682f2e2e
    1b14:	732f6c61 	.word	0x732f6c61
    1b18:	682f6372 	.word	0x682f6372
    1b1c:	665f6c61 	.word	0x665f6c61
    1b20:	6873616c 	.word	0x6873616c
    1b24:	0000632e 	.word	0x0000632e
    1b28:	682f2e2e 	.word	0x682f2e2e
    1b2c:	732f6c61 	.word	0x732f6c61
    1b30:	682f6372 	.word	0x682f6372
    1b34:	695f6c61 	.word	0x695f6c61
    1b38:	735f6332 	.word	0x735f6332
    1b3c:	6e79735f 	.word	0x6e79735f
    1b40:	00632e63 	.word	0x00632e63
    1b44:	682f2e2e 	.word	0x682f2e2e
    1b48:	732f6c61 	.word	0x732f6c61
    1b4c:	682f6372 	.word	0x682f6372
    1b50:	695f6c61 	.word	0x695f6c61
    1b54:	00632e6f 	.word	0x00632e6f
    1b58:	682f2e2e 	.word	0x682f2e2e
    1b5c:	732f6c61 	.word	0x732f6c61
    1b60:	682f6372 	.word	0x682f6372
    1b64:	715f6c61 	.word	0x715f6c61
    1b68:	5f697073 	.word	0x5f697073
    1b6c:	636e7973 	.word	0x636e7973
    1b70:	0000632e 	.word	0x0000632e
    1b74:	682f2e2e 	.word	0x682f2e2e
    1b78:	732f6c61 	.word	0x732f6c61
    1b7c:	682f6372 	.word	0x682f6372
    1b80:	735f6c61 	.word	0x735f6c61
    1b84:	6d5f6970 	.word	0x6d5f6970
    1b88:	6e79735f 	.word	0x6e79735f
    1b8c:	00632e63 	.word	0x00632e63
    1b90:	682f2e2e 	.word	0x682f2e2e
    1b94:	732f6c61 	.word	0x732f6c61
    1b98:	682f6372 	.word	0x682f6372
    1b9c:	745f6c61 	.word	0x745f6c61
    1ba0:	72656d69 	.word	0x72656d69
    1ba4:	0000632e 	.word	0x0000632e
    1ba8:	682f2e2e 	.word	0x682f2e2e
    1bac:	752f6c61 	.word	0x752f6c61
    1bb0:	736c6974 	.word	0x736c6974
    1bb4:	6372732f 	.word	0x6372732f
    1bb8:	6974752f 	.word	0x6974752f
    1bbc:	6c5f736c 	.word	0x6c5f736c
    1bc0:	2e747369 	.word	0x2e747369
    1bc4:	00000063 	.word	0x00000063
    1bc8:	682f2e2e 	.word	0x682f2e2e
    1bcc:	6e2f6c70 	.word	0x6e2f6c70
    1bd0:	74636d76 	.word	0x74636d76
    1bd4:	682f6c72 	.word	0x682f6c72
    1bd8:	6e5f6c70 	.word	0x6e5f6c70
    1bdc:	74636d76 	.word	0x74636d76
    1be0:	632e6c72 	.word	0x632e6c72
    1be4:	00000000 	.word	0x00000000
    1be8:	682f2e2e 	.word	0x682f2e2e
    1bec:	712f6c70 	.word	0x712f6c70
    1bf0:	2f697073 	.word	0x2f697073
    1bf4:	5f6c7068 	.word	0x5f6c7068
    1bf8:	69707371 	.word	0x69707371
    1bfc:	0000632e 	.word	0x0000632e
    1c00:	682f2e2e 	.word	0x682f2e2e
    1c04:	722f6c70 	.word	0x722f6c70
    1c08:	682f6374 	.word	0x682f6374
    1c0c:	725f6c70 	.word	0x725f6c70
    1c10:	632e6374 	.word	0x632e6374
    1c14:	00000000 	.word	0x00000000
    1c18:	40003000 	.word	0x40003000
    1c1c:	40003400 	.word	0x40003400
    1c20:	41012000 	.word	0x41012000
    1c24:	41014000 	.word	0x41014000
    1c28:	43000000 	.word	0x43000000
    1c2c:	43000400 	.word	0x43000400

00001c30 <_i2cms>:
	...
    1c48:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1c58:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    1c68:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    1c78:	00000000                                ....

00001c7c <s25fl116k_interface>:
    1c7c:	00001675 0000170d 000017a5 000018bd     u...............
    1c8c:	00001965                                e...

00001c90 <_init>:
    1c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c92:	bf00      	nop
    1c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1c96:	bc08      	pop	{r3}
    1c98:	469e      	mov	lr, r3
    1c9a:	4770      	bx	lr

00001c9c <__init_array_start>:
    1c9c:	00000289 	.word	0x00000289

00001ca0 <_fini>:
    1ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ca2:	bf00      	nop
    1ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ca6:	bc08      	pop	{r3}
    1ca8:	469e      	mov	lr, r3
    1caa:	4770      	bx	lr

00001cac <__fini_array_start>:
    1cac:	00000265 	.word	0x00000265
