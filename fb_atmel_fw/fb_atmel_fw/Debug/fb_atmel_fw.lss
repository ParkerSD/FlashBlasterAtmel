
fb_atmel_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012ac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  000112ac  2**0
                  CONTENTS
  2 .bkupram      00000000  47000000  47000000  000112ac  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000112ac  2**0
                  CONTENTS
  4 .bss          0000009c  20000000  20000000  00020000  2**2
                  ALLOC
  5 .stack        0000c004  2000009c  2000009c  00020000  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000112ac  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000112da  2**0
                  CONTENTS, READONLY
  8 .debug_info   000287a4  00000000  00000000  00011333  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003858  00000000  00000000  00039ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000e5e1  00000000  00000000  0003d32f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b60  00000000  00000000  0004b910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f98  00000000  00000000  0004c470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000298d5  00000000  00000000  0004d408  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014a4a  00000000  00000000  00076cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e48ae  00000000  00000000  0008b727  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001d60  00000000  00000000  0016ffd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 c0 00 20 ed 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	69 0e 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     i...............
      7c:	dd 02 00 00 dd 02 00 00 65 0c 00 00 71 0c 00 00     ........e...q...
      8c:	7d 0c 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     }...............
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 5d 0d 00 00 71 0d 00 00     ........]...q...
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	b9 0d 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     190:	00 00 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d0:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
	...
     20c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     21c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     22c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     23c:	dd 02 00 00 00 00 00 00 dd 02 00 00 dd 02 00 00     ................
     24c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     25c:	dd 02 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000000 	.word	0x20000000
     280:	00000000 	.word	0x00000000
     284:	000012ac 	.word	0x000012ac

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000012ac 	.word	0x000012ac
     2c4:	20000004 	.word	0x20000004
     2c8:	000012ac 	.word	0x000012ac
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	0000057d 	.word	0x0000057d

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{		volatile int c = 1;
     2dc:	b082      	sub	sp, #8
     2de:	2301      	movs	r3, #1
     2e0:	9301      	str	r3, [sp, #4]
        while (c == 1) {
     2e2:	9b01      	ldr	r3, [sp, #4]
     2e4:	2b01      	cmp	r3, #1
     2e6:	d0fc      	beq.n	2e2 <Dummy_Handler+0x6>
        }
}
     2e8:	b002      	add	sp, #8
     2ea:	4770      	bx	lr

000002ec <Reset_Handler>:
{
     2ec:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2ee:	4b1c      	ldr	r3, [pc, #112]	; (360 <Reset_Handler+0x74>)
     2f0:	4a1c      	ldr	r2, [pc, #112]	; (364 <Reset_Handler+0x78>)
     2f2:	429a      	cmp	r2, r3
     2f4:	d010      	beq.n	318 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2f6:	4b1c      	ldr	r3, [pc, #112]	; (368 <Reset_Handler+0x7c>)
     2f8:	4a19      	ldr	r2, [pc, #100]	; (360 <Reset_Handler+0x74>)
     2fa:	429a      	cmp	r2, r3
     2fc:	d20c      	bcs.n	318 <Reset_Handler+0x2c>
     2fe:	3b01      	subs	r3, #1
     300:	1a9b      	subs	r3, r3, r2
     302:	f023 0303 	bic.w	r3, r3, #3
     306:	3304      	adds	r3, #4
     308:	4413      	add	r3, r2
     30a:	4916      	ldr	r1, [pc, #88]	; (364 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     30c:	f851 0b04 	ldr.w	r0, [r1], #4
     310:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     314:	429a      	cmp	r2, r3
     316:	d1f9      	bne.n	30c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     318:	4b14      	ldr	r3, [pc, #80]	; (36c <Reset_Handler+0x80>)
     31a:	4a15      	ldr	r2, [pc, #84]	; (370 <Reset_Handler+0x84>)
     31c:	429a      	cmp	r2, r3
     31e:	d20a      	bcs.n	336 <Reset_Handler+0x4a>
     320:	3b01      	subs	r3, #1
     322:	1a9b      	subs	r3, r3, r2
     324:	f023 0303 	bic.w	r3, r3, #3
     328:	3304      	adds	r3, #4
     32a:	4413      	add	r3, r2
                *pDest++ = 0;
     32c:	2100      	movs	r1, #0
     32e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     332:	4293      	cmp	r3, r2
     334:	d1fb      	bne.n	32e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     336:	4b0f      	ldr	r3, [pc, #60]	; (374 <Reset_Handler+0x88>)
     338:	4a0f      	ldr	r2, [pc, #60]	; (378 <Reset_Handler+0x8c>)
     33a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     33e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     340:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     344:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     34c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     350:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     354:	4b09      	ldr	r3, [pc, #36]	; (37c <Reset_Handler+0x90>)
     356:	4798      	blx	r3
        main();
     358:	4b09      	ldr	r3, [pc, #36]	; (380 <Reset_Handler+0x94>)
     35a:	4798      	blx	r3
     35c:	e7fe      	b.n	35c <Reset_Handler+0x70>
     35e:	bf00      	nop
     360:	20000000 	.word	0x20000000
     364:	000012ac 	.word	0x000012ac
     368:	20000000 	.word	0x20000000
     36c:	2000009c 	.word	0x2000009c
     370:	20000000 	.word	0x20000000
     374:	e000ed00 	.word	0xe000ed00
     378:	00000000 	.word	0x00000000
     37c:	000010dd 	.word	0x000010dd
     380:	000010c1 	.word	0x000010c1

00000384 <EXTERNAL_IRQ_0_init>:
struct i2c_s_sync_descriptor I2C_0;

struct wdt_descriptor WDT_0;

void EXTERNAL_IRQ_0_init(void)
{
     384:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     386:	2040      	movs	r0, #64	; 0x40
     388:	4b2e      	ldr	r3, [pc, #184]	; (444 <EXTERNAL_IRQ_0_init+0xc0>)
     38a:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     38e:	4a2e      	ldr	r2, [pc, #184]	; (448 <EXTERNAL_IRQ_0_init+0xc4>)
     390:	6953      	ldr	r3, [r2, #20]
     392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     396:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     398:	4b2c      	ldr	r3, [pc, #176]	; (44c <EXTERNAL_IRQ_0_init+0xc8>)
     39a:	2220      	movs	r2, #32
     39c:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     39e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     3a2:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     3a6:	629a      	str	r2, [r3, #40]	; 0x28
     3a8:	4929      	ldr	r1, [pc, #164]	; (450 <EXTERNAL_IRQ_0_init+0xcc>)
     3aa:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3ac:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
     3b0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3b8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     3bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3c0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3c8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3cc:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3d4:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d6:	4a1f      	ldr	r2, [pc, #124]	; (454 <EXTERNAL_IRQ_0_init+0xd0>)
     3d8:	629a      	str	r2, [r3, #40]	; 0x28
     3da:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3dc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     3e0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3e8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     3ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3f8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     400:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     404:	2280      	movs	r2, #128	; 0x80
     406:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     408:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     40c:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     410:	629a      	str	r2, [r3, #40]	; 0x28
     412:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     414:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
     418:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     41c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     420:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     424:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     428:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     430:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     434:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     438:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07A_EIC_EXTINT7);

	ext_irq_init();
     43c:	4b06      	ldr	r3, [pc, #24]	; (458 <EXTERNAL_IRQ_0_init+0xd4>)
     43e:	4798      	blx	r3
     440:	bd08      	pop	{r3, pc}
     442:	bf00      	nop
     444:	40001c00 	.word	0x40001c00
     448:	40000800 	.word	0x40000800
     44c:	41008000 	.word	0x41008000
     450:	c0020000 	.word	0xc0020000
     454:	40020040 	.word	0x40020040
     458:	00000685 	.word	0x00000685

0000045c <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     45c:	4a02      	ldr	r2, [pc, #8]	; (468 <FLASH_0_CLOCK_init+0xc>)
     45e:	6913      	ldr	r3, [r2, #16]
     460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     464:	6113      	str	r3, [r2, #16]
     466:	4770      	bx	lr
     468:	40000800 	.word	0x40000800

0000046c <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     46c:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     46e:	4b03      	ldr	r3, [pc, #12]	; (47c <FLASH_0_init+0x10>)
     470:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     472:	4903      	ldr	r1, [pc, #12]	; (480 <FLASH_0_init+0x14>)
     474:	4803      	ldr	r0, [pc, #12]	; (484 <FLASH_0_init+0x18>)
     476:	4b04      	ldr	r3, [pc, #16]	; (488 <FLASH_0_init+0x1c>)
     478:	4798      	blx	r3
     47a:	bd08      	pop	{r3, pc}
     47c:	0000045d 	.word	0x0000045d
     480:	41004000 	.word	0x41004000
     484:	20000040 	.word	0x20000040
     488:	000006c5 	.word	0x000006c5

0000048c <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     48c:	4b16      	ldr	r3, [pc, #88]	; (4e8 <I2C_0_PORT_init+0x5c>)
     48e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
     492:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     496:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     49a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     49e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4a2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4aa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ae:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4b2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4b6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4ba:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
     4be:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c6:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4d2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4d6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4da:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4de:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4e2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     4e6:	4770      	bx	lr
     4e8:	41008000 	.word	0x41008000

000004ec <I2C_0_CLOCK_init>:
     4ec:	4b06      	ldr	r3, [pc, #24]	; (508 <I2C_0_CLOCK_init+0x1c>)
     4ee:	2240      	movs	r2, #64	; 0x40
     4f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     4f4:	2243      	movs	r2, #67	; 0x43
     4f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     4fa:	4a04      	ldr	r2, [pc, #16]	; (50c <I2C_0_CLOCK_init+0x20>)
     4fc:	6a13      	ldr	r3, [r2, #32]
     4fe:	f043 0302 	orr.w	r3, r3, #2
     502:	6213      	str	r3, [r2, #32]
     504:	4770      	bx	lr
     506:	bf00      	nop
     508:	40001c00 	.word	0x40001c00
     50c:	40000800 	.word	0x40000800

00000510 <I2C_0_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void I2C_0_init(void)
{
     510:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     512:	4b04      	ldr	r3, [pc, #16]	; (524 <I2C_0_init+0x14>)
     514:	4798      	blx	r3
	i2c_s_sync_init(&I2C_0, SERCOM5);
     516:	4904      	ldr	r1, [pc, #16]	; (528 <I2C_0_init+0x18>)
     518:	4804      	ldr	r0, [pc, #16]	; (52c <I2C_0_init+0x1c>)
     51a:	4b05      	ldr	r3, [pc, #20]	; (530 <I2C_0_init+0x20>)
     51c:	4798      	blx	r3
	I2C_0_PORT_init();
     51e:	4b05      	ldr	r3, [pc, #20]	; (534 <I2C_0_init+0x24>)
     520:	4798      	blx	r3
     522:	bd08      	pop	{r3, pc}
     524:	000004ed 	.word	0x000004ed
     528:	43000400 	.word	0x43000400
     52c:	20000064 	.word	0x20000064
     530:	000007e1 	.word	0x000007e1
     534:	0000048d 	.word	0x0000048d

00000538 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     538:	4a02      	ldr	r2, [pc, #8]	; (544 <WDT_0_CLOCK_init+0xc>)
     53a:	6953      	ldr	r3, [r2, #20]
     53c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     540:	6153      	str	r3, [r2, #20]
     542:	4770      	bx	lr
     544:	40000800 	.word	0x40000800

00000548 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     548:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     54a:	4b06      	ldr	r3, [pc, #24]	; (564 <WDT_0_init+0x1c>)
     54c:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     54e:	2248      	movs	r2, #72	; 0x48
     550:	4905      	ldr	r1, [pc, #20]	; (568 <WDT_0_init+0x20>)
     552:	2001      	movs	r0, #1
     554:	4b05      	ldr	r3, [pc, #20]	; (56c <WDT_0_init+0x24>)
     556:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     558:	4805      	ldr	r0, [pc, #20]	; (570 <WDT_0_init+0x28>)
     55a:	4b06      	ldr	r3, [pc, #24]	; (574 <WDT_0_init+0x2c>)
     55c:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     55e:	4b06      	ldr	r3, [pc, #24]	; (578 <WDT_0_init+0x30>)
     560:	4798      	blx	r3
     562:	bd08      	pop	{r3, pc}
     564:	00000539 	.word	0x00000539
     568:	00001124 	.word	0x00001124
     56c:	00000a05 	.word	0x00000a05
     570:	2000005c 	.word	0x2000005c
     574:	40002000 	.word	0x40002000
     578:	00001055 	.word	0x00001055

0000057c <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     57c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     57e:	4b0b      	ldr	r3, [pc, #44]	; (5ac <system_init+0x30>)
     580:	4798      	blx	r3
	init_mcu();

	EXTERNAL_IRQ_0_init();
     582:	4b0b      	ldr	r3, [pc, #44]	; (5b0 <system_init+0x34>)
     584:	4798      	blx	r3

	FLASH_0_init();
     586:	4b0b      	ldr	r3, [pc, #44]	; (5b4 <system_init+0x38>)
     588:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     58a:	4a0b      	ldr	r2, [pc, #44]	; (5b8 <system_init+0x3c>)
     58c:	6953      	ldr	r3, [r2, #20]
     58e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     592:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     594:	4b09      	ldr	r3, [pc, #36]	; (5bc <system_init+0x40>)
     596:	4798      	blx	r3
     598:	4602      	mov	r2, r0
     59a:	4909      	ldr	r1, [pc, #36]	; (5c0 <system_init+0x44>)
     59c:	4809      	ldr	r0, [pc, #36]	; (5c4 <system_init+0x48>)
     59e:	4b0a      	ldr	r3, [pc, #40]	; (5c8 <system_init+0x4c>)
     5a0:	4798      	blx	r3

	//QUAD_SPI_0_init();

	TIMER_0_init();

	I2C_0_init();
     5a2:	4b0a      	ldr	r3, [pc, #40]	; (5cc <system_init+0x50>)
     5a4:	4798      	blx	r3

	WDT_0_init();
     5a6:	4b0a      	ldr	r3, [pc, #40]	; (5d0 <system_init+0x54>)
     5a8:	4798      	blx	r3
     5aa:	bd08      	pop	{r3, pc}
     5ac:	00000a6d 	.word	0x00000a6d
     5b0:	00000385 	.word	0x00000385
     5b4:	0000046d 	.word	0x0000046d
     5b8:	40000800 	.word	0x40000800
     5bc:	00000e65 	.word	0x00000e65
     5c0:	40002400 	.word	0x40002400
     5c4:	20000070 	.word	0x20000070
     5c8:	000009c9 	.word	0x000009c9
     5cc:	00000511 	.word	0x00000511
     5d0:	00000549 	.word	0x00000549

000005d4 <I2C_Read>:
	timer_add_task(&TIMER_0, &TIMER_0_task2);
	timer_start(&TIMER_0);
}

void I2C_Read(uint8_t* buffer, uint16_t length)
{
     5d4:	b570      	push	{r4, r5, r6, lr}
     5d6:	b082      	sub	sp, #8
     5d8:	4605      	mov	r5, r0
     5da:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     5dc:	4c09      	ldr	r4, [pc, #36]	; (604 <I2C_Read+0x30>)
     5de:	a901      	add	r1, sp, #4
     5e0:	4620      	mov	r0, r4
     5e2:	4b09      	ldr	r3, [pc, #36]	; (608 <I2C_Read+0x34>)
     5e4:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     5e6:	2110      	movs	r1, #16
     5e8:	4620      	mov	r0, r4
     5ea:	4b08      	ldr	r3, [pc, #32]	; (60c <I2C_Read+0x38>)
     5ec:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     5ee:	4620      	mov	r0, r4
     5f0:	4b07      	ldr	r3, [pc, #28]	; (610 <I2C_Read+0x3c>)
     5f2:	4798      	blx	r3

	io_read(io, buffer, length);
     5f4:	4632      	mov	r2, r6
     5f6:	4629      	mov	r1, r5
     5f8:	9801      	ldr	r0, [sp, #4]
     5fa:	4b06      	ldr	r3, [pc, #24]	; (614 <I2C_Read+0x40>)
     5fc:	4798      	blx	r3
}
     5fe:	b002      	add	sp, #8
     600:	bd70      	pop	{r4, r5, r6, pc}
     602:	bf00      	nop
     604:	20000064 	.word	0x20000064
     608:	00000895 	.word	0x00000895
     60c:	00000829 	.word	0x00000829
     610:	0000086d 	.word	0x0000086d
     614:	000008c1 	.word	0x000008c1

00000618 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     618:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     61c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     61e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     620:	f3bf 8f5f 	dmb	sy
     624:	4770      	bx	lr

00000626 <atomic_leave_critical>:
     626:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     62a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     62c:	f383 8810 	msr	PRIMASK, r3
     630:	4770      	bx	lr
	...

00000634 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     634:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     636:	4b12      	ldr	r3, [pc, #72]	; (680 <process_ext_irq+0x4c>)
     638:	68d9      	ldr	r1, [r3, #12]
     63a:	4288      	cmp	r0, r1
     63c:	d01d      	beq.n	67a <process_ext_irq+0x46>
     63e:	2201      	movs	r2, #1
     640:	2503      	movs	r5, #3
     642:	2400      	movs	r4, #0
     644:	461e      	mov	r6, r3
				ext_irqs[middle].cb();
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
     646:	4288      	cmp	r0, r1
			lower = middle + 1;
     648:	bf87      	ittee	hi
     64a:	3201      	addhi	r2, #1
     64c:	b2d4      	uxtbhi	r4, r2
		} else {
			upper = middle - 1;
     64e:	f102 32ff 	addls.w	r2, r2, #4294967295
     652:	b2d5      	uxtbls	r5, r2
	while (upper >= lower) {
     654:	42a5      	cmp	r5, r4
     656:	d312      	bcc.n	67e <process_ext_irq+0x4a>
		middle = (upper + lower) >> 1;
     658:	192b      	adds	r3, r5, r4
     65a:	105b      	asrs	r3, r3, #1
     65c:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     65e:	2a02      	cmp	r2, #2
     660:	d80d      	bhi.n	67e <process_ext_irq+0x4a>
     662:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     664:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
     668:	6849      	ldr	r1, [r1, #4]
     66a:	4281      	cmp	r1, r0
     66c:	d1eb      	bne.n	646 <process_ext_irq+0x12>
			if (ext_irqs[middle].cb) {
     66e:	4a04      	ldr	r2, [pc, #16]	; (680 <process_ext_irq+0x4c>)
     670:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     674:	b11b      	cbz	r3, 67e <process_ext_irq+0x4a>
				ext_irqs[middle].cb();
     676:	4798      	blx	r3
     678:	bd70      	pop	{r4, r5, r6, pc}
		if (ext_irqs[middle].pin == pin) {
     67a:	2301      	movs	r3, #1
     67c:	e7f7      	b.n	66e <process_ext_irq+0x3a>
     67e:	bd70      	pop	{r4, r5, r6, pc}
     680:	2000001c 	.word	0x2000001c

00000684 <ext_irq_init>:
{
     684:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     686:	4b07      	ldr	r3, [pc, #28]	; (6a4 <ext_irq_init+0x20>)
     688:	f04f 31ff 	mov.w	r1, #4294967295
     68c:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
     68e:	2200      	movs	r2, #0
     690:	601a      	str	r2, [r3, #0]
		ext_irqs[i].pin = 0xFFFFFFFF;
     692:	60d9      	str	r1, [r3, #12]
		ext_irqs[i].cb  = NULL;
     694:	609a      	str	r2, [r3, #8]
		ext_irqs[i].pin = 0xFFFFFFFF;
     696:	6159      	str	r1, [r3, #20]
		ext_irqs[i].cb  = NULL;
     698:	611a      	str	r2, [r3, #16]
	return _ext_irq_init(process_ext_irq);
     69a:	4803      	ldr	r0, [pc, #12]	; (6a8 <ext_irq_init+0x24>)
     69c:	4b03      	ldr	r3, [pc, #12]	; (6ac <ext_irq_init+0x28>)
     69e:	4798      	blx	r3
}
     6a0:	bd08      	pop	{r3, pc}
     6a2:	bf00      	nop
     6a4:	2000001c 	.word	0x2000001c
     6a8:	00000635 	.word	0x00000635
     6ac:	00000b81 	.word	0x00000b81

000006b0 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     6b0:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     6b2:	6943      	ldr	r3, [r0, #20]
     6b4:	b103      	cbz	r3, 6b8 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     6b6:	4798      	blx	r3
     6b8:	bd08      	pop	{r3, pc}

000006ba <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     6ba:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     6bc:	6983      	ldr	r3, [r0, #24]
     6be:	b103      	cbz	r3, 6c2 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     6c0:	4798      	blx	r3
     6c2:	bd08      	pop	{r3, pc}

000006c4 <flash_init>:
{
     6c4:	b538      	push	{r3, r4, r5, lr}
     6c6:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     6c8:	4604      	mov	r4, r0
     6ca:	b190      	cbz	r0, 6f2 <flash_init+0x2e>
     6cc:	1c08      	adds	r0, r1, #0
     6ce:	bf18      	it	ne
     6d0:	2001      	movne	r0, #1
     6d2:	2238      	movs	r2, #56	; 0x38
     6d4:	4908      	ldr	r1, [pc, #32]	; (6f8 <flash_init+0x34>)
     6d6:	4b09      	ldr	r3, [pc, #36]	; (6fc <flash_init+0x38>)
     6d8:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     6da:	4629      	mov	r1, r5
     6dc:	4620      	mov	r0, r4
     6de:	4b08      	ldr	r3, [pc, #32]	; (700 <flash_init+0x3c>)
     6e0:	4798      	blx	r3
	if (rc) {
     6e2:	4603      	mov	r3, r0
     6e4:	b918      	cbnz	r0, 6ee <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     6e6:	4a07      	ldr	r2, [pc, #28]	; (704 <flash_init+0x40>)
     6e8:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     6ea:	4a07      	ldr	r2, [pc, #28]	; (708 <flash_init+0x44>)
     6ec:	6062      	str	r2, [r4, #4]
}
     6ee:	4618      	mov	r0, r3
     6f0:	bd38      	pop	{r3, r4, r5, pc}
     6f2:	2000      	movs	r0, #0
     6f4:	e7ed      	b.n	6d2 <flash_init+0xe>
     6f6:	bf00      	nop
     6f8:	00001140 	.word	0x00001140
     6fc:	00000a05 	.word	0x00000a05
     700:	00000ce5 	.word	0x00000ce5
     704:	000006b1 	.word	0x000006b1
     708:	000006bb 	.word	0x000006bb

0000070c <i2c_s_sync_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_sync_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     710:	460f      	mov	r7, r1
     712:	4690      	mov	r8, r2
	uint16_t                      offset = 0;
	struct i2c_s_sync_descriptor *descr  = CONTAINER_OF(io, struct i2c_s_sync_descriptor, io);

	ASSERT(io && buf && length);
     714:	4604      	mov	r4, r0
     716:	b320      	cbz	r0, 762 <i2c_s_sync_write+0x56>
     718:	b329      	cbz	r1, 766 <i2c_s_sync_write+0x5a>
     71a:	1c10      	adds	r0, r2, #0
     71c:	bf18      	it	ne
     71e:	2001      	movne	r0, #1
     720:	22b6      	movs	r2, #182	; 0xb6
     722:	4912      	ldr	r1, [pc, #72]	; (76c <i2c_s_sync_write+0x60>)
     724:	4b12      	ldr	r3, [pc, #72]	; (770 <i2c_s_sync_write+0x64>)
     726:	4798      	blx	r3

	while (!_i2c_s_sync_is_byte_sent(&descr->device))
     728:	3c04      	subs	r4, #4
     72a:	4d12      	ldr	r5, [pc, #72]	; (774 <i2c_s_sync_write+0x68>)
     72c:	4620      	mov	r0, r4
     72e:	47a8      	blx	r5
     730:	2800      	cmp	r0, #0
     732:	d0fb      	beq.n	72c <i2c_s_sync_write+0x20>
     734:	3f01      	subs	r7, #1
     736:	2600      	movs	r6, #0
		;
	do {
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     738:	f8df 9040 	ldr.w	r9, [pc, #64]	; 77c <i2c_s_sync_write+0x70>
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     73c:	4d0d      	ldr	r5, [pc, #52]	; (774 <i2c_s_sync_write+0x68>)
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     73e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     742:	4620      	mov	r0, r4
     744:	47c8      	blx	r9
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     746:	4620      	mov	r0, r4
     748:	47a8      	blx	r5
     74a:	2800      	cmp	r0, #0
     74c:	d0fb      	beq.n	746 <i2c_s_sync_write+0x3a>
			;
	} while (++offset < length);
     74e:	3601      	adds	r6, #1
     750:	b2b6      	uxth	r6, r6
     752:	45b0      	cmp	r8, r6
     754:	d8f3      	bhi.n	73e <i2c_s_sync_write+0x32>

	/* To ensure no more data needs to be sent */
	_i2c_s_sync_clear_data_ready_flag(&descr->device);
     756:	4620      	mov	r0, r4
     758:	4b07      	ldr	r3, [pc, #28]	; (778 <i2c_s_sync_write+0x6c>)
     75a:	4798      	blx	r3

	return (int32_t)offset;
}
     75c:	4630      	mov	r0, r6
     75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     762:	2000      	movs	r0, #0
     764:	e7dc      	b.n	720 <i2c_s_sync_write+0x14>
     766:	2000      	movs	r0, #0
     768:	e7da      	b.n	720 <i2c_s_sync_write+0x14>
     76a:	bf00      	nop
     76c:	00001158 	.word	0x00001158
     770:	00000a05 	.word	0x00000a05
     774:	00001037 	.word	0x00001037
     778:	0000104b 	.word	0x0000104b
     77c:	00001029 	.word	0x00001029

00000780 <i2c_s_sync_read>:
{
     780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     784:	460f      	mov	r7, r1
     786:	4690      	mov	r8, r2
	ASSERT(io && buf && length);
     788:	4604      	mov	r4, r0
     78a:	b1e0      	cbz	r0, 7c6 <i2c_s_sync_read+0x46>
     78c:	b1e9      	cbz	r1, 7ca <i2c_s_sync_read+0x4a>
     78e:	1c10      	adds	r0, r2, #0
     790:	bf18      	it	ne
     792:	2001      	movne	r0, #1
     794:	229c      	movs	r2, #156	; 0x9c
     796:	490e      	ldr	r1, [pc, #56]	; (7d0 <i2c_s_sync_read+0x50>)
     798:	4b0e      	ldr	r3, [pc, #56]	; (7d4 <i2c_s_sync_read+0x54>)
     79a:	4798      	blx	r3
     79c:	3f01      	subs	r7, #1
	uint16_t                      offset = 0;
     79e:	2600      	movs	r6, #0
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     7a0:	3c04      	subs	r4, #4
     7a2:	4d0d      	ldr	r5, [pc, #52]	; (7d8 <i2c_s_sync_read+0x58>)
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     7a4:	f8df 9034 	ldr.w	r9, [pc, #52]	; 7dc <i2c_s_sync_read+0x5c>
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     7a8:	4620      	mov	r0, r4
     7aa:	47a8      	blx	r5
     7ac:	2800      	cmp	r0, #0
     7ae:	d0fb      	beq.n	7a8 <i2c_s_sync_read+0x28>
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     7b0:	4620      	mov	r0, r4
     7b2:	47c8      	blx	r9
     7b4:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     7b8:	3601      	adds	r6, #1
     7ba:	b2b6      	uxth	r6, r6
     7bc:	45b0      	cmp	r8, r6
     7be:	d8f3      	bhi.n	7a8 <i2c_s_sync_read+0x28>
}
     7c0:	4630      	mov	r0, r6
     7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     7c6:	2000      	movs	r0, #0
     7c8:	e7e4      	b.n	794 <i2c_s_sync_read+0x14>
     7ca:	2000      	movs	r0, #0
     7cc:	e7e2      	b.n	794 <i2c_s_sync_read+0x14>
     7ce:	bf00      	nop
     7d0:	00001158 	.word	0x00001158
     7d4:	00000a05 	.word	0x00000a05
     7d8:	00001041 	.word	0x00001041
     7dc:	0000102f 	.word	0x0000102f

000007e0 <i2c_s_sync_init>:
{
     7e0:	b538      	push	{r3, r4, r5, lr}
     7e2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     7e4:	4604      	mov	r4, r0
     7e6:	b190      	cbz	r0, 80e <i2c_s_sync_init+0x2e>
     7e8:	1c08      	adds	r0, r1, #0
     7ea:	bf18      	it	ne
     7ec:	2001      	movne	r0, #1
     7ee:	2235      	movs	r2, #53	; 0x35
     7f0:	4908      	ldr	r1, [pc, #32]	; (814 <i2c_s_sync_init+0x34>)
     7f2:	4b09      	ldr	r3, [pc, #36]	; (818 <i2c_s_sync_init+0x38>)
     7f4:	4798      	blx	r3
	init_status = _i2c_s_sync_init(&descr->device, hw);
     7f6:	4629      	mov	r1, r5
     7f8:	4620      	mov	r0, r4
     7fa:	4b08      	ldr	r3, [pc, #32]	; (81c <i2c_s_sync_init+0x3c>)
     7fc:	4798      	blx	r3
	if (init_status) {
     7fe:	4603      	mov	r3, r0
     800:	b918      	cbnz	r0, 80a <i2c_s_sync_init+0x2a>
	descr->io.read  = i2c_s_sync_read;
     802:	4a07      	ldr	r2, [pc, #28]	; (820 <i2c_s_sync_init+0x40>)
     804:	60a2      	str	r2, [r4, #8]
	descr->io.write = i2c_s_sync_write;
     806:	4a07      	ldr	r2, [pc, #28]	; (824 <i2c_s_sync_init+0x44>)
     808:	6062      	str	r2, [r4, #4]
}
     80a:	4618      	mov	r0, r3
     80c:	bd38      	pop	{r3, r4, r5, pc}
     80e:	2000      	movs	r0, #0
     810:	e7ed      	b.n	7ee <i2c_s_sync_init+0xe>
     812:	bf00      	nop
     814:	00001158 	.word	0x00001158
     818:	00000a05 	.word	0x00000a05
     81c:	00000fc5 	.word	0x00000fc5
     820:	00000781 	.word	0x00000781
     824:	0000070d 	.word	0x0000070d

00000828 <i2c_s_sync_set_addr>:
{
     828:	b538      	push	{r3, r4, r5, lr}
     82a:	460d      	mov	r5, r1
	ASSERT(descr);
     82c:	4604      	mov	r4, r0
     82e:	2251      	movs	r2, #81	; 0x51
     830:	490a      	ldr	r1, [pc, #40]	; (85c <i2c_s_sync_set_addr+0x34>)
     832:	3000      	adds	r0, #0
     834:	bf18      	it	ne
     836:	2001      	movne	r0, #1
     838:	4b09      	ldr	r3, [pc, #36]	; (860 <i2c_s_sync_set_addr+0x38>)
     83a:	4798      	blx	r3
	if (!_i2c_s_sync_is_10bit_addressing_on(&descr->device)) {
     83c:	4620      	mov	r0, r4
     83e:	4b09      	ldr	r3, [pc, #36]	; (864 <i2c_s_sync_set_addr+0x3c>)
     840:	4798      	blx	r3
     842:	b120      	cbz	r0, 84e <i2c_s_sync_set_addr+0x26>
	return _i2c_s_sync_set_address(&descr->device, address);
     844:	4629      	mov	r1, r5
     846:	4620      	mov	r0, r4
     848:	4b07      	ldr	r3, [pc, #28]	; (868 <i2c_s_sync_set_addr+0x40>)
     84a:	4798      	blx	r3
}
     84c:	bd38      	pop	{r3, r4, r5, pc}
		return _i2c_s_sync_set_address(&descr->device, address & 0x7F);
     84e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
     852:	4620      	mov	r0, r4
     854:	4b04      	ldr	r3, [pc, #16]	; (868 <i2c_s_sync_set_addr+0x40>)
     856:	4798      	blx	r3
     858:	bd38      	pop	{r3, r4, r5, pc}
     85a:	bf00      	nop
     85c:	00001158 	.word	0x00001158
     860:	00000a05 	.word	0x00000a05
     864:	0000100f 	.word	0x0000100f
     868:	00001019 	.word	0x00001019

0000086c <i2c_s_sync_enable>:
{
     86c:	b510      	push	{r4, lr}
	ASSERT(descr);
     86e:	4604      	mov	r4, r0
     870:	225f      	movs	r2, #95	; 0x5f
     872:	4905      	ldr	r1, [pc, #20]	; (888 <i2c_s_sync_enable+0x1c>)
     874:	3000      	adds	r0, #0
     876:	bf18      	it	ne
     878:	2001      	movne	r0, #1
     87a:	4b04      	ldr	r3, [pc, #16]	; (88c <i2c_s_sync_enable+0x20>)
     87c:	4798      	blx	r3
	return _i2c_s_sync_enable(&descr->device);
     87e:	4620      	mov	r0, r4
     880:	4b03      	ldr	r3, [pc, #12]	; (890 <i2c_s_sync_enable+0x24>)
     882:	4798      	blx	r3
}
     884:	bd10      	pop	{r4, pc}
     886:	bf00      	nop
     888:	00001158 	.word	0x00001158
     88c:	00000a05 	.word	0x00000a05
     890:	00000ff9 	.word	0x00000ff9

00000894 <i2c_s_sync_get_io_descriptor>:
{
     894:	b538      	push	{r3, r4, r5, lr}
     896:	460d      	mov	r5, r1
	ASSERT(descr && io);
     898:	4604      	mov	r4, r0
     89a:	b150      	cbz	r0, 8b2 <i2c_s_sync_get_io_descriptor+0x1e>
     89c:	1c08      	adds	r0, r1, #0
     89e:	bf18      	it	ne
     8a0:	2001      	movne	r0, #1
     8a2:	2273      	movs	r2, #115	; 0x73
     8a4:	4904      	ldr	r1, [pc, #16]	; (8b8 <i2c_s_sync_get_io_descriptor+0x24>)
     8a6:	4b05      	ldr	r3, [pc, #20]	; (8bc <i2c_s_sync_get_io_descriptor+0x28>)
     8a8:	4798      	blx	r3
	*io = &descr->io;
     8aa:	3404      	adds	r4, #4
     8ac:	602c      	str	r4, [r5, #0]
}
     8ae:	2000      	movs	r0, #0
     8b0:	bd38      	pop	{r3, r4, r5, pc}
     8b2:	2000      	movs	r0, #0
     8b4:	e7f5      	b.n	8a2 <i2c_s_sync_get_io_descriptor+0xe>
     8b6:	bf00      	nop
     8b8:	00001158 	.word	0x00001158
     8bc:	00000a05 	.word	0x00000a05

000008c0 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     8c0:	b570      	push	{r4, r5, r6, lr}
     8c2:	460d      	mov	r5, r1
     8c4:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     8c6:	4604      	mov	r4, r0
     8c8:	b160      	cbz	r0, 8e4 <io_read+0x24>
     8ca:	1c08      	adds	r0, r1, #0
     8cc:	bf18      	it	ne
     8ce:	2001      	movne	r0, #1
     8d0:	223d      	movs	r2, #61	; 0x3d
     8d2:	4905      	ldr	r1, [pc, #20]	; (8e8 <io_read+0x28>)
     8d4:	4b05      	ldr	r3, [pc, #20]	; (8ec <io_read+0x2c>)
     8d6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     8d8:	6863      	ldr	r3, [r4, #4]
     8da:	4632      	mov	r2, r6
     8dc:	4629      	mov	r1, r5
     8de:	4620      	mov	r0, r4
     8e0:	4798      	blx	r3
}
     8e2:	bd70      	pop	{r4, r5, r6, pc}
     8e4:	2000      	movs	r0, #0
     8e6:	e7f3      	b.n	8d0 <io_read+0x10>
     8e8:	00001174 	.word	0x00001174
     8ec:	00000a05 	.word	0x00000a05

000008f0 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8f2:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     8f4:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     8f6:	b12f      	cbz	r7, 904 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     8f8:	688d      	ldr	r5, [r1, #8]
     8fa:	463c      	mov	r4, r7
     8fc:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     8fe:	f1c2 0e01 	rsb	lr, r2, #1
     902:	e00b      	b.n	91c <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     904:	4b0e      	ldr	r3, [pc, #56]	; (940 <timer_add_timer_task+0x50>)
     906:	4798      	blx	r3
		return;
     908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     90a:	4473      	add	r3, lr
     90c:	68a0      	ldr	r0, [r4, #8]
     90e:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     910:	42ab      	cmp	r3, r5
     912:	d20a      	bcs.n	92a <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     914:	6823      	ldr	r3, [r4, #0]
     916:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     918:	b153      	cbz	r3, 930 <timer_add_timer_task+0x40>
     91a:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     91c:	6863      	ldr	r3, [r4, #4]
     91e:	4293      	cmp	r3, r2
     920:	d8f3      	bhi.n	90a <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     922:	68a0      	ldr	r0, [r4, #8]
     924:	4403      	add	r3, r0
     926:	1a9b      	subs	r3, r3, r2
     928:	e7f2      	b.n	910 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     92a:	42a7      	cmp	r7, r4
     92c:	d004      	beq.n	938 <timer_add_timer_task+0x48>
     92e:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     930:	4620      	mov	r0, r4
     932:	4b04      	ldr	r3, [pc, #16]	; (944 <timer_add_timer_task+0x54>)
     934:	4798      	blx	r3
     936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     938:	4660      	mov	r0, ip
     93a:	4b01      	ldr	r3, [pc, #4]	; (940 <timer_add_timer_task+0x50>)
     93c:	4798      	blx	r3
     93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     940:	00000a2d 	.word	0x00000a2d
     944:	00000a59 	.word	0x00000a59

00000948 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     94c:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     94e:	6907      	ldr	r7, [r0, #16]
     950:	3701      	adds	r7, #1
     952:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     954:	7e03      	ldrb	r3, [r0, #24]
     956:	f013 0f01 	tst.w	r3, #1
     95a:	d113      	bne.n	984 <timer_process_counted+0x3c>
     95c:	7e03      	ldrb	r3, [r0, #24]
     95e:	f013 0f02 	tst.w	r3, #2
     962:	d10f      	bne.n	984 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     964:	b354      	cbz	r4, 9bc <timer_process_counted+0x74>
     966:	6863      	ldr	r3, [r4, #4]
     968:	1afb      	subs	r3, r7, r3
     96a:	68a2      	ldr	r2, [r4, #8]
     96c:	4293      	cmp	r3, r2
     96e:	d307      	bcc.n	980 <timer_process_counted+0x38>
     970:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     972:	f100 0814 	add.w	r8, r0, #20
     976:	f8df 9048 	ldr.w	r9, [pc, #72]	; 9c0 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     97a:	f8df a048 	ldr.w	sl, [pc, #72]	; 9c4 <timer_process_counted+0x7c>
     97e:	e012      	b.n	9a6 <timer_process_counted+0x5e>
     980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     984:	7e03      	ldrb	r3, [r0, #24]
     986:	f043 0302 	orr.w	r3, r3, #2
     98a:	7603      	strb	r3, [r0, #24]
		return;
     98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     990:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     992:	68e3      	ldr	r3, [r4, #12]
     994:	4620      	mov	r0, r4
     996:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     998:	b185      	cbz	r5, 9bc <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     99a:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     99c:	686b      	ldr	r3, [r5, #4]
     99e:	1afb      	subs	r3, r7, r3
     9a0:	68aa      	ldr	r2, [r5, #8]
     9a2:	4293      	cmp	r3, r2
     9a4:	d30a      	bcc.n	9bc <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     9a6:	4640      	mov	r0, r8
     9a8:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     9aa:	7c23      	ldrb	r3, [r4, #16]
     9ac:	2b01      	cmp	r3, #1
     9ae:	d1ef      	bne.n	990 <timer_process_counted+0x48>
			tmp->time_label = time;
     9b0:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     9b2:	463a      	mov	r2, r7
     9b4:	4621      	mov	r1, r4
     9b6:	4640      	mov	r0, r8
     9b8:	47d0      	blx	sl
     9ba:	e7e9      	b.n	990 <timer_process_counted+0x48>
     9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9c0:	00000a61 	.word	0x00000a61
     9c4:	000008f1 	.word	0x000008f1

000009c8 <timer_init>:
{
     9c8:	b538      	push	{r3, r4, r5, lr}
     9ca:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     9cc:	4604      	mov	r4, r0
     9ce:	b178      	cbz	r0, 9f0 <timer_init+0x28>
     9d0:	1c08      	adds	r0, r1, #0
     9d2:	bf18      	it	ne
     9d4:	2001      	movne	r0, #1
     9d6:	223b      	movs	r2, #59	; 0x3b
     9d8:	4906      	ldr	r1, [pc, #24]	; (9f4 <timer_init+0x2c>)
     9da:	4b07      	ldr	r3, [pc, #28]	; (9f8 <timer_init+0x30>)
     9dc:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     9de:	4629      	mov	r1, r5
     9e0:	4620      	mov	r0, r4
     9e2:	4b06      	ldr	r3, [pc, #24]	; (9fc <timer_init+0x34>)
     9e4:	4798      	blx	r3
	descr->time                           = 0;
     9e6:	2000      	movs	r0, #0
     9e8:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     9ea:	4b05      	ldr	r3, [pc, #20]	; (a00 <timer_init+0x38>)
     9ec:	6023      	str	r3, [r4, #0]
}
     9ee:	bd38      	pop	{r3, r4, r5, pc}
     9f0:	2000      	movs	r0, #0
     9f2:	e7f0      	b.n	9d6 <timer_init+0xe>
     9f4:	00001188 	.word	0x00001188
     9f8:	00000a05 	.word	0x00000a05
     9fc:	00000dfd 	.word	0x00000dfd
     a00:	00000949 	.word	0x00000949

00000a04 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a04:	b900      	cbnz	r0, a08 <assert+0x4>
		__asm("BKPT #0");
     a06:	be00      	bkpt	0x0000
     a08:	4770      	bx	lr

00000a0a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     a0a:	6803      	ldr	r3, [r0, #0]
     a0c:	b14b      	cbz	r3, a22 <is_list_element+0x18>
		if (it == element) {
     a0e:	428b      	cmp	r3, r1
     a10:	d009      	beq.n	a26 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     a12:	681b      	ldr	r3, [r3, #0]
     a14:	b11b      	cbz	r3, a1e <is_list_element+0x14>
		if (it == element) {
     a16:	4299      	cmp	r1, r3
     a18:	d1fb      	bne.n	a12 <is_list_element+0x8>
			return true;
     a1a:	2001      	movs	r0, #1
		}
	}

	return false;
}
     a1c:	4770      	bx	lr
	return false;
     a1e:	2000      	movs	r0, #0
     a20:	4770      	bx	lr
     a22:	2000      	movs	r0, #0
     a24:	4770      	bx	lr
			return true;
     a26:	2001      	movs	r0, #1
     a28:	4770      	bx	lr
	...

00000a2c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     a2c:	b538      	push	{r3, r4, r5, lr}
     a2e:	4604      	mov	r4, r0
     a30:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     a32:	4b06      	ldr	r3, [pc, #24]	; (a4c <list_insert_as_head+0x20>)
     a34:	4798      	blx	r3
     a36:	f080 0001 	eor.w	r0, r0, #1
     a3a:	2239      	movs	r2, #57	; 0x39
     a3c:	4904      	ldr	r1, [pc, #16]	; (a50 <list_insert_as_head+0x24>)
     a3e:	b2c0      	uxtb	r0, r0
     a40:	4b04      	ldr	r3, [pc, #16]	; (a54 <list_insert_as_head+0x28>)
     a42:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     a44:	6823      	ldr	r3, [r4, #0]
     a46:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     a48:	6025      	str	r5, [r4, #0]
     a4a:	bd38      	pop	{r3, r4, r5, pc}
     a4c:	00000a0b 	.word	0x00000a0b
     a50:	000011a0 	.word	0x000011a0
     a54:	00000a05 	.word	0x00000a05

00000a58 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     a58:	6803      	ldr	r3, [r0, #0]
     a5a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     a5c:	6001      	str	r1, [r0, #0]
     a5e:	4770      	bx	lr

00000a60 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     a60:	6803      	ldr	r3, [r0, #0]
     a62:	b10b      	cbz	r3, a68 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     a64:	681a      	ldr	r2, [r3, #0]
     a66:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     a68:	4618      	mov	r0, r3
     a6a:	4770      	bx	lr

00000a6c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     a6c:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     a6e:	4a08      	ldr	r2, [pc, #32]	; (a90 <_init_chip+0x24>)
     a70:	8813      	ldrh	r3, [r2, #0]
     a72:	b29b      	uxth	r3, r3
     a74:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     a76:	4b07      	ldr	r3, [pc, #28]	; (a94 <_init_chip+0x28>)
     a78:	4798      	blx	r3
	_oscctrl_init_sources();
     a7a:	4b07      	ldr	r3, [pc, #28]	; (a98 <_init_chip+0x2c>)
     a7c:	4798      	blx	r3
	_mclk_init();
     a7e:	4b07      	ldr	r3, [pc, #28]	; (a9c <_init_chip+0x30>)
     a80:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     a82:	4b07      	ldr	r3, [pc, #28]	; (aa0 <_init_chip+0x34>)
     a84:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a86:	f640 70ff 	movw	r0, #4095	; 0xfff
     a8a:	4b06      	ldr	r3, [pc, #24]	; (aa4 <_init_chip+0x38>)
     a8c:	4798      	blx	r3
     a8e:	bd08      	pop	{r3, pc}
     a90:	41004000 	.word	0x41004000
     a94:	00000d85 	.word	0x00000d85
     a98:	00000d99 	.word	0x00000d99
     a9c:	00000cad 	.word	0x00000cad
     aa0:	00000db5 	.word	0x00000db5
     aa4:	00000c89 	.word	0x00000c89

00000aa8 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
     aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     aaa:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
     aac:	4b2f      	ldr	r3, [pc, #188]	; (b6c <_ext_irq_handler+0xc4>)
     aae:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
     ab0:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     ab2:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
     ab4:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
     ab6:	4b2e      	ldr	r3, [pc, #184]	; (b70 <_ext_irq_handler+0xc8>)
     ab8:	6818      	ldr	r0, [r3, #0]
     aba:	22f0      	movs	r2, #240	; 0xf0
     abc:	492d      	ldr	r1, [pc, #180]	; (b74 <_ext_irq_handler+0xcc>)
     abe:	3000      	adds	r0, #0
     ac0:	bf18      	it	ne
     ac2:	2001      	movne	r0, #1
     ac4:	4b2c      	ldr	r3, [pc, #176]	; (b78 <_ext_irq_handler+0xd0>)
     ac6:	4798      	blx	r3

	while (flags) {
     ac8:	9b01      	ldr	r3, [sp, #4]
     aca:	2b00      	cmp	r3, #0
     acc:	d04b      	beq.n	b66 <_ext_irq_handler+0xbe>
     ace:	f04f 37ff 	mov.w	r7, #4294967295
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
     ad2:	4d2a      	ldr	r5, [pc, #168]	; (b7c <_ext_irq_handler+0xd4>)
     ad4:	e03b      	b.n	b4e <_ext_irq_handler+0xa6>
				if (_map[middle].extint == pos) {
     ad6:	46b6      	mov	lr, r6
					pin = _map[middle].pin;
     ad8:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
     adc:	f8de 7004 	ldr.w	r7, [lr, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     ae0:	f1b7 3fff 	cmp.w	r7, #4294967295
     ae4:	d003      	beq.n	aee <_ext_irq_handler+0x46>
				callback(pin);
     ae6:	4b22      	ldr	r3, [pc, #136]	; (b70 <_ext_irq_handler+0xc8>)
     ae8:	681b      	ldr	r3, [r3, #0]
     aea:	4638      	mov	r0, r7
     aec:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     aee:	9b01      	ldr	r3, [sp, #4]
     af0:	fa06 f404 	lsl.w	r4, r6, r4
     af4:	ea23 0404 	bic.w	r4, r3, r4
     af8:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
     afa:	9a01      	ldr	r2, [sp, #4]
     afc:	fa92 f3a2 	rbit	r3, r2
     b00:	fab3 f383 	clz	r3, r3
     b04:	2a00      	cmp	r2, #0
		while (-1 != pos) {
     b06:	bf08      	it	eq
     b08:	f04f 33ff 	moveq.w	r3, #4294967295
     b0c:	d018      	beq.n	b40 <_ext_irq_handler+0x98>
				if (_map[middle].extint == pos) {
     b0e:	461c      	mov	r4, r3
     b10:	2b06      	cmp	r3, #6
     b12:	d0e0      	beq.n	ad6 <_ext_irq_handler+0x2e>
     b14:	2206      	movs	r2, #6
     b16:	4633      	mov	r3, r6
     b18:	2003      	movs	r0, #3
     b1a:	2100      	movs	r1, #0
				if (_map[middle].extint < pos) {
     b1c:	4294      	cmp	r4, r2
					lower = middle + 1;
     b1e:	bfc7      	ittee	gt
     b20:	3301      	addgt	r3, #1
     b22:	b2d9      	uxtbgt	r1, r3
					upper = middle - 1;
     b24:	f103 33ff 	addle.w	r3, r3, #4294967295
     b28:	b2d8      	uxtble	r0, r3
			while (upper >= lower) {
     b2a:	4281      	cmp	r1, r0
     b2c:	d8d8      	bhi.n	ae0 <_ext_irq_handler+0x38>
				middle = (upper + lower) >> 1;
     b2e:	1843      	adds	r3, r0, r1
     b30:	f3c3 0347 	ubfx	r3, r3, #1, #8
     b34:	469e      	mov	lr, r3
				if (_map[middle].extint == pos) {
     b36:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
     b3a:	42a2      	cmp	r2, r4
     b3c:	d1ee      	bne.n	b1c <_ext_irq_handler+0x74>
     b3e:	e7cb      	b.n	ad8 <_ext_irq_handler+0x30>
	return ((Eic *)hw)->INTFLAG.reg;
     b40:	4b0a      	ldr	r3, [pc, #40]	; (b6c <_ext_irq_handler+0xc4>)
     b42:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
     b44:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     b46:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     b48:	615a      	str	r2, [r3, #20]
	while (flags) {
     b4a:	9b01      	ldr	r3, [sp, #4]
     b4c:	b15b      	cbz	r3, b66 <_ext_irq_handler+0xbe>
		pos = ffs(flags) - 1;
     b4e:	9a01      	ldr	r2, [sp, #4]
     b50:	fa92 f3a2 	rbit	r3, r2
     b54:	fab3 f383 	clz	r3, r3
     b58:	2a00      	cmp	r2, #0
		while (-1 != pos) {
     b5a:	bf0c      	ite	eq
     b5c:	f04f 33ff 	moveq.w	r3, #4294967295
				if (_map[middle].extint == pos) {
     b60:	2601      	movne	r6, #1
		while (-1 != pos) {
     b62:	d1d4      	bne.n	b0e <_ext_irq_handler+0x66>
     b64:	e7ec      	b.n	b40 <_ext_irq_handler+0x98>
	}
}
     b66:	b003      	add	sp, #12
     b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b6a:	bf00      	nop
     b6c:	40002800 	.word	0x40002800
     b70:	20000034 	.word	0x20000034
     b74:	000011d8 	.word	0x000011d8
     b78:	00000a05 	.word	0x00000a05
     b7c:	000011c0 	.word	0x000011c0

00000b80 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
     b80:	4b35      	ldr	r3, [pc, #212]	; (c58 <_ext_irq_init+0xd8>)
     b82:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
     b84:	f013 0f01 	tst.w	r3, #1
     b88:	d11f      	bne.n	bca <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     b8a:	4a33      	ldr	r2, [pc, #204]	; (c58 <_ext_irq_init+0xd8>)
     b8c:	6853      	ldr	r3, [r2, #4]
     b8e:	f013 0f03 	tst.w	r3, #3
     b92:	d1fb      	bne.n	b8c <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
     b94:	4b30      	ldr	r3, [pc, #192]	; (c58 <_ext_irq_init+0xd8>)
     b96:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
     b98:	f013 0f02 	tst.w	r3, #2
     b9c:	d00d      	beq.n	bba <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     b9e:	4a2e      	ldr	r2, [pc, #184]	; (c58 <_ext_irq_init+0xd8>)
     ba0:	7813      	ldrb	r3, [r2, #0]
     ba2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     ba6:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     ba8:	6853      	ldr	r3, [r2, #4]
     baa:	f013 0f03 	tst.w	r3, #3
     bae:	d1fb      	bne.n	ba8 <_ext_irq_init+0x28>
     bb0:	4a29      	ldr	r2, [pc, #164]	; (c58 <_ext_irq_init+0xd8>)
     bb2:	6853      	ldr	r3, [r2, #4]
     bb4:	f013 0f02 	tst.w	r3, #2
     bb8:	d1fb      	bne.n	bb2 <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
     bba:	2201      	movs	r2, #1
     bbc:	4b26      	ldr	r3, [pc, #152]	; (c58 <_ext_irq_init+0xd8>)
     bbe:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     bc0:	461a      	mov	r2, r3
     bc2:	6853      	ldr	r3, [r2, #4]
     bc4:	f013 0f03 	tst.w	r3, #3
     bc8:	d1fb      	bne.n	bc2 <_ext_irq_init+0x42>
     bca:	4a23      	ldr	r2, [pc, #140]	; (c58 <_ext_irq_init+0xd8>)
     bcc:	6853      	ldr	r3, [r2, #4]
     bce:	f013 0f01 	tst.w	r3, #1
     bd2:	d1fb      	bne.n	bcc <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
     bd4:	4a20      	ldr	r2, [pc, #128]	; (c58 <_ext_irq_init+0xd8>)
     bd6:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
     bd8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
     bdc:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     bde:	6853      	ldr	r3, [r2, #4]
     be0:	f013 0f03 	tst.w	r3, #3
     be4:	d1fb      	bne.n	bde <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     be6:	4b1c      	ldr	r3, [pc, #112]	; (c58 <_ext_irq_init+0xd8>)
     be8:	2200      	movs	r2, #0
     bea:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     bec:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
     bee:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
     bf0:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
     bf2:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
     bf4:	61da      	str	r2, [r3, #28]
     bf6:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
     bf8:	781a      	ldrb	r2, [r3, #0]
     bfa:	f042 0202 	orr.w	r2, r2, #2
     bfe:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     c00:	461a      	mov	r2, r3
     c02:	6853      	ldr	r3, [r2, #4]
     c04:	f013 0f03 	tst.w	r3, #3
     c08:	d1fb      	bne.n	c02 <_ext_irq_init+0x82>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c0a:	4b14      	ldr	r3, [pc, #80]	; (c5c <_ext_irq_init+0xdc>)
     c0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     c14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c18:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c20:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c22:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     c2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c2e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c32:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c36:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     c40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c44:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c4c:	601a      	str	r2, [r3, #0]
	callback = cb;
     c4e:	4b04      	ldr	r3, [pc, #16]	; (c60 <_ext_irq_init+0xe0>)
     c50:	6018      	str	r0, [r3, #0]
}
     c52:	2000      	movs	r0, #0
     c54:	4770      	bx	lr
     c56:	bf00      	nop
     c58:	40002800 	.word	0x40002800
     c5c:	e000e100 	.word	0xe000e100
     c60:	20000034 	.word	0x20000034

00000c64 <EIC_5_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_5_Handler(void)
{
     c64:	b508      	push	{r3, lr}
	_ext_irq_handler();
     c66:	4b01      	ldr	r3, [pc, #4]	; (c6c <EIC_5_Handler+0x8>)
     c68:	4798      	blx	r3
     c6a:	bd08      	pop	{r3, pc}
     c6c:	00000aa9 	.word	0x00000aa9

00000c70 <EIC_6_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
     c70:	b508      	push	{r3, lr}
	_ext_irq_handler();
     c72:	4b01      	ldr	r3, [pc, #4]	; (c78 <EIC_6_Handler+0x8>)
     c74:	4798      	blx	r3
     c76:	bd08      	pop	{r3, pc}
     c78:	00000aa9 	.word	0x00000aa9

00000c7c <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
     c7c:	b508      	push	{r3, lr}
	_ext_irq_handler();
     c7e:	4b01      	ldr	r3, [pc, #4]	; (c84 <EIC_7_Handler+0x8>)
     c80:	4798      	blx	r3
     c82:	bd08      	pop	{r3, pc}
     c84:	00000aa9 	.word	0x00000aa9

00000c88 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     c88:	f010 0f01 	tst.w	r0, #1
     c8c:	d008      	beq.n	ca0 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     c8e:	4a05      	ldr	r2, [pc, #20]	; (ca4 <_gclk_init_generators_by_fref+0x1c>)
     c90:	4b05      	ldr	r3, [pc, #20]	; (ca8 <_gclk_init_generators_by_fref+0x20>)
     c92:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     c94:	4619      	mov	r1, r3
     c96:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     c9a:	684b      	ldr	r3, [r1, #4]
     c9c:	4213      	tst	r3, r2
     c9e:	d1fc      	bne.n	c9a <_gclk_init_generators_by_fref+0x12>
     ca0:	4770      	bx	lr
     ca2:	bf00      	nop
     ca4:	00010101 	.word	0x00010101
     ca8:	40001c00 	.word	0x40001c00

00000cac <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     cac:	2201      	movs	r2, #1
     cae:	4b01      	ldr	r3, [pc, #4]	; (cb4 <_mclk_init+0x8>)
     cb0:	715a      	strb	r2, [r3, #5]
     cb2:	4770      	bx	lr
     cb4:	40000800 	.word	0x40000800

00000cb8 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
     cb8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
     cba:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
     cbc:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
     cbe:	f012 0f01 	tst.w	r2, #1
     cc2:	d005      	beq.n	cd0 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
     cc4:	2201      	movs	r2, #1
     cc6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
     cc8:	6803      	ldr	r3, [r0, #0]
     cca:	b153      	cbz	r3, ce2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
     ccc:	4798      	blx	r3
     cce:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
     cd0:	8a1a      	ldrh	r2, [r3, #16]
     cd2:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
     cd4:	b12a      	cbz	r2, ce2 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
     cd6:	f240 225e 	movw	r2, #606	; 0x25e
     cda:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
     cdc:	6843      	ldr	r3, [r0, #4]
     cde:	b103      	cbz	r3, ce2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
     ce0:	4798      	blx	r3
     ce2:	bd08      	pop	{r3, pc}

00000ce4 <_flash_init>:
{
     ce4:	b538      	push	{r3, r4, r5, lr}
     ce6:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     ce8:	4605      	mov	r5, r0
     cea:	b350      	cbz	r0, d42 <_flash_init+0x5e>
     cec:	4816      	ldr	r0, [pc, #88]	; (d48 <_flash_init+0x64>)
     cee:	4281      	cmp	r1, r0
     cf0:	bf14      	ite	ne
     cf2:	2000      	movne	r0, #0
     cf4:	2001      	moveq	r0, #1
     cf6:	224b      	movs	r2, #75	; 0x4b
     cf8:	4914      	ldr	r1, [pc, #80]	; (d4c <_flash_init+0x68>)
     cfa:	4b15      	ldr	r3, [pc, #84]	; (d50 <_flash_init+0x6c>)
     cfc:	4798      	blx	r3
	device->hw = hw;
     cfe:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
     d00:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
     d02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
     d06:	049b      	lsls	r3, r3, #18
     d08:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
     d0a:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
     d0c:	4b11      	ldr	r3, [pc, #68]	; (d54 <_flash_init+0x70>)
     d0e:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d10:	4b11      	ldr	r3, [pc, #68]	; (d58 <_flash_init+0x74>)
     d12:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     d16:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     d1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d1e:	f3bf 8f6f 	isb	sy
     d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     d2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d2e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d32:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
     d36:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d3a:	6019      	str	r1, [r3, #0]
     d3c:	601a      	str	r2, [r3, #0]
}
     d3e:	2000      	movs	r0, #0
     d40:	bd38      	pop	{r3, r4, r5, pc}
     d42:	2000      	movs	r0, #0
     d44:	e7d7      	b.n	cf6 <_flash_init+0x12>
     d46:	bf00      	nop
     d48:	41004000 	.word	0x41004000
     d4c:	000011f0 	.word	0x000011f0
     d50:	00000a05 	.word	0x00000a05
     d54:	20000038 	.word	0x20000038
     d58:	e000e100 	.word	0xe000e100

00000d5c <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
     d5c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
     d5e:	4b02      	ldr	r3, [pc, #8]	; (d68 <NVMCTRL_0_Handler+0xc>)
     d60:	6818      	ldr	r0, [r3, #0]
     d62:	4b02      	ldr	r3, [pc, #8]	; (d6c <NVMCTRL_0_Handler+0x10>)
     d64:	4798      	blx	r3
     d66:	bd08      	pop	{r3, pc}
     d68:	20000038 	.word	0x20000038
     d6c:	00000cb9 	.word	0x00000cb9

00000d70 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
     d70:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
     d72:	4b02      	ldr	r3, [pc, #8]	; (d7c <NVMCTRL_1_Handler+0xc>)
     d74:	6818      	ldr	r0, [r3, #0]
     d76:	4b02      	ldr	r3, [pc, #8]	; (d80 <NVMCTRL_1_Handler+0x10>)
     d78:	4798      	blx	r3
     d7a:	bd08      	pop	{r3, pc}
     d7c:	20000038 	.word	0x20000038
     d80:	00000cb9 	.word	0x00000cb9

00000d84 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     d84:	4b03      	ldr	r3, [pc, #12]	; (d94 <_osc32kctrl_init_sources+0x10>)
     d86:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     d88:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     d8c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     d8e:	2201      	movs	r2, #1
     d90:	741a      	strb	r2, [r3, #16]
     d92:	4770      	bx	lr
     d94:	40001400 	.word	0x40001400

00000d98 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     d98:	4a04      	ldr	r2, [pc, #16]	; (dac <_oscctrl_init_sources+0x14>)
     d9a:	4b05      	ldr	r3, [pc, #20]	; (db0 <_oscctrl_init_sources+0x18>)
     d9c:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     d9e:	461a      	mov	r2, r3
     da0:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     da2:	f013 0f02 	tst.w	r3, #2
     da6:	d0fb      	beq.n	da0 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     da8:	4770      	bx	lr
     daa:	bf00      	nop
     dac:	03002606 	.word	0x03002606
     db0:	40001000 	.word	0x40001000

00000db4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     db4:	4770      	bx	lr
	...

00000db8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     db8:	b500      	push	{lr}
     dba:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     dbc:	4b0d      	ldr	r3, [pc, #52]	; (df4 <RAMECC_Handler+0x3c>)
     dbe:	789b      	ldrb	r3, [r3, #2]
     dc0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     dc2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     dc4:	9b01      	ldr	r3, [sp, #4]
     dc6:	f013 0f02 	tst.w	r3, #2
     dca:	d006      	beq.n	dda <RAMECC_Handler+0x22>
     dcc:	4b0a      	ldr	r3, [pc, #40]	; (df8 <RAMECC_Handler+0x40>)
     dce:	681b      	ldr	r3, [r3, #0]
     dd0:	b11b      	cbz	r3, dda <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
     dd2:	4a08      	ldr	r2, [pc, #32]	; (df4 <RAMECC_Handler+0x3c>)
     dd4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     dd6:	4798      	blx	r3
     dd8:	e009      	b.n	dee <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
     dda:	9b01      	ldr	r3, [sp, #4]
     ddc:	f013 0f01 	tst.w	r3, #1
     de0:	d005      	beq.n	dee <RAMECC_Handler+0x36>
     de2:	4b05      	ldr	r3, [pc, #20]	; (df8 <RAMECC_Handler+0x40>)
     de4:	685b      	ldr	r3, [r3, #4]
     de6:	b113      	cbz	r3, dee <RAMECC_Handler+0x36>
     de8:	4a02      	ldr	r2, [pc, #8]	; (df4 <RAMECC_Handler+0x3c>)
     dea:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
     dec:	4798      	blx	r3
	} else {
		return;
	}
}
     dee:	b003      	add	sp, #12
     df0:	f85d fb04 	ldr.w	pc, [sp], #4
     df4:	41020000 	.word	0x41020000
     df8:	2000008c 	.word	0x2000008c

00000dfc <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     dfc:	b538      	push	{r3, r4, r5, lr}
     dfe:	460c      	mov	r4, r1
	ASSERT(dev);
     e00:	4605      	mov	r5, r0
     e02:	2230      	movs	r2, #48	; 0x30
     e04:	4914      	ldr	r1, [pc, #80]	; (e58 <_timer_init+0x5c>)
     e06:	3000      	adds	r0, #0
     e08:	bf18      	it	ne
     e0a:	2001      	movne	r0, #1
     e0c:	4b13      	ldr	r3, [pc, #76]	; (e5c <_timer_init+0x60>)
     e0e:	4798      	blx	r3

	dev->hw = hw;
     e10:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     e12:	2301      	movs	r3, #1
     e14:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     e16:	f248 0203 	movw	r2, #32771	; 0x8003
     e1a:	6923      	ldr	r3, [r4, #16]
     e1c:	4213      	tst	r3, r2
     e1e:	d1fc      	bne.n	e1a <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     e20:	68eb      	ldr	r3, [r5, #12]
     e22:	691a      	ldr	r2, [r3, #16]
     e24:	f012 0f01 	tst.w	r2, #1
     e28:	d1fb      	bne.n	e22 <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     e2a:	f248 0280 	movw	r2, #32896	; 0x8080
     e2e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     e30:	f248 0103 	movw	r1, #32771	; 0x8003
     e34:	691a      	ldr	r2, [r3, #16]
     e36:	420a      	tst	r2, r1
     e38:	d1fc      	bne.n	e34 <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
     e3a:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
     e3c:	2320      	movs	r3, #32
     e3e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     e40:	6913      	ldr	r3, [r2, #16]
     e42:	f013 0f60 	tst.w	r3, #96	; 0x60
     e46:	d1fb      	bne.n	e40 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
     e48:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
     e4e:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
     e50:	4b03      	ldr	r3, [pc, #12]	; (e60 <_timer_init+0x64>)
     e52:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
     e54:	2000      	movs	r0, #0
     e56:	bd38      	pop	{r3, r4, r5, pc}
     e58:	00001210 	.word	0x00001210
     e5c:	00000a05 	.word	0x00000a05
     e60:	2000003c 	.word	0x2000003c

00000e64 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     e64:	2000      	movs	r0, #0
     e66:	4770      	bx	lr

00000e68 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     e68:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     e6a:	4b08      	ldr	r3, [pc, #32]	; (e8c <RTC_Handler+0x24>)
     e6c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
     e6e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     e70:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     e72:	f413 7f80 	tst.w	r3, #256	; 0x100
     e76:	d007      	beq.n	e88 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
     e78:	6823      	ldr	r3, [r4, #0]
     e7a:	b10b      	cbz	r3, e80 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
     e7c:	4620      	mov	r0, r4
     e7e:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     e80:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     e82:	f44f 7280 	mov.w	r2, #256	; 0x100
     e86:	819a      	strh	r2, [r3, #12]
     e88:	bd10      	pop	{r4, pc}
     e8a:	bf00      	nop
     e8c:	2000003c 	.word	0x2000003c

00000e90 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
     e90:	b470      	push	{r4, r5, r6}
     e92:	b087      	sub	sp, #28
     e94:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
     e96:	466c      	mov	r4, sp
     e98:	4d0c      	ldr	r5, [pc, #48]	; (ecc <_sercom_get_hardware_index+0x3c>)
     e9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     e9e:	e895 0003 	ldmia.w	r5, {r0, r1}
     ea2:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
     ea6:	9b00      	ldr	r3, [sp, #0]
     ea8:	42b3      	cmp	r3, r6
     eaa:	d00c      	beq.n	ec6 <_sercom_get_hardware_index+0x36>
     eac:	4632      	mov	r2, r6
     eae:	2001      	movs	r0, #1
     eb0:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
     eb4:	4293      	cmp	r3, r2
     eb6:	d007      	beq.n	ec8 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     eb8:	3001      	adds	r0, #1
     eba:	2806      	cmp	r0, #6
     ebc:	d1f8      	bne.n	eb0 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
     ebe:	2000      	movs	r0, #0
}
     ec0:	b007      	add	sp, #28
     ec2:	bc70      	pop	{r4, r5, r6}
     ec4:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ec6:	2000      	movs	r0, #0
			return i;
     ec8:	b2c0      	uxtb	r0, r0
     eca:	e7f9      	b.n	ec0 <_sercom_get_hardware_index+0x30>
     ecc:	00001228 	.word	0x00001228

00000ed0 <_i2c_s_init>:
 * \param[in] p The pointer to hardware instance
 *
 *\ return status of initialization
 */
static int32_t _i2c_s_init(void *const hw)
{
     ed0:	b510      	push	{r4, lr}
     ed2:	4604      	mov	r4, r0
 *
 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2c_s_index(const void *const hw)
{
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     ed4:	4b1d      	ldr	r3, [pc, #116]	; (f4c <_i2c_s_init+0x7c>)
     ed6:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2css); i++) {
		if (_i2css[i].number == sercom_offset) {
     ed8:	2805      	cmp	r0, #5
     eda:	d008      	beq.n	eee <_i2c_s_init+0x1e>
			return i;
		}
	}

	ASSERT(false);
     edc:	f240 72b7 	movw	r2, #1975	; 0x7b7
     ee0:	491b      	ldr	r1, [pc, #108]	; (f50 <_i2c_s_init+0x80>)
     ee2:	2000      	movs	r0, #0
     ee4:	4b1b      	ldr	r3, [pc, #108]	; (f54 <_i2c_s_init+0x84>)
     ee6:	4798      	blx	r3
		return ERR_INVALID_ARG;
     ee8:	f06f 000c 	mvn.w	r0, #12
}
     eec:	bd10      	pop	{r4, pc}
	};
}

static inline bool hri_sercomi2cs_is_syncing(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
     eee:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
     ef0:	f013 0f01 	tst.w	r3, #1
     ef4:	d119      	bne.n	f2a <_i2c_s_init+0x5a>
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
     ef6:	69e3      	ldr	r3, [r4, #28]
     ef8:	f013 0f03 	tst.w	r3, #3
     efc:	d1fb      	bne.n	ef6 <_i2c_s_init+0x26>
static inline hri_sercomi2cs_ctrla_reg_t hri_sercomi2cs_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cs_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
     efe:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
     f00:	f013 0f02 	tst.w	r3, #2
     f04:	d00b      	beq.n	f1e <_i2c_s_init+0x4e>
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
     f06:	6823      	ldr	r3, [r4, #0]
     f08:	f023 0302 	bic.w	r3, r3, #2
     f0c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
     f0e:	69e3      	ldr	r3, [r4, #28]
     f10:	f013 0f03 	tst.w	r3, #3
     f14:	d1fb      	bne.n	f0e <_i2c_s_init+0x3e>
     f16:	69e3      	ldr	r3, [r4, #28]
     f18:	f013 0f02 	tst.w	r3, #2
     f1c:	d1fb      	bne.n	f16 <_i2c_s_init+0x46>
}

static inline void hri_sercomi2cs_write_CTRLA_reg(const void *const hw, hri_sercomi2cs_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
     f1e:	2311      	movs	r3, #17
     f20:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
     f22:	69e3      	ldr	r3, [r4, #28]
     f24:	f013 0f03 	tst.w	r3, #3
     f28:	d1fb      	bne.n	f22 <_i2c_s_init+0x52>
     f2a:	69e3      	ldr	r3, [r4, #28]
     f2c:	f013 0f01 	tst.w	r3, #1
     f30:	d1fb      	bne.n	f2a <_i2c_s_init+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
     f32:	4b09      	ldr	r3, [pc, #36]	; (f58 <_i2c_s_init+0x88>)
     f34:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
     f36:	69e3      	ldr	r3, [r4, #28]
     f38:	f013 0f03 	tst.w	r3, #3
     f3c:	d1fb      	bne.n	f36 <_i2c_s_init+0x66>
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
     f3e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
     f42:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
     f44:	2320      	movs	r3, #32
     f46:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
     f48:	2000      	movs	r0, #0
     f4a:	bd10      	pop	{r4, pc}
     f4c:	00000e91 	.word	0x00000e91
     f50:	00001258 	.word	0x00001258
     f54:	00000a05 	.word	0x00000a05
     f58:	00200010 	.word	0x00200010

00000f5c <_i2c_s_set_address>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] address Address to set
 */
static int32_t _i2c_s_set_address(void *const hw, const uint16_t address)
{
     f5c:	b570      	push	{r4, r5, r6, lr}
     f5e:	b082      	sub	sp, #8
     f60:	4604      	mov	r4, r0
     f62:	460e      	mov	r6, r1
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
     f64:	69e3      	ldr	r3, [r4, #28]
     f66:	f013 0f03 	tst.w	r3, #3
     f6a:	d1fb      	bne.n	f64 <_i2c_s_set_address+0x8>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
     f6c:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_I2CS_CTRLA_ENABLE) >> SERCOM_I2CS_CTRLA_ENABLE_Pos;
     f6e:	f3c5 0540 	ubfx	r5, r5, #1, #1
	bool enabled;

	enabled = hri_sercomi2cs_get_CTRLA_ENABLE_bit(hw);

	CRITICAL_SECTION_ENTER()
     f72:	a801      	add	r0, sp, #4
     f74:	4b11      	ldr	r3, [pc, #68]	; (fbc <_i2c_s_set_address+0x60>)
     f76:	4798      	blx	r3
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
     f78:	6823      	ldr	r3, [r4, #0]
     f7a:	f023 0302 	bic.w	r3, r3, #2
     f7e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
     f80:	69e3      	ldr	r3, [r4, #28]
     f82:	f013 0f03 	tst.w	r3, #3
     f86:	d1fb      	bne.n	f80 <_i2c_s_set_address+0x24>
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
     f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CS_ADDR_ADDR_Msk;
     f8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
     f8e:	f023 0306 	bic.w	r3, r3, #6
	tmp |= SERCOM_I2CS_ADDR_ADDR(data);
     f92:	f240 71fe 	movw	r1, #2046	; 0x7fe
     f96:	ea01 0146 	and.w	r1, r1, r6, lsl #1
     f9a:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CS.ADDR.reg = tmp;
     f9c:	6261      	str	r1, [r4, #36]	; 0x24
	hri_sercomi2cs_clear_CTRLA_ENABLE_bit(hw);
	hri_sercomi2cs_write_ADDR_ADDR_bf(hw, address);
	CRITICAL_SECTION_LEAVE()
     f9e:	a801      	add	r0, sp, #4
     fa0:	4b07      	ldr	r3, [pc, #28]	; (fc0 <_i2c_s_set_address+0x64>)
     fa2:	4798      	blx	r3

	if (enabled) {
     fa4:	b13d      	cbz	r5, fb6 <_i2c_s_set_address+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
     fa6:	6823      	ldr	r3, [r4, #0]
     fa8:	f043 0302 	orr.w	r3, r3, #2
     fac:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
     fae:	69e3      	ldr	r3, [r4, #28]
     fb0:	f013 0f03 	tst.w	r3, #3
     fb4:	d1fb      	bne.n	fae <_i2c_s_set_address+0x52>
		hri_sercomi2cs_set_CTRLA_ENABLE_bit(hw);
	}

	return ERR_NONE;
}
     fb6:	2000      	movs	r0, #0
     fb8:	b002      	add	sp, #8
     fba:	bd70      	pop	{r4, r5, r6, pc}
     fbc:	00000619 	.word	0x00000619
     fc0:	00000627 	.word	0x00000627

00000fc4 <_i2c_s_sync_init>:
{
     fc4:	b538      	push	{r3, r4, r5, lr}
     fc6:	460c      	mov	r4, r1
	ASSERT(device);
     fc8:	4605      	mov	r5, r0
     fca:	f240 62a6 	movw	r2, #1702	; 0x6a6
     fce:	4907      	ldr	r1, [pc, #28]	; (fec <_i2c_s_sync_init+0x28>)
     fd0:	3000      	adds	r0, #0
     fd2:	bf18      	it	ne
     fd4:	2001      	movne	r0, #1
     fd6:	4b06      	ldr	r3, [pc, #24]	; (ff0 <_i2c_s_sync_init+0x2c>)
     fd8:	4798      	blx	r3
	status = _i2c_s_init(hw);
     fda:	4620      	mov	r0, r4
     fdc:	4b05      	ldr	r3, [pc, #20]	; (ff4 <_i2c_s_sync_init+0x30>)
     fde:	4798      	blx	r3
	if (status) {
     fe0:	4603      	mov	r3, r0
     fe2:	b900      	cbnz	r0, fe6 <_i2c_s_sync_init+0x22>
	device->hw = hw;
     fe4:	602c      	str	r4, [r5, #0]
}
     fe6:	4618      	mov	r0, r3
     fe8:	bd38      	pop	{r3, r4, r5, pc}
     fea:	bf00      	nop
     fec:	00001258 	.word	0x00001258
     ff0:	00000a05 	.word	0x00000a05
     ff4:	00000ed1 	.word	0x00000ed1

00000ff8 <_i2c_s_sync_enable>:
	hri_sercomi2cs_set_CTRLA_ENABLE_bit(device->hw);
     ff8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
     ffa:	6813      	ldr	r3, [r2, #0]
     ffc:	f043 0302 	orr.w	r3, r3, #2
    1000:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1002:	69d3      	ldr	r3, [r2, #28]
    1004:	f013 0f03 	tst.w	r3, #3
    1008:	d1fb      	bne.n	1002 <_i2c_s_sync_enable+0xa>
}
    100a:	2000      	movs	r0, #0
    100c:	4770      	bx	lr

0000100e <_i2c_s_sync_is_10bit_addressing_on>:
	return hri_sercomi2cs_get_ADDR_TENBITEN_bit(device->hw);
    100e:	6803      	ldr	r3, [r0, #0]
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1010:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1012:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    1016:	4770      	bx	lr

00001018 <_i2c_s_sync_set_address>:
{
    1018:	b508      	push	{r3, lr}
	return _i2c_s_set_address(device->hw, address);
    101a:	6800      	ldr	r0, [r0, #0]
    101c:	4b01      	ldr	r3, [pc, #4]	; (1024 <_i2c_s_sync_set_address+0xc>)
    101e:	4798      	blx	r3
}
    1020:	bd08      	pop	{r3, pc}
    1022:	bf00      	nop
    1024:	00000f5d 	.word	0x00000f5d

00001028 <_i2c_s_sync_write_byte>:
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    1028:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    102a:	6299      	str	r1, [r3, #40]	; 0x28
    102c:	4770      	bx	lr

0000102e <_i2c_s_sync_read_byte>:
	return hri_sercomi2cs_read_DATA_reg(device->hw);
    102e:	6803      	ldr	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->I2CS.DATA.reg;
    1030:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1032:	b2c0      	uxtb	r0, r0
    1034:	4770      	bx	lr

00001036 <_i2c_s_sync_is_byte_sent>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1036:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) >> SERCOM_I2CS_INTFLAG_DRDY_Pos;
    1038:	7e18      	ldrb	r0, [r3, #24]
}
    103a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    103e:	4770      	bx	lr

00001040 <_i2c_s_sync_is_byte_received>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1040:	6803      	ldr	r3, [r0, #0]
    1042:	7e18      	ldrb	r0, [r3, #24]
}
    1044:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1048:	4770      	bx	lr

0000104a <_i2c_s_sync_clear_data_ready_flag>:
	hri_sercomi2cs_clear_INTFLAG_DRDY_bit(device->hw);
    104a:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_DRDY;
    104c:	2204      	movs	r2, #4
    104e:	761a      	strb	r2, [r3, #24]
}
    1050:	2000      	movs	r0, #0
    1052:	4770      	bx	lr

00001054 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    1054:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1056:	4604      	mov	r4, r0
    1058:	b330      	cbz	r0, 10a8 <_wdt_init+0x54>
    105a:	6800      	ldr	r0, [r0, #0]
    105c:	3000      	adds	r0, #0
    105e:	bf18      	it	ne
    1060:	2001      	movne	r0, #1
    1062:	2250      	movs	r2, #80	; 0x50
    1064:	4914      	ldr	r1, [pc, #80]	; (10b8 <_wdt_init+0x64>)
    1066:	4b15      	ldr	r3, [pc, #84]	; (10bc <_wdt_init+0x68>)
    1068:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    106a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    106c:	689a      	ldr	r2, [r3, #8]
    106e:	f012 0f0e 	tst.w	r2, #14
    1072:	d1fb      	bne.n	106c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1074:	781a      	ldrb	r2, [r3, #0]
    1076:	09d2      	lsrs	r2, r2, #7
    1078:	d118      	bne.n	10ac <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    107a:	689a      	ldr	r2, [r3, #8]
    107c:	f012 0f0e 	tst.w	r2, #14
    1080:	d1fb      	bne.n	107a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1082:	781a      	ldrb	r2, [r3, #0]
    1084:	f012 0f02 	tst.w	r2, #2
    1088:	d113      	bne.n	10b2 <_wdt_init+0x5e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    108a:	781a      	ldrb	r2, [r3, #0]
    108c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1090:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1092:	689a      	ldr	r2, [r3, #8]
    1094:	f012 0f0e 	tst.w	r2, #14
    1098:	d1fb      	bne.n	1092 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    109a:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    109c:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    109e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    10a2:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    10a4:	2000      	movs	r0, #0
    10a6:	bd10      	pop	{r4, pc}
    10a8:	2000      	movs	r0, #0
    10aa:	e7da      	b.n	1062 <_wdt_init+0xe>
		return ERR_DENIED;
    10ac:	f06f 0010 	mvn.w	r0, #16
    10b0:	bd10      	pop	{r4, pc}
    10b2:	f06f 0010 	mvn.w	r0, #16
}
    10b6:	bd10      	pop	{r4, pc}
    10b8:	00001274 	.word	0x00001274
    10bc:	00000a05 	.word	0x00000a05

000010c0 <main>:
#include "driver_examples.h"



int main(void)
{
    10c0:	b500      	push	{lr}
    10c2:	b085      	sub	sp, #20
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    10c4:	4b03      	ldr	r3, [pc, #12]	; (10d4 <main+0x14>)
    10c6:	4798      	blx	r3
	
	uint8_t buffer[RX_LENGTH]; 
	
	while (1) {
		I2C_Read(buffer, RX_LENGTH);
    10c8:	250a      	movs	r5, #10
    10ca:	4c03      	ldr	r4, [pc, #12]	; (10d8 <main+0x18>)
    10cc:	4629      	mov	r1, r5
    10ce:	a801      	add	r0, sp, #4
    10d0:	47a0      	blx	r4
    10d2:	e7fb      	b.n	10cc <main+0xc>
    10d4:	000002d1 	.word	0x000002d1
    10d8:	000005d5 	.word	0x000005d5

000010dc <__libc_init_array>:
    10dc:	b570      	push	{r4, r5, r6, lr}
    10de:	4e0d      	ldr	r6, [pc, #52]	; (1114 <__libc_init_array+0x38>)
    10e0:	4c0d      	ldr	r4, [pc, #52]	; (1118 <__libc_init_array+0x3c>)
    10e2:	1ba4      	subs	r4, r4, r6
    10e4:	10a4      	asrs	r4, r4, #2
    10e6:	2500      	movs	r5, #0
    10e8:	42a5      	cmp	r5, r4
    10ea:	d109      	bne.n	1100 <__libc_init_array+0x24>
    10ec:	4e0b      	ldr	r6, [pc, #44]	; (111c <__libc_init_array+0x40>)
    10ee:	4c0c      	ldr	r4, [pc, #48]	; (1120 <__libc_init_array+0x44>)
    10f0:	f000 f8cc 	bl	128c <_init>
    10f4:	1ba4      	subs	r4, r4, r6
    10f6:	10a4      	asrs	r4, r4, #2
    10f8:	2500      	movs	r5, #0
    10fa:	42a5      	cmp	r5, r4
    10fc:	d105      	bne.n	110a <__libc_init_array+0x2e>
    10fe:	bd70      	pop	{r4, r5, r6, pc}
    1100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1104:	4798      	blx	r3
    1106:	3501      	adds	r5, #1
    1108:	e7ee      	b.n	10e8 <__libc_init_array+0xc>
    110a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    110e:	4798      	blx	r3
    1110:	3501      	adds	r5, #1
    1112:	e7f2      	b.n	10fa <__libc_init_array+0x1e>
    1114:	00001298 	.word	0x00001298
    1118:	00001298 	.word	0x00001298
    111c:	00001298 	.word	0x00001298
    1120:	0000129c 	.word	0x0000129c
    1124:	682f2e2e 	.word	0x682f2e2e
    1128:	692f6c61 	.word	0x692f6c61
    112c:	756c636e 	.word	0x756c636e
    1130:	682f6564 	.word	0x682f6564
    1134:	775f6c61 	.word	0x775f6c61
    1138:	682e7464 	.word	0x682e7464
    113c:	00000000 	.word	0x00000000
    1140:	682f2e2e 	.word	0x682f2e2e
    1144:	732f6c61 	.word	0x732f6c61
    1148:	682f6372 	.word	0x682f6372
    114c:	665f6c61 	.word	0x665f6c61
    1150:	6873616c 	.word	0x6873616c
    1154:	0000632e 	.word	0x0000632e
    1158:	682f2e2e 	.word	0x682f2e2e
    115c:	732f6c61 	.word	0x732f6c61
    1160:	682f6372 	.word	0x682f6372
    1164:	695f6c61 	.word	0x695f6c61
    1168:	735f6332 	.word	0x735f6332
    116c:	6e79735f 	.word	0x6e79735f
    1170:	00632e63 	.word	0x00632e63
    1174:	682f2e2e 	.word	0x682f2e2e
    1178:	732f6c61 	.word	0x732f6c61
    117c:	682f6372 	.word	0x682f6372
    1180:	695f6c61 	.word	0x695f6c61
    1184:	00632e6f 	.word	0x00632e6f
    1188:	682f2e2e 	.word	0x682f2e2e
    118c:	732f6c61 	.word	0x732f6c61
    1190:	682f6372 	.word	0x682f6372
    1194:	745f6c61 	.word	0x745f6c61
    1198:	72656d69 	.word	0x72656d69
    119c:	0000632e 	.word	0x0000632e
    11a0:	682f2e2e 	.word	0x682f2e2e
    11a4:	752f6c61 	.word	0x752f6c61
    11a8:	736c6974 	.word	0x736c6974
    11ac:	6372732f 	.word	0x6372732f
    11b0:	6974752f 	.word	0x6974752f
    11b4:	6c5f736c 	.word	0x6c5f736c
    11b8:	2e747369 	.word	0x2e747369
    11bc:	00000063 	.word	0x00000063

000011c0 <_map>:
    11c0:	00000005 00000005 00000006 00000006     ................
    11d0:	00000007 00000007 682f2e2e 652f6c70     ........../hpl/e
    11e0:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    11f0:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    1200:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    1210:	682f2e2e 722f6c70 682f6374 725f6c70     ../hpl/rtc/hpl_r
    1220:	632e6374 00000000 40003000 40003400     tc.c.....0.@.4.@
    1230:	41012000 41014000 43000000 43000400     . .A.@.A...C...C

00001240 <_i2cms>:
	...
    1258:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    1268:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    1278:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    1288:	00000000                                ....

0000128c <_init>:
    128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    128e:	bf00      	nop
    1290:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1292:	bc08      	pop	{r3}
    1294:	469e      	mov	lr, r3
    1296:	4770      	bx	lr

00001298 <__init_array_start>:
    1298:	00000289 	.word	0x00000289

0000129c <_fini>:
    129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    129e:	bf00      	nop
    12a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    12a2:	bc08      	pop	{r3}
    12a4:	469e      	mov	lr, r3
    12a6:	4770      	bx	lr

000012a8 <__fini_array_start>:
    12a8:	00000265 	.word	0x00000265
