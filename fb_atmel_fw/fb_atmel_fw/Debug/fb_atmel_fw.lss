
fb_atmel_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000253c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  0000253c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          000000d0  20000064  000025a0  00020064  2**2
                  ALLOC
  5 .stack        0000c004  20000134  00002670  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   0003009b  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004a2b  00000000  00000000  00050186  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00010933  00000000  00000000  00054bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e58  00000000  00000000  000654e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001220  00000000  00000000  0006633c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002d83b  00000000  00000000  0006755c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001ab6e  00000000  00000000  00094d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e6e8e  00000000  00000000  000af905  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000273c  00000000  00000000  00196794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 c1 00 20 05 03 00 00 f5 02 00 00 e5 02 00 00     8.. ............
      10:	f5 02 00 00 f5 02 00 00 f5 02 00 00 00 00 00 00     ................
	...
      2c:	f5 02 00 00 f5 02 00 00 00 00 00 00 f5 02 00 00     ................
      3c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      4c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      5c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      6c:	6d 13 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     m...............
      7c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      8c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      9c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      ac:	f5 02 00 00 f5 02 00 00 f1 10 00 00 05 11 00 00     ................
      bc:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      cc:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      dc:	f5 02 00 00 f5 02 00 00 f5 02 00 00 00 00 00 00     ................
	...
      f4:	bd 12 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     104:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     114:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     124:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     134:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     144:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     154:	f5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     190:	00 00 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1a0:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1b0:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1c0:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1d0:	f5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
	...
     20c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     21c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     22c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     23c:	f5 02 00 00 00 00 00 00 f5 02 00 00 f5 02 00 00     ................
     24c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     25c:	f5 02 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000064 	.word	0x20000064
     280:	00000000 	.word	0x00000000
     284:	0000253c 	.word	0x0000253c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000253c 	.word	0x0000253c
     2c4:	20000068 	.word	0x20000068
     2c8:	0000253c 	.word	0x0000253c
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
#include "driver_init.h"
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	SWD_GPIO_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	00000785 	.word	0x00000785
     2e0:	000007f1 	.word	0x000007f1

000002e4 <__HardFault_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void __HardFault_Handler(void)
{		volatile int c = 1;
     2e4:	b082      	sub	sp, #8
     2e6:	2301      	movs	r3, #1
     2e8:	9301      	str	r3, [sp, #4]
        while (c==1) {
     2ea:	9b01      	ldr	r3, [sp, #4]
     2ec:	2b01      	cmp	r3, #1
     2ee:	d0fc      	beq.n	2ea <__HardFault_Handler+0x6>
        }
}
     2f0:	b002      	add	sp, #8
     2f2:	4770      	bx	lr

000002f4 <Dummy_Handler>:
void Dummy_Handler(void)
{		volatile int c = 1;
     2f4:	b082      	sub	sp, #8
     2f6:	2301      	movs	r3, #1
     2f8:	9301      	str	r3, [sp, #4]
        while (c==1) {
     2fa:	9b01      	ldr	r3, [sp, #4]
     2fc:	2b01      	cmp	r3, #1
     2fe:	d0fc      	beq.n	2fa <Dummy_Handler+0x6>
        }
}
     300:	b002      	add	sp, #8
     302:	4770      	bx	lr

00000304 <Reset_Handler>:
{
     304:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     306:	4b1c      	ldr	r3, [pc, #112]	; (378 <Reset_Handler+0x74>)
     308:	4a1c      	ldr	r2, [pc, #112]	; (37c <Reset_Handler+0x78>)
     30a:	429a      	cmp	r2, r3
     30c:	d010      	beq.n	330 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     30e:	4b1c      	ldr	r3, [pc, #112]	; (380 <Reset_Handler+0x7c>)
     310:	4a19      	ldr	r2, [pc, #100]	; (378 <Reset_Handler+0x74>)
     312:	429a      	cmp	r2, r3
     314:	d20c      	bcs.n	330 <Reset_Handler+0x2c>
     316:	3b01      	subs	r3, #1
     318:	1a9b      	subs	r3, r3, r2
     31a:	f023 0303 	bic.w	r3, r3, #3
     31e:	3304      	adds	r3, #4
     320:	4413      	add	r3, r2
     322:	4916      	ldr	r1, [pc, #88]	; (37c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     324:	f851 0b04 	ldr.w	r0, [r1], #4
     328:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     32c:	429a      	cmp	r2, r3
     32e:	d1f9      	bne.n	324 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     330:	4b14      	ldr	r3, [pc, #80]	; (384 <Reset_Handler+0x80>)
     332:	4a15      	ldr	r2, [pc, #84]	; (388 <Reset_Handler+0x84>)
     334:	429a      	cmp	r2, r3
     336:	d20a      	bcs.n	34e <Reset_Handler+0x4a>
     338:	3b01      	subs	r3, #1
     33a:	1a9b      	subs	r3, r3, r2
     33c:	f023 0303 	bic.w	r3, r3, #3
     340:	3304      	adds	r3, #4
     342:	4413      	add	r3, r2
                *pDest++ = 0;
     344:	2100      	movs	r1, #0
     346:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     34a:	4293      	cmp	r3, r2
     34c:	d1fb      	bne.n	346 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     34e:	4b0f      	ldr	r3, [pc, #60]	; (38c <Reset_Handler+0x88>)
     350:	4a0f      	ldr	r2, [pc, #60]	; (390 <Reset_Handler+0x8c>)
     352:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     356:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     358:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     35c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     368:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     36c:	4b09      	ldr	r3, [pc, #36]	; (394 <Reset_Handler+0x90>)
     36e:	4798      	blx	r3
        main();
     370:	4b09      	ldr	r3, [pc, #36]	; (398 <Reset_Handler+0x94>)
     372:	4798      	blx	r3
     374:	e7fe      	b.n	374 <Reset_Handler+0x70>
     376:	bf00      	nop
     378:	20000000 	.word	0x20000000
     37c:	0000253c 	.word	0x0000253c
     380:	20000064 	.word	0x20000064
     384:	20000134 	.word	0x20000134
     388:	20000064 	.word	0x20000064
     38c:	e000ed00 	.word	0xe000ed00
     390:	00000000 	.word	0x00000000
     394:	000021bd 	.word	0x000021bd
     398:	000017ed 	.word	0x000017ed

0000039c <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     39c:	4a02      	ldr	r2, [pc, #8]	; (3a8 <FLASH_0_CLOCK_init+0xc>)
     39e:	6913      	ldr	r3, [r2, #16]
     3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     3a4:	6113      	str	r3, [r2, #16]
     3a6:	4770      	bx	lr
     3a8:	40000800 	.word	0x40000800

000003ac <FLASH_0_init>:
{
	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     3ac:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     3ae:	4b03      	ldr	r3, [pc, #12]	; (3bc <FLASH_0_init+0x10>)
     3b0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     3b2:	4903      	ldr	r1, [pc, #12]	; (3c0 <FLASH_0_init+0x14>)
     3b4:	4803      	ldr	r0, [pc, #12]	; (3c4 <FLASH_0_init+0x18>)
     3b6:	4b04      	ldr	r3, [pc, #16]	; (3c8 <FLASH_0_init+0x1c>)
     3b8:	4798      	blx	r3
     3ba:	bd08      	pop	{r3, pc}
     3bc:	0000039d 	.word	0x0000039d
     3c0:	41004000 	.word	0x41004000
     3c4:	200000a4 	.word	0x200000a4
     3c8:	000009dd 	.word	0x000009dd

000003cc <QUAD_SPI_0_PORT_init>:
}

void QUAD_SPI_0_PORT_init(void)
{
     3cc:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ce:	4b5a      	ldr	r3, [pc, #360]	; (538 <QUAD_SPI_0_PORT_init+0x16c>)
     3d0:	f44f 6500 	mov.w	r5, #2048	; 0x800
     3d4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d8:	4a58      	ldr	r2, [pc, #352]	; (53c <QUAD_SPI_0_PORT_init+0x170>)
     3da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3de:	4858      	ldr	r0, [pc, #352]	; (540 <QUAD_SPI_0_PORT_init+0x174>)
     3e0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3e4:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     3e8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3ec:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f0:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3f8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fc:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     400:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     404:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     408:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     40c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     410:	f44f 7280 	mov.w	r2, #256	; 0x100
     414:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     416:	494b      	ldr	r1, [pc, #300]	; (544 <QUAD_SPI_0_PORT_init+0x178>)
     418:	6299      	str	r1, [r3, #40]	; 0x28
     41a:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     41e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     420:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     422:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     426:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     42a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     432:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     436:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     43a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     43e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     442:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     446:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     44e:	f44f 7200 	mov.w	r2, #512	; 0x200
     452:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     454:	f501 7180 	add.w	r1, r1, #256	; 0x100
     458:	6299      	str	r1, [r3, #40]	; 0x28
     45a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     45c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     45e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     462:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     466:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     472:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     476:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     47a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     47e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     482:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     48a:	f44f 6180 	mov.w	r1, #1024	; 0x400
     48e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     490:	4a2d      	ldr	r2, [pc, #180]	; (548 <QUAD_SPI_0_PORT_init+0x17c>)
     492:	629a      	str	r2, [r3, #40]	; 0x28
     494:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     496:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     498:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     49c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4a0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a4:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ac:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4b8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4bc:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4c4:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4c6:	4a21      	ldr	r2, [pc, #132]	; (54c <QUAD_SPI_0_PORT_init+0x180>)
     4c8:	629a      	str	r2, [r3, #40]	; 0x28
     4ca:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4cc:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4ce:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     4d2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4d6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4da:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     4de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4e6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4ea:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4f2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4fa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4fe:	4a14      	ldr	r2, [pc, #80]	; (550 <QUAD_SPI_0_PORT_init+0x184>)
     500:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     504:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     508:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     50c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     510:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     514:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     51c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     520:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     524:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     528:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     52c:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     530:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     534:	bc30      	pop	{r4, r5}
     536:	4770      	bx	lr
     538:	41008000 	.word	0x41008000
     53c:	40020800 	.word	0x40020800
     540:	c0020000 	.word	0xc0020000
     544:	40000100 	.word	0x40000100
     548:	40000400 	.word	0x40000400
     54c:	40000800 	.word	0x40000800
     550:	40020400 	.word	0x40020400

00000554 <QUAD_SPI_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     554:	4b06      	ldr	r3, [pc, #24]	; (570 <QUAD_SPI_0_CLOCK_init+0x1c>)
     556:	691a      	ldr	r2, [r3, #16]
     558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     55c:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     55e:	691a      	ldr	r2, [r3, #16]
     560:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     564:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     566:	69da      	ldr	r2, [r3, #28]
     568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     56c:	61da      	str	r2, [r3, #28]
     56e:	4770      	bx	lr
     570:	40000800 	.word	0x40000800

00000574 <QUAD_SPI_0_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QUAD_SPI_0_init(void)
{
     574:	b508      	push	{r3, lr}
	QUAD_SPI_0_CLOCK_init();
     576:	4b04      	ldr	r3, [pc, #16]	; (588 <QUAD_SPI_0_init+0x14>)
     578:	4798      	blx	r3
	qspi_sync_init(&QUAD_SPI_0, QSPI);
     57a:	4904      	ldr	r1, [pc, #16]	; (58c <QUAD_SPI_0_init+0x18>)
     57c:	4804      	ldr	r0, [pc, #16]	; (590 <QUAD_SPI_0_init+0x1c>)
     57e:	4b05      	ldr	r3, [pc, #20]	; (594 <QUAD_SPI_0_init+0x20>)
     580:	4798      	blx	r3
	QUAD_SPI_0_PORT_init();
     582:	4b05      	ldr	r3, [pc, #20]	; (598 <QUAD_SPI_0_init+0x24>)
     584:	4798      	blx	r3
     586:	bd08      	pop	{r3, pc}
     588:	00000555 	.word	0x00000555
     58c:	42003400 	.word	0x42003400
     590:	200000dc 	.word	0x200000dc
     594:	00000c39 	.word	0x00000c39
     598:	000003cd 	.word	0x000003cd

0000059c <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     59c:	4b28      	ldr	r3, [pc, #160]	; (640 <SPI_0_PORT_init+0xa4>)
     59e:	2210      	movs	r2, #16
     5a0:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5a2:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5a8:	629a      	str	r2, [r3, #40]	; 0x28
     5aa:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     5ae:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5b8:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5c8:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5d0:	2220      	movs	r2, #32
     5d2:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5d4:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5da:	629a      	str	r2, [r3, #40]	; 0x28
     5dc:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5de:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     5e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5e6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5ee:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5f2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5f6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5fe:	2240      	movs	r2, #64	; 0x40
     600:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     602:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     606:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     60a:	629a      	str	r2, [r3, #40]	; 0x28
     60c:	4a0d      	ldr	r2, [pc, #52]	; (644 <SPI_0_PORT_init+0xa8>)
     60e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     610:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     614:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     61c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     624:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     62c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     630:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     634:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     638:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     63c:	4770      	bx	lr
     63e:	bf00      	nop
     640:	41008000 	.word	0x41008000
     644:	c0020000 	.word	0xc0020000

00000648 <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     648:	4b06      	ldr	r3, [pc, #24]	; (664 <SPI_0_CLOCK_init+0x1c>)
     64a:	2240      	movs	r2, #64	; 0x40
     64c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     650:	2243      	movs	r2, #67	; 0x43
     652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     656:	4a04      	ldr	r2, [pc, #16]	; (668 <SPI_0_CLOCK_init+0x20>)
     658:	6953      	ldr	r3, [r2, #20]
     65a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     65e:	6153      	str	r3, [r2, #20]
     660:	4770      	bx	lr
     662:	bf00      	nop
     664:	40001c00 	.word	0x40001c00
     668:	40000800 	.word	0x40000800

0000066c <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     66c:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     66e:	4b04      	ldr	r3, [pc, #16]	; (680 <SPI_0_init+0x14>)
     670:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     672:	4904      	ldr	r1, [pc, #16]	; (684 <SPI_0_init+0x18>)
     674:	4804      	ldr	r0, [pc, #16]	; (688 <SPI_0_init+0x1c>)
     676:	4b05      	ldr	r3, [pc, #20]	; (68c <SPI_0_init+0x20>)
     678:	4798      	blx	r3
	SPI_0_PORT_init();
     67a:	4b05      	ldr	r3, [pc, #20]	; (690 <SPI_0_init+0x24>)
     67c:	4798      	blx	r3
     67e:	bd08      	pop	{r3, pc}
     680:	00000649 	.word	0x00000649
     684:	40003000 	.word	0x40003000
     688:	200000c4 	.word	0x200000c4
     68c:	00000cc1 	.word	0x00000cc1
     690:	0000059d 	.word	0x0000059d

00000694 <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     694:	4b16      	ldr	r3, [pc, #88]	; (6f0 <I2C_0_PORT_init+0x5c>)
     696:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     69a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     69e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6a2:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     6a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6b2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6ba:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6c2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     6c6:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6ce:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     6d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6de:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     6e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6e6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     6ee:	4770      	bx	lr
     6f0:	41008000 	.word	0x41008000

000006f4 <I2C_0_CLOCK_init>:
     6f4:	4b06      	ldr	r3, [pc, #24]	; (710 <I2C_0_CLOCK_init+0x1c>)
     6f6:	2240      	movs	r2, #64	; 0x40
     6f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     6fc:	2243      	movs	r2, #67	; 0x43
     6fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     702:	4a04      	ldr	r2, [pc, #16]	; (714 <I2C_0_CLOCK_init+0x20>)
     704:	6993      	ldr	r3, [r2, #24]
     706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     70a:	6193      	str	r3, [r2, #24]
     70c:	4770      	bx	lr
     70e:	bf00      	nop
     710:	40001c00 	.word	0x40001c00
     714:	40000800 	.word	0x40000800

00000718 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     718:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     71a:	4b04      	ldr	r3, [pc, #16]	; (72c <I2C_0_init+0x14>)
     71c:	4798      	blx	r3
	i2c_s_sync_init(&I2C_0, SERCOM3);
     71e:	4904      	ldr	r1, [pc, #16]	; (730 <I2C_0_init+0x18>)
     720:	4804      	ldr	r0, [pc, #16]	; (734 <I2C_0_init+0x1c>)
     722:	4b05      	ldr	r3, [pc, #20]	; (738 <I2C_0_init+0x20>)
     724:	4798      	blx	r3
	I2C_0_PORT_init();
     726:	4b05      	ldr	r3, [pc, #20]	; (73c <I2C_0_init+0x24>)
     728:	4798      	blx	r3
     72a:	bd08      	pop	{r3, pc}
     72c:	000006f5 	.word	0x000006f5
     730:	41014000 	.word	0x41014000
     734:	200000e0 	.word	0x200000e0
     738:	00000af9 	.word	0x00000af9
     73c:	00000695 	.word	0x00000695

00000740 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     740:	4a02      	ldr	r2, [pc, #8]	; (74c <WDT_0_CLOCK_init+0xc>)
     742:	6953      	ldr	r3, [r2, #20]
     744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     748:	6153      	str	r3, [r2, #20]
     74a:	4770      	bx	lr
     74c:	40000800 	.word	0x40000800

00000750 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     750:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     752:	4b06      	ldr	r3, [pc, #24]	; (76c <WDT_0_init+0x1c>)
     754:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     756:	2248      	movs	r2, #72	; 0x48
     758:	4905      	ldr	r1, [pc, #20]	; (770 <WDT_0_init+0x20>)
     75a:	2001      	movs	r0, #1
     75c:	4b05      	ldr	r3, [pc, #20]	; (774 <WDT_0_init+0x24>)
     75e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     760:	4805      	ldr	r0, [pc, #20]	; (778 <WDT_0_init+0x28>)
     762:	4b06      	ldr	r3, [pc, #24]	; (77c <WDT_0_init+0x2c>)
     764:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     766:	4b06      	ldr	r3, [pc, #24]	; (780 <WDT_0_init+0x30>)
     768:	4798      	blx	r3
     76a:	bd08      	pop	{r3, pc}
     76c:	00000741 	.word	0x00000741
     770:	000022f4 	.word	0x000022f4
     774:	00000f31 	.word	0x00000f31
     778:	200000c0 	.word	0x200000c0
     77c:	40002000 	.word	0x40002000
     780:	00001781 	.word	0x00001781

00000784 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     784:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     786:	4b0b      	ldr	r3, [pc, #44]	; (7b4 <system_init+0x30>)
     788:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     78a:	4b0b      	ldr	r3, [pc, #44]	; (7b8 <system_init+0x34>)
     78c:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     78e:	4a0b      	ldr	r2, [pc, #44]	; (7bc <system_init+0x38>)
     790:	6953      	ldr	r3, [r2, #20]
     792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     796:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     798:	4b09      	ldr	r3, [pc, #36]	; (7c0 <system_init+0x3c>)
     79a:	4798      	blx	r3
     79c:	4602      	mov	r2, r0
     79e:	4909      	ldr	r1, [pc, #36]	; (7c4 <system_init+0x40>)
     7a0:	4809      	ldr	r0, [pc, #36]	; (7c8 <system_init+0x44>)
     7a2:	4b0a      	ldr	r3, [pc, #40]	; (7cc <system_init+0x48>)
     7a4:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     7a6:	4b0a      	ldr	r3, [pc, #40]	; (7d0 <system_init+0x4c>)
     7a8:	4798      	blx	r3

	I2C_0_init();
     7aa:	4b0a      	ldr	r3, [pc, #40]	; (7d4 <system_init+0x50>)
     7ac:	4798      	blx	r3

	WDT_0_init();
     7ae:	4b0a      	ldr	r3, [pc, #40]	; (7d8 <system_init+0x54>)
     7b0:	4798      	blx	r3
     7b2:	bd08      	pop	{r3, pc}
     7b4:	00000fe1 	.word	0x00000fe1
     7b8:	000003ad 	.word	0x000003ad
     7bc:	40000800 	.word	0x40000800
     7c0:	00001369 	.word	0x00001369
     7c4:	40002400 	.word	0x40002400
     7c8:	200000ec 	.word	0x200000ec
     7cc:	00000ef5 	.word	0x00000ef5
     7d0:	0000066d 	.word	0x0000066d
     7d4:	00000719 	.word	0x00000719
     7d8:	00000751 	.word	0x00000751

000007dc <nor_flash_qspi_init>:
}


void nor_flash_qspi_init(void)
{
     7dc:	b508      	push	{r3, lr}
	QUAD_SPI_0_init();
     7de:	4b02      	ldr	r3, [pc, #8]	; (7e8 <nor_flash_qspi_init+0xc>)
     7e0:	4798      	blx	r3
	spi_nor_flash_init();
     7e2:	4b02      	ldr	r3, [pc, #8]	; (7ec <nor_flash_qspi_init+0x10>)
     7e4:	4798      	blx	r3
     7e6:	bd08      	pop	{r3, pc}
     7e8:	00000575 	.word	0x00000575
     7ec:	00001fe1 	.word	0x00001fe1

000007f0 <SWD_GPIO_init>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7f0:	4b1e      	ldr	r3, [pc, #120]	; (86c <SWD_GPIO_init+0x7c>)
     7f2:	2101      	movs	r1, #1
     7f4:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7f6:	4a1e      	ldr	r2, [pc, #120]	; (870 <SWD_GPIO_init+0x80>)
     7f8:	629a      	str	r2, [r3, #40]	; 0x28
     7fa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     7fe:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     800:	6199      	str	r1, [r3, #24]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     802:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
     806:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     80a:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     80e:	2102      	movs	r1, #2
     810:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     812:	4818      	ldr	r0, [pc, #96]	; (874 <SWD_GPIO_init+0x84>)
     814:	6298      	str	r0, [r3, #40]	; 0x28
     816:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     818:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     81a:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
     81e:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     822:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     826:	2108      	movs	r1, #8
     828:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     82c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     830:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     834:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     838:	490f      	ldr	r1, [pc, #60]	; (878 <SWD_GPIO_init+0x88>)
     83a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     83e:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
     842:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     846:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     84a:	2104      	movs	r1, #4
     84c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     850:	3002      	adds	r0, #2
     852:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     856:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     85a:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     85e:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
     862:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     866:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
     86a:	4770      	bx	lr
     86c:	41008000 	.word	0x41008000
     870:	40000001 	.word	0x40000001
     874:	40000002 	.word	0x40000002
     878:	c0020000 	.word	0xc0020000

0000087c <SWD_tx>:
	timer_start(&TIMER_0);
}


void SWD_tx(uint8_t* buffer, uint16_t length) //SPI MOSI
{	
     87c:	b570      	push	{r4, r5, r6, lr}
     87e:	b082      	sub	sp, #8
     880:	4605      	mov	r5, r0
     882:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     884:	4b09      	ldr	r3, [pc, #36]	; (8ac <SWD_tx+0x30>)
     886:	2201      	movs	r2, #1
     888:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     88a:	2202      	movs	r2, #2
     88c:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(MOSI_EN, true);
	gpio_set_pin_level(MISO_EN, false);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     88e:	4c08      	ldr	r4, [pc, #32]	; (8b0 <SWD_tx+0x34>)
     890:	a901      	add	r1, sp, #4
     892:	4620      	mov	r0, r4
     894:	4b07      	ldr	r3, [pc, #28]	; (8b4 <SWD_tx+0x38>)
     896:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     898:	4620      	mov	r0, r4
     89a:	4b07      	ldr	r3, [pc, #28]	; (8b8 <SWD_tx+0x3c>)
     89c:	4798      	blx	r3
	io_write(io, buffer, length);
     89e:	4632      	mov	r2, r6
     8a0:	4629      	mov	r1, r5
     8a2:	9801      	ldr	r0, [sp, #4]
     8a4:	4b05      	ldr	r3, [pc, #20]	; (8bc <SWD_tx+0x40>)
     8a6:	4798      	blx	r3
}
     8a8:	b002      	add	sp, #8
     8aa:	bd70      	pop	{r4, r5, r6, pc}
     8ac:	41008000 	.word	0x41008000
     8b0:	200000c4 	.word	0x200000c4
     8b4:	00000df1 	.word	0x00000df1
     8b8:	00000d11 	.word	0x00000d11
     8bc:	00000bd9 	.word	0x00000bd9

000008c0 <SWD_rx>:

void SWD_rx(uint8_t* buffer, uint16_t length) //SPI MISO
{
     8c0:	b570      	push	{r4, r5, r6, lr}
     8c2:	b082      	sub	sp, #8
     8c4:	4605      	mov	r5, r0
     8c6:	460e      	mov	r6, r1
     8c8:	4b09      	ldr	r3, [pc, #36]	; (8f0 <SWD_rx+0x30>)
     8ca:	2201      	movs	r2, #1
     8cc:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8ce:	2202      	movs	r2, #2
     8d0:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(MOSI_EN, false);
	gpio_set_pin_level(MISO_EN, true);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     8d2:	4c08      	ldr	r4, [pc, #32]	; (8f4 <SWD_rx+0x34>)
     8d4:	a901      	add	r1, sp, #4
     8d6:	4620      	mov	r0, r4
     8d8:	4b07      	ldr	r3, [pc, #28]	; (8f8 <SWD_rx+0x38>)
     8da:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     8dc:	4620      	mov	r0, r4
     8de:	4b07      	ldr	r3, [pc, #28]	; (8fc <SWD_rx+0x3c>)
     8e0:	4798      	blx	r3
	io_read(io, buffer, length);
     8e2:	4632      	mov	r2, r6
     8e4:	4629      	mov	r1, r5
     8e6:	9801      	ldr	r0, [sp, #4]
     8e8:	4b05      	ldr	r3, [pc, #20]	; (900 <SWD_rx+0x40>)
     8ea:	4798      	blx	r3
}
     8ec:	b002      	add	sp, #8
     8ee:	bd70      	pop	{r4, r5, r6, pc}
     8f0:	41008000 	.word	0x41008000
     8f4:	200000c4 	.word	0x200000c4
     8f8:	00000df1 	.word	0x00000df1
     8fc:	00000d11 	.word	0x00000d11
     900:	00000c09 	.word	0x00000c09

00000904 <I2C_read>:
	spi_m_sync_enable(&SPI_0);
	_spi_m_sync_trans(&SPI_0.dev, &spi_istruct);//(struct _spi_m_sync_dev *dev, const struct spi_msg *msg);
}

void I2C_read(uint8_t* buffer, uint16_t length)
{
     904:	b570      	push	{r4, r5, r6, lr}
     906:	b082      	sub	sp, #8
     908:	4605      	mov	r5, r0
     90a:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     90c:	4c09      	ldr	r4, [pc, #36]	; (934 <I2C_read+0x30>)
     90e:	a901      	add	r1, sp, #4
     910:	4620      	mov	r0, r4
     912:	4b09      	ldr	r3, [pc, #36]	; (938 <I2C_read+0x34>)
     914:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     916:	2110      	movs	r1, #16
     918:	4620      	mov	r0, r4
     91a:	4b08      	ldr	r3, [pc, #32]	; (93c <I2C_read+0x38>)
     91c:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     91e:	4620      	mov	r0, r4
     920:	4b07      	ldr	r3, [pc, #28]	; (940 <I2C_read+0x3c>)
     922:	4798      	blx	r3

	io_read(io, buffer, length);
     924:	4632      	mov	r2, r6
     926:	4629      	mov	r1, r5
     928:	9801      	ldr	r0, [sp, #4]
     92a:	4b06      	ldr	r3, [pc, #24]	; (944 <I2C_read+0x40>)
     92c:	4798      	blx	r3
}
     92e:	b002      	add	sp, #8
     930:	bd70      	pop	{r4, r5, r6, pc}
     932:	bf00      	nop
     934:	200000e0 	.word	0x200000e0
     938:	00000bad 	.word	0x00000bad
     93c:	00000b41 	.word	0x00000b41
     940:	00000b85 	.word	0x00000b85
     944:	00000c09 	.word	0x00000c09

00000948 <I2C_write>:

void I2C_write(uint8_t* buffer, uint16_t length)
{
     948:	b570      	push	{r4, r5, r6, lr}
     94a:	b082      	sub	sp, #8
     94c:	4605      	mov	r5, r0
     94e:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     950:	4c09      	ldr	r4, [pc, #36]	; (978 <I2C_write+0x30>)
     952:	a901      	add	r1, sp, #4
     954:	4620      	mov	r0, r4
     956:	4b09      	ldr	r3, [pc, #36]	; (97c <I2C_write+0x34>)
     958:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     95a:	2110      	movs	r1, #16
     95c:	4620      	mov	r0, r4
     95e:	4b08      	ldr	r3, [pc, #32]	; (980 <I2C_write+0x38>)
     960:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     962:	4620      	mov	r0, r4
     964:	4b07      	ldr	r3, [pc, #28]	; (984 <I2C_write+0x3c>)
     966:	4798      	blx	r3

	io_write(io, buffer, length);
     968:	4632      	mov	r2, r6
     96a:	4629      	mov	r1, r5
     96c:	9801      	ldr	r0, [sp, #4]
     96e:	4b06      	ldr	r3, [pc, #24]	; (988 <I2C_write+0x40>)
     970:	4798      	blx	r3
}
     972:	b002      	add	sp, #8
     974:	bd70      	pop	{r4, r5, r6, pc}
     976:	bf00      	nop
     978:	200000e0 	.word	0x200000e0
     97c:	00000bad 	.word	0x00000bad
     980:	00000b41 	.word	0x00000b41
     984:	00000b85 	.word	0x00000b85
     988:	00000bd9 	.word	0x00000bd9

0000098c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     98c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     990:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     992:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     994:	f3bf 8f5f 	dmb	sy
     998:	4770      	bx	lr

0000099a <atomic_leave_critical>:
     99a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     99e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     9a0:	f383 8810 	msr	PRIMASK, r3
     9a4:	4770      	bx	lr
	...

000009a8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     9a8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     9aa:	4b04      	ldr	r3, [pc, #16]	; (9bc <delay_ms+0x14>)
     9ac:	681c      	ldr	r4, [r3, #0]
     9ae:	4b04      	ldr	r3, [pc, #16]	; (9c0 <delay_ms+0x18>)
     9b0:	4798      	blx	r3
     9b2:	4601      	mov	r1, r0
     9b4:	4620      	mov	r0, r4
     9b6:	4b03      	ldr	r3, [pc, #12]	; (9c4 <delay_ms+0x1c>)
     9b8:	4798      	blx	r3
     9ba:	bd10      	pop	{r4, pc}
     9bc:	20000080 	.word	0x20000080
     9c0:	00000fbd 	.word	0x00000fbd
     9c4:	00000fd9 	.word	0x00000fd9

000009c8 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     9c8:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     9ca:	6943      	ldr	r3, [r0, #20]
     9cc:	b103      	cbz	r3, 9d0 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     9ce:	4798      	blx	r3
     9d0:	bd08      	pop	{r3, pc}

000009d2 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     9d2:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     9d4:	6983      	ldr	r3, [r0, #24]
     9d6:	b103      	cbz	r3, 9da <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     9d8:	4798      	blx	r3
     9da:	bd08      	pop	{r3, pc}

000009dc <flash_init>:
{
     9dc:	b538      	push	{r3, r4, r5, lr}
     9de:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     9e0:	4604      	mov	r4, r0
     9e2:	b190      	cbz	r0, a0a <flash_init+0x2e>
     9e4:	1c08      	adds	r0, r1, #0
     9e6:	bf18      	it	ne
     9e8:	2001      	movne	r0, #1
     9ea:	2238      	movs	r2, #56	; 0x38
     9ec:	4908      	ldr	r1, [pc, #32]	; (a10 <flash_init+0x34>)
     9ee:	4b09      	ldr	r3, [pc, #36]	; (a14 <flash_init+0x38>)
     9f0:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     9f2:	4629      	mov	r1, r5
     9f4:	4620      	mov	r0, r4
     9f6:	4b08      	ldr	r3, [pc, #32]	; (a18 <flash_init+0x3c>)
     9f8:	4798      	blx	r3
	if (rc) {
     9fa:	4603      	mov	r3, r0
     9fc:	b918      	cbnz	r0, a06 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     9fe:	4a07      	ldr	r2, [pc, #28]	; (a1c <flash_init+0x40>)
     a00:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     a02:	4a07      	ldr	r2, [pc, #28]	; (a20 <flash_init+0x44>)
     a04:	6062      	str	r2, [r4, #4]
}
     a06:	4618      	mov	r0, r3
     a08:	bd38      	pop	{r3, r4, r5, pc}
     a0a:	2000      	movs	r0, #0
     a0c:	e7ed      	b.n	9ea <flash_init+0xe>
     a0e:	bf00      	nop
     a10:	00002310 	.word	0x00002310
     a14:	00000f31 	.word	0x00000f31
     a18:	00001079 	.word	0x00001079
     a1c:	000009c9 	.word	0x000009c9
     a20:	000009d3 	.word	0x000009d3

00000a24 <i2c_s_sync_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_sync_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a28:	460f      	mov	r7, r1
     a2a:	4690      	mov	r8, r2
	uint16_t                      offset = 0;
	struct i2c_s_sync_descriptor *descr  = CONTAINER_OF(io, struct i2c_s_sync_descriptor, io);

	ASSERT(io && buf && length);
     a2c:	4604      	mov	r4, r0
     a2e:	b320      	cbz	r0, a7a <i2c_s_sync_write+0x56>
     a30:	b329      	cbz	r1, a7e <i2c_s_sync_write+0x5a>
     a32:	1c10      	adds	r0, r2, #0
     a34:	bf18      	it	ne
     a36:	2001      	movne	r0, #1
     a38:	22b6      	movs	r2, #182	; 0xb6
     a3a:	4912      	ldr	r1, [pc, #72]	; (a84 <i2c_s_sync_write+0x60>)
     a3c:	4b12      	ldr	r3, [pc, #72]	; (a88 <i2c_s_sync_write+0x64>)
     a3e:	4798      	blx	r3

	while (!_i2c_s_sync_is_byte_sent(&descr->device))
     a40:	3c04      	subs	r4, #4
     a42:	4d12      	ldr	r5, [pc, #72]	; (a8c <i2c_s_sync_write+0x68>)
     a44:	4620      	mov	r0, r4
     a46:	47a8      	blx	r5
     a48:	2800      	cmp	r0, #0
     a4a:	d0fb      	beq.n	a44 <i2c_s_sync_write+0x20>
     a4c:	3f01      	subs	r7, #1
     a4e:	2600      	movs	r6, #0
		;
	do {
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     a50:	f8df 9040 	ldr.w	r9, [pc, #64]	; a94 <i2c_s_sync_write+0x70>
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     a54:	4d0d      	ldr	r5, [pc, #52]	; (a8c <i2c_s_sync_write+0x68>)
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     a56:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     a5a:	4620      	mov	r0, r4
     a5c:	47c8      	blx	r9
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     a5e:	4620      	mov	r0, r4
     a60:	47a8      	blx	r5
     a62:	2800      	cmp	r0, #0
     a64:	d0fb      	beq.n	a5e <i2c_s_sync_write+0x3a>
			;
	} while (++offset < length);
     a66:	3601      	adds	r6, #1
     a68:	b2b6      	uxth	r6, r6
     a6a:	45b0      	cmp	r8, r6
     a6c:	d8f3      	bhi.n	a56 <i2c_s_sync_write+0x32>

	/* To ensure no more data needs to be sent */
	_i2c_s_sync_clear_data_ready_flag(&descr->device);
     a6e:	4620      	mov	r0, r4
     a70:	4b07      	ldr	r3, [pc, #28]	; (a90 <i2c_s_sync_write+0x6c>)
     a72:	4798      	blx	r3

	return (int32_t)offset;
}
     a74:	4630      	mov	r0, r6
     a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     a7a:	2000      	movs	r0, #0
     a7c:	e7dc      	b.n	a38 <i2c_s_sync_write+0x14>
     a7e:	2000      	movs	r0, #0
     a80:	e7da      	b.n	a38 <i2c_s_sync_write+0x14>
     a82:	bf00      	nop
     a84:	00002328 	.word	0x00002328
     a88:	00000f31 	.word	0x00000f31
     a8c:	0000155f 	.word	0x0000155f
     a90:	00001573 	.word	0x00001573
     a94:	00001551 	.word	0x00001551

00000a98 <i2c_s_sync_read>:
{
     a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     a9c:	460f      	mov	r7, r1
     a9e:	4690      	mov	r8, r2
	ASSERT(io && buf && length);
     aa0:	4604      	mov	r4, r0
     aa2:	b1e0      	cbz	r0, ade <i2c_s_sync_read+0x46>
     aa4:	b1e9      	cbz	r1, ae2 <i2c_s_sync_read+0x4a>
     aa6:	1c10      	adds	r0, r2, #0
     aa8:	bf18      	it	ne
     aaa:	2001      	movne	r0, #1
     aac:	229c      	movs	r2, #156	; 0x9c
     aae:	490e      	ldr	r1, [pc, #56]	; (ae8 <i2c_s_sync_read+0x50>)
     ab0:	4b0e      	ldr	r3, [pc, #56]	; (aec <i2c_s_sync_read+0x54>)
     ab2:	4798      	blx	r3
     ab4:	3f01      	subs	r7, #1
	uint16_t                      offset = 0;
     ab6:	2600      	movs	r6, #0
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     ab8:	3c04      	subs	r4, #4
     aba:	4d0d      	ldr	r5, [pc, #52]	; (af0 <i2c_s_sync_read+0x58>)
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     abc:	f8df 9034 	ldr.w	r9, [pc, #52]	; af4 <i2c_s_sync_read+0x5c>
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     ac0:	4620      	mov	r0, r4
     ac2:	47a8      	blx	r5
     ac4:	2800      	cmp	r0, #0
     ac6:	d0fb      	beq.n	ac0 <i2c_s_sync_read+0x28>
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     ac8:	4620      	mov	r0, r4
     aca:	47c8      	blx	r9
     acc:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     ad0:	3601      	adds	r6, #1
     ad2:	b2b6      	uxth	r6, r6
     ad4:	45b0      	cmp	r8, r6
     ad6:	d8f3      	bhi.n	ac0 <i2c_s_sync_read+0x28>
}
     ad8:	4630      	mov	r0, r6
     ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     ade:	2000      	movs	r0, #0
     ae0:	e7e4      	b.n	aac <i2c_s_sync_read+0x14>
     ae2:	2000      	movs	r0, #0
     ae4:	e7e2      	b.n	aac <i2c_s_sync_read+0x14>
     ae6:	bf00      	nop
     ae8:	00002328 	.word	0x00002328
     aec:	00000f31 	.word	0x00000f31
     af0:	00001569 	.word	0x00001569
     af4:	00001557 	.word	0x00001557

00000af8 <i2c_s_sync_init>:
{
     af8:	b538      	push	{r3, r4, r5, lr}
     afa:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     afc:	4604      	mov	r4, r0
     afe:	b190      	cbz	r0, b26 <i2c_s_sync_init+0x2e>
     b00:	1c08      	adds	r0, r1, #0
     b02:	bf18      	it	ne
     b04:	2001      	movne	r0, #1
     b06:	2235      	movs	r2, #53	; 0x35
     b08:	4908      	ldr	r1, [pc, #32]	; (b2c <i2c_s_sync_init+0x34>)
     b0a:	4b09      	ldr	r3, [pc, #36]	; (b30 <i2c_s_sync_init+0x38>)
     b0c:	4798      	blx	r3
	init_status = _i2c_s_sync_init(&descr->device, hw);
     b0e:	4629      	mov	r1, r5
     b10:	4620      	mov	r0, r4
     b12:	4b08      	ldr	r3, [pc, #32]	; (b34 <i2c_s_sync_init+0x3c>)
     b14:	4798      	blx	r3
	if (init_status) {
     b16:	4603      	mov	r3, r0
     b18:	b918      	cbnz	r0, b22 <i2c_s_sync_init+0x2a>
	descr->io.read  = i2c_s_sync_read;
     b1a:	4a07      	ldr	r2, [pc, #28]	; (b38 <i2c_s_sync_init+0x40>)
     b1c:	60a2      	str	r2, [r4, #8]
	descr->io.write = i2c_s_sync_write;
     b1e:	4a07      	ldr	r2, [pc, #28]	; (b3c <i2c_s_sync_init+0x44>)
     b20:	6062      	str	r2, [r4, #4]
}
     b22:	4618      	mov	r0, r3
     b24:	bd38      	pop	{r3, r4, r5, pc}
     b26:	2000      	movs	r0, #0
     b28:	e7ed      	b.n	b06 <i2c_s_sync_init+0xe>
     b2a:	bf00      	nop
     b2c:	00002328 	.word	0x00002328
     b30:	00000f31 	.word	0x00000f31
     b34:	000014ed 	.word	0x000014ed
     b38:	00000a99 	.word	0x00000a99
     b3c:	00000a25 	.word	0x00000a25

00000b40 <i2c_s_sync_set_addr>:
{
     b40:	b538      	push	{r3, r4, r5, lr}
     b42:	460d      	mov	r5, r1
	ASSERT(descr);
     b44:	4604      	mov	r4, r0
     b46:	2251      	movs	r2, #81	; 0x51
     b48:	490a      	ldr	r1, [pc, #40]	; (b74 <i2c_s_sync_set_addr+0x34>)
     b4a:	3000      	adds	r0, #0
     b4c:	bf18      	it	ne
     b4e:	2001      	movne	r0, #1
     b50:	4b09      	ldr	r3, [pc, #36]	; (b78 <i2c_s_sync_set_addr+0x38>)
     b52:	4798      	blx	r3
	if (!_i2c_s_sync_is_10bit_addressing_on(&descr->device)) {
     b54:	4620      	mov	r0, r4
     b56:	4b09      	ldr	r3, [pc, #36]	; (b7c <i2c_s_sync_set_addr+0x3c>)
     b58:	4798      	blx	r3
     b5a:	b120      	cbz	r0, b66 <i2c_s_sync_set_addr+0x26>
	return _i2c_s_sync_set_address(&descr->device, address);
     b5c:	4629      	mov	r1, r5
     b5e:	4620      	mov	r0, r4
     b60:	4b07      	ldr	r3, [pc, #28]	; (b80 <i2c_s_sync_set_addr+0x40>)
     b62:	4798      	blx	r3
}
     b64:	bd38      	pop	{r3, r4, r5, pc}
		return _i2c_s_sync_set_address(&descr->device, address & 0x7F);
     b66:	f005 017f 	and.w	r1, r5, #127	; 0x7f
     b6a:	4620      	mov	r0, r4
     b6c:	4b04      	ldr	r3, [pc, #16]	; (b80 <i2c_s_sync_set_addr+0x40>)
     b6e:	4798      	blx	r3
     b70:	bd38      	pop	{r3, r4, r5, pc}
     b72:	bf00      	nop
     b74:	00002328 	.word	0x00002328
     b78:	00000f31 	.word	0x00000f31
     b7c:	00001537 	.word	0x00001537
     b80:	00001541 	.word	0x00001541

00000b84 <i2c_s_sync_enable>:
{
     b84:	b510      	push	{r4, lr}
	ASSERT(descr);
     b86:	4604      	mov	r4, r0
     b88:	225f      	movs	r2, #95	; 0x5f
     b8a:	4905      	ldr	r1, [pc, #20]	; (ba0 <i2c_s_sync_enable+0x1c>)
     b8c:	3000      	adds	r0, #0
     b8e:	bf18      	it	ne
     b90:	2001      	movne	r0, #1
     b92:	4b04      	ldr	r3, [pc, #16]	; (ba4 <i2c_s_sync_enable+0x20>)
     b94:	4798      	blx	r3
	return _i2c_s_sync_enable(&descr->device);
     b96:	4620      	mov	r0, r4
     b98:	4b03      	ldr	r3, [pc, #12]	; (ba8 <i2c_s_sync_enable+0x24>)
     b9a:	4798      	blx	r3
}
     b9c:	bd10      	pop	{r4, pc}
     b9e:	bf00      	nop
     ba0:	00002328 	.word	0x00002328
     ba4:	00000f31 	.word	0x00000f31
     ba8:	00001521 	.word	0x00001521

00000bac <i2c_s_sync_get_io_descriptor>:
{
     bac:	b538      	push	{r3, r4, r5, lr}
     bae:	460d      	mov	r5, r1
	ASSERT(descr && io);
     bb0:	4604      	mov	r4, r0
     bb2:	b150      	cbz	r0, bca <i2c_s_sync_get_io_descriptor+0x1e>
     bb4:	1c08      	adds	r0, r1, #0
     bb6:	bf18      	it	ne
     bb8:	2001      	movne	r0, #1
     bba:	2273      	movs	r2, #115	; 0x73
     bbc:	4904      	ldr	r1, [pc, #16]	; (bd0 <i2c_s_sync_get_io_descriptor+0x24>)
     bbe:	4b05      	ldr	r3, [pc, #20]	; (bd4 <i2c_s_sync_get_io_descriptor+0x28>)
     bc0:	4798      	blx	r3
	*io = &descr->io;
     bc2:	3404      	adds	r4, #4
     bc4:	602c      	str	r4, [r5, #0]
}
     bc6:	2000      	movs	r0, #0
     bc8:	bd38      	pop	{r3, r4, r5, pc}
     bca:	2000      	movs	r0, #0
     bcc:	e7f5      	b.n	bba <i2c_s_sync_get_io_descriptor+0xe>
     bce:	bf00      	nop
     bd0:	00002328 	.word	0x00002328
     bd4:	00000f31 	.word	0x00000f31

00000bd8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     bd8:	b570      	push	{r4, r5, r6, lr}
     bda:	460d      	mov	r5, r1
     bdc:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     bde:	4604      	mov	r4, r0
     be0:	b160      	cbz	r0, bfc <io_write+0x24>
     be2:	1c08      	adds	r0, r1, #0
     be4:	bf18      	it	ne
     be6:	2001      	movne	r0, #1
     be8:	2234      	movs	r2, #52	; 0x34
     bea:	4905      	ldr	r1, [pc, #20]	; (c00 <io_write+0x28>)
     bec:	4b05      	ldr	r3, [pc, #20]	; (c04 <io_write+0x2c>)
     bee:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     bf0:	6823      	ldr	r3, [r4, #0]
     bf2:	4632      	mov	r2, r6
     bf4:	4629      	mov	r1, r5
     bf6:	4620      	mov	r0, r4
     bf8:	4798      	blx	r3
}
     bfa:	bd70      	pop	{r4, r5, r6, pc}
     bfc:	2000      	movs	r0, #0
     bfe:	e7f3      	b.n	be8 <io_write+0x10>
     c00:	00002344 	.word	0x00002344
     c04:	00000f31 	.word	0x00000f31

00000c08 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     c08:	b570      	push	{r4, r5, r6, lr}
     c0a:	460d      	mov	r5, r1
     c0c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     c0e:	4604      	mov	r4, r0
     c10:	b160      	cbz	r0, c2c <io_read+0x24>
     c12:	1c08      	adds	r0, r1, #0
     c14:	bf18      	it	ne
     c16:	2001      	movne	r0, #1
     c18:	223d      	movs	r2, #61	; 0x3d
     c1a:	4905      	ldr	r1, [pc, #20]	; (c30 <io_read+0x28>)
     c1c:	4b05      	ldr	r3, [pc, #20]	; (c34 <io_read+0x2c>)
     c1e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     c20:	6863      	ldr	r3, [r4, #4]
     c22:	4632      	mov	r2, r6
     c24:	4629      	mov	r1, r5
     c26:	4620      	mov	r0, r4
     c28:	4798      	blx	r3
}
     c2a:	bd70      	pop	{r4, r5, r6, pc}
     c2c:	2000      	movs	r0, #0
     c2e:	e7f3      	b.n	c18 <io_read+0x10>
     c30:	00002344 	.word	0x00002344
     c34:	00000f31 	.word	0x00000f31

00000c38 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
     c38:	b538      	push	{r3, r4, r5, lr}
     c3a:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
     c3c:	4605      	mov	r5, r0
     c3e:	b158      	cbz	r0, c58 <qspi_sync_init+0x20>
     c40:	1c08      	adds	r0, r1, #0
     c42:	bf18      	it	ne
     c44:	2001      	movne	r0, #1
     c46:	2231      	movs	r2, #49	; 0x31
     c48:	4904      	ldr	r1, [pc, #16]	; (c5c <qspi_sync_init+0x24>)
     c4a:	4b05      	ldr	r3, [pc, #20]	; (c60 <qspi_sync_init+0x28>)
     c4c:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
     c4e:	4621      	mov	r1, r4
     c50:	4628      	mov	r0, r5
     c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <qspi_sync_init+0x2c>)
     c54:	4798      	blx	r3
}
     c56:	bd38      	pop	{r3, r4, r5, pc}
     c58:	2000      	movs	r0, #0
     c5a:	e7f4      	b.n	c46 <qspi_sync_init+0xe>
     c5c:	00002358 	.word	0x00002358
     c60:	00000f31 	.word	0x00000f31
     c64:	000011a1 	.word	0x000011a1

00000c68 <qspi_sync_enable>:

	return _qspi_sync_deinit(&qspi->dev);
}

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
     c68:	b510      	push	{r4, lr}
	ASSERT(qspi);
     c6a:	4604      	mov	r4, r0
     c6c:	223f      	movs	r2, #63	; 0x3f
     c6e:	4905      	ldr	r1, [pc, #20]	; (c84 <qspi_sync_enable+0x1c>)
     c70:	3000      	adds	r0, #0
     c72:	bf18      	it	ne
     c74:	2001      	movne	r0, #1
     c76:	4b04      	ldr	r3, [pc, #16]	; (c88 <qspi_sync_enable+0x20>)
     c78:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
     c7a:	4620      	mov	r0, r4
     c7c:	4b03      	ldr	r3, [pc, #12]	; (c8c <qspi_sync_enable+0x24>)
     c7e:	4798      	blx	r3
}
     c80:	bd10      	pop	{r4, pc}
     c82:	bf00      	nop
     c84:	00002358 	.word	0x00002358
     c88:	00000f31 	.word	0x00000f31
     c8c:	000011d9 	.word	0x000011d9

00000c90 <qspi_sync_serial_run_command>:

	return _qspi_sync_disable(&qspi->dev);
}

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
     c90:	b538      	push	{r3, r4, r5, lr}
     c92:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
     c94:	4605      	mov	r5, r0
     c96:	b158      	cbz	r0, cb0 <qspi_sync_serial_run_command+0x20>
     c98:	1c08      	adds	r0, r1, #0
     c9a:	bf18      	it	ne
     c9c:	2001      	movne	r0, #1
     c9e:	224d      	movs	r2, #77	; 0x4d
     ca0:	4904      	ldr	r1, [pc, #16]	; (cb4 <qspi_sync_serial_run_command+0x24>)
     ca2:	4b05      	ldr	r3, [pc, #20]	; (cb8 <qspi_sync_serial_run_command+0x28>)
     ca4:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
     ca6:	4621      	mov	r1, r4
     ca8:	4628      	mov	r0, r5
     caa:	4b04      	ldr	r3, [pc, #16]	; (cbc <qspi_sync_serial_run_command+0x2c>)
     cac:	4798      	blx	r3
}
     cae:	bd38      	pop	{r3, r4, r5, pc}
     cb0:	2000      	movs	r0, #0
     cb2:	e7f4      	b.n	c9e <qspi_sync_serial_run_command+0xe>
     cb4:	00002358 	.word	0x00002358
     cb8:	00000f31 	.word	0x00000f31
     cbc:	000011e5 	.word	0x000011e5

00000cc0 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     cc0:	b538      	push	{r3, r4, r5, lr}
     cc2:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     cc4:	4604      	mov	r4, r0
     cc6:	b1b8      	cbz	r0, cf8 <spi_m_sync_init+0x38>
     cc8:	1c08      	adds	r0, r1, #0
     cca:	bf18      	it	ne
     ccc:	2001      	movne	r0, #1
     cce:	2240      	movs	r2, #64	; 0x40
     cd0:	490a      	ldr	r1, [pc, #40]	; (cfc <spi_m_sync_init+0x3c>)
     cd2:	4b0b      	ldr	r3, [pc, #44]	; (d00 <spi_m_sync_init+0x40>)
     cd4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     cd6:	4620      	mov	r0, r4
     cd8:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
     cdc:	4629      	mov	r1, r5
     cde:	4b09      	ldr	r3, [pc, #36]	; (d04 <spi_m_sync_init+0x44>)
     ce0:	4798      	blx	r3

	if (rc < 0) {
     ce2:	2800      	cmp	r0, #0
     ce4:	db07      	blt.n	cf6 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     cea:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     cec:	4b06      	ldr	r3, [pc, #24]	; (d08 <spi_m_sync_init+0x48>)
     cee:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     cf0:	4b06      	ldr	r3, [pc, #24]	; (d0c <spi_m_sync_init+0x4c>)
     cf2:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     cf4:	2000      	movs	r0, #0
}
     cf6:	bd38      	pop	{r3, r4, r5, pc}
     cf8:	2000      	movs	r0, #0
     cfa:	e7e8      	b.n	cce <spi_m_sync_init+0xe>
     cfc:	00002374 	.word	0x00002374
     d00:	00000f31 	.word	0x00000f31
     d04:	0000157d 	.word	0x0000157d
     d08:	00000db5 	.word	0x00000db5
     d0c:	00000d79 	.word	0x00000d79

00000d10 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     d10:	b510      	push	{r4, lr}
	ASSERT(spi);
     d12:	4604      	mov	r4, r0
     d14:	2257      	movs	r2, #87	; 0x57
     d16:	4905      	ldr	r1, [pc, #20]	; (d2c <spi_m_sync_enable+0x1c>)
     d18:	3000      	adds	r0, #0
     d1a:	bf18      	it	ne
     d1c:	2001      	movne	r0, #1
     d1e:	4b04      	ldr	r3, [pc, #16]	; (d30 <spi_m_sync_enable+0x20>)
     d20:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     d22:	1d20      	adds	r0, r4, #4
     d24:	4b03      	ldr	r3, [pc, #12]	; (d34 <spi_m_sync_enable+0x24>)
     d26:	4798      	blx	r3
     d28:	bd10      	pop	{r4, pc}
     d2a:	bf00      	nop
     d2c:	00002374 	.word	0x00002374
     d30:	00000f31 	.word	0x00000f31
     d34:	00001671 	.word	0x00001671

00000d38 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     d38:	b530      	push	{r4, r5, lr}
     d3a:	b085      	sub	sp, #20
     d3c:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     d3e:	4605      	mov	r5, r0
     d40:	b190      	cbz	r0, d68 <spi_m_sync_transfer+0x30>
     d42:	1c08      	adds	r0, r1, #0
     d44:	bf18      	it	ne
     d46:	2001      	movne	r0, #1
     d48:	22b3      	movs	r2, #179	; 0xb3
     d4a:	4908      	ldr	r1, [pc, #32]	; (d6c <spi_m_sync_transfer+0x34>)
     d4c:	4b08      	ldr	r3, [pc, #32]	; (d70 <spi_m_sync_transfer+0x38>)
     d4e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     d50:	6823      	ldr	r3, [r4, #0]
     d52:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
     d54:	6863      	ldr	r3, [r4, #4]
     d56:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
     d58:	68a3      	ldr	r3, [r4, #8]
     d5a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     d5c:	a901      	add	r1, sp, #4
     d5e:	1d28      	adds	r0, r5, #4
     d60:	4b04      	ldr	r3, [pc, #16]	; (d74 <spi_m_sync_transfer+0x3c>)
     d62:	4798      	blx	r3
}
     d64:	b005      	add	sp, #20
     d66:	bd30      	pop	{r4, r5, pc}
     d68:	2000      	movs	r0, #0
     d6a:	e7ed      	b.n	d48 <spi_m_sync_transfer+0x10>
     d6c:	00002374 	.word	0x00002374
     d70:	00000f31 	.word	0x00000f31
     d74:	000016a1 	.word	0x000016a1

00000d78 <_spi_m_sync_io_write>:
{
     d78:	b570      	push	{r4, r5, r6, lr}
     d7a:	b084      	sub	sp, #16
     d7c:	460e      	mov	r6, r1
     d7e:	4615      	mov	r5, r2
	ASSERT(io);
     d80:	4604      	mov	r4, r0
     d82:	22a3      	movs	r2, #163	; 0xa3
     d84:	4908      	ldr	r1, [pc, #32]	; (da8 <_spi_m_sync_io_write+0x30>)
     d86:	3000      	adds	r0, #0
     d88:	bf18      	it	ne
     d8a:	2001      	movne	r0, #1
     d8c:	4b07      	ldr	r3, [pc, #28]	; (dac <_spi_m_sync_io_write+0x34>)
     d8e:	4798      	blx	r3
	xfer.rxbuf = 0;
     d90:	2300      	movs	r3, #0
     d92:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     d94:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     d96:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     d98:	a901      	add	r1, sp, #4
     d9a:	f1a4 000c 	sub.w	r0, r4, #12
     d9e:	4b04      	ldr	r3, [pc, #16]	; (db0 <_spi_m_sync_io_write+0x38>)
     da0:	4798      	blx	r3
}
     da2:	b004      	add	sp, #16
     da4:	bd70      	pop	{r4, r5, r6, pc}
     da6:	bf00      	nop
     da8:	00002374 	.word	0x00002374
     dac:	00000f31 	.word	0x00000f31
     db0:	00000d39 	.word	0x00000d39

00000db4 <_spi_m_sync_io_read>:
{
     db4:	b570      	push	{r4, r5, r6, lr}
     db6:	b084      	sub	sp, #16
     db8:	460e      	mov	r6, r1
     dba:	4615      	mov	r5, r2
	ASSERT(io);
     dbc:	4604      	mov	r4, r0
     dbe:	2287      	movs	r2, #135	; 0x87
     dc0:	4908      	ldr	r1, [pc, #32]	; (de4 <_spi_m_sync_io_read+0x30>)
     dc2:	3000      	adds	r0, #0
     dc4:	bf18      	it	ne
     dc6:	2001      	movne	r0, #1
     dc8:	4b07      	ldr	r3, [pc, #28]	; (de8 <_spi_m_sync_io_read+0x34>)
     dca:	4798      	blx	r3
	xfer.rxbuf = buf;
     dcc:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     dce:	2300      	movs	r3, #0
     dd0:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     dd2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     dd4:	a901      	add	r1, sp, #4
     dd6:	f1a4 000c 	sub.w	r0, r4, #12
     dda:	4b04      	ldr	r3, [pc, #16]	; (dec <_spi_m_sync_io_read+0x38>)
     ddc:	4798      	blx	r3
}
     dde:	b004      	add	sp, #16
     de0:	bd70      	pop	{r4, r5, r6, pc}
     de2:	bf00      	nop
     de4:	00002374 	.word	0x00002374
     de8:	00000f31 	.word	0x00000f31
     dec:	00000d39 	.word	0x00000d39

00000df0 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     df0:	b538      	push	{r3, r4, r5, lr}
     df2:	460d      	mov	r5, r1
	ASSERT(spi && io);
     df4:	4604      	mov	r4, r0
     df6:	b150      	cbz	r0, e0e <spi_m_sync_get_io_descriptor+0x1e>
     df8:	1c08      	adds	r0, r1, #0
     dfa:	bf18      	it	ne
     dfc:	2001      	movne	r0, #1
     dfe:	22bd      	movs	r2, #189	; 0xbd
     e00:	4904      	ldr	r1, [pc, #16]	; (e14 <spi_m_sync_get_io_descriptor+0x24>)
     e02:	4b05      	ldr	r3, [pc, #20]	; (e18 <spi_m_sync_get_io_descriptor+0x28>)
     e04:	4798      	blx	r3
	*io = &spi->io;
     e06:	340c      	adds	r4, #12
     e08:	602c      	str	r4, [r5, #0]
	return 0;
}
     e0a:	2000      	movs	r0, #0
     e0c:	bd38      	pop	{r3, r4, r5, pc}
     e0e:	2000      	movs	r0, #0
     e10:	e7f5      	b.n	dfe <spi_m_sync_get_io_descriptor+0xe>
     e12:	bf00      	nop
     e14:	00002374 	.word	0x00002374
     e18:	00000f31 	.word	0x00000f31

00000e1c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e1e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     e20:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     e22:	b12f      	cbz	r7, e30 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     e24:	688d      	ldr	r5, [r1, #8]
     e26:	463c      	mov	r4, r7
     e28:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     e2a:	f1c2 0e01 	rsb	lr, r2, #1
     e2e:	e00b      	b.n	e48 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     e30:	4b0e      	ldr	r3, [pc, #56]	; (e6c <timer_add_timer_task+0x50>)
     e32:	4798      	blx	r3
		return;
     e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     e36:	4473      	add	r3, lr
     e38:	68a0      	ldr	r0, [r4, #8]
     e3a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     e3c:	42ab      	cmp	r3, r5
     e3e:	d20a      	bcs.n	e56 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     e40:	6823      	ldr	r3, [r4, #0]
     e42:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     e44:	b153      	cbz	r3, e5c <timer_add_timer_task+0x40>
     e46:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     e48:	6863      	ldr	r3, [r4, #4]
     e4a:	4293      	cmp	r3, r2
     e4c:	d8f3      	bhi.n	e36 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     e4e:	68a0      	ldr	r0, [r4, #8]
     e50:	4403      	add	r3, r0
     e52:	1a9b      	subs	r3, r3, r2
     e54:	e7f2      	b.n	e3c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     e56:	42a7      	cmp	r7, r4
     e58:	d004      	beq.n	e64 <timer_add_timer_task+0x48>
     e5a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     e5c:	4620      	mov	r0, r4
     e5e:	4b04      	ldr	r3, [pc, #16]	; (e70 <timer_add_timer_task+0x54>)
     e60:	4798      	blx	r3
     e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     e64:	4660      	mov	r0, ip
     e66:	4b01      	ldr	r3, [pc, #4]	; (e6c <timer_add_timer_task+0x50>)
     e68:	4798      	blx	r3
     e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e6c:	00000f59 	.word	0x00000f59
     e70:	00000f85 	.word	0x00000f85

00000e74 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     e78:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     e7a:	6907      	ldr	r7, [r0, #16]
     e7c:	3701      	adds	r7, #1
     e7e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     e80:	7e03      	ldrb	r3, [r0, #24]
     e82:	f013 0f01 	tst.w	r3, #1
     e86:	d113      	bne.n	eb0 <timer_process_counted+0x3c>
     e88:	7e03      	ldrb	r3, [r0, #24]
     e8a:	f013 0f02 	tst.w	r3, #2
     e8e:	d10f      	bne.n	eb0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     e90:	b354      	cbz	r4, ee8 <timer_process_counted+0x74>
     e92:	6863      	ldr	r3, [r4, #4]
     e94:	1afb      	subs	r3, r7, r3
     e96:	68a2      	ldr	r2, [r4, #8]
     e98:	4293      	cmp	r3, r2
     e9a:	d307      	bcc.n	eac <timer_process_counted+0x38>
     e9c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     e9e:	f100 0814 	add.w	r8, r0, #20
     ea2:	f8df 9048 	ldr.w	r9, [pc, #72]	; eec <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     ea6:	f8df a048 	ldr.w	sl, [pc, #72]	; ef0 <timer_process_counted+0x7c>
     eaa:	e012      	b.n	ed2 <timer_process_counted+0x5e>
     eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     eb0:	7e03      	ldrb	r3, [r0, #24]
     eb2:	f043 0302 	orr.w	r3, r3, #2
     eb6:	7603      	strb	r3, [r0, #24]
		return;
     eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ebc:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     ebe:	68e3      	ldr	r3, [r4, #12]
     ec0:	4620      	mov	r0, r4
     ec2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     ec4:	b185      	cbz	r5, ee8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     ec6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     ec8:	686b      	ldr	r3, [r5, #4]
     eca:	1afb      	subs	r3, r7, r3
     ecc:	68aa      	ldr	r2, [r5, #8]
     ece:	4293      	cmp	r3, r2
     ed0:	d30a      	bcc.n	ee8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     ed2:	4640      	mov	r0, r8
     ed4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     ed6:	7c23      	ldrb	r3, [r4, #16]
     ed8:	2b01      	cmp	r3, #1
     eda:	d1ef      	bne.n	ebc <timer_process_counted+0x48>
			tmp->time_label = time;
     edc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     ede:	463a      	mov	r2, r7
     ee0:	4621      	mov	r1, r4
     ee2:	4640      	mov	r0, r8
     ee4:	47d0      	blx	sl
     ee6:	e7e9      	b.n	ebc <timer_process_counted+0x48>
     ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     eec:	00000f8d 	.word	0x00000f8d
     ef0:	00000e1d 	.word	0x00000e1d

00000ef4 <timer_init>:
{
     ef4:	b538      	push	{r3, r4, r5, lr}
     ef6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     ef8:	4604      	mov	r4, r0
     efa:	b178      	cbz	r0, f1c <timer_init+0x28>
     efc:	1c08      	adds	r0, r1, #0
     efe:	bf18      	it	ne
     f00:	2001      	movne	r0, #1
     f02:	223b      	movs	r2, #59	; 0x3b
     f04:	4906      	ldr	r1, [pc, #24]	; (f20 <timer_init+0x2c>)
     f06:	4b07      	ldr	r3, [pc, #28]	; (f24 <timer_init+0x30>)
     f08:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     f0a:	4629      	mov	r1, r5
     f0c:	4620      	mov	r0, r4
     f0e:	4b06      	ldr	r3, [pc, #24]	; (f28 <timer_init+0x34>)
     f10:	4798      	blx	r3
	descr->time                           = 0;
     f12:	2000      	movs	r0, #0
     f14:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     f16:	4b05      	ldr	r3, [pc, #20]	; (f2c <timer_init+0x38>)
     f18:	6023      	str	r3, [r4, #0]
}
     f1a:	bd38      	pop	{r3, r4, r5, pc}
     f1c:	2000      	movs	r0, #0
     f1e:	e7f0      	b.n	f02 <timer_init+0xe>
     f20:	00002390 	.word	0x00002390
     f24:	00000f31 	.word	0x00000f31
     f28:	00001301 	.word	0x00001301
     f2c:	00000e75 	.word	0x00000e75

00000f30 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     f30:	b900      	cbnz	r0, f34 <assert+0x4>
		__asm("BKPT #0");
     f32:	be00      	bkpt	0x0000
     f34:	4770      	bx	lr

00000f36 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     f36:	6803      	ldr	r3, [r0, #0]
     f38:	b14b      	cbz	r3, f4e <is_list_element+0x18>
		if (it == element) {
     f3a:	428b      	cmp	r3, r1
     f3c:	d009      	beq.n	f52 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	b11b      	cbz	r3, f4a <is_list_element+0x14>
		if (it == element) {
     f42:	4299      	cmp	r1, r3
     f44:	d1fb      	bne.n	f3e <is_list_element+0x8>
			return true;
     f46:	2001      	movs	r0, #1
		}
	}

	return false;
}
     f48:	4770      	bx	lr
	return false;
     f4a:	2000      	movs	r0, #0
     f4c:	4770      	bx	lr
     f4e:	2000      	movs	r0, #0
     f50:	4770      	bx	lr
			return true;
     f52:	2001      	movs	r0, #1
     f54:	4770      	bx	lr
	...

00000f58 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     f58:	b538      	push	{r3, r4, r5, lr}
     f5a:	4604      	mov	r4, r0
     f5c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     f5e:	4b06      	ldr	r3, [pc, #24]	; (f78 <list_insert_as_head+0x20>)
     f60:	4798      	blx	r3
     f62:	f080 0001 	eor.w	r0, r0, #1
     f66:	2239      	movs	r2, #57	; 0x39
     f68:	4904      	ldr	r1, [pc, #16]	; (f7c <list_insert_as_head+0x24>)
     f6a:	b2c0      	uxtb	r0, r0
     f6c:	4b04      	ldr	r3, [pc, #16]	; (f80 <list_insert_as_head+0x28>)
     f6e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     f70:	6823      	ldr	r3, [r4, #0]
     f72:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     f74:	6025      	str	r5, [r4, #0]
     f76:	bd38      	pop	{r3, r4, r5, pc}
     f78:	00000f37 	.word	0x00000f37
     f7c:	000023a8 	.word	0x000023a8
     f80:	00000f31 	.word	0x00000f31

00000f84 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     f84:	6803      	ldr	r3, [r0, #0]
     f86:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     f88:	6001      	str	r1, [r0, #0]
     f8a:	4770      	bx	lr

00000f8c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     f8c:	6803      	ldr	r3, [r0, #0]
     f8e:	b10b      	cbz	r3, f94 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     f90:	681a      	ldr	r2, [r3, #0]
     f92:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     f94:	4618      	mov	r0, r3
     f96:	4770      	bx	lr

00000f98 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     f98:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     f9a:	4a06      	ldr	r2, [pc, #24]	; (fb4 <_sbrk+0x1c>)
     f9c:	6812      	ldr	r2, [r2, #0]
     f9e:	b122      	cbz	r2, faa <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     fa0:	4a04      	ldr	r2, [pc, #16]	; (fb4 <_sbrk+0x1c>)
     fa2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     fa4:	4403      	add	r3, r0
     fa6:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     fa8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     faa:	4903      	ldr	r1, [pc, #12]	; (fb8 <_sbrk+0x20>)
     fac:	4a01      	ldr	r2, [pc, #4]	; (fb4 <_sbrk+0x1c>)
     fae:	6011      	str	r1, [r2, #0]
     fb0:	e7f6      	b.n	fa0 <_sbrk+0x8>
     fb2:	bf00      	nop
     fb4:	20000084 	.word	0x20000084
     fb8:	2000c138 	.word	0x2000c138

00000fbc <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
     fbc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     fc0:	00c3      	lsls	r3, r0, #3
     fc2:	3302      	adds	r3, #2
     fc4:	4803      	ldr	r0, [pc, #12]	; (fd4 <_get_cycles_for_ms+0x18>)
     fc6:	fba0 2303 	umull	r2, r3, r0, r3
     fca:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     fcc:	2064      	movs	r0, #100	; 0x64
     fce:	fb00 f003 	mul.w	r0, r0, r3
     fd2:	4770      	bx	lr
     fd4:	aaaaaaab 	.word	0xaaaaaaab

00000fd8 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
     fd8:	3901      	subs	r1, #1
     fda:	d8fd      	bhi.n	fd8 <_delay_cycles>
     fdc:	4770      	bx	lr
     fde:	bf00      	nop

00000fe0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     fe0:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     fe2:	4a08      	ldr	r2, [pc, #32]	; (1004 <_init_chip+0x24>)
     fe4:	8813      	ldrh	r3, [r2, #0]
     fe6:	b29b      	uxth	r3, r3
     fe8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     fea:	4b07      	ldr	r3, [pc, #28]	; (1008 <_init_chip+0x28>)
     fec:	4798      	blx	r3
	_oscctrl_init_sources();
     fee:	4b07      	ldr	r3, [pc, #28]	; (100c <_init_chip+0x2c>)
     ff0:	4798      	blx	r3
	_mclk_init();
     ff2:	4b07      	ldr	r3, [pc, #28]	; (1010 <_init_chip+0x30>)
     ff4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     ff6:	4b07      	ldr	r3, [pc, #28]	; (1014 <_init_chip+0x34>)
     ff8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     ffa:	f640 70ff 	movw	r0, #4095	; 0xfff
     ffe:	4b06      	ldr	r3, [pc, #24]	; (1018 <_init_chip+0x38>)
    1000:	4798      	blx	r3
    1002:	bd08      	pop	{r3, pc}
    1004:	41004000 	.word	0x41004000
    1008:	00001119 	.word	0x00001119
    100c:	0000112d 	.word	0x0000112d
    1010:	00001041 	.word	0x00001041
    1014:	00001149 	.word	0x00001149
    1018:	0000101d 	.word	0x0000101d

0000101c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    101c:	f010 0f01 	tst.w	r0, #1
    1020:	d008      	beq.n	1034 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1022:	4a05      	ldr	r2, [pc, #20]	; (1038 <_gclk_init_generators_by_fref+0x1c>)
    1024:	4b05      	ldr	r3, [pc, #20]	; (103c <_gclk_init_generators_by_fref+0x20>)
    1026:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1028:	4619      	mov	r1, r3
    102a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    102e:	684b      	ldr	r3, [r1, #4]
    1030:	4213      	tst	r3, r2
    1032:	d1fc      	bne.n	102e <_gclk_init_generators_by_fref+0x12>
    1034:	4770      	bx	lr
    1036:	bf00      	nop
    1038:	00010108 	.word	0x00010108
    103c:	40001c00 	.word	0x40001c00

00001040 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1040:	2201      	movs	r2, #1
    1042:	4b01      	ldr	r3, [pc, #4]	; (1048 <_mclk_init+0x8>)
    1044:	715a      	strb	r2, [r3, #5]
    1046:	4770      	bx	lr
    1048:	40000800 	.word	0x40000800

0000104c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    104c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    104e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1050:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1052:	f012 0f01 	tst.w	r2, #1
    1056:	d005      	beq.n	1064 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1058:	2201      	movs	r2, #1
    105a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    105c:	6803      	ldr	r3, [r0, #0]
    105e:	b153      	cbz	r3, 1076 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1060:	4798      	blx	r3
    1062:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1064:	8a1a      	ldrh	r2, [r3, #16]
    1066:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1068:	b12a      	cbz	r2, 1076 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    106a:	f240 225e 	movw	r2, #606	; 0x25e
    106e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1070:	6843      	ldr	r3, [r0, #4]
    1072:	b103      	cbz	r3, 1076 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1074:	4798      	blx	r3
    1076:	bd08      	pop	{r3, pc}

00001078 <_flash_init>:
{
    1078:	b538      	push	{r3, r4, r5, lr}
    107a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    107c:	4605      	mov	r5, r0
    107e:	b350      	cbz	r0, 10d6 <_flash_init+0x5e>
    1080:	4816      	ldr	r0, [pc, #88]	; (10dc <_flash_init+0x64>)
    1082:	4281      	cmp	r1, r0
    1084:	bf14      	ite	ne
    1086:	2000      	movne	r0, #0
    1088:	2001      	moveq	r0, #1
    108a:	224b      	movs	r2, #75	; 0x4b
    108c:	4914      	ldr	r1, [pc, #80]	; (10e0 <_flash_init+0x68>)
    108e:	4b15      	ldr	r3, [pc, #84]	; (10e4 <_flash_init+0x6c>)
    1090:	4798      	blx	r3
	device->hw = hw;
    1092:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    1094:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    1096:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    109a:	049b      	lsls	r3, r3, #18
    109c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    109e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    10a0:	4b11      	ldr	r3, [pc, #68]	; (10e8 <_flash_init+0x70>)
    10a2:	601d      	str	r5, [r3, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10a4:	4b11      	ldr	r3, [pc, #68]	; (10ec <_flash_init+0x74>)
    10a6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    10aa:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    10ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10b2:	f3bf 8f6f 	isb	sy
    10b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    10ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    10be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10c2:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10c6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    10ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10ce:	6019      	str	r1, [r3, #0]
    10d0:	601a      	str	r2, [r3, #0]
}
    10d2:	2000      	movs	r0, #0
    10d4:	bd38      	pop	{r3, r4, r5, pc}
    10d6:	2000      	movs	r0, #0
    10d8:	e7d7      	b.n	108a <_flash_init+0x12>
    10da:	bf00      	nop
    10dc:	41004000 	.word	0x41004000
    10e0:	000023c8 	.word	0x000023c8
    10e4:	00000f31 	.word	0x00000f31
    10e8:	20000088 	.word	0x20000088
    10ec:	e000e100 	.word	0xe000e100

000010f0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    10f0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    10f2:	4b02      	ldr	r3, [pc, #8]	; (10fc <NVMCTRL_0_Handler+0xc>)
    10f4:	6818      	ldr	r0, [r3, #0]
    10f6:	4b02      	ldr	r3, [pc, #8]	; (1100 <NVMCTRL_0_Handler+0x10>)
    10f8:	4798      	blx	r3
    10fa:	bd08      	pop	{r3, pc}
    10fc:	20000088 	.word	0x20000088
    1100:	0000104d 	.word	0x0000104d

00001104 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1104:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1106:	4b02      	ldr	r3, [pc, #8]	; (1110 <NVMCTRL_1_Handler+0xc>)
    1108:	6818      	ldr	r0, [r3, #0]
    110a:	4b02      	ldr	r3, [pc, #8]	; (1114 <NVMCTRL_1_Handler+0x10>)
    110c:	4798      	blx	r3
    110e:	bd08      	pop	{r3, pc}
    1110:	20000088 	.word	0x20000088
    1114:	0000104d 	.word	0x0000104d

00001118 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1118:	4b03      	ldr	r3, [pc, #12]	; (1128 <_osc32kctrl_init_sources+0x10>)
    111a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    111c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1120:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1122:	2201      	movs	r2, #1
    1124:	741a      	strb	r2, [r3, #16]
    1126:	4770      	bx	lr
    1128:	40001400 	.word	0x40001400

0000112c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    112c:	4a04      	ldr	r2, [pc, #16]	; (1140 <_oscctrl_init_sources+0x14>)
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <_oscctrl_init_sources+0x18>)
    1130:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1132:	461a      	mov	r2, r3
    1134:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1136:	f013 0f02 	tst.w	r3, #2
    113a:	d0fb      	beq.n	1134 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    113c:	4770      	bx	lr
    113e:	bf00      	nop
    1140:	03002606 	.word	0x03002606
    1144:	40001000 	.word	0x40001000

00001148 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1148:	f240 123f 	movw	r2, #319	; 0x13f
    114c:	4b13      	ldr	r3, [pc, #76]	; (119c <_oscctrl_init_referenced_generators+0x54>)
    114e:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1150:	461a      	mov	r2, r3
    1152:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1154:	f013 0f06 	tst.w	r3, #6
    1158:	d1fb      	bne.n	1152 <_oscctrl_init_referenced_generators+0xa>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    115a:	4b10      	ldr	r3, [pc, #64]	; (119c <_oscctrl_init_referenced_generators+0x54>)
    115c:	2230      	movs	r2, #48	; 0x30
    115e:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1160:	2202      	movs	r2, #2
    1162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1166:	461a      	mov	r2, r3
    1168:	6d13      	ldr	r3, [r2, #80]	; 0x50
    116a:	f013 0f02 	tst.w	r3, #2
    116e:	d1fb      	bne.n	1168 <_oscctrl_init_referenced_generators+0x20>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1170:	4b0a      	ldr	r3, [pc, #40]	; (119c <_oscctrl_init_referenced_generators+0x54>)
    1172:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1174:	f012 0f01 	tst.w	r2, #1
    1178:	d103      	bne.n	1182 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    117a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    117c:	f012 0f02 	tst.w	r2, #2
    1180:	d0f7      	beq.n	1172 <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
    1182:	4a06      	ldr	r2, [pc, #24]	; (119c <_oscctrl_init_referenced_generators+0x54>)
    1184:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    1188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    118c:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1190:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1192:	f013 0f06 	tst.w	r3, #6
    1196:	d1fb      	bne.n	1190 <_oscctrl_init_referenced_generators+0x48>
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    1198:	4770      	bx	lr
    119a:	bf00      	nop
    119c:	40001000 	.word	0x40001000

000011a0 <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    11a0:	b538      	push	{r3, r4, r5, lr}
    11a2:	460c      	mov	r4, r1
	ASSERT(dev && hw);
    11a4:	4605      	mov	r5, r0
    11a6:	b180      	cbz	r0, 11ca <_qspi_sync_init+0x2a>
    11a8:	1c08      	adds	r0, r1, #0
    11aa:	bf18      	it	ne
    11ac:	2001      	movne	r0, #1
    11ae:	2240      	movs	r2, #64	; 0x40
    11b0:	4907      	ldr	r1, [pc, #28]	; (11d0 <_qspi_sync_init+0x30>)
    11b2:	4b08      	ldr	r3, [pc, #32]	; (11d4 <_qspi_sync_init+0x34>)
    11b4:	4798      	blx	r3
	dev->prvt = hw;
    11b6:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    11b8:	2301      	movs	r3, #1
    11ba:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    11bc:	2311      	movs	r3, #17
    11be:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    11c0:	f44f 7300 	mov.w	r3, #512	; 0x200
    11c4:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
    11c6:	2000      	movs	r0, #0
    11c8:	bd38      	pop	{r3, r4, r5, pc}
    11ca:	2000      	movs	r0, #0
    11cc:	e7ef      	b.n	11ae <_qspi_sync_init+0xe>
    11ce:	bf00      	nop
    11d0:	000023e8 	.word	0x000023e8
    11d4:	00000f31 	.word	0x00000f31

000011d8 <_qspi_sync_enable>:
	return ERR_NONE;
}

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    11d8:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    11da:	2202      	movs	r2, #2
    11dc:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    11de:	2000      	movs	r0, #0
    11e0:	4770      	bx	lr
	...

000011e4 <_qspi_sync_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    11e4:	b570      	push	{r4, r5, r6, lr}
    11e6:	4605      	mov	r5, r0
    11e8:	460c      	mov	r4, r1
	void *hw = dev->prvt;
    11ea:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
    11ec:	780a      	ldrb	r2, [r1, #0]
    11ee:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    11f2:	bf1c      	itt	ne
    11f4:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    11f6:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
    11f8:	780a      	ldrb	r2, [r1, #0]
    11fa:	f012 0f10 	tst.w	r2, #16
    11fe:	d005      	beq.n	120c <_qspi_sync_serial_run_command+0x28>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    1200:	6b59      	ldr	r1, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    1202:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    1206:	7922      	ldrb	r2, [r4, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    1208:	430a      	orrs	r2, r1
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    120a:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
    120c:	7822      	ldrb	r2, [r4, #0]
    120e:	f012 0f40 	tst.w	r2, #64	; 0x40
    1212:	d006      	beq.n	1222 <_qspi_sync_serial_run_command+0x3e>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    1214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    1216:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    121a:	7961      	ldrb	r1, [r4, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    121c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    1220:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    1222:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    1224:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_sync_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
    1226:	7823      	ldrb	r3, [r4, #0]
    1228:	f013 0f80 	tst.w	r3, #128	; 0x80
    122c:	d10c      	bne.n	1248 <_qspi_sync_serial_run_command+0x64>
		_qspi_sync_run_transfer(dev, cmd);
	}

	_qspi_end_transfer(dev->prvt);
    122e:	682b      	ldr	r3, [r5, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    1230:	4a1f      	ldr	r2, [pc, #124]	; (12b0 <_qspi_sync_serial_run_command+0xcc>)
    1232:	601a      	str	r2, [r3, #0]

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    1234:	682a      	ldr	r2, [r5, #0]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    1236:	69d3      	ldr	r3, [r2, #28]
    1238:	f413 6f80 	tst.w	r3, #1024	; 0x400
    123c:	d0fb      	beq.n	1236 <_qspi_sync_serial_run_command+0x52>
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1242:	61d3      	str	r3, [r2, #28]
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
	return ERR_NONE;
}
    1244:	2000      	movs	r0, #0
    1246:	bd70      	pop	{r4, r5, r6, pc}
	void *   hw       = dev->prvt;
    1248:	6829      	ldr	r1, [r5, #0]
	if (cmd->inst_frame.bits.addr_en)
    124a:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
    124e:	bf1a      	itte	ne
    1250:	68a2      	ldrne	r2, [r4, #8]
    1252:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    1256:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
    125a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    125c:	6923      	ldr	r3, [r4, #16]
    125e:	b1ab      	cbz	r3, 128c <_qspi_sync_serial_run_command+0xa8>
    1260:	2001      	movs	r0, #1
    1262:	2282      	movs	r2, #130	; 0x82
    1264:	4913      	ldr	r1, [pc, #76]	; (12b4 <_qspi_sync_serial_run_command+0xd0>)
    1266:	4b14      	ldr	r3, [pc, #80]	; (12b8 <_qspi_sync_serial_run_command+0xd4>)
    1268:	4798      	blx	r3
	if (cmd->tx_buf) {
    126a:	6923      	ldr	r3, [r4, #16]
    126c:	b19b      	cbz	r3, 1296 <_qspi_sync_serial_run_command+0xb2>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    126e:	68e0      	ldr	r0, [r4, #12]
	while (count--) {
    1270:	b138      	cbz	r0, 1282 <_qspi_sync_serial_run_command+0x9e>
    1272:	1e72      	subs	r2, r6, #1
    1274:	4418      	add	r0, r3
		*dst++ = *src++;
    1276:	f813 1b01 	ldrb.w	r1, [r3], #1
    127a:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (count--) {
    127e:	4283      	cmp	r3, r0
    1280:	d1f9      	bne.n	1276 <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
    1282:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1286:	f3bf 8f6f 	isb	sy
    128a:	e7d0      	b.n	122e <_qspi_sync_serial_run_command+0x4a>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    128c:	6960      	ldr	r0, [r4, #20]
    128e:	3000      	adds	r0, #0
    1290:	bf18      	it	ne
    1292:	2001      	movne	r0, #1
    1294:	e7e5      	b.n	1262 <_qspi_sync_serial_run_command+0x7e>
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    1296:	6963      	ldr	r3, [r4, #20]
    1298:	68e1      	ldr	r1, [r4, #12]
	while (count--) {
    129a:	2900      	cmp	r1, #0
    129c:	d0f1      	beq.n	1282 <_qspi_sync_serial_run_command+0x9e>
    129e:	3b01      	subs	r3, #1
    12a0:	4431      	add	r1, r6
		*dst++ = *src++;
    12a2:	f816 2b01 	ldrb.w	r2, [r6], #1
    12a6:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (count--) {
    12aa:	42b1      	cmp	r1, r6
    12ac:	d1f9      	bne.n	12a2 <_qspi_sync_serial_run_command+0xbe>
    12ae:	e7e8      	b.n	1282 <_qspi_sync_serial_run_command+0x9e>
    12b0:	01000002 	.word	0x01000002
    12b4:	000023e8 	.word	0x000023e8
    12b8:	00000f31 	.word	0x00000f31

000012bc <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    12bc:	b500      	push	{lr}
    12be:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    12c0:	4b0d      	ldr	r3, [pc, #52]	; (12f8 <RAMECC_Handler+0x3c>)
    12c2:	789b      	ldrb	r3, [r3, #2]
    12c4:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    12c6:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    12c8:	9b01      	ldr	r3, [sp, #4]
    12ca:	f013 0f02 	tst.w	r3, #2
    12ce:	d006      	beq.n	12de <RAMECC_Handler+0x22>
    12d0:	4b0a      	ldr	r3, [pc, #40]	; (12fc <RAMECC_Handler+0x40>)
    12d2:	681b      	ldr	r3, [r3, #0]
    12d4:	b11b      	cbz	r3, 12de <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    12d6:	4a08      	ldr	r2, [pc, #32]	; (12f8 <RAMECC_Handler+0x3c>)
    12d8:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    12da:	4798      	blx	r3
    12dc:	e009      	b.n	12f2 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    12de:	9b01      	ldr	r3, [sp, #4]
    12e0:	f013 0f01 	tst.w	r3, #1
    12e4:	d005      	beq.n	12f2 <RAMECC_Handler+0x36>
    12e6:	4b05      	ldr	r3, [pc, #20]	; (12fc <RAMECC_Handler+0x40>)
    12e8:	685b      	ldr	r3, [r3, #4]
    12ea:	b113      	cbz	r3, 12f2 <RAMECC_Handler+0x36>
    12ec:	4a02      	ldr	r2, [pc, #8]	; (12f8 <RAMECC_Handler+0x3c>)
    12ee:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    12f0:	4798      	blx	r3
	} else {
		return;
	}
}
    12f2:	b003      	add	sp, #12
    12f4:	f85d fb04 	ldr.w	pc, [sp], #4
    12f8:	41020000 	.word	0x41020000
    12fc:	20000108 	.word	0x20000108

00001300 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    1300:	b538      	push	{r3, r4, r5, lr}
    1302:	460c      	mov	r4, r1
	ASSERT(dev);
    1304:	4605      	mov	r5, r0
    1306:	2230      	movs	r2, #48	; 0x30
    1308:	4914      	ldr	r1, [pc, #80]	; (135c <_timer_init+0x5c>)
    130a:	3000      	adds	r0, #0
    130c:	bf18      	it	ne
    130e:	2001      	movne	r0, #1
    1310:	4b13      	ldr	r3, [pc, #76]	; (1360 <_timer_init+0x60>)
    1312:	4798      	blx	r3

	dev->hw = hw;
    1314:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1316:	2301      	movs	r3, #1
    1318:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    131a:	f248 0203 	movw	r2, #32771	; 0x8003
    131e:	6923      	ldr	r3, [r4, #16]
    1320:	4213      	tst	r3, r2
    1322:	d1fc      	bne.n	131e <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1324:	68eb      	ldr	r3, [r5, #12]
    1326:	691a      	ldr	r2, [r3, #16]
    1328:	f012 0f01 	tst.w	r2, #1
    132c:	d1fb      	bne.n	1326 <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    132e:	f248 0280 	movw	r2, #32896	; 0x8080
    1332:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1334:	f248 0103 	movw	r1, #32771	; 0x8003
    1338:	691a      	ldr	r2, [r3, #16]
    133a:	420a      	tst	r2, r1
    133c:	d1fc      	bne.n	1338 <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    133e:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1340:	2320      	movs	r3, #32
    1342:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1344:	6913      	ldr	r3, [r2, #16]
    1346:	f013 0f60 	tst.w	r3, #96	; 0x60
    134a:	d1fb      	bne.n	1344 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    134c:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    134e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1352:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    1354:	4b03      	ldr	r3, [pc, #12]	; (1364 <_timer_init+0x64>)
    1356:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    1358:	2000      	movs	r0, #0
    135a:	bd38      	pop	{r3, r4, r5, pc}
    135c:	00002400 	.word	0x00002400
    1360:	00000f31 	.word	0x00000f31
    1364:	2000008c 	.word	0x2000008c

00001368 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1368:	2000      	movs	r0, #0
    136a:	4770      	bx	lr

0000136c <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    136c:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    136e:	4b08      	ldr	r3, [pc, #32]	; (1390 <RTC_Handler+0x24>)
    1370:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    1372:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    1374:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    1376:	f413 7f80 	tst.w	r3, #256	; 0x100
    137a:	d007      	beq.n	138c <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    137c:	6823      	ldr	r3, [r4, #0]
    137e:	b10b      	cbz	r3, 1384 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1380:	4620      	mov	r0, r4
    1382:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    1384:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    1386:	f44f 7280 	mov.w	r2, #256	; 0x100
    138a:	819a      	strh	r2, [r3, #12]
    138c:	bd10      	pop	{r4, pc}
    138e:	bf00      	nop
    1390:	2000008c 	.word	0x2000008c

00001394 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1394:	b470      	push	{r4, r5, r6}
    1396:	b087      	sub	sp, #28
    1398:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    139a:	466c      	mov	r4, sp
    139c:	4d0c      	ldr	r5, [pc, #48]	; (13d0 <_sercom_get_hardware_index+0x3c>)
    139e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    13a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    13a2:	e895 0003 	ldmia.w	r5, {r0, r1}
    13a6:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    13aa:	9b00      	ldr	r3, [sp, #0]
    13ac:	42b3      	cmp	r3, r6
    13ae:	d00c      	beq.n	13ca <_sercom_get_hardware_index+0x36>
    13b0:	4632      	mov	r2, r6
    13b2:	2001      	movs	r0, #1
    13b4:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    13b8:	4293      	cmp	r3, r2
    13ba:	d007      	beq.n	13cc <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13bc:	3001      	adds	r0, #1
    13be:	2806      	cmp	r0, #6
    13c0:	d1f8      	bne.n	13b4 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    13c2:	2000      	movs	r0, #0
}
    13c4:	b007      	add	sp, #28
    13c6:	bc70      	pop	{r4, r5, r6}
    13c8:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    13ca:	2000      	movs	r0, #0
			return i;
    13cc:	b2c0      	uxtb	r0, r0
    13ce:	e7f9      	b.n	13c4 <_sercom_get_hardware_index+0x30>
    13d0:	00002418 	.word	0x00002418

000013d4 <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    13d4:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    13d6:	f013 0f01 	tst.w	r3, #1
    13da:	d109      	bne.n	13f0 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    13dc:	6803      	ldr	r3, [r0, #0]
    13de:	f043 0302 	orr.w	r3, r3, #2
    13e2:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    13e4:	69c3      	ldr	r3, [r0, #28]
    13e6:	f013 0f03 	tst.w	r3, #3
    13ea:	d1fb      	bne.n	13e4 <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    13ec:	2000      	movs	r0, #0
    13ee:	4770      	bx	lr
		return ERR_BUSY;
    13f0:	f06f 0003 	mvn.w	r0, #3
}
    13f4:	4770      	bx	lr
	...

000013f8 <_i2c_s_init>:
{
    13f8:	b510      	push	{r4, lr}
    13fa:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    13fc:	4b1d      	ldr	r3, [pc, #116]	; (1474 <_i2c_s_init+0x7c>)
    13fe:	4798      	blx	r3
		if (_i2css[i].number == sercom_offset) {
    1400:	2803      	cmp	r0, #3
    1402:	d008      	beq.n	1416 <_i2c_s_init+0x1e>
	ASSERT(false);
    1404:	f240 72b7 	movw	r2, #1975	; 0x7b7
    1408:	491b      	ldr	r1, [pc, #108]	; (1478 <_i2c_s_init+0x80>)
    140a:	2000      	movs	r0, #0
    140c:	4b1b      	ldr	r3, [pc, #108]	; (147c <_i2c_s_init+0x84>)
    140e:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1410:	f06f 000c 	mvn.w	r0, #12
}
    1414:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    1416:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    1418:	f013 0f01 	tst.w	r3, #1
    141c:	d119      	bne.n	1452 <_i2c_s_init+0x5a>
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    141e:	69e3      	ldr	r3, [r4, #28]
    1420:	f013 0f03 	tst.w	r3, #3
    1424:	d1fb      	bne.n	141e <_i2c_s_init+0x26>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    1426:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    1428:	f013 0f02 	tst.w	r3, #2
    142c:	d00b      	beq.n	1446 <_i2c_s_init+0x4e>
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    142e:	6823      	ldr	r3, [r4, #0]
    1430:	f023 0302 	bic.w	r3, r3, #2
    1434:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1436:	69e3      	ldr	r3, [r4, #28]
    1438:	f013 0f03 	tst.w	r3, #3
    143c:	d1fb      	bne.n	1436 <_i2c_s_init+0x3e>
    143e:	69e3      	ldr	r3, [r4, #28]
    1440:	f013 0f02 	tst.w	r3, #2
    1444:	d1fb      	bne.n	143e <_i2c_s_init+0x46>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    1446:	2311      	movs	r3, #17
    1448:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    144a:	69e3      	ldr	r3, [r4, #28]
    144c:	f013 0f03 	tst.w	r3, #3
    1450:	d1fb      	bne.n	144a <_i2c_s_init+0x52>
    1452:	69e3      	ldr	r3, [r4, #28]
    1454:	f013 0f01 	tst.w	r3, #1
    1458:	d1fb      	bne.n	1452 <_i2c_s_init+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    145a:	4b09      	ldr	r3, [pc, #36]	; (1480 <_i2c_s_init+0x88>)
    145c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    145e:	69e3      	ldr	r3, [r4, #28]
    1460:	f013 0f03 	tst.w	r3, #3
    1464:	d1fb      	bne.n	145e <_i2c_s_init+0x66>
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    1466:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    146a:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    146c:	2320      	movs	r3, #32
    146e:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    1470:	2000      	movs	r0, #0
    1472:	bd10      	pop	{r4, pc}
    1474:	00001395 	.word	0x00001395
    1478:	00002448 	.word	0x00002448
    147c:	00000f31 	.word	0x00000f31
    1480:	00200010 	.word	0x00200010

00001484 <_i2c_s_set_address>:
{
    1484:	b570      	push	{r4, r5, r6, lr}
    1486:	b082      	sub	sp, #8
    1488:	4604      	mov	r4, r0
    148a:	460e      	mov	r6, r1
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    148c:	69e3      	ldr	r3, [r4, #28]
    148e:	f013 0f03 	tst.w	r3, #3
    1492:	d1fb      	bne.n	148c <_i2c_s_set_address+0x8>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    1494:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_I2CS_CTRLA_ENABLE) >> SERCOM_I2CS_CTRLA_ENABLE_Pos;
    1496:	f3c5 0540 	ubfx	r5, r5, #1, #1
	CRITICAL_SECTION_ENTER()
    149a:	a801      	add	r0, sp, #4
    149c:	4b11      	ldr	r3, [pc, #68]	; (14e4 <_i2c_s_set_address+0x60>)
    149e:	4798      	blx	r3
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    14a0:	6823      	ldr	r3, [r4, #0]
    14a2:	f023 0302 	bic.w	r3, r3, #2
    14a6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    14a8:	69e3      	ldr	r3, [r4, #28]
    14aa:	f013 0f03 	tst.w	r3, #3
    14ae:	d1fb      	bne.n	14a8 <_i2c_s_set_address+0x24>
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    14b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CS_ADDR_ADDR_Msk;
    14b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    14b6:	f023 0306 	bic.w	r3, r3, #6
	tmp |= SERCOM_I2CS_ADDR_ADDR(data);
    14ba:	f240 71fe 	movw	r1, #2046	; 0x7fe
    14be:	ea01 0146 	and.w	r1, r1, r6, lsl #1
    14c2:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CS.ADDR.reg = tmp;
    14c4:	6261      	str	r1, [r4, #36]	; 0x24
	CRITICAL_SECTION_LEAVE()
    14c6:	a801      	add	r0, sp, #4
    14c8:	4b07      	ldr	r3, [pc, #28]	; (14e8 <_i2c_s_set_address+0x64>)
    14ca:	4798      	blx	r3
	if (enabled) {
    14cc:	b13d      	cbz	r5, 14de <_i2c_s_set_address+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    14ce:	6823      	ldr	r3, [r4, #0]
    14d0:	f043 0302 	orr.w	r3, r3, #2
    14d4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    14d6:	69e3      	ldr	r3, [r4, #28]
    14d8:	f013 0f03 	tst.w	r3, #3
    14dc:	d1fb      	bne.n	14d6 <_i2c_s_set_address+0x52>
}
    14de:	2000      	movs	r0, #0
    14e0:	b002      	add	sp, #8
    14e2:	bd70      	pop	{r4, r5, r6, pc}
    14e4:	0000098d 	.word	0x0000098d
    14e8:	0000099b 	.word	0x0000099b

000014ec <_i2c_s_sync_init>:
{
    14ec:	b538      	push	{r3, r4, r5, lr}
    14ee:	460c      	mov	r4, r1
	ASSERT(device);
    14f0:	4605      	mov	r5, r0
    14f2:	f240 62a6 	movw	r2, #1702	; 0x6a6
    14f6:	4907      	ldr	r1, [pc, #28]	; (1514 <_i2c_s_sync_init+0x28>)
    14f8:	3000      	adds	r0, #0
    14fa:	bf18      	it	ne
    14fc:	2001      	movne	r0, #1
    14fe:	4b06      	ldr	r3, [pc, #24]	; (1518 <_i2c_s_sync_init+0x2c>)
    1500:	4798      	blx	r3
	status = _i2c_s_init(hw);
    1502:	4620      	mov	r0, r4
    1504:	4b05      	ldr	r3, [pc, #20]	; (151c <_i2c_s_sync_init+0x30>)
    1506:	4798      	blx	r3
	if (status) {
    1508:	4603      	mov	r3, r0
    150a:	b900      	cbnz	r0, 150e <_i2c_s_sync_init+0x22>
	device->hw = hw;
    150c:	602c      	str	r4, [r5, #0]
}
    150e:	4618      	mov	r0, r3
    1510:	bd38      	pop	{r3, r4, r5, pc}
    1512:	bf00      	nop
    1514:	00002448 	.word	0x00002448
    1518:	00000f31 	.word	0x00000f31
    151c:	000013f9 	.word	0x000013f9

00001520 <_i2c_s_sync_enable>:
	hri_sercomi2cs_set_CTRLA_ENABLE_bit(device->hw);
    1520:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    1522:	6813      	ldr	r3, [r2, #0]
    1524:	f043 0302 	orr.w	r3, r3, #2
    1528:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    152a:	69d3      	ldr	r3, [r2, #28]
    152c:	f013 0f03 	tst.w	r3, #3
    1530:	d1fb      	bne.n	152a <_i2c_s_sync_enable+0xa>
}
    1532:	2000      	movs	r0, #0
    1534:	4770      	bx	lr

00001536 <_i2c_s_sync_is_10bit_addressing_on>:
	return hri_sercomi2cs_get_ADDR_TENBITEN_bit(device->hw);
    1536:	6803      	ldr	r3, [r0, #0]
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1538:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    153a:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    153e:	4770      	bx	lr

00001540 <_i2c_s_sync_set_address>:
{
    1540:	b508      	push	{r3, lr}
	return _i2c_s_set_address(device->hw, address);
    1542:	6800      	ldr	r0, [r0, #0]
    1544:	4b01      	ldr	r3, [pc, #4]	; (154c <_i2c_s_sync_set_address+0xc>)
    1546:	4798      	blx	r3
}
    1548:	bd08      	pop	{r3, pc}
    154a:	bf00      	nop
    154c:	00001485 	.word	0x00001485

00001550 <_i2c_s_sync_write_byte>:
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    1550:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    1552:	6299      	str	r1, [r3, #40]	; 0x28
    1554:	4770      	bx	lr

00001556 <_i2c_s_sync_read_byte>:
	return hri_sercomi2cs_read_DATA_reg(device->hw);
    1556:	6803      	ldr	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->I2CS.DATA.reg;
    1558:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    155a:	b2c0      	uxtb	r0, r0
    155c:	4770      	bx	lr

0000155e <_i2c_s_sync_is_byte_sent>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    155e:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) >> SERCOM_I2CS_INTFLAG_DRDY_Pos;
    1560:	7e18      	ldrb	r0, [r3, #24]
}
    1562:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1566:	4770      	bx	lr

00001568 <_i2c_s_sync_is_byte_received>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1568:	6803      	ldr	r3, [r0, #0]
    156a:	7e18      	ldrb	r0, [r3, #24]
}
    156c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1570:	4770      	bx	lr

00001572 <_i2c_s_sync_clear_data_ready_flag>:
	hri_sercomi2cs_clear_INTFLAG_DRDY_bit(device->hw);
    1572:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_DRDY;
    1574:	2204      	movs	r2, #4
    1576:	761a      	strb	r2, [r3, #24]
}
    1578:	2000      	movs	r0, #0
    157a:	4770      	bx	lr

0000157c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    157c:	b538      	push	{r3, r4, r5, lr}
    157e:	4605      	mov	r5, r0
    1580:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1582:	4608      	mov	r0, r1
    1584:	4b36      	ldr	r3, [pc, #216]	; (1660 <_spi_m_sync_init+0xe4>)
    1586:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1588:	b160      	cbz	r0, 15a4 <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    158a:	2d00      	cmp	r5, #0
    158c:	d055      	beq.n	163a <_spi_m_sync_init+0xbe>
    158e:	f640 123c 	movw	r2, #2364	; 0x93c
    1592:	4934      	ldr	r1, [pc, #208]	; (1664 <_spi_m_sync_init+0xe8>)
    1594:	1c20      	adds	r0, r4, #0
    1596:	bf18      	it	ne
    1598:	2001      	movne	r0, #1
    159a:	4b33      	ldr	r3, [pc, #204]	; (1668 <_spi_m_sync_init+0xec>)
    159c:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    159e:	f06f 000c 	mvn.w	r0, #12
    15a2:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    15a4:	2d00      	cmp	r5, #0
    15a6:	d151      	bne.n	164c <_spi_m_sync_init+0xd0>
    15a8:	f640 123c 	movw	r2, #2364	; 0x93c
    15ac:	492d      	ldr	r1, [pc, #180]	; (1664 <_spi_m_sync_init+0xe8>)
    15ae:	2000      	movs	r0, #0
    15b0:	4b2d      	ldr	r3, [pc, #180]	; (1668 <_spi_m_sync_init+0xec>)
    15b2:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    15b4:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    15b6:	f013 0f01 	tst.w	r3, #1
    15ba:	d119      	bne.n	15f0 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15bc:	69e3      	ldr	r3, [r4, #28]
    15be:	f013 0f03 	tst.w	r3, #3
    15c2:	d1fb      	bne.n	15bc <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    15c4:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    15c6:	f013 0f02 	tst.w	r3, #2
    15ca:	d00b      	beq.n	15e4 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    15cc:	6823      	ldr	r3, [r4, #0]
    15ce:	f023 0302 	bic.w	r3, r3, #2
    15d2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15d4:	69e3      	ldr	r3, [r4, #28]
    15d6:	f013 0f03 	tst.w	r3, #3
    15da:	d1fb      	bne.n	15d4 <_spi_m_sync_init+0x58>
    15dc:	69e3      	ldr	r3, [r4, #28]
    15de:	f013 0f02 	tst.w	r3, #2
    15e2:	d1fb      	bne.n	15dc <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    15e4:	230d      	movs	r3, #13
    15e6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    15e8:	69e3      	ldr	r3, [r4, #28]
    15ea:	f013 0f03 	tst.w	r3, #3
    15ee:	d1fb      	bne.n	15e8 <_spi_m_sync_init+0x6c>
    15f0:	69e3      	ldr	r3, [r4, #28]
    15f2:	f013 0f01 	tst.w	r3, #1
    15f6:	d1fb      	bne.n	15f0 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    15f8:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    15fa:	f640 1206 	movw	r2, #2310	; 0x906
    15fe:	4919      	ldr	r1, [pc, #100]	; (1664 <_spi_m_sync_init+0xe8>)
    1600:	1c20      	adds	r0, r4, #0
    1602:	bf18      	it	ne
    1604:	2001      	movne	r0, #1
    1606:	4b18      	ldr	r3, [pc, #96]	; (1668 <_spi_m_sync_init+0xec>)
    1608:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    160a:	4b18      	ldr	r3, [pc, #96]	; (166c <_spi_m_sync_init+0xf0>)
    160c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    160e:	69e3      	ldr	r3, [r4, #28]
    1610:	f013 0f03 	tst.w	r3, #3
    1614:	d1fb      	bne.n	160e <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    161a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    161c:	69e3      	ldr	r3, [r4, #28]
    161e:	f013 0f17 	tst.w	r3, #23
    1622:	d1fb      	bne.n	161c <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1624:	230e      	movs	r3, #14
    1626:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1628:	2000      	movs	r0, #0
    162a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    162e:	2301      	movs	r3, #1
    1630:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1632:	f240 13ff 	movw	r3, #511	; 0x1ff
    1636:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1638:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    163a:	f640 123c 	movw	r2, #2364	; 0x93c
    163e:	4909      	ldr	r1, [pc, #36]	; (1664 <_spi_m_sync_init+0xe8>)
    1640:	2000      	movs	r0, #0
    1642:	4b09      	ldr	r3, [pc, #36]	; (1668 <_spi_m_sync_init+0xec>)
    1644:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1646:	f06f 000c 	mvn.w	r0, #12
    164a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    164c:	f640 123c 	movw	r2, #2364	; 0x93c
    1650:	4904      	ldr	r1, [pc, #16]	; (1664 <_spi_m_sync_init+0xe8>)
    1652:	1c20      	adds	r0, r4, #0
    1654:	bf18      	it	ne
    1656:	2001      	movne	r0, #1
    1658:	4b03      	ldr	r3, [pc, #12]	; (1668 <_spi_m_sync_init+0xec>)
    165a:	4798      	blx	r3
    165c:	e7aa      	b.n	15b4 <_spi_m_sync_init+0x38>
    165e:	bf00      	nop
    1660:	00001395 	.word	0x00001395
    1664:	00002448 	.word	0x00002448
    1668:	00000f31 	.word	0x00000f31
    166c:	4020000c 	.word	0x4020000c

00001670 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1670:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1672:	4604      	mov	r4, r0
    1674:	b160      	cbz	r0, 1690 <_spi_m_sync_enable+0x20>
    1676:	6800      	ldr	r0, [r0, #0]
    1678:	3000      	adds	r0, #0
    167a:	bf18      	it	ne
    167c:	2001      	movne	r0, #1
    167e:	f640 129b 	movw	r2, #2459	; 0x99b
    1682:	4904      	ldr	r1, [pc, #16]	; (1694 <_spi_m_sync_enable+0x24>)
    1684:	4b04      	ldr	r3, [pc, #16]	; (1698 <_spi_m_sync_enable+0x28>)
    1686:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1688:	6820      	ldr	r0, [r4, #0]
    168a:	4b04      	ldr	r3, [pc, #16]	; (169c <_spi_m_sync_enable+0x2c>)
    168c:	4798      	blx	r3
}
    168e:	bd10      	pop	{r4, pc}
    1690:	2000      	movs	r0, #0
    1692:	e7f4      	b.n	167e <_spi_m_sync_enable+0xe>
    1694:	00002448 	.word	0x00002448
    1698:	00000f31 	.word	0x00000f31
    169c:	000013d5 	.word	0x000013d5

000016a0 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    16a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    16a4:	4681      	mov	r9, r0
    16a6:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    16a8:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    16aa:	f8d1 8000 	ldr.w	r8, [r1]
    16ae:	684d      	ldr	r5, [r1, #4]
    16b0:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    16b2:	b1a8      	cbz	r0, 16e0 <_spi_m_sync_trans+0x40>
    16b4:	1c20      	adds	r0, r4, #0
    16b6:	bf18      	it	ne
    16b8:	2001      	movne	r0, #1
    16ba:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    16be:	492e      	ldr	r1, [pc, #184]	; (1778 <_spi_m_sync_trans+0xd8>)
    16c0:	4b2e      	ldr	r3, [pc, #184]	; (177c <_spi_m_sync_trans+0xdc>)
    16c2:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    16c4:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    16c6:	f013 0f07 	tst.w	r3, #7
    16ca:	d134      	bne.n	1736 <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    16cc:	69e0      	ldr	r0, [r4, #28]
    16ce:	f010 0003 	ands.w	r0, r0, #3
    16d2:	d1fb      	bne.n	16cc <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    16d4:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    16d6:	f013 0f02 	tst.w	r3, #2
    16da:	d030      	beq.n	173e <_spi_m_sync_trans+0x9e>
    16dc:	4602      	mov	r2, r0
    16de:	e008      	b.n	16f2 <_spi_m_sync_trans+0x52>
    16e0:	2000      	movs	r0, #0
    16e2:	e7ea      	b.n	16ba <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    16e4:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    16e6:	f013 0f80 	tst.w	r3, #128	; 0x80
    16ea:	d112      	bne.n	1712 <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    16ec:	68b3      	ldr	r3, [r6, #8]
    16ee:	4283      	cmp	r3, r0
    16f0:	d91e      	bls.n	1730 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    16f2:	7e23      	ldrb	r3, [r4, #24]
    16f4:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    16f6:	f013 0f04 	tst.w	r3, #4
    16fa:	d024      	beq.n	1746 <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    16fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    16fe:	2d00      	cmp	r5, #0
    1700:	d0f0      	beq.n	16e4 <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    1702:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    1704:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    1706:	bf91      	iteee	ls
    1708:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    170a:	0a09      	lsrhi	r1, r1, #8
    170c:	7069      	strbhi	r1, [r5, #1]
    170e:	3502      	addhi	r5, #2
    1710:	e7e8      	b.n	16e4 <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1712:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1716:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1718:	2380      	movs	r3, #128	; 0x80
    171a:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    171c:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1720:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1722:	f013 0f03 	tst.w	r3, #3
    1726:	d0fb      	beq.n	1720 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1728:	2303      	movs	r3, #3
    172a:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    172c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1730:	4293      	cmp	r3, r2
    1732:	d8de      	bhi.n	16f2 <_spi_m_sync_trans+0x52>
    1734:	e7f4      	b.n	1720 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    1736:	f06f 0003 	mvn.w	r0, #3
    173a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    173e:	f06f 0013 	mvn.w	r0, #19
    1742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1746:	4290      	cmp	r0, r2
    1748:	d8cd      	bhi.n	16e6 <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    174a:	f013 0f01 	tst.w	r3, #1
    174e:	d0ca      	beq.n	16e6 <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1750:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    1754:	f1b8 0f00 	cmp.w	r8, #0
    1758:	d00b      	beq.n	1772 <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    175a:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    175e:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    1760:	bf91      	iteee	ls
    1762:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    1766:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    176a:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    176e:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    1772:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1774:	62a1      	str	r1, [r4, #40]	; 0x28
    1776:	e7b6      	b.n	16e6 <_spi_m_sync_trans+0x46>
    1778:	00002448 	.word	0x00002448
    177c:	00000f31 	.word	0x00000f31

00001780 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    1780:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1782:	4604      	mov	r4, r0
    1784:	b330      	cbz	r0, 17d4 <_wdt_init+0x54>
    1786:	6800      	ldr	r0, [r0, #0]
    1788:	3000      	adds	r0, #0
    178a:	bf18      	it	ne
    178c:	2001      	movne	r0, #1
    178e:	2250      	movs	r2, #80	; 0x50
    1790:	4914      	ldr	r1, [pc, #80]	; (17e4 <_wdt_init+0x64>)
    1792:	4b15      	ldr	r3, [pc, #84]	; (17e8 <_wdt_init+0x68>)
    1794:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    1796:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1798:	689a      	ldr	r2, [r3, #8]
    179a:	f012 0f0e 	tst.w	r2, #14
    179e:	d1fb      	bne.n	1798 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    17a0:	781a      	ldrb	r2, [r3, #0]
    17a2:	09d2      	lsrs	r2, r2, #7
    17a4:	d118      	bne.n	17d8 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    17a6:	689a      	ldr	r2, [r3, #8]
    17a8:	f012 0f0e 	tst.w	r2, #14
    17ac:	d1fb      	bne.n	17a6 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    17ae:	781a      	ldrb	r2, [r3, #0]
    17b0:	f012 0f02 	tst.w	r2, #2
    17b4:	d113      	bne.n	17de <_wdt_init+0x5e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    17b6:	781a      	ldrb	r2, [r3, #0]
    17b8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    17bc:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    17be:	689a      	ldr	r2, [r3, #8]
    17c0:	f012 0f0e 	tst.w	r2, #14
    17c4:	d1fb      	bne.n	17be <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    17c6:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    17c8:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    17ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    17ce:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    17d0:	2000      	movs	r0, #0
    17d2:	bd10      	pop	{r4, pc}
    17d4:	2000      	movs	r0, #0
    17d6:	e7da      	b.n	178e <_wdt_init+0xe>
		return ERR_DENIED;
    17d8:	f06f 0010 	mvn.w	r0, #16
    17dc:	bd10      	pop	{r4, pc}
    17de:	f06f 0010 	mvn.w	r0, #16
}
    17e2:	bd10      	pop	{r4, pc}
    17e4:	00002464 	.word	0x00002464
    17e8:	00000f31 	.word	0x00000f31

000017ec <main>:


uint8_t i2c_buf[RX_LENGTH]; 

int main(void)
{	
    17ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atmel_start_init();
    17f0:	4b98      	ldr	r3, [pc, #608]	; (1a54 <main+0x268>)
    17f2:	4798      	blx	r3
    17f4:	e0d1      	b.n	199a <main+0x1ae>
								
				jtag_to_swd();			
				uint32_t idcode = swd_read(req_read_idcode); 
				if(idcode == 0x00000000 || idcode == 0xFFFFFFFF)
				{
					i2c_send_error(error_no_target);
    17f6:	2000      	movs	r0, #0
    17f8:	4b97      	ldr	r3, [pc, #604]	; (1a58 <main+0x26c>)
    17fa:	4798      	blx	r3
    17fc:	e111      	b.n	1a22 <main+0x236>
				if((ctrl_reg & PWRUP_MASK) != PWRUP_MASK) // check pwrup status
				{
					i2c_send_error(error_no_dbg_pwr);
				}
				
				swd_write(req_write_csw, CSW_AUTOINC_OFF);
    17fe:	4997      	ldr	r1, [pc, #604]	; (1a5c <main+0x270>)
    1800:	20a3      	movs	r0, #163	; 0xa3
    1802:	4c97      	ldr	r4, [pc, #604]	; (1a60 <main+0x274>)
    1804:	47a0      	blx	r4
				swd_write(req_write_select, AP_PORT_F);// select AP port 0
    1806:	21f0      	movs	r1, #240	; 0xf0
    1808:	20b1      	movs	r0, #177	; 0xb1
    180a:	47a0      	blx	r4
				swd_read(req_read_idr);
    180c:	209f      	movs	r0, #159	; 0x9f
    180e:	4c95      	ldr	r4, [pc, #596]	; (1a64 <main+0x278>)
    1810:	47a0      	blx	r4
				uint32_t idr_value = swd_read(req_read_idr);
    1812:	209f      	movs	r0, #159	; 0x9f
    1814:	47a0      	blx	r4
				if(idr_value == IDR_DEBUG_LOCKED)
    1816:	4b94      	ldr	r3, [pc, #592]	; (1a68 <main+0x27c>)
    1818:	4298      	cmp	r0, r3
    181a:	f000 8116 	beq.w	1a4a <main+0x25e>
					i2c_send_error(error_dbg_locked);
				}
				
				
				//halt core
				swd_clear_abort_reg();
    181e:	4d93      	ldr	r5, [pc, #588]	; (1a6c <main+0x280>)
    1820:	47a8      	blx	r5
				swd_write(req_write_select, AP_PORT_0);
    1822:	2100      	movs	r1, #0
    1824:	20b1      	movs	r0, #177	; 0xb1
    1826:	4c8e      	ldr	r4, [pc, #568]	; (1a60 <main+0x274>)
    1828:	47a0      	blx	r4
				swd_write(req_write_tar, _DHCSR);
    182a:	4991      	ldr	r1, [pc, #580]	; (1a70 <main+0x284>)
    182c:	208b      	movs	r0, #139	; 0x8b
    182e:	47a0      	blx	r4
				swd_write(req_write_csw, CSW_AUTOINC_ON);
    1830:	4e90      	ldr	r6, [pc, #576]	; (1a74 <main+0x288>)
    1832:	4631      	mov	r1, r6
    1834:	20a3      	movs	r0, #163	; 0xa3
    1836:	47a0      	blx	r4
				swd_write(req_write_drw, HALT_CORE);
    1838:	498f      	ldr	r1, [pc, #572]	; (1a78 <main+0x28c>)
    183a:	20bb      	movs	r0, #187	; 0xbb
    183c:	47a0      	blx	r4
				
				//enable halt on reset
				swd_clear_abort_reg();
    183e:	47a8      	blx	r5
				swd_write(req_write_select, AP_PORT_0);
    1840:	2100      	movs	r1, #0
    1842:	20b1      	movs	r0, #177	; 0xb1
    1844:	47a0      	blx	r4
				swd_write(req_write_tar, _DEMCR);
    1846:	498d      	ldr	r1, [pc, #564]	; (1a7c <main+0x290>)
    1848:	208b      	movs	r0, #139	; 0x8b
    184a:	47a0      	blx	r4
				swd_write(req_write_csw, CSW_AUTOINC_ON);
    184c:	4631      	mov	r1, r6
    184e:	20a3      	movs	r0, #163	; 0xa3
    1850:	47a0      	blx	r4
				swd_write(req_write_drw, EN_HALT_ON_RST);
    1852:	2101      	movs	r1, #1
    1854:	20bb      	movs	r0, #187	; 0xbb
    1856:	47a0      	blx	r4
				
				//reset core
				swd_clear_abort_reg();
    1858:	47a8      	blx	r5
				swd_write(req_write_select, AP_PORT_0);
    185a:	2100      	movs	r1, #0
    185c:	20b1      	movs	r0, #177	; 0xb1
    185e:	47a0      	blx	r4
				swd_write(req_write_tar, _AIRCR);
    1860:	4987      	ldr	r1, [pc, #540]	; (1a80 <main+0x294>)
    1862:	208b      	movs	r0, #139	; 0x8b
    1864:	47a0      	blx	r4
				swd_write(req_write_csw, CSW_AUTOINC_ON);
    1866:	4631      	mov	r1, r6
    1868:	20a3      	movs	r0, #163	; 0xa3
    186a:	47a0      	blx	r4
				swd_write(req_write_drw, RESET_CORE);
    186c:	4985      	ldr	r1, [pc, #532]	; (1a84 <main+0x298>)
    186e:	20bb      	movs	r0, #187	; 0xbb
    1870:	47a0      	blx	r4
				
				//below nrf52840 specific 
				swd_clear_abort_reg();
    1872:	47a8      	blx	r5
				swd_write(req_write_select, AP_PORT_0);
    1874:	2100      	movs	r1, #0
    1876:	20b1      	movs	r0, #177	; 0xb1
    1878:	47a0      	blx	r4
				swd_write(req_write_tar, NRF52_NVMC_CONFIG);
    187a:	4983      	ldr	r1, [pc, #524]	; (1a88 <main+0x29c>)
    187c:	208b      	movs	r0, #139	; 0x8b
    187e:	47a0      	blx	r4
				swd_write(req_write_csw, CSW_AUTOINC_ON);
    1880:	4631      	mov	r1, r6
    1882:	20a3      	movs	r0, #163	; 0xa3
    1884:	47a0      	blx	r4
				swd_write(req_write_drw, ERASE_ENABLE); //enable erase cmd
    1886:	2102      	movs	r1, #2
    1888:	20bb      	movs	r0, #187	; 0xbb
    188a:	47a0      	blx	r4
				
				swd_clear_abort_reg();
    188c:	47a8      	blx	r5
				swd_write(req_write_select, AP_PORT_0);
    188e:	2100      	movs	r1, #0
    1890:	20b1      	movs	r0, #177	; 0xb1
    1892:	47a0      	blx	r4
				swd_write(req_write_tar, NRF52_NVMC_ERASE_ALL);
    1894:	497d      	ldr	r1, [pc, #500]	; (1a8c <main+0x2a0>)
    1896:	208b      	movs	r0, #139	; 0x8b
    1898:	47a0      	blx	r4
				swd_write(req_write_csw, CSW_AUTOINC_ON);
    189a:	4631      	mov	r1, r6
    189c:	20a3      	movs	r0, #163	; 0xa3
    189e:	47a0      	blx	r4
				swd_write(req_write_drw, ERASE_ALL); //erase all cmd
    18a0:	2101      	movs	r1, #1
    18a2:	20bb      	movs	r0, #187	; 0xbb
    18a4:	47a0      	blx	r4
				delay_ms(200); //should take 167ms to erase all 
    18a6:	20c8      	movs	r0, #200	; 0xc8
    18a8:	4b79      	ldr	r3, [pc, #484]	; (1a90 <main+0x2a4>)
    18aa:	4798      	blx	r3
				
				
				swd_clear_abort_reg();
    18ac:	47a8      	blx	r5
				swd_write(req_write_select, AP_PORT_0);
    18ae:	2100      	movs	r1, #0
    18b0:	20b1      	movs	r0, #177	; 0xb1
    18b2:	47a0      	blx	r4
				swd_write(req_write_tar, NRF52_NVMC_READY);
    18b4:	4977      	ldr	r1, [pc, #476]	; (1a94 <main+0x2a8>)
    18b6:	208b      	movs	r0, #139	; 0x8b
    18b8:	47a0      	blx	r4
				swd_write(req_write_csw, CSW_AUTOINC_OFF);
    18ba:	4968      	ldr	r1, [pc, #416]	; (1a5c <main+0x270>)
    18bc:	20a3      	movs	r0, #163	; 0xa3
    18be:	47a0      	blx	r4
				swd_read(req_read_drw);
    18c0:	209f      	movs	r0, #159	; 0x9f
    18c2:	4c68      	ldr	r4, [pc, #416]	; (1a64 <main+0x278>)
    18c4:	47a0      	blx	r4
				uint32_t ready_val = swd_read(req_read_drw);
    18c6:	209f      	movs	r0, #159	; 0x9f
    18c8:	47a0      	blx	r4
				while(!ready_val) //not ready
    18ca:	b938      	cbnz	r0, 18dc <main+0xf0>
				{
					delay_ms(50);
    18cc:	2632      	movs	r6, #50	; 0x32
    18ce:	4d70      	ldr	r5, [pc, #448]	; (1a90 <main+0x2a4>)
    18d0:	4630      	mov	r0, r6
    18d2:	47a8      	blx	r5
					ready_val = swd_read(req_read_drw);
    18d4:	209f      	movs	r0, #159	; 0x9f
    18d6:	47a0      	blx	r4
				while(!ready_val) //not ready
    18d8:	2800      	cmp	r0, #0
    18da:	d0f9      	beq.n	18d0 <main+0xe4>
				}
				
				swd_clear_abort_reg();
    18dc:	4b63      	ldr	r3, [pc, #396]	; (1a6c <main+0x280>)
    18de:	4798      	blx	r3
				swd_write(req_write_select, AP_PORT_0);
    18e0:	2100      	movs	r1, #0
    18e2:	20b1      	movs	r0, #177	; 0xb1
    18e4:	4c5e      	ldr	r4, [pc, #376]	; (1a60 <main+0x274>)
    18e6:	47a0      	blx	r4
				swd_write(req_write_tar, NRF52_NVMC_CONFIG);
    18e8:	4967      	ldr	r1, [pc, #412]	; (1a88 <main+0x29c>)
    18ea:	208b      	movs	r0, #139	; 0x8b
    18ec:	47a0      	blx	r4
				swd_write(req_write_csw, CSW_AUTOINC_ON);
    18ee:	4961      	ldr	r1, [pc, #388]	; (1a74 <main+0x288>)
    18f0:	20a3      	movs	r0, #163	; 0xa3
    18f2:	47a0      	blx	r4
				swd_write(req_write_drw, WRITE_ENABLE); //enable write cmd
    18f4:	2101      	movs	r1, #1
    18f6:	20bb      	movs	r0, #187	; 0xbb
    18f8:	47a0      	blx	r4
								
				uint32_t progress_track = 0;
				uint32_t progress_chunk = (data_len/WORD_SIZE)/124; 
				uint8_t packet_count = 0;
				
				for(int i=0; i<(data_len/WORD_SIZE); i++) //will there be remainder / non-full word sent?
    18fa:	ea5f 0898 	movs.w	r8, r8, lsr #2
    18fe:	d03d      	beq.n	197c <main+0x190>
    1900:	4656      	mov	r6, sl
    1902:	44c2      	add	sl, r8
				{
					
					uint32_t word = *(qspi_buff +(i+3)) << 24 | *(qspi_buff + (i+2)) << 16 | *(qspi_buff + (i+1)) << 8 | *(qspi_buff + i); //LSB
					
					swd_clear_abort_reg();
    1904:	f8df 9164 	ldr.w	r9, [pc, #356]	; 1a6c <main+0x280>
					swd_write(req_write_select, AP_PORT_0);
    1908:	f04f 0800 	mov.w	r8, #0
    190c:	4633      	mov	r3, r6
					uint32_t word = *(qspi_buff +(i+3)) << 24 | *(qspi_buff + (i+2)) << 16 | *(qspi_buff + (i+1)) << 8 | *(qspi_buff + i); //LSB
    190e:	78f2      	ldrb	r2, [r6, #3]
    1910:	3601      	adds	r6, #1
    1912:	789c      	ldrb	r4, [r3, #2]
    1914:	0424      	lsls	r4, r4, #16
    1916:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
    191a:	781a      	ldrb	r2, [r3, #0]
    191c:	4314      	orrs	r4, r2
    191e:	785b      	ldrb	r3, [r3, #1]
    1920:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
					swd_clear_abort_reg();
    1924:	47c8      	blx	r9
					swd_write(req_write_select, AP_PORT_0);
    1926:	4641      	mov	r1, r8
    1928:	20b1      	movs	r0, #177	; 0xb1
    192a:	4d4d      	ldr	r5, [pc, #308]	; (1a60 <main+0x274>)
    192c:	47a8      	blx	r5
					swd_write(req_write_tar, start_address + (i*WORD_SIZE)); //set flash address
    192e:	4639      	mov	r1, r7
    1930:	208b      	movs	r0, #139	; 0x8b
    1932:	47a8      	blx	r5
					swd_write(req_write_csw, CSW_AUTOINC_OFF);
    1934:	f8df b124 	ldr.w	fp, [pc, #292]	; 1a5c <main+0x270>
    1938:	4659      	mov	r1, fp
    193a:	20a3      	movs	r0, #163	; 0xa3
    193c:	47a8      	blx	r5
					swd_write(req_write_drw, word); 
    193e:	4621      	mov	r1, r4
    1940:	20bb      	movs	r0, #187	; 0xbb
    1942:	47a8      	blx	r5
					
					
					swd_clear_abort_reg();
    1944:	47c8      	blx	r9
					swd_write(req_write_select, AP_PORT_0);
    1946:	4641      	mov	r1, r8
    1948:	20b1      	movs	r0, #177	; 0xb1
    194a:	47a8      	blx	r5
					swd_write(req_write_tar, NRF52_NVMC_READY_NEXT);
    194c:	4952      	ldr	r1, [pc, #328]	; (1a98 <main+0x2ac>)
    194e:	208b      	movs	r0, #139	; 0x8b
    1950:	47a8      	blx	r5
					swd_write(req_write_csw, CSW_AUTOINC_OFF);
    1952:	4659      	mov	r1, fp
    1954:	20a3      	movs	r0, #163	; 0xa3
    1956:	47a8      	blx	r5
					swd_read(req_read_drw);
    1958:	209f      	movs	r0, #159	; 0x9f
    195a:	4c42      	ldr	r4, [pc, #264]	; (1a64 <main+0x278>)
    195c:	47a0      	blx	r4
					uint32_t ready_val = swd_read(req_read_drw);
    195e:	209f      	movs	r0, #159	; 0x9f
    1960:	47a0      	blx	r4
					while(!ready_val) //not ready
    1962:	b940      	cbnz	r0, 1976 <main+0x18a>
					{
						delay_ms(1);
    1964:	f04f 0b01 	mov.w	fp, #1
    1968:	4d49      	ldr	r5, [pc, #292]	; (1a90 <main+0x2a4>)
    196a:	4658      	mov	r0, fp
    196c:	47a8      	blx	r5
						ready_val = swd_read(req_read_drw);
    196e:	209f      	movs	r0, #159	; 0x9f
    1970:	47a0      	blx	r4
					while(!ready_val) //not ready
    1972:	2800      	cmp	r0, #0
    1974:	d0f9      	beq.n	196a <main+0x17e>
    1976:	3704      	adds	r7, #4
				for(int i=0; i<(data_len/WORD_SIZE); i++) //will there be remainder / non-full word sent?
    1978:	45b2      	cmp	sl, r6
    197a:	d1c7      	bne.n	190c <main+0x120>
					}		
					*/
				}
				
				//reset core
				swd_clear_abort_reg();
    197c:	4b3b      	ldr	r3, [pc, #236]	; (1a6c <main+0x280>)
    197e:	4798      	blx	r3
				swd_write(req_write_select, AP_PORT_0);
    1980:	2100      	movs	r1, #0
    1982:	20b1      	movs	r0, #177	; 0xb1
    1984:	4c36      	ldr	r4, [pc, #216]	; (1a60 <main+0x274>)
    1986:	47a0      	blx	r4
				swd_write(req_write_tar, _AIRCR);
    1988:	493d      	ldr	r1, [pc, #244]	; (1a80 <main+0x294>)
    198a:	208b      	movs	r0, #139	; 0x8b
    198c:	47a0      	blx	r4
				swd_write(req_write_csw, CSW_AUTOINC_ON);
    198e:	4939      	ldr	r1, [pc, #228]	; (1a74 <main+0x288>)
    1990:	20a3      	movs	r0, #163	; 0xa3
    1992:	47a0      	blx	r4
				swd_write(req_write_drw, RESET_CORE);
    1994:	493b      	ldr	r1, [pc, #236]	; (1a84 <main+0x298>)
    1996:	20bb      	movs	r0, #187	; 0xbb
    1998:	47a0      	blx	r4
		I2C_read(i2c_buf, RX_LENGTH);
    199a:	4c40      	ldr	r4, [pc, #256]	; (1a9c <main+0x2b0>)
    199c:	2112      	movs	r1, #18
    199e:	4620      	mov	r0, r4
    19a0:	4b3f      	ldr	r3, [pc, #252]	; (1aa0 <main+0x2b4>)
    19a2:	4798      	blx	r3
		nor_flash_qspi_init();
    19a4:	4b3f      	ldr	r3, [pc, #252]	; (1aa4 <main+0x2b8>)
    19a6:	4798      	blx	r3
		if(i2c_buf[0] == start_byte) //start byte CC 
    19a8:	7823      	ldrb	r3, [r4, #0]
    19aa:	2bcc      	cmp	r3, #204	; 0xcc
    19ac:	d1f5      	bne.n	199a <main+0x1ae>
			if(i2c_buf[1] == target_cmd) //target cmd BB (data address, data length, target flash address, and SOC type to follow, atmel begins programming)
    19ae:	7863      	ldrb	r3, [r4, #1]
    19b0:	2bbb      	cmp	r3, #187	; 0xbb
    19b2:	d1f2      	bne.n	199a <main+0x1ae>
				uint32_t data_addr = i2c_buf[2] << 24 | i2c_buf[3] << 16 | i2c_buf[4] << 8 | i2c_buf[5];
    19b4:	4623      	mov	r3, r4
    19b6:	78a2      	ldrb	r2, [r4, #2]
    19b8:	78e4      	ldrb	r4, [r4, #3]
    19ba:	0424      	lsls	r4, r4, #16
    19bc:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
    19c0:	795a      	ldrb	r2, [r3, #5]
    19c2:	4314      	orrs	r4, r2
    19c4:	791a      	ldrb	r2, [r3, #4]
    19c6:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
				uint32_t data_len = i2c_buf[6] << 24 | i2c_buf[7] << 16 | i2c_buf[8] << 8 | i2c_buf[9];
    19ca:	799a      	ldrb	r2, [r3, #6]
    19cc:	f893 8007 	ldrb.w	r8, [r3, #7]
    19d0:	ea4f 4808 	mov.w	r8, r8, lsl #16
    19d4:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
    19d8:	7a5a      	ldrb	r2, [r3, #9]
    19da:	ea48 0802 	orr.w	r8, r8, r2
    19de:	7a1a      	ldrb	r2, [r3, #8]
    19e0:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
				uint32_t start_address = i2c_buf[10] << 24 | i2c_buf[11] << 16 | i2c_buf[12] << 8 | i2c_buf[13]; //flash start address
    19e4:	7a9a      	ldrb	r2, [r3, #10]
    19e6:	7adf      	ldrb	r7, [r3, #11]
    19e8:	043f      	lsls	r7, r7, #16
    19ea:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
    19ee:	7b5a      	ldrb	r2, [r3, #13]
    19f0:	4317      	orrs	r7, r2
    19f2:	7b1b      	ldrb	r3, [r3, #12]
    19f4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
				uint8_t* qspi_buff = malloc(sizeof(data_len)); //data_len
    19f8:	2004      	movs	r0, #4
    19fa:	4b2b      	ldr	r3, [pc, #172]	; (1aa8 <main+0x2bc>)
    19fc:	4798      	blx	r3
    19fe:	4682      	mov	sl, r0
				spi_nor_flash_read(SPI_NOR_FLASH_0, qspi_buff, data_addr, data_len); //data_len
    1a00:	4643      	mov	r3, r8
    1a02:	4622      	mov	r2, r4
    1a04:	4601      	mov	r1, r0
    1a06:	4829      	ldr	r0, [pc, #164]	; (1aac <main+0x2c0>)
    1a08:	6800      	ldr	r0, [r0, #0]
    1a0a:	4c29      	ldr	r4, [pc, #164]	; (1ab0 <main+0x2c4>)
    1a0c:	47a0      	blx	r4
				jtag_to_swd();			
    1a0e:	4b29      	ldr	r3, [pc, #164]	; (1ab4 <main+0x2c8>)
    1a10:	4798      	blx	r3
				uint32_t idcode = swd_read(req_read_idcode); 
    1a12:	20a5      	movs	r0, #165	; 0xa5
    1a14:	4b13      	ldr	r3, [pc, #76]	; (1a64 <main+0x278>)
    1a16:	4798      	blx	r3
				if(idcode == 0x00000000 || idcode == 0xFFFFFFFF)
    1a18:	3801      	subs	r0, #1
    1a1a:	f110 0f03 	cmn.w	r0, #3
    1a1e:	f63f aeea 	bhi.w	17f6 <main+0xa>
				uint32_t ctrl_reg = swd_read(req_read_ctrl_stat); // should return 0x00
    1a22:	208d      	movs	r0, #141	; 0x8d
    1a24:	4c0f      	ldr	r4, [pc, #60]	; (1a64 <main+0x278>)
    1a26:	47a0      	blx	r4
				swd_write(req_write_ctrl_stat, SYS_DBG_PWRUP); // pwrup debug and sys
    1a28:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    1a2c:	20a9      	movs	r0, #169	; 0xa9
    1a2e:	4b0c      	ldr	r3, [pc, #48]	; (1a60 <main+0x274>)
    1a30:	4798      	blx	r3
				ctrl_reg = swd_read(req_read_ctrl_stat);
    1a32:	208d      	movs	r0, #141	; 0x8d
    1a34:	47a0      	blx	r4
				if((ctrl_reg & PWRUP_MASK) != PWRUP_MASK) // check pwrup status
    1a36:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
    1a3a:	f1b0 4f70 	cmp.w	r0, #4026531840	; 0xf0000000
    1a3e:	f43f aede 	beq.w	17fe <main+0x12>
					i2c_send_error(error_no_dbg_pwr);
    1a42:	2001      	movs	r0, #1
    1a44:	4b04      	ldr	r3, [pc, #16]	; (1a58 <main+0x26c>)
    1a46:	4798      	blx	r3
    1a48:	e6d9      	b.n	17fe <main+0x12>
					i2c_send_error(error_dbg_locked);
    1a4a:	2002      	movs	r0, #2
    1a4c:	4b02      	ldr	r3, [pc, #8]	; (1a58 <main+0x26c>)
    1a4e:	4798      	blx	r3
    1a50:	e6e5      	b.n	181e <main+0x32>
    1a52:	bf00      	nop
    1a54:	000002d1 	.word	0x000002d1
    1a58:	00002195 	.word	0x00002195
    1a5c:	23000002 	.word	0x23000002
    1a60:	00002099 	.word	0x00002099
    1a64:	000020f9 	.word	0x000020f9
    1a68:	16e60001 	.word	0x16e60001
    1a6c:	00002011 	.word	0x00002011
    1a70:	e000edf0 	.word	0xe000edf0
    1a74:	23000012 	.word	0x23000012
    1a78:	a05f0003 	.word	0xa05f0003
    1a7c:	e000edfc 	.word	0xe000edfc
    1a80:	e000ed0c 	.word	0xe000ed0c
    1a84:	05fa0004 	.word	0x05fa0004
    1a88:	4001e504 	.word	0x4001e504
    1a8c:	4001e50c 	.word	0x4001e50c
    1a90:	000009a9 	.word	0x000009a9
    1a94:	4001e400 	.word	0x4001e400
    1a98:	4001e408 	.word	0x4001e408
    1a9c:	20000118 	.word	0x20000118
    1aa0:	00000905 	.word	0x00000905
    1aa4:	000007dd 	.word	0x000007dd
    1aa8:	00002205 	.word	0x00002205
    1aac:	2000012c 	.word	0x2000012c
    1ab0:	00001fd7 	.word	0x00001fd7
    1ab4:	00002035 	.word	0x00002035

00001ab8 <s25fl116k_read_reg>:
	cmd.instruction = S25FL1_SOFT_RESET;
	qspi_sync_serial_run_command(descr, &cmd);
}

static uint8_t s25fl116k_read_reg(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst)
{
    1ab8:	b500      	push	{lr}
    1aba:	b089      	sub	sp, #36	; 0x24
	uint32_t status;
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 1 */
	struct _qspi_command cmd = {
    1abc:	2300      	movs	r3, #0
    1abe:	9301      	str	r3, [sp, #4]
    1ac0:	9302      	str	r3, [sp, #8]
    1ac2:	9303      	str	r3, [sp, #12]
    1ac4:	9305      	str	r3, [sp, #20]
    1ac6:	f001 0107 	and.w	r1, r1, #7
    1aca:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    1ace:	f88d 1004 	strb.w	r1, [sp, #4]
    1ad2:	f88d 2008 	strb.w	r2, [sp, #8]
    1ad6:	2304      	movs	r3, #4
    1ad8:	9304      	str	r3, [sp, #16]
    1ada:	ab07      	add	r3, sp, #28
    1adc:	9306      	str	r3, [sp, #24]
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .rx_buf                   = &status,
	};

	qspi_sync_serial_run_command(descr, &cmd);
    1ade:	a901      	add	r1, sp, #4
    1ae0:	4b03      	ldr	r3, [pc, #12]	; (1af0 <s25fl116k_read_reg+0x38>)
    1ae2:	4798      	blx	r3
	return (uint8_t)status;
}
    1ae4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1ae8:	b009      	add	sp, #36	; 0x24
    1aea:	f85d fb04 	ldr.w	pc, [sp], #4
    1aee:	bf00      	nop
    1af0:	00000c91 	.word	0x00000c91

00001af4 <s25fl116k_wait_memory_access_ready>:

static void s25fl116k_wait_memory_access_ready(struct qspi_sync_descriptor *descr)
{
    1af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1af6:	4607      	mov	r7, r0
	while (s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1) & S25FL1_STATUS_RDYBSY)
    1af8:	2605      	movs	r6, #5
    1afa:	2500      	movs	r5, #0
    1afc:	4c04      	ldr	r4, [pc, #16]	; (1b10 <s25fl116k_wait_memory_access_ready+0x1c>)
    1afe:	4632      	mov	r2, r6
    1b00:	4629      	mov	r1, r5
    1b02:	4638      	mov	r0, r7
    1b04:	47a0      	blx	r4
    1b06:	f010 0f01 	tst.w	r0, #1
    1b0a:	d1f8      	bne.n	1afe <s25fl116k_wait_memory_access_ready+0xa>
		;
}
    1b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b0e:	bf00      	nop
    1b10:	00001ab9 	.word	0x00001ab9

00001b14 <s25fl116k_write_enable>:

static void s25fl116k_write_enable(struct qspi_sync_descriptor *descr, uint8_t width, bool en)
{
    1b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b16:	b087      	sub	sp, #28
    1b18:	4604      	mov	r4, r0
	uint8_t              inst   = (en == true ? S25FL1_WRITE_ENABLE : S25FL1_WRITE_DISABLE);
    1b1a:	4616      	mov	r6, r2
    1b1c:	2a00      	cmp	r2, #0
    1b1e:	bf14      	ite	ne
    1b20:	2206      	movne	r2, #6
    1b22:	2204      	moveq	r2, #4
	uint8_t              status = 0;
	struct _qspi_command cmd    = {
    1b24:	2300      	movs	r3, #0
    1b26:	9300      	str	r3, [sp, #0]
    1b28:	9301      	str	r3, [sp, #4]
    1b2a:	9302      	str	r3, [sp, #8]
    1b2c:	9303      	str	r3, [sp, #12]
    1b2e:	9304      	str	r3, [sp, #16]
    1b30:	9305      	str	r3, [sp, #20]
    1b32:	f001 0107 	and.w	r1, r1, #7
    1b36:	f041 0110 	orr.w	r1, r1, #16
    1b3a:	f88d 1000 	strb.w	r1, [sp]
    1b3e:	f88d 2004 	strb.w	r2, [sp, #4]
        .inst_frame.bits.width   = width,
        .inst_frame.bits.inst_en = 1,
        .instruction             = inst,
    };

	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1b42:	2205      	movs	r2, #5
    1b44:	4619      	mov	r1, r3
    1b46:	4b0b      	ldr	r3, [pc, #44]	; (1b74 <s25fl116k_write_enable+0x60>)
    1b48:	4798      	blx	r3
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    1b4a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1b4e:	42b0      	cmp	r0, r6
    1b50:	d00d      	beq.n	1b6e <s25fl116k_write_enable+0x5a>
    1b52:	4635      	mov	r5, r6
		qspi_sync_serial_run_command(descr, &cmd);
    1b54:	4f08      	ldr	r7, [pc, #32]	; (1b78 <s25fl116k_write_enable+0x64>)
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1b56:	4e07      	ldr	r6, [pc, #28]	; (1b74 <s25fl116k_write_enable+0x60>)
		qspi_sync_serial_run_command(descr, &cmd);
    1b58:	4669      	mov	r1, sp
    1b5a:	4620      	mov	r0, r4
    1b5c:	47b8      	blx	r7
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1b5e:	2205      	movs	r2, #5
    1b60:	2100      	movs	r1, #0
    1b62:	4620      	mov	r0, r4
    1b64:	47b0      	blx	r6
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    1b66:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1b6a:	42a8      	cmp	r0, r5
    1b6c:	d1f4      	bne.n	1b58 <s25fl116k_write_enable+0x44>
	}
}
    1b6e:	b007      	add	sp, #28
    1b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b72:	bf00      	nop
    1b74:	00001ab9 	.word	0x00001ab9
    1b78:	00000c91 	.word	0x00000c91

00001b7c <s25fl116k_write_status>:

static void s25fl116k_write_status(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst, uint8_t *data)
{
    1b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7e:	b087      	sub	sp, #28
    1b80:	4606      	mov	r6, r0
    1b82:	460f      	mov	r7, r1
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 3 */
	struct _qspi_command cmd = {
    1b84:	2400      	movs	r4, #0
    1b86:	9400      	str	r4, [sp, #0]
    1b88:	9401      	str	r4, [sp, #4]
    1b8a:	9402      	str	r4, [sp, #8]
    1b8c:	9405      	str	r4, [sp, #20]
    1b8e:	f001 0507 	and.w	r5, r1, #7
    1b92:	f045 0590 	orr.w	r5, r5, #144	; 0x90
    1b96:	f88d 5000 	strb.w	r5, [sp]
    1b9a:	f04f 0500 	mov.w	r5, #0
    1b9e:	f04f 0e02 	mov.w	lr, #2
    1ba2:	f36e 1505 	bfi	r5, lr, #4, #2
    1ba6:	f88d 5001 	strb.w	r5, [sp, #1]
    1baa:	f88d 2004 	strb.w	r2, [sp, #4]
    1bae:	2204      	movs	r2, #4
    1bb0:	9203      	str	r2, [sp, #12]
    1bb2:	9304      	str	r3, [sp, #16]
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .tx_buf                   = data,
	};
	s25fl116k_write_enable(descr, width, true);
    1bb4:	2201      	movs	r2, #1
    1bb6:	4d06      	ldr	r5, [pc, #24]	; (1bd0 <s25fl116k_write_status+0x54>)
    1bb8:	47a8      	blx	r5
	qspi_sync_serial_run_command(descr, &cmd);
    1bba:	4669      	mov	r1, sp
    1bbc:	4630      	mov	r0, r6
    1bbe:	4b05      	ldr	r3, [pc, #20]	; (1bd4 <s25fl116k_write_status+0x58>)
    1bc0:	4798      	blx	r3
	s25fl116k_write_enable(descr, width, false);
    1bc2:	4622      	mov	r2, r4
    1bc4:	4639      	mov	r1, r7
    1bc6:	4630      	mov	r0, r6
    1bc8:	47a8      	blx	r5
}
    1bca:	b007      	add	sp, #28
    1bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bce:	bf00      	nop
    1bd0:	00001b15 	.word	0x00001b15
    1bd4:	00000c91 	.word	0x00000c91

00001bd8 <s25fl116k_read>:
	}
	return me;
}

int32_t s25fl116k_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1bd8:	b570      	push	{r4, r5, r6, lr}
    1bda:	b086      	sub	sp, #24
	struct s25fl116k *           s25fl1 = (struct s25fl116k *)me;
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    1bdc:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    1bde:	2400      	movs	r4, #0
    1be0:	9400      	str	r4, [sp, #0]
    1be2:	9401      	str	r4, [sp, #4]
    1be4:	9404      	str	r4, [sp, #16]
    1be6:	24b0      	movs	r4, #176	; 0xb0
    1be8:	f88d 4000 	strb.w	r4, [sp]
    1bec:	f04f 0400 	mov.w	r4, #0
    1bf0:	2601      	movs	r6, #1
    1bf2:	f366 1405 	bfi	r4, r6, #4, #2
    1bf6:	f88d 4001 	strb.w	r4, [sp, #1]
    1bfa:	2408      	movs	r4, #8
    1bfc:	f88d 4002 	strb.w	r4, [sp, #2]
    1c00:	240b      	movs	r4, #11
    1c02:	f88d 4004 	strb.w	r4, [sp, #4]
    1c06:	9202      	str	r2, [sp, #8]
    1c08:	9303      	str	r3, [sp, #12]
    1c0a:	9105      	str	r1, [sp, #20]
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};

	if (s25fl1->quad_mode) {
    1c0c:	7a03      	ldrb	r3, [r0, #8]
    1c0e:	b14b      	cbz	r3, 1c24 <s25fl116k_read+0x4c>
		cmd.instruction           = S25FL1_READ_ARRAY_QUAD;
    1c10:	236b      	movs	r3, #107	; 0x6b
    1c12:	f88d 3004 	strb.w	r3, [sp, #4]
		cmd.inst_frame.bits.width = QSPI_INST1_ADDR1_DATA4;
    1c16:	f89d 3000 	ldrb.w	r3, [sp]
    1c1a:	2202      	movs	r2, #2
    1c1c:	f362 0302 	bfi	r3, r2, #0, #3
    1c20:	f88d 3000 	strb.w	r3, [sp]
	}
	qspi_sync_serial_run_command(descr, &cmd);
    1c24:	4669      	mov	r1, sp
    1c26:	4628      	mov	r0, r5
    1c28:	4b02      	ldr	r3, [pc, #8]	; (1c34 <s25fl116k_read+0x5c>)
    1c2a:	4798      	blx	r3
	return ERR_NONE;
}
    1c2c:	2000      	movs	r0, #0
    1c2e:	b006      	add	sp, #24
    1c30:	bd70      	pop	{r4, r5, r6, pc}
    1c32:	bf00      	nop
    1c34:	00000c91 	.word	0x00000c91

00001c38 <s25fl116k_page_program>:
{
    1c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c3a:	4604      	mov	r4, r0
    1c3c:	460f      	mov	r7, r1
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    1c3e:	2201      	movs	r2, #1
    1c40:	2100      	movs	r1, #0
    1c42:	4d08      	ldr	r5, [pc, #32]	; (1c64 <s25fl116k_page_program+0x2c>)
    1c44:	47a8      	blx	r5
	s25fl116k_wait_memory_access_ready(descr);
    1c46:	4620      	mov	r0, r4
    1c48:	4e07      	ldr	r6, [pc, #28]	; (1c68 <s25fl116k_page_program+0x30>)
    1c4a:	47b0      	blx	r6
	qspi_sync_serial_run_command(descr, cmd);
    1c4c:	4639      	mov	r1, r7
    1c4e:	4620      	mov	r0, r4
    1c50:	4b06      	ldr	r3, [pc, #24]	; (1c6c <s25fl116k_page_program+0x34>)
    1c52:	4798      	blx	r3
	s25fl116k_wait_memory_access_ready(descr);
    1c54:	4620      	mov	r0, r4
    1c56:	47b0      	blx	r6
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    1c58:	2200      	movs	r2, #0
    1c5a:	4611      	mov	r1, r2
    1c5c:	4620      	mov	r0, r4
    1c5e:	47a8      	blx	r5
    1c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c62:	bf00      	nop
    1c64:	00001b15 	.word	0x00001b15
    1c68:	00001af5 	.word	0x00001af5
    1c6c:	00000c91 	.word	0x00000c91

00001c70 <s25fl116k_write>:

int32_t s25fl116k_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c74:	b089      	sub	sp, #36	; 0x24
    1c76:	9201      	str	r2, [sp, #4]
    1c78:	461e      	mov	r6, r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1c7a:	6803      	ldr	r3, [r0, #0]
    1c7c:	9300      	str	r3, [sp, #0]
	uint32_t i = 0;

	/** Size / page_size */
	uint32_t number_of_writes = (length >> 8);

	struct _qspi_command cmd = {
    1c7e:	2300      	movs	r3, #0
    1c80:	9302      	str	r3, [sp, #8]
    1c82:	9303      	str	r3, [sp, #12]
    1c84:	9307      	str	r3, [sp, #28]
    1c86:	23b0      	movs	r3, #176	; 0xb0
    1c88:	f88d 3008 	strb.w	r3, [sp, #8]
    1c8c:	2330      	movs	r3, #48	; 0x30
    1c8e:	f88d 3009 	strb.w	r3, [sp, #9]
    1c92:	2302      	movs	r3, #2
    1c94:	f88d 300c 	strb.w	r3, [sp, #12]
    1c98:	9204      	str	r2, [sp, #16]
    1c9a:	9605      	str	r6, [sp, #20]
    1c9c:	9106      	str	r1, [sp, #24]
	    .buf_len                  = length,
	    .tx_buf                   = buf,
	};

	/** If less than page size */
	if (number_of_writes == 0) {
    1c9e:	0a37      	lsrs	r7, r6, #8
    1ca0:	d023      	beq.n	1cea <s25fl116k_write+0x7a>
    1ca2:	468b      	mov	fp, r1
    1ca4:	460c      	mov	r4, r1
    1ca6:	2500      	movs	r5, #0
		s25fl116k_page_program(descr, &cmd);
	} else {
		/** Multiple page */
		for (i = 0; i < number_of_writes; i++) {
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1ca8:	f44f 7a80 	mov.w	sl, #256	; 0x100
			cmd.address = address;
    1cac:	9b01      	ldr	r3, [sp, #4]
    1cae:	eba3 0901 	sub.w	r9, r3, r1
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1cb2:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1d04 <s25fl116k_write+0x94>
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1cb6:	f8cd a014 	str.w	sl, [sp, #20]
			cmd.address = address;
    1cba:	eb04 0309 	add.w	r3, r4, r9
    1cbe:	9304      	str	r3, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1cc0:	9406      	str	r4, [sp, #24]
    1cc2:	a902      	add	r1, sp, #8
    1cc4:	9800      	ldr	r0, [sp, #0]
    1cc6:	47c0      	blx	r8
			buf += S25FL1_PAGE_SIZE;
    1cc8:	f504 7480 	add.w	r4, r4, #256	; 0x100
		for (i = 0; i < number_of_writes; i++) {
    1ccc:	3501      	adds	r5, #1
    1cce:	42af      	cmp	r7, r5
    1cd0:	d1f1      	bne.n	1cb6 <s25fl116k_write+0x46>
    1cd2:	022d      	lsls	r5, r5, #8
    1cd4:	eb0b 0205 	add.w	r2, fp, r5
    1cd8:	9b01      	ldr	r3, [sp, #4]
    1cda:	441d      	add	r5, r3
			address += S25FL1_PAGE_SIZE;
		}
		if (length % S25FL1_PAGE_SIZE) {
    1cdc:	f016 03ff 	ands.w	r3, r6, #255	; 0xff
    1ce0:	d108      	bne.n	1cf4 <s25fl116k_write+0x84>
			cmd.address = address;
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
		}
	}
	return ERR_NONE;
}
    1ce2:	2000      	movs	r0, #0
    1ce4:	b009      	add	sp, #36	; 0x24
    1ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s25fl116k_page_program(descr, &cmd);
    1cea:	a902      	add	r1, sp, #8
    1cec:	9800      	ldr	r0, [sp, #0]
    1cee:	4b05      	ldr	r3, [pc, #20]	; (1d04 <s25fl116k_write+0x94>)
    1cf0:	4798      	blx	r3
    1cf2:	e7f6      	b.n	1ce2 <s25fl116k_write+0x72>
			cmd.buf_len = length % S25FL1_PAGE_SIZE;
    1cf4:	9305      	str	r3, [sp, #20]
			cmd.address = address;
    1cf6:	9504      	str	r5, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1cf8:	9206      	str	r2, [sp, #24]
    1cfa:	a902      	add	r1, sp, #8
    1cfc:	9800      	ldr	r0, [sp, #0]
    1cfe:	4b01      	ldr	r3, [pc, #4]	; (1d04 <s25fl116k_write+0x94>)
    1d00:	4798      	blx	r3
    1d02:	e7ee      	b.n	1ce2 <s25fl116k_write+0x72>
    1d04:	00001c39 	.word	0x00001c39

00001d08 <s25fl116k_erase>:

int32_t s25fl116k_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    1d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d0c:	b087      	sub	sp, #28
    1d0e:	4615      	mov	r5, r2
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1d10:	6806      	ldr	r6, [r0, #0]

	uint32_t temp_addr = address;
	uint32_t temp_len  = length;
	uint8_t  status;

	struct _qspi_command cmd = {
    1d12:	2300      	movs	r3, #0
    1d14:	9300      	str	r3, [sp, #0]
    1d16:	9301      	str	r3, [sp, #4]
    1d18:	9302      	str	r3, [sp, #8]
    1d1a:	9303      	str	r3, [sp, #12]
    1d1c:	9304      	str	r3, [sp, #16]
    1d1e:	9305      	str	r3, [sp, #20]
    1d20:	2330      	movs	r3, #48	; 0x30
    1d22:	f88d 3000 	strb.w	r3, [sp]
    1d26:	f04f 0300 	mov.w	r3, #0
    1d2a:	2202      	movs	r2, #2
    1d2c:	f362 1305 	bfi	r3, r2, #4, #2
    1d30:	f88d 3001 	strb.w	r3, [sp, #1]
	    .inst_frame.bits.inst_en  = 1,
	    .inst_frame.bits.addr_en  = 1,
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	};

	if ((length % S25FL1_SECTOR_SIZE) || (address % S25FL1_SECTOR_SIZE)) {
    1d34:	ea41 0305 	orr.w	r3, r1, r5
    1d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d15e      	bne.n	1dfe <s25fl116k_erase+0xf6>
    1d40:	460c      	mov	r4, r1
		return ERR_INVALID_ARG;
	}
	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1d42:	2205      	movs	r2, #5
    1d44:	2100      	movs	r1, #0
    1d46:	4630      	mov	r0, r6
    1d48:	4b31      	ldr	r3, [pc, #196]	; (1e10 <s25fl116k_erase+0x108>)
    1d4a:	4798      	blx	r3
	if ((status & S25FL1_STATUS_RDYBSY) != S25FL1_STATUS_RDYBSY_READY)
    1d4c:	f010 0f01 	tst.w	r0, #1
    1d50:	d003      	beq.n	1d5a <s25fl116k_erase+0x52>
		return S25FL1_ERROR_BUSY;
    1d52:	2002      	movs	r0, #2
			return ERR_INVALID_ARG;
		}
	}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
	return ERR_NONE;
}
    1d54:	b007      	add	sp, #28
    1d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    1d5a:	2201      	movs	r2, #1
    1d5c:	2100      	movs	r1, #0
    1d5e:	4630      	mov	r0, r6
    1d60:	4b2c      	ldr	r3, [pc, #176]	; (1e14 <s25fl116k_erase+0x10c>)
    1d62:	4798      	blx	r3
	if (address == 0 && length >= S25FL1_FLASH_SIZE) {
    1d64:	b914      	cbnz	r4, 1d6c <s25fl116k_erase+0x64>
    1d66:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
    1d6a:	d207      	bcs.n	1d7c <s25fl116k_erase+0x74>
	while (temp_len > 0) {
    1d6c:	2d00      	cmp	r5, #0
    1d6e:	d03f      	beq.n	1df0 <s25fl116k_erase+0xe8>
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    1d70:	f04f 09d8 	mov.w	r9, #216	; 0xd8
			qspi_sync_serial_run_command(descr, &cmd);
    1d74:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1e1c <s25fl116k_erase+0x114>
			s25fl116k_wait_memory_access_ready(descr);
    1d78:	4f27      	ldr	r7, [pc, #156]	; (1e18 <s25fl116k_erase+0x110>)
    1d7a:	e026      	b.n	1dca <s25fl116k_erase+0xc2>
		cmd.inst_frame.bits.addr_en = 0;
    1d7c:	f89d 3000 	ldrb.w	r3, [sp]
    1d80:	f36f 1345 	bfc	r3, #5, #1
    1d84:	f88d 3000 	strb.w	r3, [sp]
		cmd.instruction             = S25FL1_CHIP_ERASE_2;
    1d88:	23c7      	movs	r3, #199	; 0xc7
    1d8a:	f88d 3004 	strb.w	r3, [sp, #4]
		qspi_sync_serial_run_command(descr, &cmd);
    1d8e:	4669      	mov	r1, sp
    1d90:	4630      	mov	r0, r6
    1d92:	4b22      	ldr	r3, [pc, #136]	; (1e1c <s25fl116k_erase+0x114>)
    1d94:	4798      	blx	r3
		temp_len -= S25FL1_FLASH_SIZE;
    1d96:	f5a5 1500 	sub.w	r5, r5, #2097152	; 0x200000
		s25fl116k_wait_memory_access_ready(descr);
    1d9a:	4630      	mov	r0, r6
    1d9c:	4b1e      	ldr	r3, [pc, #120]	; (1e18 <s25fl116k_erase+0x110>)
    1d9e:	4798      	blx	r3
    1da0:	e7e4      	b.n	1d6c <s25fl116k_erase+0x64>
		} else if ((temp_addr % S25FL1_SECTOR_SIZE == 0) && (temp_len >= S25FL1_SECTOR_SIZE)) {
    1da2:	f3c4 030b 	ubfx	r3, r4, #0, #12
    1da6:	bb6b      	cbnz	r3, 1e04 <s25fl116k_erase+0xfc>
    1da8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    1dac:	d32d      	bcc.n	1e0a <s25fl116k_erase+0x102>
			cmd.address     = temp_addr;
    1dae:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_4K;
    1db0:	2320      	movs	r3, #32
    1db2:	f88d 3004 	strb.w	r3, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1db6:	4669      	mov	r1, sp
    1db8:	4630      	mov	r0, r6
    1dba:	47c0      	blx	r8
			temp_addr += S25FL1_SECTOR_SIZE;
    1dbc:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
			temp_len -= S25FL1_SECTOR_SIZE;
    1dc0:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
			s25fl116k_wait_memory_access_ready(descr);
    1dc4:	4630      	mov	r0, r6
    1dc6:	47b8      	blx	r7
	while (temp_len > 0) {
    1dc8:	b195      	cbz	r5, 1df0 <s25fl116k_erase+0xe8>
		if ((temp_addr % S25FL1_BLOCK_SIZE == 0) && (temp_len >= S25FL1_BLOCK_SIZE)) {
    1dca:	b2a3      	uxth	r3, r4
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d1e8      	bne.n	1da2 <s25fl116k_erase+0x9a>
    1dd0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    1dd4:	d3e5      	bcc.n	1da2 <s25fl116k_erase+0x9a>
			cmd.address     = temp_addr;
    1dd6:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    1dd8:	f88d 9004 	strb.w	r9, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1ddc:	4669      	mov	r1, sp
    1dde:	4630      	mov	r0, r6
    1de0:	47c0      	blx	r8
			temp_addr += S25FL1_BLOCK_SIZE;
    1de2:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
			temp_len -= S25FL1_BLOCK_SIZE;
    1de6:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
			s25fl116k_wait_memory_access_ready(descr);
    1dea:	4630      	mov	r0, r6
    1dec:	47b8      	blx	r7
    1dee:	e7eb      	b.n	1dc8 <s25fl116k_erase+0xc0>
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    1df0:	2200      	movs	r2, #0
    1df2:	4611      	mov	r1, r2
    1df4:	4630      	mov	r0, r6
    1df6:	4b07      	ldr	r3, [pc, #28]	; (1e14 <s25fl116k_erase+0x10c>)
    1df8:	4798      	blx	r3
	return ERR_NONE;
    1dfa:	2000      	movs	r0, #0
    1dfc:	e7aa      	b.n	1d54 <s25fl116k_erase+0x4c>
		return ERR_INVALID_ARG;
    1dfe:	f06f 000c 	mvn.w	r0, #12
    1e02:	e7a7      	b.n	1d54 <s25fl116k_erase+0x4c>
			return ERR_INVALID_ARG;
    1e04:	f06f 000c 	mvn.w	r0, #12
    1e08:	e7a4      	b.n	1d54 <s25fl116k_erase+0x4c>
    1e0a:	f06f 000c 	mvn.w	r0, #12
    1e0e:	e7a1      	b.n	1d54 <s25fl116k_erase+0x4c>
    1e10:	00001ab9 	.word	0x00001ab9
    1e14:	00001b15 	.word	0x00001b15
    1e18:	00001af5 	.word	0x00001af5
    1e1c:	00000c91 	.word	0x00000c91

00001e20 <s25fl116k_enable_xip>:

int32_t s25fl116k_enable_xip(const struct spi_nor_flash *const me)
{
    1e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e22:	b089      	sub	sp, #36	; 0x24
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1e24:	6804      	ldr	r4, [r0, #0]

	uint8_t dummy_read, status[3];

	struct _qspi_command cmd = {
    1e26:	2500      	movs	r5, #0
    1e28:	9501      	str	r5, [sp, #4]
    1e2a:	9502      	str	r5, [sp, #8]
    1e2c:	9503      	str	r5, [sp, #12]
    1e2e:	9505      	str	r5, [sp, #20]
    1e30:	23f4      	movs	r3, #244	; 0xf4
    1e32:	f88d 3004 	strb.w	r3, [sp, #4]
    1e36:	2302      	movs	r3, #2
    1e38:	f043 0250 	orr.w	r2, r3, #80	; 0x50
    1e3c:	f88d 2005 	strb.w	r2, [sp, #5]
    1e40:	2205      	movs	r2, #5
    1e42:	f88d 2006 	strb.w	r2, [sp, #6]
    1e46:	21eb      	movs	r1, #235	; 0xeb
    1e48:	f88d 1008 	strb.w	r1, [sp, #8]
    1e4c:	f88d 3009 	strb.w	r3, [sp, #9]
    1e50:	2301      	movs	r3, #1
    1e52:	9304      	str	r3, [sp, #16]
    1e54:	f10d 031f 	add.w	r3, sp, #31
    1e58:	9306      	str	r3, [sp, #24]
	    .address                        = 0,
	    .buf_len                        = 1,
	    .rx_buf                         = &dummy_read,
	};

	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1e5a:	4629      	mov	r1, r5
    1e5c:	4620      	mov	r0, r4
    1e5e:	4e17      	ldr	r6, [pc, #92]	; (1ebc <s25fl116k_enable_xip+0x9c>)
    1e60:	47b0      	blx	r6
    1e62:	f88d 001c 	strb.w	r0, [sp, #28]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1e66:	2235      	movs	r2, #53	; 0x35
    1e68:	4629      	mov	r1, r5
    1e6a:	4620      	mov	r0, r4
    1e6c:	47b0      	blx	r6
    1e6e:	f88d 001d 	strb.w	r0, [sp, #29]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    1e72:	2233      	movs	r2, #51	; 0x33
    1e74:	4629      	mov	r1, r5
    1e76:	4620      	mov	r0, r4
    1e78:	47b0      	blx	r6
    1e7a:	f88d 001e 	strb.w	r0, [sp, #30]

	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1e7e:	f89d 001d 	ldrb.w	r0, [sp, #29]
    1e82:	f010 0f02 	tst.w	r0, #2
    1e86:	d112      	bne.n	1eae <s25fl116k_enable_xip+0x8e>
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1e88:	4f0d      	ldr	r7, [pc, #52]	; (1ec0 <s25fl116k_enable_xip+0xa0>)
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    1e8a:	f040 0002 	orr.w	r0, r0, #2
    1e8e:	f88d 001d 	strb.w	r0, [sp, #29]
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1e92:	ab07      	add	r3, sp, #28
    1e94:	2201      	movs	r2, #1
    1e96:	4629      	mov	r1, r5
    1e98:	4620      	mov	r0, r4
    1e9a:	47b8      	blx	r7
		status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1e9c:	2235      	movs	r2, #53	; 0x35
    1e9e:	4629      	mov	r1, r5
    1ea0:	4620      	mov	r0, r4
    1ea2:	47b0      	blx	r6
    1ea4:	f88d 001d 	strb.w	r0, [sp, #29]
	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1ea8:	f010 0f02 	tst.w	r0, #2
    1eac:	d0ed      	beq.n	1e8a <s25fl116k_enable_xip+0x6a>
	}

	qspi_sync_serial_run_command(descr, &cmd);
    1eae:	a901      	add	r1, sp, #4
    1eb0:	4620      	mov	r0, r4
    1eb2:	4b04      	ldr	r3, [pc, #16]	; (1ec4 <s25fl116k_enable_xip+0xa4>)
    1eb4:	4798      	blx	r3
	return ERR_NONE;
}
    1eb6:	2000      	movs	r0, #0
    1eb8:	b009      	add	sp, #36	; 0x24
    1eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ebc:	00001ab9 	.word	0x00001ab9
    1ec0:	00001b7d 	.word	0x00001b7d
    1ec4:	00000c91 	.word	0x00000c91

00001ec8 <s25fl116k_disable_xip>:

int32_t s25fl116k_disable_xip(const struct spi_nor_flash *const me)
{
    1ec8:	b530      	push	{r4, r5, lr}
    1eca:	b087      	sub	sp, #28
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1ecc:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    1ece:	2400      	movs	r4, #0
    1ed0:	9400      	str	r4, [sp, #0]
    1ed2:	9401      	str	r4, [sp, #4]
    1ed4:	9402      	str	r4, [sp, #8]
    1ed6:	9403      	str	r4, [sp, #12]
    1ed8:	9404      	str	r4, [sp, #16]
    1eda:	9405      	str	r4, [sp, #20]
    1edc:	2310      	movs	r3, #16
    1ede:	f88d 3000 	strb.w	r3, [sp]
    1ee2:	23ff      	movs	r3, #255	; 0xff
    1ee4:	f88d 3004 	strb.w	r3, [sp, #4]
	    .inst_frame.bits.width   = QSPI_INST1_ADDR1_DATA1,
	    .inst_frame.bits.inst_en = 1,
	    .instruction             = S25FL1_CONT_MODE_RESET,
	};

	qspi_sync_init(descr, QSPI);
    1ee8:	4906      	ldr	r1, [pc, #24]	; (1f04 <s25fl116k_disable_xip+0x3c>)
    1eea:	4628      	mov	r0, r5
    1eec:	4b06      	ldr	r3, [pc, #24]	; (1f08 <s25fl116k_disable_xip+0x40>)
    1eee:	4798      	blx	r3
	qspi_sync_enable(descr);
    1ef0:	4628      	mov	r0, r5
    1ef2:	4b06      	ldr	r3, [pc, #24]	; (1f0c <s25fl116k_disable_xip+0x44>)
    1ef4:	4798      	blx	r3

	qspi_sync_serial_run_command(descr, &cmd);
    1ef6:	4669      	mov	r1, sp
    1ef8:	4628      	mov	r0, r5
    1efa:	4b05      	ldr	r3, [pc, #20]	; (1f10 <s25fl116k_disable_xip+0x48>)
    1efc:	4798      	blx	r3
	return ERR_NONE;
}
    1efe:	4620      	mov	r0, r4
    1f00:	b007      	add	sp, #28
    1f02:	bd30      	pop	{r4, r5, pc}
    1f04:	42003400 	.word	0x42003400
    1f08:	00000c39 	.word	0x00000c39
    1f0c:	00000c69 	.word	0x00000c69
    1f10:	00000c91 	.word	0x00000c91

00001f14 <s25fl116k_construct>:
{
    1f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f18:	b082      	sub	sp, #8
    1f1a:	4606      	mov	r6, r0
    1f1c:	4617      	mov	r7, r2
	spi_nor_flash_construct(me, io, &s25fl116k_interface);
    1f1e:	4a28      	ldr	r2, [pc, #160]	; (1fc0 <s25fl116k_construct+0xac>)
    1f20:	4b28      	ldr	r3, [pc, #160]	; (1fc4 <s25fl116k_construct+0xb0>)
    1f22:	4798      	blx	r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1f24:	6834      	ldr	r4, [r6, #0]
	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1f26:	2205      	movs	r2, #5
    1f28:	2100      	movs	r1, #0
    1f2a:	4620      	mov	r0, r4
    1f2c:	4d26      	ldr	r5, [pc, #152]	; (1fc8 <s25fl116k_construct+0xb4>)
    1f2e:	47a8      	blx	r5
    1f30:	f88d 0004 	strb.w	r0, [sp, #4]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1f34:	2235      	movs	r2, #53	; 0x35
    1f36:	2100      	movs	r1, #0
    1f38:	4620      	mov	r0, r4
    1f3a:	47a8      	blx	r5
    1f3c:	f88d 0005 	strb.w	r0, [sp, #5]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    1f40:	2233      	movs	r2, #51	; 0x33
    1f42:	2100      	movs	r1, #0
    1f44:	4620      	mov	r0, r4
    1f46:	47a8      	blx	r5
    1f48:	f88d 0006 	strb.w	r0, [sp, #6]
	s25fl1->quad_mode = quad_mode;
    1f4c:	7237      	strb	r7, [r6, #8]
	if (quad_mode) {
    1f4e:	b9cf      	cbnz	r7, 1f84 <s25fl116k_construct+0x70>
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    1f50:	f89d 0005 	ldrb.w	r0, [sp, #5]
    1f54:	f010 0f02 	tst.w	r0, #2
    1f58:	d02d      	beq.n	1fb6 <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1f5a:	2500      	movs	r5, #0
    1f5c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1fcc <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1f60:	4f19      	ldr	r7, [pc, #100]	; (1fc8 <s25fl116k_construct+0xb4>)
			status[1] &= (~S25FL1_STATUS_QUAD_ENABLE);
    1f62:	f020 0002 	bic.w	r0, r0, #2
    1f66:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1f6a:	ab01      	add	r3, sp, #4
    1f6c:	2201      	movs	r2, #1
    1f6e:	4629      	mov	r1, r5
    1f70:	4620      	mov	r0, r4
    1f72:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1f74:	2235      	movs	r2, #53	; 0x35
    1f76:	4629      	mov	r1, r5
    1f78:	4620      	mov	r0, r4
    1f7a:	47b8      	blx	r7
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    1f7c:	f010 0f02 	tst.w	r0, #2
    1f80:	d1ef      	bne.n	1f62 <s25fl116k_construct+0x4e>
    1f82:	e018      	b.n	1fb6 <s25fl116k_construct+0xa2>
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1f84:	f89d 0005 	ldrb.w	r0, [sp, #5]
    1f88:	f010 0f02 	tst.w	r0, #2
    1f8c:	d113      	bne.n	1fb6 <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1f8e:	2500      	movs	r5, #0
    1f90:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1fcc <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1f94:	4f0c      	ldr	r7, [pc, #48]	; (1fc8 <s25fl116k_construct+0xb4>)
			status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    1f96:	f040 0002 	orr.w	r0, r0, #2
    1f9a:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    1f9e:	ab01      	add	r3, sp, #4
    1fa0:	2201      	movs	r2, #1
    1fa2:	4629      	mov	r1, r5
    1fa4:	4620      	mov	r0, r4
    1fa6:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    1fa8:	2235      	movs	r2, #53	; 0x35
    1faa:	4629      	mov	r1, r5
    1fac:	4620      	mov	r0, r4
    1fae:	47b8      	blx	r7
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    1fb0:	f010 0f02 	tst.w	r0, #2
    1fb4:	d0ef      	beq.n	1f96 <s25fl116k_construct+0x82>
}
    1fb6:	4630      	mov	r0, r6
    1fb8:	b002      	add	sp, #8
    1fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fbe:	bf00      	nop
    1fc0:	0000247c 	.word	0x0000247c
    1fc4:	00001fd1 	.word	0x00001fd1
    1fc8:	00001ab9 	.word	0x00001ab9
    1fcc:	00001b7d 	.word	0x00001b7d

00001fd0 <spi_nor_flash_construct>:
#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
    1fd0:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    1fd2:	6042      	str	r2, [r0, #4]

	return me;
}
    1fd4:	4770      	bx	lr

00001fd6 <spi_nor_flash_read>:

int32_t spi_nor_flash_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1fd6:	b510      	push	{r4, lr}
	return me->interface->read(me, buf, address, length);
    1fd8:	6844      	ldr	r4, [r0, #4]
    1fda:	6824      	ldr	r4, [r4, #0]
    1fdc:	47a0      	blx	r4
}
    1fde:	bd10      	pop	{r4, pc}

00001fe0 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    1fe0:	b510      	push	{r4, lr}

	qspi_sync_enable(&QUAD_SPI_0);
    1fe2:	4c06      	ldr	r4, [pc, #24]	; (1ffc <spi_nor_flash_init+0x1c>)
    1fe4:	4620      	mov	r0, r4
    1fe6:	4b06      	ldr	r3, [pc, #24]	; (2000 <spi_nor_flash_init+0x20>)
    1fe8:	4798      	blx	r3
	SPI_NOR_FLASH_0 = s25fl116k_construct(&SPI_NOR_FLASH_0_descr.parent, &QUAD_SPI_0, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    1fea:	2200      	movs	r2, #0
    1fec:	4621      	mov	r1, r4
    1fee:	4805      	ldr	r0, [pc, #20]	; (2004 <spi_nor_flash_init+0x24>)
    1ff0:	4b05      	ldr	r3, [pc, #20]	; (2008 <spi_nor_flash_init+0x28>)
    1ff2:	4798      	blx	r3
    1ff4:	4b05      	ldr	r3, [pc, #20]	; (200c <spi_nor_flash_init+0x2c>)
    1ff6:	6018      	str	r0, [r3, #0]
    1ff8:	bd10      	pop	{r4, pc}
    1ffa:	bf00      	nop
    1ffc:	200000dc 	.word	0x200000dc
    2000:	00000c69 	.word	0x00000c69
    2004:	20000090 	.word	0x20000090
    2008:	00001f15 	.word	0x00001f15
    200c:	2000012c 	.word	0x2000012c

00002010 <swd_clear_abort_reg>:
#include "atmel_start_pins.h"
#include <hal_delay.h>
#include <stdbool.h>

void swd_clear_abort_reg(void)
{
    2010:	b500      	push	{lr}
    2012:	b083      	sub	sp, #12
	uint8_t clear_err_buf[8] ={0x00, 0x81, 0xd3, 0x03, 0x00, 0x00, 0x00, 0x00}; // includes request byte, ignores ack response for byte alignment
    2014:	4a05      	ldr	r2, [pc, #20]	; (202c <swd_clear_abort_reg+0x1c>)
    2016:	e892 0003 	ldmia.w	r2, {r0, r1}
    201a:	e88d 0003 	stmia.w	sp, {r0, r1}
	SWD_tx(clear_err_buf, 8);
    201e:	2108      	movs	r1, #8
    2020:	4668      	mov	r0, sp
    2022:	4b03      	ldr	r3, [pc, #12]	; (2030 <swd_clear_abort_reg+0x20>)
    2024:	4798      	blx	r3
}
    2026:	b003      	add	sp, #12
    2028:	f85d fb04 	ldr.w	pc, [sp], #4
    202c:	00002490 	.word	0x00002490
    2030:	0000087d 	.word	0x0000087d

00002034 <jtag_to_swd>:

void jtag_to_swd(void) //JTAG-to-SWD switch with 16bit value, MSB = 0x79E7, LSB = 0xE79E, then min 5 clock cycles with swdio high 
{
    2034:	b530      	push	{r4, r5, lr}
    2036:	b087      	sub	sp, #28
	uint8_t swd_seq_jtag_to_swd[] = {
    2038:	ac01      	add	r4, sp, #4
    203a:	4d05      	ldr	r5, [pc, #20]	; (2050 <jtag_to_swd+0x1c>)
    203c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    203e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2040:	682b      	ldr	r3, [r5, #0]
    2042:	7023      	strb	r3, [r4, #0]
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		/* At least 2 idle (low) cycles */
		0x00,
	};
	
	SWD_tx(swd_seq_jtag_to_swd, 17);
    2044:	2111      	movs	r1, #17
    2046:	a801      	add	r0, sp, #4
    2048:	4b02      	ldr	r3, [pc, #8]	; (2054 <jtag_to_swd+0x20>)
    204a:	4798      	blx	r3
}
    204c:	b007      	add	sp, #28
    204e:	bd30      	pop	{r4, r5, pc}
    2050:	00002498 	.word	0x00002498
    2054:	0000087d 	.word	0x0000087d

00002058 <swd_idcode_throwaway>:

void swd_idcode_throwaway(void)
{
    2058:	b500      	push	{lr}
    205a:	b083      	sub	sp, #12
	/// SWD Sequence to Read Register 0 (IDCODE), pre-padded with 2 null bits bits to fill up 6 bytes. Byte-aligned, will not cause overrun error.
	/// A transaction must be followed by another transaction or at least 8 idle cycles to ensure that data is clocked through the AP.
	/// After clocking out the data parity bit, continue to clock the SW-DP serial interface until it has clocked out at least 8 more clock rising edges, before stopping the clock.
	uint8_t swd_read_idcode_prepadded[]   = { 0x00, 0x94, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 };  //  With null byte (8 cycles idle) before and after
    205c:	4a05      	ldr	r2, [pc, #20]	; (2074 <swd_idcode_throwaway+0x1c>)
    205e:	e892 0003 	ldmia.w	r2, {r0, r1}
    2062:	e88d 0003 	stmia.w	sp, {r0, r1}
	SWD_tx(swd_read_idcode_prepadded, 8);
    2066:	2108      	movs	r1, #8
    2068:	4668      	mov	r0, sp
    206a:	4b03      	ldr	r3, [pc, #12]	; (2078 <swd_idcode_throwaway+0x20>)
    206c:	4798      	blx	r3

}
    206e:	b003      	add	sp, #12
    2070:	f85d fb04 	ldr.w	pc, [sp], #4
    2074:	000024ac 	.word	0x000024ac
    2078:	0000087d 	.word	0x0000087d

0000207c <swd_calc_parity>:

bool swd_calc_parity(uint32_t n)
{
	
	uint8_t count = 0; 
    while (n) 
    207c:	4603      	mov	r3, r0
    207e:	b148      	cbz	r0, 2094 <swd_calc_parity+0x18>
    2080:	2000      	movs	r0, #0
	{ 
        count += n & 1; 
    2082:	f003 0201 	and.w	r2, r3, #1
    2086:	4410      	add	r0, r2
    2088:	b2c0      	uxtb	r0, r0
    while (n) 
    208a:	085b      	lsrs	r3, r3, #1
    208c:	d1f9      	bne.n	2082 <swd_calc_parity+0x6>
	}
	else
	{
		return false; //even 
	}
}
    208e:	f000 0001 	and.w	r0, r0, #1
    2092:	4770      	bx	lr
	uint8_t count = 0; 
    2094:	2000      	movs	r0, #0
    2096:	e7fa      	b.n	208e <swd_calc_parity+0x12>

00002098 <swd_write>:

void swd_write(uint8_t cmd, uint32_t payload)
{
    2098:	b5f0      	push	{r4, r5, r6, r7, lr}
    209a:	b083      	sub	sp, #12
    209c:	4606      	mov	r6, r0
    209e:	460c      	mov	r4, r1
	//uint8_t clear_err_buf[8] ={0x00, 0x81, 0xd3, 0x03, 0x00, 0x00, 0x00, 0x00}; // for test
	//SWD_tx(clear_err_buf, 8);
	
	uint8_t payload_lsbs = (payload & 0x00000007); //take three lsbs of payload 
	uint8_t ack_plus_lsbs = (payload_lsbs<<5) + 0x13; //value needed to fake ack read 
    20a0:	014d      	lsls	r5, r1, #5
    20a2:	3513      	adds	r5, #19
    20a4:	b2ed      	uxtb	r5, r5
	
	bool parity = swd_calc_parity(payload); 
    20a6:	4608      	mov	r0, r1
    20a8:	4b11      	ldr	r3, [pc, #68]	; (20f0 <swd_write+0x58>)
    20aa:	4798      	blx	r3
	payload >>= 3; //shift payload over by 3 bytes to compensate for lsbs already used
	uint8_t data_buf[4];                              
    data_buf[0] = (payload >> 24) & 0xFF; //bit shift 32bit address into 8bit array 
    20ac:	0ee3      	lsrs	r3, r4, #27
    data_buf[1] = (payload >> 16) & 0xFF;
    20ae:	f3c4 41c7 	ubfx	r1, r4, #19, #8
    data_buf[2] = (payload >> 8) & 0xFF;
    20b2:	f3c4 27c7 	ubfx	r7, r4, #11, #8
    data_buf[3] = (payload) & 0xFF; // 3 msbs of this byte include parity bit and trailing bits
    20b6:	f3c4 04c7 	ubfx	r4, r4, #3, #8
	
	if(parity)	//NOTE: sixth bit of data_buf[0] holds parity
    20ba:	b9b0      	cbnz	r0, 20ea <swd_write+0x52>
	else
	{
		data_buf[0] &= 0b11011111; //even number of 1's, set parity to 0
	}
	
	uint8_t swd_write_buf[8] ={0x00, cmd, ack_plus_lsbs, data_buf[3], data_buf[2], data_buf[1], data_buf[0], 0x00}; //3 lsbs of payload become msbs of byte after cmd
    20bc:	2200      	movs	r2, #0
    20be:	f88d 2000 	strb.w	r2, [sp]
    20c2:	f88d 6001 	strb.w	r6, [sp, #1]
    20c6:	f88d 5002 	strb.w	r5, [sp, #2]
    20ca:	f88d 4003 	strb.w	r4, [sp, #3]
    20ce:	f88d 7004 	strb.w	r7, [sp, #4]
    20d2:	f88d 1005 	strb.w	r1, [sp, #5]
    20d6:	f88d 3006 	strb.w	r3, [sp, #6]
    20da:	f88d 2007 	strb.w	r2, [sp, #7]
	SWD_tx(swd_write_buf, 8);
    20de:	2108      	movs	r1, #8
    20e0:	4668      	mov	r0, sp
    20e2:	4b04      	ldr	r3, [pc, #16]	; (20f4 <swd_write+0x5c>)
    20e4:	4798      	blx	r3
}
    20e6:	b003      	add	sp, #12
    20e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_buf[0] |= 0b00100000; //odd number of 1's, set parity to 1
    20ea:	f043 0320 	orr.w	r3, r3, #32
    20ee:	e7e5      	b.n	20bc <swd_write+0x24>
    20f0:	0000207d 	.word	0x0000207d
    20f4:	0000087d 	.word	0x0000087d

000020f8 <swd_read>:
/*
NOTE: if sync lost (ex: no stop bit) target leaves line un-driven and waits for host to retry 
(after some clk cycles w/ line low), or signals a reset by not driving line 
*/
uint32_t swd_read(uint8_t cmd)
{
    20f8:	b530      	push	{r4, r5, lr}
    20fa:	b085      	sub	sp, #20
    20fc:	ab04      	add	r3, sp, #16
    20fe:	f803 0d09 	strb.w	r0, [r3, #-9]!
	uint32_t Wdata = 0;	
	uint8_t swd_rx_buf[5];
	
	//hri_sercomspi_write_CTRLA_CPHA_bit(SERCOM0, false); //no effect/not needed
		
	SWD_tx(&cmd, 1);	
    2102:	2101      	movs	r1, #1
    2104:	4618      	mov	r0, r3
    2106:	4b1e      	ldr	r3, [pc, #120]	; (2180 <swd_read+0x88>)
    2108:	4798      	blx	r3
	SWD_rx(swd_rx_buf, 5);
    210a:	2105      	movs	r1, #5
    210c:	a802      	add	r0, sp, #8
    210e:	4b1d      	ldr	r3, [pc, #116]	; (2184 <swd_read+0x8c>)
    2110:	4798      	blx	r3
					
	if(swd_rx_buf[0] & ACK_MASK) // check ACK
    2112:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2116:	f012 0f02 	tst.w	r2, #2
    211a:	d02e      	beq.n	217a <swd_read+0x82>
	{				
		swd_rx_buf[4] = (swd_rx_buf[4]  << 4 ) | (swd_rx_buf[3] >> 4); //first byte
    211c:	f89d 100b 	ldrb.w	r1, [sp, #11]
    2120:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2124:	090c      	lsrs	r4, r1, #4
    2126:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    212a:	b2e4      	uxtb	r4, r4
    212c:	f88d 400c 	strb.w	r4, [sp, #12]
		swd_rx_buf[3] = (swd_rx_buf[3]  << 4 ) | (swd_rx_buf[2] >> 4); //second
    2130:	f89d 500a 	ldrb.w	r5, [sp, #10]
    2134:	092b      	lsrs	r3, r5, #4
    2136:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    213a:	b2db      	uxtb	r3, r3
    213c:	f88d 300b 	strb.w	r3, [sp, #11]
		swd_rx_buf[2] = (swd_rx_buf[2]  << 4 ) | (swd_rx_buf[1] >> 4); //third
    2140:	f89d 0009 	ldrb.w	r0, [sp, #9]
    2144:	0901      	lsrs	r1, r0, #4
    2146:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    214a:	b2c9      	uxtb	r1, r1
    214c:	f88d 100a 	strb.w	r1, [sp, #10]
		swd_rx_buf[1] = (swd_rx_buf[1]  << 4 ) | (swd_rx_buf[0] >> 4); //fourth
    2150:	0912      	lsrs	r2, r2, #4
    2152:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    2156:	b2d2      	uxtb	r2, r2
    2158:	f88d 2009 	strb.w	r2, [sp, #9]
					
		Wdata = swd_rx_buf[4] << 24 | swd_rx_buf[3] << 16 | swd_rx_buf[2] << 8 | swd_rx_buf[1];
    215c:	041b      	lsls	r3, r3, #16
    215e:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
    2162:	4314      	orrs	r4, r2
    2164:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
		//else confirm even 1's				
	}
	//else ACK WAIT or FAULT was received
	
	//NOTE: this sequence must be repeated after every read to correct for bit alignment errors
	swd_clear_abort_reg(); //error flagged due to misaligned bit during previous read
    2168:	4b07      	ldr	r3, [pc, #28]	; (2188 <swd_read+0x90>)
    216a:	4798      	blx	r3
	jtag_to_swd();
    216c:	4b07      	ldr	r3, [pc, #28]	; (218c <swd_read+0x94>)
    216e:	4798      	blx	r3
	swd_idcode_throwaway(); //fakes a byte-aligned read of idcode, as is required by the arm spec after reset
    2170:	4b07      	ldr	r3, [pc, #28]	; (2190 <swd_read+0x98>)
    2172:	4798      	blx	r3
	
	return Wdata; 
}
    2174:	4620      	mov	r0, r4
    2176:	b005      	add	sp, #20
    2178:	bd30      	pop	{r4, r5, pc}
	uint32_t Wdata = 0;	
    217a:	2400      	movs	r4, #0
    217c:	e7f4      	b.n	2168 <swd_read+0x70>
    217e:	bf00      	nop
    2180:	0000087d 	.word	0x0000087d
    2184:	000008c1 	.word	0x000008c1
    2188:	00002011 	.word	0x00002011
    218c:	00002035 	.word	0x00002035
    2190:	00002059 	.word	0x00002059

00002194 <i2c_send_error>:


void i2c_send_error(uint8_t err_id) //TODO: use gpio to signal i2c master to read
{
    2194:	b500      	push	{lr}
    2196:	b083      	sub	sp, #12
	uint8_t error_packet[3] = {start_byte, error_cmd, err_id};
    2198:	23cc      	movs	r3, #204	; 0xcc
    219a:	f88d 3004 	strb.w	r3, [sp, #4]
    219e:	23ee      	movs	r3, #238	; 0xee
    21a0:	f88d 3005 	strb.w	r3, [sp, #5]
    21a4:	f88d 0006 	strb.w	r0, [sp, #6]
	I2C_write(error_packet, 3); //use gpio to signal master read (new boards)
    21a8:	2103      	movs	r1, #3
    21aa:	a801      	add	r0, sp, #4
    21ac:	4b02      	ldr	r3, [pc, #8]	; (21b8 <i2c_send_error+0x24>)
    21ae:	4798      	blx	r3
}
    21b0:	b003      	add	sp, #12
    21b2:	f85d fb04 	ldr.w	pc, [sp], #4
    21b6:	bf00      	nop
    21b8:	00000949 	.word	0x00000949

000021bc <__libc_init_array>:
    21bc:	b570      	push	{r4, r5, r6, lr}
    21be:	4e0d      	ldr	r6, [pc, #52]	; (21f4 <__libc_init_array+0x38>)
    21c0:	4c0d      	ldr	r4, [pc, #52]	; (21f8 <__libc_init_array+0x3c>)
    21c2:	1ba4      	subs	r4, r4, r6
    21c4:	10a4      	asrs	r4, r4, #2
    21c6:	2500      	movs	r5, #0
    21c8:	42a5      	cmp	r5, r4
    21ca:	d109      	bne.n	21e0 <__libc_init_array+0x24>
    21cc:	4e0b      	ldr	r6, [pc, #44]	; (21fc <__libc_init_array+0x40>)
    21ce:	4c0c      	ldr	r4, [pc, #48]	; (2200 <__libc_init_array+0x44>)
    21d0:	f000 f9a4 	bl	251c <_init>
    21d4:	1ba4      	subs	r4, r4, r6
    21d6:	10a4      	asrs	r4, r4, #2
    21d8:	2500      	movs	r5, #0
    21da:	42a5      	cmp	r5, r4
    21dc:	d105      	bne.n	21ea <__libc_init_array+0x2e>
    21de:	bd70      	pop	{r4, r5, r6, pc}
    21e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    21e4:	4798      	blx	r3
    21e6:	3501      	adds	r5, #1
    21e8:	e7ee      	b.n	21c8 <__libc_init_array+0xc>
    21ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    21ee:	4798      	blx	r3
    21f0:	3501      	adds	r5, #1
    21f2:	e7f2      	b.n	21da <__libc_init_array+0x1e>
    21f4:	00002528 	.word	0x00002528
    21f8:	00002528 	.word	0x00002528
    21fc:	00002528 	.word	0x00002528
    2200:	0000252c 	.word	0x0000252c

00002204 <malloc>:
    2204:	4b02      	ldr	r3, [pc, #8]	; (2210 <malloc+0xc>)
    2206:	4601      	mov	r1, r0
    2208:	6818      	ldr	r0, [r3, #0]
    220a:	f000 b803 	b.w	2214 <_malloc_r>
    220e:	bf00      	nop
    2210:	20000000 	.word	0x20000000

00002214 <_malloc_r>:
    2214:	b570      	push	{r4, r5, r6, lr}
    2216:	1ccd      	adds	r5, r1, #3
    2218:	f025 0503 	bic.w	r5, r5, #3
    221c:	3508      	adds	r5, #8
    221e:	2d0c      	cmp	r5, #12
    2220:	bf38      	it	cc
    2222:	250c      	movcc	r5, #12
    2224:	2d00      	cmp	r5, #0
    2226:	4606      	mov	r6, r0
    2228:	db01      	blt.n	222e <_malloc_r+0x1a>
    222a:	42a9      	cmp	r1, r5
    222c:	d903      	bls.n	2236 <_malloc_r+0x22>
    222e:	230c      	movs	r3, #12
    2230:	6033      	str	r3, [r6, #0]
    2232:	2000      	movs	r0, #0
    2234:	bd70      	pop	{r4, r5, r6, pc}
    2236:	f000 f85b 	bl	22f0 <__malloc_lock>
    223a:	4a23      	ldr	r2, [pc, #140]	; (22c8 <_malloc_r+0xb4>)
    223c:	6814      	ldr	r4, [r2, #0]
    223e:	4621      	mov	r1, r4
    2240:	b991      	cbnz	r1, 2268 <_malloc_r+0x54>
    2242:	4c22      	ldr	r4, [pc, #136]	; (22cc <_malloc_r+0xb8>)
    2244:	6823      	ldr	r3, [r4, #0]
    2246:	b91b      	cbnz	r3, 2250 <_malloc_r+0x3c>
    2248:	4630      	mov	r0, r6
    224a:	f000 f841 	bl	22d0 <_sbrk_r>
    224e:	6020      	str	r0, [r4, #0]
    2250:	4629      	mov	r1, r5
    2252:	4630      	mov	r0, r6
    2254:	f000 f83c 	bl	22d0 <_sbrk_r>
    2258:	1c43      	adds	r3, r0, #1
    225a:	d126      	bne.n	22aa <_malloc_r+0x96>
    225c:	230c      	movs	r3, #12
    225e:	6033      	str	r3, [r6, #0]
    2260:	4630      	mov	r0, r6
    2262:	f000 f846 	bl	22f2 <__malloc_unlock>
    2266:	e7e4      	b.n	2232 <_malloc_r+0x1e>
    2268:	680b      	ldr	r3, [r1, #0]
    226a:	1b5b      	subs	r3, r3, r5
    226c:	d41a      	bmi.n	22a4 <_malloc_r+0x90>
    226e:	2b0b      	cmp	r3, #11
    2270:	d90f      	bls.n	2292 <_malloc_r+0x7e>
    2272:	600b      	str	r3, [r1, #0]
    2274:	50cd      	str	r5, [r1, r3]
    2276:	18cc      	adds	r4, r1, r3
    2278:	4630      	mov	r0, r6
    227a:	f000 f83a 	bl	22f2 <__malloc_unlock>
    227e:	f104 000b 	add.w	r0, r4, #11
    2282:	1d23      	adds	r3, r4, #4
    2284:	f020 0007 	bic.w	r0, r0, #7
    2288:	1ac3      	subs	r3, r0, r3
    228a:	d01b      	beq.n	22c4 <_malloc_r+0xb0>
    228c:	425a      	negs	r2, r3
    228e:	50e2      	str	r2, [r4, r3]
    2290:	bd70      	pop	{r4, r5, r6, pc}
    2292:	428c      	cmp	r4, r1
    2294:	bf0d      	iteet	eq
    2296:	6863      	ldreq	r3, [r4, #4]
    2298:	684b      	ldrne	r3, [r1, #4]
    229a:	6063      	strne	r3, [r4, #4]
    229c:	6013      	streq	r3, [r2, #0]
    229e:	bf18      	it	ne
    22a0:	460c      	movne	r4, r1
    22a2:	e7e9      	b.n	2278 <_malloc_r+0x64>
    22a4:	460c      	mov	r4, r1
    22a6:	6849      	ldr	r1, [r1, #4]
    22a8:	e7ca      	b.n	2240 <_malloc_r+0x2c>
    22aa:	1cc4      	adds	r4, r0, #3
    22ac:	f024 0403 	bic.w	r4, r4, #3
    22b0:	42a0      	cmp	r0, r4
    22b2:	d005      	beq.n	22c0 <_malloc_r+0xac>
    22b4:	1a21      	subs	r1, r4, r0
    22b6:	4630      	mov	r0, r6
    22b8:	f000 f80a 	bl	22d0 <_sbrk_r>
    22bc:	3001      	adds	r0, #1
    22be:	d0cd      	beq.n	225c <_malloc_r+0x48>
    22c0:	6025      	str	r5, [r4, #0]
    22c2:	e7d9      	b.n	2278 <_malloc_r+0x64>
    22c4:	bd70      	pop	{r4, r5, r6, pc}
    22c6:	bf00      	nop
    22c8:	2000009c 	.word	0x2000009c
    22cc:	200000a0 	.word	0x200000a0

000022d0 <_sbrk_r>:
    22d0:	b538      	push	{r3, r4, r5, lr}
    22d2:	4c06      	ldr	r4, [pc, #24]	; (22ec <_sbrk_r+0x1c>)
    22d4:	2300      	movs	r3, #0
    22d6:	4605      	mov	r5, r0
    22d8:	4608      	mov	r0, r1
    22da:	6023      	str	r3, [r4, #0]
    22dc:	f7fe fe5c 	bl	f98 <_sbrk>
    22e0:	1c43      	adds	r3, r0, #1
    22e2:	d102      	bne.n	22ea <_sbrk_r+0x1a>
    22e4:	6823      	ldr	r3, [r4, #0]
    22e6:	b103      	cbz	r3, 22ea <_sbrk_r+0x1a>
    22e8:	602b      	str	r3, [r5, #0]
    22ea:	bd38      	pop	{r3, r4, r5, pc}
    22ec:	20000130 	.word	0x20000130

000022f0 <__malloc_lock>:
    22f0:	4770      	bx	lr

000022f2 <__malloc_unlock>:
    22f2:	4770      	bx	lr
    22f4:	682f2e2e 	.word	0x682f2e2e
    22f8:	692f6c61 	.word	0x692f6c61
    22fc:	756c636e 	.word	0x756c636e
    2300:	682f6564 	.word	0x682f6564
    2304:	775f6c61 	.word	0x775f6c61
    2308:	682e7464 	.word	0x682e7464
    230c:	00000000 	.word	0x00000000
    2310:	682f2e2e 	.word	0x682f2e2e
    2314:	732f6c61 	.word	0x732f6c61
    2318:	682f6372 	.word	0x682f6372
    231c:	665f6c61 	.word	0x665f6c61
    2320:	6873616c 	.word	0x6873616c
    2324:	0000632e 	.word	0x0000632e
    2328:	682f2e2e 	.word	0x682f2e2e
    232c:	732f6c61 	.word	0x732f6c61
    2330:	682f6372 	.word	0x682f6372
    2334:	695f6c61 	.word	0x695f6c61
    2338:	735f6332 	.word	0x735f6332
    233c:	6e79735f 	.word	0x6e79735f
    2340:	00632e63 	.word	0x00632e63
    2344:	682f2e2e 	.word	0x682f2e2e
    2348:	732f6c61 	.word	0x732f6c61
    234c:	682f6372 	.word	0x682f6372
    2350:	695f6c61 	.word	0x695f6c61
    2354:	00632e6f 	.word	0x00632e6f
    2358:	682f2e2e 	.word	0x682f2e2e
    235c:	732f6c61 	.word	0x732f6c61
    2360:	682f6372 	.word	0x682f6372
    2364:	715f6c61 	.word	0x715f6c61
    2368:	5f697073 	.word	0x5f697073
    236c:	636e7973 	.word	0x636e7973
    2370:	0000632e 	.word	0x0000632e
    2374:	682f2e2e 	.word	0x682f2e2e
    2378:	732f6c61 	.word	0x732f6c61
    237c:	682f6372 	.word	0x682f6372
    2380:	735f6c61 	.word	0x735f6c61
    2384:	6d5f6970 	.word	0x6d5f6970
    2388:	6e79735f 	.word	0x6e79735f
    238c:	00632e63 	.word	0x00632e63
    2390:	682f2e2e 	.word	0x682f2e2e
    2394:	732f6c61 	.word	0x732f6c61
    2398:	682f6372 	.word	0x682f6372
    239c:	745f6c61 	.word	0x745f6c61
    23a0:	72656d69 	.word	0x72656d69
    23a4:	0000632e 	.word	0x0000632e
    23a8:	682f2e2e 	.word	0x682f2e2e
    23ac:	752f6c61 	.word	0x752f6c61
    23b0:	736c6974 	.word	0x736c6974
    23b4:	6372732f 	.word	0x6372732f
    23b8:	6974752f 	.word	0x6974752f
    23bc:	6c5f736c 	.word	0x6c5f736c
    23c0:	2e747369 	.word	0x2e747369
    23c4:	00000063 	.word	0x00000063
    23c8:	682f2e2e 	.word	0x682f2e2e
    23cc:	6e2f6c70 	.word	0x6e2f6c70
    23d0:	74636d76 	.word	0x74636d76
    23d4:	682f6c72 	.word	0x682f6c72
    23d8:	6e5f6c70 	.word	0x6e5f6c70
    23dc:	74636d76 	.word	0x74636d76
    23e0:	632e6c72 	.word	0x632e6c72
    23e4:	00000000 	.word	0x00000000
    23e8:	682f2e2e 	.word	0x682f2e2e
    23ec:	712f6c70 	.word	0x712f6c70
    23f0:	2f697073 	.word	0x2f697073
    23f4:	5f6c7068 	.word	0x5f6c7068
    23f8:	69707371 	.word	0x69707371
    23fc:	0000632e 	.word	0x0000632e
    2400:	682f2e2e 	.word	0x682f2e2e
    2404:	722f6c70 	.word	0x722f6c70
    2408:	682f6374 	.word	0x682f6374
    240c:	725f6c70 	.word	0x725f6c70
    2410:	632e6374 	.word	0x632e6374
    2414:	00000000 	.word	0x00000000
    2418:	40003000 	.word	0x40003000
    241c:	40003400 	.word	0x40003400
    2420:	41012000 	.word	0x41012000
    2424:	41014000 	.word	0x41014000
    2428:	43000000 	.word	0x43000000
    242c:	43000400 	.word	0x43000400

00002430 <_i2cms>:
	...
    2448:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2458:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    2468:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    2478:	00000000                                ....

0000247c <s25fl116k_interface>:
    247c:	00001bd9 00001c71 00001d09 00001e21     ....q.......!...
    248c:	00001ec9 03d38100 00000000 ffffffff     ................
    249c:	9effffff ffffffe7 ffffffff 00000000     ................
    24ac:	00029400 00000000 ffffffff 00ffffff     ................

000024bc <__sf_fake_stderr>:
	...

000024dc <__sf_fake_stdin>:
	...

000024fc <__sf_fake_stdout>:
	...

0000251c <_init>:
    251c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    251e:	bf00      	nop
    2520:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2522:	bc08      	pop	{r3}
    2524:	469e      	mov	lr, r3
    2526:	4770      	bx	lr

00002528 <__init_array_start>:
    2528:	00000289 	.word	0x00000289

0000252c <_fini>:
    252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    252e:	bf00      	nop
    2530:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2532:	bc08      	pop	{r3}
    2534:	469e      	mov	lr, r3
    2536:	4770      	bx	lr

00002538 <__fini_array_start>:
    2538:	00000265 	.word	0x00000265
