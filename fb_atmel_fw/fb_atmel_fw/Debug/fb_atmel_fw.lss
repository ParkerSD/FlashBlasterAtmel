
fb_atmel_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002800  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00002800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020064  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020064  2**0
                  CONTENTS
  4 .bss          000000d4  20000064  00002864  00020064  2**2
                  ALLOC
  5 .stack        0000c000  20000138  00002938  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
  8 .debug_info   000326e0  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004e21  00000000  00000000  000527cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011468  00000000  00000000  000575ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ec8  00000000  00000000  00068a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001280  00000000  00000000  0006991c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002ea56  00000000  00000000  0006ab9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001bedd  00000000  00000000  000995f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e7156  00000000  00000000  000b54cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000028b8  00000000  00000000  0019c628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 c1 00 20 05 03 00 00 f5 02 00 00 e5 02 00 00     8.. ............
      10:	f5 02 00 00 f5 02 00 00 f5 02 00 00 00 00 00 00     ................
	...
      2c:	f5 02 00 00 f5 02 00 00 00 00 00 00 f5 02 00 00     ................
      3c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      4c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      5c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      6c:	65 17 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     e...............
      7c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      8c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      9c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      ac:	f5 02 00 00 f5 02 00 00 e1 14 00 00 f5 14 00 00     ................
      bc:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      cc:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
      dc:	f5 02 00 00 f5 02 00 00 f5 02 00 00 00 00 00 00     ................
	...
      f4:	b5 16 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     104:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     114:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     124:	f5 02 00 00 9d 03 00 00 f5 02 00 00 f5 02 00 00     ................
     134:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     144:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     154:	f5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     190:	00 00 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1a0:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1b0:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1c0:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     1d0:	f5 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
	...
     20c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     21c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     22c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     23c:	f5 02 00 00 00 00 00 00 f5 02 00 00 f5 02 00 00     ................
     24c:	f5 02 00 00 f5 02 00 00 f5 02 00 00 f5 02 00 00     ................
     25c:	f5 02 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000064 	.word	0x20000064
     280:	00000000 	.word	0x00000000
     284:	00002800 	.word	0x00002800

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002800 	.word	0x00002800
     2c4:	20000068 	.word	0x20000068
     2c8:	00002800 	.word	0x00002800
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:
#include "driver_init.h"
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b02      	ldr	r3, [pc, #8]	; (2dc <atmel_start_init+0xc>)
     2d4:	4798      	blx	r3
	SWD_GPIO_init();
     2d6:	4b02      	ldr	r3, [pc, #8]	; (2e0 <atmel_start_init+0x10>)
     2d8:	4798      	blx	r3
     2da:	bd08      	pop	{r3, pc}
     2dc:	000007a9 	.word	0x000007a9
     2e0:	00000821 	.word	0x00000821

000002e4 <__HardFault_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void __HardFault_Handler(void)
{		
     2e4:	b082      	sub	sp, #8
		volatile int c = 1;
     2e6:	2301      	movs	r3, #1
     2e8:	9301      	str	r3, [sp, #4]
        while (c==1) {
     2ea:	9b01      	ldr	r3, [sp, #4]
     2ec:	2b01      	cmp	r3, #1
     2ee:	d0fc      	beq.n	2ea <__HardFault_Handler+0x6>
        }
}
     2f0:	b002      	add	sp, #8
     2f2:	4770      	bx	lr

000002f4 <Dummy_Handler>:
{
		_irq_clear(SERCOM3_0_IRQn);
}

void Dummy_Handler(void)
{		
     2f4:	b082      	sub	sp, #8
		volatile int c = 1;
     2f6:	2301      	movs	r3, #1
     2f8:	9301      	str	r3, [sp, #4]
        while (c==1) {
     2fa:	9b01      	ldr	r3, [sp, #4]
     2fc:	2b01      	cmp	r3, #1
     2fe:	d0fc      	beq.n	2fa <Dummy_Handler+0x6>
        }
}
     300:	b002      	add	sp, #8
     302:	4770      	bx	lr

00000304 <Reset_Handler>:
{
     304:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     306:	4b1c      	ldr	r3, [pc, #112]	; (378 <Reset_Handler+0x74>)
     308:	4a1c      	ldr	r2, [pc, #112]	; (37c <Reset_Handler+0x78>)
     30a:	429a      	cmp	r2, r3
     30c:	d010      	beq.n	330 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     30e:	4b1c      	ldr	r3, [pc, #112]	; (380 <Reset_Handler+0x7c>)
     310:	4a19      	ldr	r2, [pc, #100]	; (378 <Reset_Handler+0x74>)
     312:	429a      	cmp	r2, r3
     314:	d20c      	bcs.n	330 <Reset_Handler+0x2c>
     316:	3b01      	subs	r3, #1
     318:	1a9b      	subs	r3, r3, r2
     31a:	f023 0303 	bic.w	r3, r3, #3
     31e:	3304      	adds	r3, #4
     320:	4413      	add	r3, r2
     322:	4916      	ldr	r1, [pc, #88]	; (37c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     324:	f851 0b04 	ldr.w	r0, [r1], #4
     328:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     32c:	429a      	cmp	r2, r3
     32e:	d1f9      	bne.n	324 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     330:	4b14      	ldr	r3, [pc, #80]	; (384 <Reset_Handler+0x80>)
     332:	4a15      	ldr	r2, [pc, #84]	; (388 <Reset_Handler+0x84>)
     334:	429a      	cmp	r2, r3
     336:	d20a      	bcs.n	34e <Reset_Handler+0x4a>
     338:	3b01      	subs	r3, #1
     33a:	1a9b      	subs	r3, r3, r2
     33c:	f023 0303 	bic.w	r3, r3, #3
     340:	3304      	adds	r3, #4
     342:	4413      	add	r3, r2
                *pDest++ = 0;
     344:	2100      	movs	r1, #0
     346:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     34a:	4293      	cmp	r3, r2
     34c:	d1fb      	bne.n	346 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     34e:	4b0f      	ldr	r3, [pc, #60]	; (38c <Reset_Handler+0x88>)
     350:	4a0f      	ldr	r2, [pc, #60]	; (390 <Reset_Handler+0x8c>)
     352:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     356:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     358:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     35c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     368:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     36c:	4b09      	ldr	r3, [pc, #36]	; (394 <Reset_Handler+0x90>)
     36e:	4798      	blx	r3
        main();
     370:	4b09      	ldr	r3, [pc, #36]	; (398 <Reset_Handler+0x94>)
     372:	4798      	blx	r3
     374:	e7fe      	b.n	374 <Reset_Handler+0x70>
     376:	bf00      	nop
     378:	20000000 	.word	0x20000000
     37c:	00002800 	.word	0x00002800
     380:	20000064 	.word	0x20000064
     384:	20000138 	.word	0x20000138
     388:	20000064 	.word	0x20000064
     38c:	e000ed00 	.word	0xe000ed00
     390:	00000000 	.word	0x00000000
     394:	000023d5 	.word	0x000023d5
     398:	00001c09 	.word	0x00001c09

0000039c <__SERCOM3_0_Handler>:
{
     39c:	b508      	push	{r3, lr}
		_irq_clear(SERCOM3_0_IRQn);
     39e:	203a      	movs	r0, #58	; 0x3a
     3a0:	4b01      	ldr	r3, [pc, #4]	; (3a8 <__SERCOM3_0_Handler+0xc>)
     3a2:	4798      	blx	r3
     3a4:	bd08      	pop	{r3, pc}
     3a6:	bf00      	nop
     3a8:	00001391 	.word	0x00001391

000003ac <FLASH_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_NVMCTRL_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     3ac:	4a02      	ldr	r2, [pc, #8]	; (3b8 <FLASH_0_CLOCK_init+0xc>)
     3ae:	6913      	ldr	r3, [r2, #16]
     3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     3b4:	6113      	str	r3, [r2, #16]
     3b6:	4770      	bx	lr
     3b8:	40000800 	.word	0x40000800

000003bc <FLASH_0_init>:
{
	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     3bc:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     3be:	4b03      	ldr	r3, [pc, #12]	; (3cc <FLASH_0_init+0x10>)
     3c0:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     3c2:	4903      	ldr	r1, [pc, #12]	; (3d0 <FLASH_0_init+0x14>)
     3c4:	4803      	ldr	r0, [pc, #12]	; (3d4 <FLASH_0_init+0x18>)
     3c6:	4b04      	ldr	r3, [pc, #16]	; (3d8 <FLASH_0_init+0x1c>)
     3c8:	4798      	blx	r3
     3ca:	bd08      	pop	{r3, pc}
     3cc:	000003ad 	.word	0x000003ad
     3d0:	41004000 	.word	0x41004000
     3d4:	200000a8 	.word	0x200000a8
     3d8:	00000d81 	.word	0x00000d81

000003dc <QUAD_SPI_0_PORT_init>:
}

void QUAD_SPI_0_PORT_init(void)
{
     3dc:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3de:	4b5a      	ldr	r3, [pc, #360]	; (548 <QUAD_SPI_0_PORT_init+0x16c>)
     3e0:	f44f 6500 	mov.w	r5, #2048	; 0x800
     3e4:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3e8:	4a58      	ldr	r2, [pc, #352]	; (54c <QUAD_SPI_0_PORT_init+0x170>)
     3ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     3ee:	4858      	ldr	r0, [pc, #352]	; (550 <QUAD_SPI_0_PORT_init+0x174>)
     3f0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3f4:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     3f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3fc:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     400:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     404:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     408:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     40c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     410:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     414:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     418:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     41c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     420:	f44f 7280 	mov.w	r2, #256	; 0x100
     424:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     426:	494b      	ldr	r1, [pc, #300]	; (554 <QUAD_SPI_0_PORT_init+0x178>)
     428:	6299      	str	r1, [r3, #40]	; 0x28
     42a:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     42e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     430:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     432:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     436:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     43a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     43e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     442:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     446:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     44a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     44e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     452:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     456:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     45e:	f44f 7200 	mov.w	r2, #512	; 0x200
     462:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     464:	f501 7180 	add.w	r1, r1, #256	; 0x100
     468:	6299      	str	r1, [r3, #40]	; 0x28
     46a:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     46c:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     46e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     472:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     476:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47a:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     47e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     482:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     486:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     48a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     48e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     492:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     49a:	f44f 6180 	mov.w	r1, #1024	; 0x400
     49e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a0:	4a2d      	ldr	r2, [pc, #180]	; (558 <QUAD_SPI_0_PORT_init+0x17c>)
     4a2:	629a      	str	r2, [r3, #40]	; 0x28
     4a4:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a6:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4a8:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     4ac:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4b0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b4:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4bc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4c4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4c8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4cc:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4d4:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4d6:	4a21      	ldr	r2, [pc, #132]	; (55c <QUAD_SPI_0_PORT_init+0x180>)
     4d8:	629a      	str	r2, [r3, #40]	; 0x28
     4da:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4dc:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4de:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     4e2:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4e6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ea:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     4ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4f6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4fa:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     502:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     50a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     50e:	4a14      	ldr	r2, [pc, #80]	; (560 <QUAD_SPI_0_PORT_init+0x184>)
     510:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     514:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     518:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     51c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     520:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     524:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     528:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     52c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     530:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     534:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     538:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     53c:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     540:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     544:	bc30      	pop	{r4, r5}
     546:	4770      	bx	lr
     548:	41008000 	.word	0x41008000
     54c:	40020800 	.word	0x40020800
     550:	c0020000 	.word	0xc0020000
     554:	40000100 	.word	0x40000100
     558:	40000400 	.word	0x40000400
     55c:	40000800 	.word	0x40000800
     560:	40020400 	.word	0x40020400

00000564 <QUAD_SPI_0_CLOCK_init>:
}

static inline void hri_mclk_set_AHBMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     564:	4b06      	ldr	r3, [pc, #24]	; (580 <QUAD_SPI_0_CLOCK_init+0x1c>)
     566:	691a      	ldr	r2, [r3, #16]
     568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     56c:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_AHBMASK_QSPI_2X_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     56e:	691a      	ldr	r2, [r3, #16]
     570:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     574:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     576:	69da      	ldr	r2, [r3, #28]
     578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     57c:	61da      	str	r2, [r3, #28]
     57e:	4770      	bx	lr
     580:	40000800 	.word	0x40000800

00000584 <QUAD_SPI_0_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QUAD_SPI_0_init(void)
{
     584:	b508      	push	{r3, lr}
	QUAD_SPI_0_CLOCK_init();
     586:	4b04      	ldr	r3, [pc, #16]	; (598 <QUAD_SPI_0_init+0x14>)
     588:	4798      	blx	r3
	qspi_sync_init(&QUAD_SPI_0, QSPI);
     58a:	4904      	ldr	r1, [pc, #16]	; (59c <QUAD_SPI_0_init+0x18>)
     58c:	4804      	ldr	r0, [pc, #16]	; (5a0 <QUAD_SPI_0_init+0x1c>)
     58e:	4b05      	ldr	r3, [pc, #20]	; (5a4 <QUAD_SPI_0_init+0x20>)
     590:	4798      	blx	r3
	QUAD_SPI_0_PORT_init();
     592:	4b05      	ldr	r3, [pc, #20]	; (5a8 <QUAD_SPI_0_init+0x24>)
     594:	4798      	blx	r3
     596:	bd08      	pop	{r3, pc}
     598:	00000565 	.word	0x00000565
     59c:	42003400 	.word	0x42003400
     5a0:	200000e0 	.word	0x200000e0
     5a4:	00000fdd 	.word	0x00000fdd
     5a8:	000003dd 	.word	0x000003dd

000005ac <QUAD_SPI_0_deinit>:
}

void QUAD_SPI_0_deinit(void)
{
     5ac:	b508      	push	{r3, lr}
	qspi_sync_deinit(&QUAD_SPI_0);
     5ae:	4802      	ldr	r0, [pc, #8]	; (5b8 <QUAD_SPI_0_deinit+0xc>)
     5b0:	4b02      	ldr	r3, [pc, #8]	; (5bc <QUAD_SPI_0_deinit+0x10>)
     5b2:	4798      	blx	r3
     5b4:	bd08      	pop	{r3, pc}
     5b6:	bf00      	nop
     5b8:	200000e0 	.word	0x200000e0
     5bc:	0000100d 	.word	0x0000100d

000005c0 <SPI_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5c0:	4b28      	ldr	r3, [pc, #160]	; (664 <SPI_0_PORT_init+0xa4>)
     5c2:	2210      	movs	r2, #16
     5c4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5c6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5c8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5cc:	629a      	str	r2, [r3, #40]	; 0x28
     5ce:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     5d2:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5dc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5e4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5e8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ec:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5f0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     5f4:	2220      	movs	r2, #32
     5f6:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     5f8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     5fe:	629a      	str	r2, [r3, #40]	; 0x28
     600:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     602:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     606:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     60a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     60e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     612:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     616:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     61a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     61e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     622:	2240      	movs	r2, #64	; 0x40
     624:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     626:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     62a:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     62e:	629a      	str	r2, [r3, #40]	; 0x28
     630:	4a0d      	ldr	r2, [pc, #52]	; (668 <SPI_0_PORT_init+0xa8>)
     632:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     634:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     638:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     63c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     640:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     644:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     648:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     650:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     654:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     658:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     65c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     660:	4770      	bx	lr
     662:	bf00      	nop
     664:	41008000 	.word	0x41008000
     668:	c0020000 	.word	0xc0020000

0000066c <SPI_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     66c:	4b06      	ldr	r3, [pc, #24]	; (688 <SPI_0_CLOCK_init+0x1c>)
     66e:	2240      	movs	r2, #64	; 0x40
     670:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
     674:	2243      	movs	r2, #67	; 0x43
     676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;
     67a:	4a04      	ldr	r2, [pc, #16]	; (68c <SPI_0_CLOCK_init+0x20>)
     67c:	6953      	ldr	r3, [r2, #20]
     67e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     682:	6153      	str	r3, [r2, #20]
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	40001c00 	.word	0x40001c00
     68c:	40000800 	.word	0x40000800

00000690 <SPI_0_init>:

	hri_mclk_set_APBAMASK_SERCOM0_bit(MCLK);
}

void SPI_0_init(void)
{
     690:	b508      	push	{r3, lr}
	SPI_0_CLOCK_init();
     692:	4b04      	ldr	r3, [pc, #16]	; (6a4 <SPI_0_init+0x14>)
     694:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SERCOM0);
     696:	4904      	ldr	r1, [pc, #16]	; (6a8 <SPI_0_init+0x18>)
     698:	4804      	ldr	r0, [pc, #16]	; (6ac <SPI_0_init+0x1c>)
     69a:	4b05      	ldr	r3, [pc, #20]	; (6b0 <SPI_0_init+0x20>)
     69c:	4798      	blx	r3
	SPI_0_PORT_init();
     69e:	4b05      	ldr	r3, [pc, #20]	; (6b4 <SPI_0_init+0x24>)
     6a0:	4798      	blx	r3
     6a2:	bd08      	pop	{r3, pc}
     6a4:	0000066d 	.word	0x0000066d
     6a8:	40003000 	.word	0x40003000
     6ac:	200000c8 	.word	0x200000c8
     6b0:	0000108d 	.word	0x0000108d
     6b4:	000005c1 	.word	0x000005c1

000006b8 <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6b8:	4b16      	ldr	r3, [pc, #88]	; (714 <I2C_0_PORT_init+0x5c>)
     6ba:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     6be:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6c6:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     6ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6ce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     6d6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     6da:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     6de:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     6e6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     6ea:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     6ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6f2:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     702:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     706:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     70a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     70e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     712:	4770      	bx	lr
     714:	41008000 	.word	0x41008000

00000718 <I2C_0_CLOCK_init>:
     718:	4b06      	ldr	r3, [pc, #24]	; (734 <I2C_0_CLOCK_init+0x1c>)
     71a:	2240      	movs	r2, #64	; 0x40
     71c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     720:	2243      	movs	r2, #67	; 0x43
     722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     726:	4a04      	ldr	r2, [pc, #16]	; (738 <I2C_0_CLOCK_init+0x20>)
     728:	6993      	ldr	r3, [r2, #24]
     72a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     72e:	6193      	str	r3, [r2, #24]
     730:	4770      	bx	lr
     732:	bf00      	nop
     734:	40001c00 	.word	0x40001c00
     738:	40000800 	.word	0x40000800

0000073c <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     73c:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     73e:	4b04      	ldr	r3, [pc, #16]	; (750 <I2C_0_init+0x14>)
     740:	4798      	blx	r3
	i2c_s_sync_init(&I2C_0, SERCOM3);
     742:	4904      	ldr	r1, [pc, #16]	; (754 <I2C_0_init+0x18>)
     744:	4804      	ldr	r0, [pc, #16]	; (758 <I2C_0_init+0x1c>)
     746:	4b05      	ldr	r3, [pc, #20]	; (75c <I2C_0_init+0x20>)
     748:	4798      	blx	r3
	I2C_0_PORT_init();
     74a:	4b05      	ldr	r3, [pc, #20]	; (760 <I2C_0_init+0x24>)
     74c:	4798      	blx	r3
     74e:	bd08      	pop	{r3, pc}
     750:	00000719 	.word	0x00000719
     754:	41014000 	.word	0x41014000
     758:	200000e4 	.word	0x200000e4
     75c:	00000e9d 	.word	0x00000e9d
     760:	000006b9 	.word	0x000006b9

00000764 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     764:	4a02      	ldr	r2, [pc, #8]	; (770 <WDT_0_CLOCK_init+0xc>)
     766:	6953      	ldr	r3, [r2, #20]
     768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     76c:	6153      	str	r3, [r2, #20]
     76e:	4770      	bx	lr
     770:	40000800 	.word	0x40000800

00000774 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     774:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     776:	4b06      	ldr	r3, [pc, #24]	; (790 <WDT_0_init+0x1c>)
     778:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     77a:	2248      	movs	r2, #72	; 0x48
     77c:	4905      	ldr	r1, [pc, #20]	; (794 <WDT_0_init+0x20>)
     77e:	2001      	movs	r0, #1
     780:	4b05      	ldr	r3, [pc, #20]	; (798 <WDT_0_init+0x24>)
     782:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     784:	4805      	ldr	r0, [pc, #20]	; (79c <WDT_0_init+0x28>)
     786:	4b06      	ldr	r3, [pc, #24]	; (7a0 <WDT_0_init+0x2c>)
     788:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     78a:	4b06      	ldr	r3, [pc, #24]	; (7a4 <WDT_0_init+0x30>)
     78c:	4798      	blx	r3
     78e:	bd08      	pop	{r3, pc}
     790:	00000765 	.word	0x00000765
     794:	000025b8 	.word	0x000025b8
     798:	000012fd 	.word	0x000012fd
     79c:	200000c4 	.word	0x200000c4
     7a0:	40002000 	.word	0x40002000
     7a4:	00001b79 	.word	0x00001b79

000007a8 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     7a8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     7aa:	4b0b      	ldr	r3, [pc, #44]	; (7d8 <system_init+0x30>)
     7ac:	4798      	blx	r3
	init_mcu();

	FLASH_0_init();
     7ae:	4b0b      	ldr	r3, [pc, #44]	; (7dc <system_init+0x34>)
     7b0:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     7b2:	4a0b      	ldr	r2, [pc, #44]	; (7e0 <system_init+0x38>)
     7b4:	6953      	ldr	r3, [r2, #20]
     7b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     7ba:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     7bc:	4b09      	ldr	r3, [pc, #36]	; (7e4 <system_init+0x3c>)
     7be:	4798      	blx	r3
     7c0:	4602      	mov	r2, r0
     7c2:	4909      	ldr	r1, [pc, #36]	; (7e8 <system_init+0x40>)
     7c4:	4809      	ldr	r0, [pc, #36]	; (7ec <system_init+0x44>)
     7c6:	4b0a      	ldr	r3, [pc, #40]	; (7f0 <system_init+0x48>)
     7c8:	4798      	blx	r3

	TIMER_0_init();

	SPI_0_init();
     7ca:	4b0a      	ldr	r3, [pc, #40]	; (7f4 <system_init+0x4c>)
     7cc:	4798      	blx	r3

	I2C_0_init();
     7ce:	4b0a      	ldr	r3, [pc, #40]	; (7f8 <system_init+0x50>)
     7d0:	4798      	blx	r3

	WDT_0_init();
     7d2:	4b0a      	ldr	r3, [pc, #40]	; (7fc <system_init+0x54>)
     7d4:	4798      	blx	r3
     7d6:	bd08      	pop	{r3, pc}
     7d8:	000013d1 	.word	0x000013d1
     7dc:	000003bd 	.word	0x000003bd
     7e0:	40000800 	.word	0x40000800
     7e4:	00001761 	.word	0x00001761
     7e8:	40002400 	.word	0x40002400
     7ec:	200000f0 	.word	0x200000f0
     7f0:	000012c1 	.word	0x000012c1
     7f4:	00000691 	.word	0x00000691
     7f8:	0000073d 	.word	0x0000073d
     7fc:	00000775 	.word	0x00000775

00000800 <nor_flash_qspi_init>:
}


void nor_flash_qspi_init(void)
{
     800:	b508      	push	{r3, lr}
	QUAD_SPI_0_init();
     802:	4b02      	ldr	r3, [pc, #8]	; (80c <nor_flash_qspi_init+0xc>)
     804:	4798      	blx	r3
	spi_nor_flash_init();
     806:	4b02      	ldr	r3, [pc, #8]	; (810 <nor_flash_qspi_init+0x10>)
     808:	4798      	blx	r3
     80a:	bd08      	pop	{r3, pc}
     80c:	00000585 	.word	0x00000585
     810:	000021f9 	.word	0x000021f9

00000814 <nor_flash_qspi_deinit>:
}
void nor_flash_qspi_deinit(void)
{
     814:	b508      	push	{r3, lr}
	QUAD_SPI_0_deinit();
     816:	4b01      	ldr	r3, [pc, #4]	; (81c <nor_flash_qspi_deinit+0x8>)
     818:	4798      	blx	r3
     81a:	bd08      	pop	{r3, pc}
     81c:	000005ad 	.word	0x000005ad

00000820 <SWD_GPIO_init>:
}

void SWD_GPIO_init(void)
{
     820:	b410      	push	{r4}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     822:	4b2d      	ldr	r3, [pc, #180]	; (8d8 <SWD_GPIO_init+0xb8>)
     824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     828:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     82a:	492c      	ldr	r1, [pc, #176]	; (8dc <SWD_GPIO_init+0xbc>)
     82c:	6299      	str	r1, [r3, #40]	; 0x28
     82e:	482c      	ldr	r0, [pc, #176]	; (8e0 <SWD_GPIO_init+0xc0>)
     830:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     832:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     834:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
     838:	f041 0104 	orr.w	r1, r1, #4
     83c:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     840:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     846:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     848:	4a26      	ldr	r2, [pc, #152]	; (8e4 <SWD_GPIO_init+0xc4>)
     84a:	629a      	str	r2, [r3, #40]	; 0x28
     84c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     850:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     852:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     854:	f893 104d 	ldrb.w	r1, [r3, #77]	; 0x4d
     858:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     85c:	f883 104d 	strb.w	r1, [r3, #77]	; 0x4d
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     860:	2101      	movs	r1, #1
     862:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     864:	4c20      	ldr	r4, [pc, #128]	; (8e8 <SWD_GPIO_init+0xc8>)
     866:	629c      	str	r4, [r3, #40]	; 0x28
     868:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     86a:	6199      	str	r1, [r3, #24]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     86c:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
     870:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     874:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     878:	2102      	movs	r1, #2
     87a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     87c:	3401      	adds	r4, #1
     87e:	629c      	str	r4, [r3, #40]	; 0x28
     880:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     882:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     884:	f893 1041 	ldrb.w	r1, [r3, #65]	; 0x41
     888:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     88c:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     890:	2108      	movs	r1, #8
     892:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     896:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     89a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
     89e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     8a2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8a6:	f893 10c3 	ldrb.w	r1, [r3, #195]	; 0xc3
     8aa:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
     8ae:	f883 10c3 	strb.w	r1, [r3, #195]	; 0xc3
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     8b2:	2104      	movs	r1, #4
     8b4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8b8:	480c      	ldr	r0, [pc, #48]	; (8ec <SWD_GPIO_init+0xcc>)
     8ba:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     8be:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8c2:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     8c6:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
     8ca:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     8ce:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	gpio_set_pin_direction(RST, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(RST, false);
	gpio_set_pin_pull_mode(RST, GPIO_PULL_OFF);
	
	
     8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
     8d6:	4770      	bx	lr
     8d8:	41008000 	.word	0x41008000
     8dc:	40021000 	.word	0x40021000
     8e0:	c0020000 	.word	0xc0020000
     8e4:	40002000 	.word	0x40002000
     8e8:	40000001 	.word	0x40000001
     8ec:	40000004 	.word	0x40000004

000008f0 <SWD_tx>:
	timer_start(&TIMER_0);
}


void SWD_tx(uint8_t* buffer, uint16_t length) //SPI MOSI
{	
     8f0:	b570      	push	{r4, r5, r6, lr}
     8f2:	b082      	sub	sp, #8
     8f4:	4605      	mov	r5, r0
     8f6:	460e      	mov	r6, r1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     8f8:	4b09      	ldr	r3, [pc, #36]	; (920 <SWD_tx+0x30>)
     8fa:	2201      	movs	r2, #1
     8fc:	619a      	str	r2, [r3, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     8fe:	2202      	movs	r2, #2
     900:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(MOSI_EN, true);
	gpio_set_pin_level(MISO_EN, false);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     902:	4c08      	ldr	r4, [pc, #32]	; (924 <SWD_tx+0x34>)
     904:	a901      	add	r1, sp, #4
     906:	4620      	mov	r0, r4
     908:	4b07      	ldr	r3, [pc, #28]	; (928 <SWD_tx+0x38>)
     90a:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     90c:	4620      	mov	r0, r4
     90e:	4b07      	ldr	r3, [pc, #28]	; (92c <SWD_tx+0x3c>)
     910:	4798      	blx	r3
	io_write(io, buffer, length);
     912:	4632      	mov	r2, r6
     914:	4629      	mov	r1, r5
     916:	9801      	ldr	r0, [sp, #4]
     918:	4b05      	ldr	r3, [pc, #20]	; (930 <SWD_tx+0x40>)
     91a:	4798      	blx	r3
}
     91c:	b002      	add	sp, #8
     91e:	bd70      	pop	{r4, r5, r6, pc}
     920:	41008000 	.word	0x41008000
     924:	200000c8 	.word	0x200000c8
     928:	000011bd 	.word	0x000011bd
     92c:	000010dd 	.word	0x000010dd
     930:	00000f7d 	.word	0x00000f7d

00000934 <SWD_rx>:

void SWD_rx(uint8_t* buffer, uint16_t length) //SPI MISO
{
     934:	b570      	push	{r4, r5, r6, lr}
     936:	b082      	sub	sp, #8
     938:	4605      	mov	r5, r0
     93a:	460e      	mov	r6, r1
     93c:	4b09      	ldr	r3, [pc, #36]	; (964 <SWD_rx+0x30>)
     93e:	2201      	movs	r2, #1
     940:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     942:	2202      	movs	r2, #2
     944:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(MOSI_EN, false);
	gpio_set_pin_level(MISO_EN, true);
	
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
     946:	4c08      	ldr	r4, [pc, #32]	; (968 <SWD_rx+0x34>)
     948:	a901      	add	r1, sp, #4
     94a:	4620      	mov	r0, r4
     94c:	4b07      	ldr	r3, [pc, #28]	; (96c <SWD_rx+0x38>)
     94e:	4798      	blx	r3

	spi_m_sync_enable(&SPI_0);
     950:	4620      	mov	r0, r4
     952:	4b07      	ldr	r3, [pc, #28]	; (970 <SWD_rx+0x3c>)
     954:	4798      	blx	r3
	io_read(io, buffer, length);
     956:	4632      	mov	r2, r6
     958:	4629      	mov	r1, r5
     95a:	9801      	ldr	r0, [sp, #4]
     95c:	4b05      	ldr	r3, [pc, #20]	; (974 <SWD_rx+0x40>)
     95e:	4798      	blx	r3
}
     960:	b002      	add	sp, #8
     962:	bd70      	pop	{r4, r5, r6, pc}
     964:	41008000 	.word	0x41008000
     968:	200000c8 	.word	0x200000c8
     96c:	000011bd 	.word	0x000011bd
     970:	000010dd 	.word	0x000010dd
     974:	00000fad 	.word	0x00000fad

00000978 <I2C_read>:
	spi_m_sync_enable(&SPI_0);
	_spi_m_sync_trans(&SPI_0.dev, &spi_istruct);//(struct _spi_m_sync_dev *dev, const struct spi_msg *msg);
}

void I2C_read(uint8_t* buffer, uint16_t length)
{
     978:	b570      	push	{r4, r5, r6, lr}
     97a:	b082      	sub	sp, #8
     97c:	4605      	mov	r5, r0
     97e:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     980:	4c09      	ldr	r4, [pc, #36]	; (9a8 <I2C_read+0x30>)
     982:	a901      	add	r1, sp, #4
     984:	4620      	mov	r0, r4
     986:	4b09      	ldr	r3, [pc, #36]	; (9ac <I2C_read+0x34>)
     988:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     98a:	2110      	movs	r1, #16
     98c:	4620      	mov	r0, r4
     98e:	4b08      	ldr	r3, [pc, #32]	; (9b0 <I2C_read+0x38>)
     990:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     992:	4620      	mov	r0, r4
     994:	4b07      	ldr	r3, [pc, #28]	; (9b4 <I2C_read+0x3c>)
     996:	4798      	blx	r3

	io_read(io, buffer, length);
     998:	4632      	mov	r2, r6
     99a:	4629      	mov	r1, r5
     99c:	9801      	ldr	r0, [sp, #4]
     99e:	4b06      	ldr	r3, [pc, #24]	; (9b8 <I2C_read+0x40>)
     9a0:	4798      	blx	r3
}
     9a2:	b002      	add	sp, #8
     9a4:	bd70      	pop	{r4, r5, r6, pc}
     9a6:	bf00      	nop
     9a8:	200000e4 	.word	0x200000e4
     9ac:	00000f51 	.word	0x00000f51
     9b0:	00000ee5 	.word	0x00000ee5
     9b4:	00000f29 	.word	0x00000f29
     9b8:	00000fad 	.word	0x00000fad

000009bc <I2C_write>:

void I2C_write(uint8_t* buffer, uint16_t length)
{
     9bc:	b570      	push	{r4, r5, r6, lr}
     9be:	b082      	sub	sp, #8
     9c0:	4605      	mov	r5, r0
     9c2:	460e      	mov	r6, r1
	struct io_descriptor *io;
	
	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     9c4:	4c09      	ldr	r4, [pc, #36]	; (9ec <I2C_write+0x30>)
     9c6:	a901      	add	r1, sp, #4
     9c8:	4620      	mov	r0, r4
     9ca:	4b09      	ldr	r3, [pc, #36]	; (9f0 <I2C_write+0x34>)
     9cc:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, I2C_ADDR);
     9ce:	2110      	movs	r1, #16
     9d0:	4620      	mov	r0, r4
     9d2:	4b08      	ldr	r3, [pc, #32]	; (9f4 <I2C_write+0x38>)
     9d4:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     9d6:	4620      	mov	r0, r4
     9d8:	4b07      	ldr	r3, [pc, #28]	; (9f8 <I2C_write+0x3c>)
     9da:	4798      	blx	r3

	io_write(io, buffer, length);
     9dc:	4632      	mov	r2, r6
     9de:	4629      	mov	r1, r5
     9e0:	9801      	ldr	r0, [sp, #4]
     9e2:	4b06      	ldr	r3, [pc, #24]	; (9fc <I2C_write+0x40>)
     9e4:	4798      	blx	r3
}
     9e6:	b002      	add	sp, #8
     9e8:	bd70      	pop	{r4, r5, r6, pc}
     9ea:	bf00      	nop
     9ec:	200000e4 	.word	0x200000e4
     9f0:	00000f51 	.word	0x00000f51
     9f4:	00000ee5 	.word	0x00000ee5
     9f8:	00000f29 	.word	0x00000f29
     9fc:	00000f7d 	.word	0x00000f7d

00000a00 <swd_m4_reset>:
	//NOTE 1: AP reads return result from previous read so it's necessary to read twice and discard first
	//NOTE 2: Driving the line low results in a small current drain at target
}

void swd_m4_reset(void)
{
     a00:	b510      	push	{r4, lr}
	//reset core
	swd_clear_abort_reg();
     a02:	4b08      	ldr	r3, [pc, #32]	; (a24 <swd_m4_reset+0x24>)
     a04:	4798      	blx	r3
	swd_write(req_write_select, AP_PORT_0);
     a06:	2100      	movs	r1, #0
     a08:	20b1      	movs	r0, #177	; 0xb1
     a0a:	4c07      	ldr	r4, [pc, #28]	; (a28 <swd_m4_reset+0x28>)
     a0c:	47a0      	blx	r4
	swd_write(req_write_tar, _AIRCR);
     a0e:	4907      	ldr	r1, [pc, #28]	; (a2c <swd_m4_reset+0x2c>)
     a10:	208b      	movs	r0, #139	; 0x8b
     a12:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     a14:	4906      	ldr	r1, [pc, #24]	; (a30 <swd_m4_reset+0x30>)
     a16:	20a3      	movs	r0, #163	; 0xa3
     a18:	47a0      	blx	r4
	swd_write(req_write_drw, RESET_CORE);
     a1a:	4906      	ldr	r1, [pc, #24]	; (a34 <swd_m4_reset+0x34>)
     a1c:	20bb      	movs	r0, #187	; 0xbb
     a1e:	47a0      	blx	r4
     a20:	bd10      	pop	{r4, pc}
     a22:	bf00      	nop
     a24:	00002229 	.word	0x00002229
     a28:	000022b1 	.word	0x000022b1
     a2c:	e000ed0c 	.word	0xe000ed0c
     a30:	23000012 	.word	0x23000012
     a34:	05fa0004 	.word	0x05fa0004

00000a38 <swd_m4_startup>:
}

uint32_t swd_m4_startup(void)
{
     a38:	b570      	push	{r4, r5, r6, lr}
	uint32_t ctrl_reg = swd_read(req_read_ctrl_stat); // should return 0x00
     a3a:	208d      	movs	r0, #141	; 0x8d
     a3c:	4c29      	ldr	r4, [pc, #164]	; (ae4 <swd_m4_startup+0xac>)
     a3e:	47a0      	blx	r4
		
	swd_write(req_write_ctrl_stat, SYS_DBG_PWRUP); // pwrup debug and sys
     a40:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
     a44:	20a9      	movs	r0, #169	; 0xa9
     a46:	4b28      	ldr	r3, [pc, #160]	; (ae8 <swd_m4_startup+0xb0>)
     a48:	4798      	blx	r3
	ctrl_reg = swd_read(req_read_ctrl_stat);
     a4a:	208d      	movs	r0, #141	; 0x8d
     a4c:	47a0      	blx	r4
	if((ctrl_reg & PWRUP_MASK) != PWRUP_MASK) // check pwrup status
     a4e:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
     a52:	f1b0 4f70 	cmp.w	r0, #4026531840	; 0xf0000000
     a56:	d004      	beq.n	a62 <swd_m4_startup+0x2a>
	{
		i2c_send_error(error_no_dbg_pwr);
     a58:	2001      	movs	r0, #1
     a5a:	4b24      	ldr	r3, [pc, #144]	; (aec <swd_m4_startup+0xb4>)
     a5c:	4798      	blx	r3
		return f_err; 
     a5e:	2001      	movs	r0, #1
     a60:	bd70      	pop	{r4, r5, r6, pc}
	}
				
	swd_write(req_write_csw, CSW_AUTOINC_OFF);
     a62:	4923      	ldr	r1, [pc, #140]	; (af0 <swd_m4_startup+0xb8>)
     a64:	20a3      	movs	r0, #163	; 0xa3
     a66:	4c20      	ldr	r4, [pc, #128]	; (ae8 <swd_m4_startup+0xb0>)
     a68:	47a0      	blx	r4
	swd_write(req_write_select, AP_PORT_F);// select AP port 0
     a6a:	21f0      	movs	r1, #240	; 0xf0
     a6c:	20b1      	movs	r0, #177	; 0xb1
     a6e:	47a0      	blx	r4
	swd_read(req_read_idr);
     a70:	209f      	movs	r0, #159	; 0x9f
     a72:	4c1c      	ldr	r4, [pc, #112]	; (ae4 <swd_m4_startup+0xac>)
     a74:	47a0      	blx	r4
	uint32_t idr_value = swd_read(req_read_idr);
     a76:	209f      	movs	r0, #159	; 0x9f
     a78:	47a0      	blx	r4
	if(idr_value == IDR_DEBUG_LOCKED)
     a7a:	4b1e      	ldr	r3, [pc, #120]	; (af4 <swd_m4_startup+0xbc>)
     a7c:	4298      	cmp	r0, r3
     a7e:	d02b      	beq.n	ad8 <swd_m4_startup+0xa0>
		i2c_send_error(error_dbg_locked);
		return f_err; 
	}
				
	//halt core
	swd_clear_abort_reg();
     a80:	4e1d      	ldr	r6, [pc, #116]	; (af8 <swd_m4_startup+0xc0>)
     a82:	47b0      	blx	r6
	swd_write(req_write_select, AP_PORT_0);
     a84:	2100      	movs	r1, #0
     a86:	20b1      	movs	r0, #177	; 0xb1
     a88:	4c17      	ldr	r4, [pc, #92]	; (ae8 <swd_m4_startup+0xb0>)
     a8a:	47a0      	blx	r4
	swd_write(req_write_tar, _DHCSR);
     a8c:	491b      	ldr	r1, [pc, #108]	; (afc <swd_m4_startup+0xc4>)
     a8e:	208b      	movs	r0, #139	; 0x8b
     a90:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     a92:	4d1b      	ldr	r5, [pc, #108]	; (b00 <swd_m4_startup+0xc8>)
     a94:	4629      	mov	r1, r5
     a96:	20a3      	movs	r0, #163	; 0xa3
     a98:	47a0      	blx	r4
	swd_write(req_write_drw, HALT_CORE);
     a9a:	491a      	ldr	r1, [pc, #104]	; (b04 <swd_m4_startup+0xcc>)
     a9c:	20bb      	movs	r0, #187	; 0xbb
     a9e:	47a0      	blx	r4
				
	//enable halt on reset
	swd_clear_abort_reg();
     aa0:	47b0      	blx	r6
	swd_write(req_write_select, AP_PORT_0);
     aa2:	2100      	movs	r1, #0
     aa4:	20b1      	movs	r0, #177	; 0xb1
     aa6:	47a0      	blx	r4
	swd_write(req_write_tar, _DEMCR);
     aa8:	4917      	ldr	r1, [pc, #92]	; (b08 <swd_m4_startup+0xd0>)
     aaa:	208b      	movs	r0, #139	; 0x8b
     aac:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     aae:	4629      	mov	r1, r5
     ab0:	20a3      	movs	r0, #163	; 0xa3
     ab2:	47a0      	blx	r4
	swd_write(req_write_drw, EN_HALT_ON_RST);
     ab4:	2101      	movs	r1, #1
     ab6:	20bb      	movs	r0, #187	; 0xbb
     ab8:	47a0      	blx	r4
				
	//reset core
	swd_clear_abort_reg();
     aba:	47b0      	blx	r6
	swd_write(req_write_select, AP_PORT_0);
     abc:	2100      	movs	r1, #0
     abe:	20b1      	movs	r0, #177	; 0xb1
     ac0:	47a0      	blx	r4
	swd_write(req_write_tar, _AIRCR);
     ac2:	4912      	ldr	r1, [pc, #72]	; (b0c <swd_m4_startup+0xd4>)
     ac4:	208b      	movs	r0, #139	; 0x8b
     ac6:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     ac8:	4629      	mov	r1, r5
     aca:	20a3      	movs	r0, #163	; 0xa3
     acc:	47a0      	blx	r4
	swd_write(req_write_drw, RESET_CORE);
     ace:	4910      	ldr	r1, [pc, #64]	; (b10 <swd_m4_startup+0xd8>)
     ad0:	20bb      	movs	r0, #187	; 0xbb
     ad2:	47a0      	blx	r4
	
	return f_ok; 
     ad4:	2000      	movs	r0, #0
}
     ad6:	bd70      	pop	{r4, r5, r6, pc}
		i2c_send_error(error_dbg_locked);
     ad8:	2002      	movs	r0, #2
     ada:	4b04      	ldr	r3, [pc, #16]	; (aec <swd_m4_startup+0xb4>)
     adc:	4798      	blx	r3
		return f_err; 
     ade:	2001      	movs	r0, #1
     ae0:	bd70      	pop	{r4, r5, r6, pc}
     ae2:	bf00      	nop
     ae4:	00002311 	.word	0x00002311
     ae8:	000022b1 	.word	0x000022b1
     aec:	000023ad 	.word	0x000023ad
     af0:	23000002 	.word	0x23000002
     af4:	16e60001 	.word	0x16e60001
     af8:	00002229 	.word	0x00002229
     afc:	e000edf0 	.word	0xe000edf0
     b00:	23000012 	.word	0x23000012
     b04:	a05f0003 	.word	0xa05f0003
     b08:	e000edfc 	.word	0xe000edfc
     b0c:	e000ed0c 	.word	0xe000ed0c
     b10:	05fa0004 	.word	0x05fa0004

00000b14 <NRF52840_program>:

uint32_t NRF52840_program(uint8_t* qspi_buff, uint32_t start_address)
{
     b14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b18:	4607      	mov	r7, r0
     b1a:	4688      	mov	r8, r1
	//-------------------------------NRF52840 specific-------------------------------// 
	
	swd_clear_abort_reg();
     b1c:	4d46      	ldr	r5, [pc, #280]	; (c38 <NRF52840_program+0x124>)
     b1e:	47a8      	blx	r5
	swd_write(req_write_select, AP_PORT_0);
     b20:	2100      	movs	r1, #0
     b22:	20b1      	movs	r0, #177	; 0xb1
     b24:	4c45      	ldr	r4, [pc, #276]	; (c3c <NRF52840_program+0x128>)
     b26:	47a0      	blx	r4
	swd_write(req_write_tar, NRF52_NVMC_CONFIG);
     b28:	4945      	ldr	r1, [pc, #276]	; (c40 <NRF52840_program+0x12c>)
     b2a:	208b      	movs	r0, #139	; 0x8b
     b2c:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     b2e:	4e45      	ldr	r6, [pc, #276]	; (c44 <NRF52840_program+0x130>)
     b30:	4631      	mov	r1, r6
     b32:	20a3      	movs	r0, #163	; 0xa3
     b34:	47a0      	blx	r4
	swd_write(req_write_drw, ERASE_ENABLE); //enable erase cmd
     b36:	2102      	movs	r1, #2
     b38:	20bb      	movs	r0, #187	; 0xbb
     b3a:	47a0      	blx	r4
				
	swd_clear_abort_reg();
     b3c:	47a8      	blx	r5
	swd_write(req_write_select, AP_PORT_0);
     b3e:	2100      	movs	r1, #0
     b40:	20b1      	movs	r0, #177	; 0xb1
     b42:	47a0      	blx	r4
	swd_write(req_write_tar, NRF52_NVMC_ERASE_ALL);
     b44:	4940      	ldr	r1, [pc, #256]	; (c48 <NRF52840_program+0x134>)
     b46:	208b      	movs	r0, #139	; 0x8b
     b48:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     b4a:	4631      	mov	r1, r6
     b4c:	20a3      	movs	r0, #163	; 0xa3
     b4e:	47a0      	blx	r4
	swd_write(req_write_drw, ERASE_ALL); //erase all cmd
     b50:	2101      	movs	r1, #1
     b52:	20bb      	movs	r0, #187	; 0xbb
     b54:	47a0      	blx	r4
	delay_ms(200); //should take 167ms to erase all 
     b56:	20c8      	movs	r0, #200	; 0xc8
     b58:	4b3c      	ldr	r3, [pc, #240]	; (c4c <NRF52840_program+0x138>)
     b5a:	4798      	blx	r3
				
	swd_clear_abort_reg();
     b5c:	47a8      	blx	r5
	swd_write(req_write_select, AP_PORT_0);
     b5e:	2100      	movs	r1, #0
     b60:	20b1      	movs	r0, #177	; 0xb1
     b62:	47a0      	blx	r4
	swd_write(req_write_tar, NRF52_NVMC_READY);
     b64:	493a      	ldr	r1, [pc, #232]	; (c50 <NRF52840_program+0x13c>)
     b66:	208b      	movs	r0, #139	; 0x8b
     b68:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_OFF);
     b6a:	493a      	ldr	r1, [pc, #232]	; (c54 <NRF52840_program+0x140>)
     b6c:	20a3      	movs	r0, #163	; 0xa3
     b6e:	47a0      	blx	r4
	swd_read(req_read_drw);
     b70:	209f      	movs	r0, #159	; 0x9f
     b72:	4c39      	ldr	r4, [pc, #228]	; (c58 <NRF52840_program+0x144>)
     b74:	47a0      	blx	r4
	uint32_t ready_val = swd_read(req_read_drw);
     b76:	209f      	movs	r0, #159	; 0x9f
     b78:	47a0      	blx	r4
	while(!ready_val) //not ready
     b7a:	b938      	cbnz	r0, b8c <NRF52840_program+0x78>
	{
		delay_ms(50);
     b7c:	2632      	movs	r6, #50	; 0x32
     b7e:	4d33      	ldr	r5, [pc, #204]	; (c4c <NRF52840_program+0x138>)
     b80:	4630      	mov	r0, r6
     b82:	47a8      	blx	r5
		ready_val = swd_read(req_read_drw);
     b84:	209f      	movs	r0, #159	; 0x9f
     b86:	47a0      	blx	r4
	while(!ready_val) //not ready
     b88:	2800      	cmp	r0, #0
     b8a:	d0f9      	beq.n	b80 <NRF52840_program+0x6c>
	}
				
	swd_clear_abort_reg();
     b8c:	4b2a      	ldr	r3, [pc, #168]	; (c38 <NRF52840_program+0x124>)
     b8e:	4798      	blx	r3
	swd_write(req_write_select, AP_PORT_0);
     b90:	2100      	movs	r1, #0
     b92:	20b1      	movs	r0, #177	; 0xb1
     b94:	4c29      	ldr	r4, [pc, #164]	; (c3c <NRF52840_program+0x128>)
     b96:	47a0      	blx	r4
	swd_write(req_write_tar, NRF52_NVMC_CONFIG);
     b98:	4929      	ldr	r1, [pc, #164]	; (c40 <NRF52840_program+0x12c>)
     b9a:	208b      	movs	r0, #139	; 0x8b
     b9c:	47a0      	blx	r4
	swd_write(req_write_csw, CSW_AUTOINC_ON);
     b9e:	4929      	ldr	r1, [pc, #164]	; (c44 <NRF52840_program+0x130>)
     ba0:	20a3      	movs	r0, #163	; 0xa3
     ba2:	47a0      	blx	r4
	swd_write(req_write_drw, WRITE_ENABLE); //enable write cmd
     ba4:	2101      	movs	r1, #1
     ba6:	20bb      	movs	r0, #187	; 0xbb
     ba8:	47a0      	blx	r4
				
	uint32_t progress_track = 0;
	uint32_t progress_chunk = num_words/124; 
	uint8_t packet_count = 0;
				
	for(int i=0; i<num_words; i++) //will there be remainder / non-full word sent?
     baa:	4b2c      	ldr	r3, [pc, #176]	; (c5c <NRF52840_program+0x148>)
     bac:	681b      	ldr	r3, [r3, #0]
     bae:	2b00      	cmp	r3, #0
     bb0:	d03f      	beq.n	c32 <NRF52840_program+0x11e>
     bb2:	46bb      	mov	fp, r7
	{
		uint32_t word = *(qspi_buff +(i+3)) << 24 | *(qspi_buff + (i+2)) << 16 | *(qspi_buff + (i+1)) << 8 | *(qspi_buff + i); //LSB
					
		swd_clear_abort_reg();
     bb4:	f8df a080 	ldr.w	sl, [pc, #128]	; c38 <NRF52840_program+0x124>
		swd_write(req_write_select, AP_PORT_0);
     bb8:	f04f 0900 	mov.w	r9, #0
     bbc:	463b      	mov	r3, r7
		uint32_t word = *(qspi_buff +(i+3)) << 24 | *(qspi_buff + (i+2)) << 16 | *(qspi_buff + (i+1)) << 8 | *(qspi_buff + i); //LSB
     bbe:	78fa      	ldrb	r2, [r7, #3]
     bc0:	3701      	adds	r7, #1
     bc2:	789c      	ldrb	r4, [r3, #2]
     bc4:	0424      	lsls	r4, r4, #16
     bc6:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
     bca:	781a      	ldrb	r2, [r3, #0]
     bcc:	4314      	orrs	r4, r2
     bce:	785b      	ldrb	r3, [r3, #1]
     bd0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
		swd_clear_abort_reg();
     bd4:	47d0      	blx	sl
		swd_write(req_write_select, AP_PORT_0);
     bd6:	4649      	mov	r1, r9
     bd8:	20b1      	movs	r0, #177	; 0xb1
     bda:	4d18      	ldr	r5, [pc, #96]	; (c3c <NRF52840_program+0x128>)
     bdc:	47a8      	blx	r5
		swd_write(req_write_tar, start_address + (i*WORD_SIZE)); //set flash address
     bde:	4641      	mov	r1, r8
     be0:	208b      	movs	r0, #139	; 0x8b
     be2:	47a8      	blx	r5
		swd_write(req_write_csw, CSW_AUTOINC_OFF);
     be4:	4e1b      	ldr	r6, [pc, #108]	; (c54 <NRF52840_program+0x140>)
     be6:	4631      	mov	r1, r6
     be8:	20a3      	movs	r0, #163	; 0xa3
     bea:	47a8      	blx	r5
		swd_write(req_write_drw, word); 
     bec:	4621      	mov	r1, r4
     bee:	20bb      	movs	r0, #187	; 0xbb
     bf0:	47a8      	blx	r5
					
		swd_clear_abort_reg();
     bf2:	47d0      	blx	sl
		swd_write(req_write_select, AP_PORT_0);
     bf4:	4649      	mov	r1, r9
     bf6:	20b1      	movs	r0, #177	; 0xb1
     bf8:	47a8      	blx	r5
		swd_write(req_write_tar, NRF52_NVMC_READY_NEXT);
     bfa:	4919      	ldr	r1, [pc, #100]	; (c60 <NRF52840_program+0x14c>)
     bfc:	208b      	movs	r0, #139	; 0x8b
     bfe:	47a8      	blx	r5
		swd_write(req_write_csw, CSW_AUTOINC_OFF);
     c00:	4631      	mov	r1, r6
     c02:	20a3      	movs	r0, #163	; 0xa3
     c04:	47a8      	blx	r5
		swd_read(req_read_drw);
     c06:	209f      	movs	r0, #159	; 0x9f
     c08:	4c13      	ldr	r4, [pc, #76]	; (c58 <NRF52840_program+0x144>)
     c0a:	47a0      	blx	r4
		uint32_t ready_val = swd_read(req_read_drw);
     c0c:	209f      	movs	r0, #159	; 0x9f
     c0e:	47a0      	blx	r4
		while(!ready_val) //not ready
     c10:	b938      	cbnz	r0, c22 <NRF52840_program+0x10e>
		{
			delay_ms(1);
     c12:	2601      	movs	r6, #1
     c14:	4d0d      	ldr	r5, [pc, #52]	; (c4c <NRF52840_program+0x138>)
     c16:	4630      	mov	r0, r6
     c18:	47a8      	blx	r5
			ready_val = swd_read(req_read_drw);
     c1a:	209f      	movs	r0, #159	; 0x9f
     c1c:	47a0      	blx	r4
		while(!ready_val) //not ready
     c1e:	2800      	cmp	r0, #0
     c20:	d0f9      	beq.n	c16 <NRF52840_program+0x102>
     c22:	f108 0804 	add.w	r8, r8, #4
	for(int i=0; i<num_words; i++) //will there be remainder / non-full word sent?
     c26:	eba7 030b 	sub.w	r3, r7, fp
     c2a:	4a0c      	ldr	r2, [pc, #48]	; (c5c <NRF52840_program+0x148>)
     c2c:	6812      	ldr	r2, [r2, #0]
     c2e:	4293      	cmp	r3, r2
     c30:	d3c4      	bcc.n	bbc <NRF52840_program+0xa8>
			packet_count++; 
			progress_track = 0;
		}		
		*/
	}
     c32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c36:	bf00      	nop
     c38:	00002229 	.word	0x00002229
     c3c:	000022b1 	.word	0x000022b1
     c40:	4001e504 	.word	0x4001e504
     c44:	23000012 	.word	0x23000012
     c48:	4001e50c 	.word	0x4001e50c
     c4c:	00000d4d 	.word	0x00000d4d
     c50:	4001e400 	.word	0x4001e400
     c54:	23000002 	.word	0x23000002
     c58:	00002311 	.word	0x00002311
     c5c:	20000080 	.word	0x20000080
     c60:	4001e408 	.word	0x4001e408

00000c64 <branch_target>:
	switch(chip_type)
     c64:	b109      	cbz	r1, c6a <branch_target+0x6>
}
     c66:	4630      	mov	r0, r6
     c68:	4770      	bx	lr
{	
     c6a:	b570      	push	{r4, r5, r6, lr}
     c6c:	4615      	mov	r5, r2
     c6e:	4604      	mov	r4, r0
			ret = swd_m4_startup(); 
     c70:	4b06      	ldr	r3, [pc, #24]	; (c8c <branch_target+0x28>)
     c72:	4798      	blx	r3
			if(ret == f_ok)
     c74:	4606      	mov	r6, r0
     c76:	b108      	cbz	r0, c7c <branch_target+0x18>
}
     c78:	4630      	mov	r0, r6
     c7a:	bd70      	pop	{r4, r5, r6, pc}
				NRF52840_program(qspi_buff, start_address);
     c7c:	4629      	mov	r1, r5
     c7e:	4620      	mov	r0, r4
     c80:	4b03      	ldr	r3, [pc, #12]	; (c90 <branch_target+0x2c>)
     c82:	4798      	blx	r3
				swd_m4_reset();
     c84:	4b03      	ldr	r3, [pc, #12]	; (c94 <branch_target+0x30>)
     c86:	4798      	blx	r3
     c88:	e7f6      	b.n	c78 <branch_target+0x14>
     c8a:	bf00      	nop
     c8c:	00000a39 	.word	0x00000a39
     c90:	00000b15 	.word	0x00000b15
     c94:	00000a01 	.word	0x00000a01

00000c98 <flash_target>:
{
     c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     c9c:	4680      	mov	r8, r0
     c9e:	460c      	mov	r4, r1
     ca0:	4691      	mov	r9, r2
     ca2:	461f      	mov	r7, r3
	nor_flash_qspi_init();
     ca4:	4b17      	ldr	r3, [pc, #92]	; (d04 <flash_target+0x6c>)
     ca6:	4798      	blx	r3
	uint8_t* qspi_buff = malloc(sizeof(data_len)); 
     ca8:	2004      	movs	r0, #4
     caa:	4b17      	ldr	r3, [pc, #92]	; (d08 <flash_target+0x70>)
     cac:	4798      	blx	r3
     cae:	4605      	mov	r5, r0
	spi_nor_flash_read(SPI_NOR_FLASH_0, qspi_buff, data_addr, data_len); //data_len
     cb0:	4623      	mov	r3, r4
     cb2:	4642      	mov	r2, r8
     cb4:	4601      	mov	r1, r0
     cb6:	4815      	ldr	r0, [pc, #84]	; (d0c <flash_target+0x74>)
     cb8:	6800      	ldr	r0, [r0, #0]
     cba:	4e15      	ldr	r6, [pc, #84]	; (d10 <flash_target+0x78>)
     cbc:	47b0      	blx	r6
	jtag_to_swd();			
     cbe:	4b15      	ldr	r3, [pc, #84]	; (d14 <flash_target+0x7c>)
     cc0:	4798      	blx	r3
	uint32_t idcode = swd_read(req_read_idcode); 
     cc2:	20a5      	movs	r0, #165	; 0xa5
     cc4:	4b14      	ldr	r3, [pc, #80]	; (d18 <flash_target+0x80>)
     cc6:	4798      	blx	r3
	if(idcode == 0x00000000 || idcode == 0xFFFFFFFF)
     cc8:	3801      	subs	r0, #1
     cca:	f110 0f03 	cmn.w	r0, #3
     cce:	d810      	bhi.n	cf2 <flash_target+0x5a>
	num_words = data_len/WORD_SIZE; // global word count, accurate?
     cd0:	08a4      	lsrs	r4, r4, #2
     cd2:	4b12      	ldr	r3, [pc, #72]	; (d1c <flash_target+0x84>)
     cd4:	601c      	str	r4, [r3, #0]
		ret = branch_target(qspi_buff, chip_type, start_address);
     cd6:	463a      	mov	r2, r7
     cd8:	4649      	mov	r1, r9
     cda:	4628      	mov	r0, r5
     cdc:	4b10      	ldr	r3, [pc, #64]	; (d20 <flash_target+0x88>)
     cde:	4798      	blx	r3
     ce0:	4604      	mov	r4, r0
	free(qspi_buff);
     ce2:	4628      	mov	r0, r5
     ce4:	4b0f      	ldr	r3, [pc, #60]	; (d24 <flash_target+0x8c>)
     ce6:	4798      	blx	r3
	nor_flash_qspi_deinit(); // deinit after flashing to allow nordic to navigate
     ce8:	4b0f      	ldr	r3, [pc, #60]	; (d28 <flash_target+0x90>)
     cea:	4798      	blx	r3
}
     cec:	4620      	mov	r0, r4
     cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		i2c_send_error(error_no_target);
     cf2:	2000      	movs	r0, #0
     cf4:	4b0d      	ldr	r3, [pc, #52]	; (d2c <flash_target+0x94>)
     cf6:	4798      	blx	r3
	num_words = data_len/WORD_SIZE; // global word count, accurate?
     cf8:	08a4      	lsrs	r4, r4, #2
     cfa:	4b08      	ldr	r3, [pc, #32]	; (d1c <flash_target+0x84>)
     cfc:	601c      	str	r4, [r3, #0]
     cfe:	2401      	movs	r4, #1
     d00:	e7ef      	b.n	ce2 <flash_target+0x4a>
     d02:	bf00      	nop
     d04:	00000801 	.word	0x00000801
     d08:	0000241d 	.word	0x0000241d
     d0c:	20000130 	.word	0x20000130
     d10:	000021ef 	.word	0x000021ef
     d14:	0000224d 	.word	0x0000224d
     d18:	00002311 	.word	0x00002311
     d1c:	20000080 	.word	0x20000080
     d20:	00000c65 	.word	0x00000c65
     d24:	0000242d 	.word	0x0000242d
     d28:	00000815 	.word	0x00000815
     d2c:	000023ad 	.word	0x000023ad

00000d30 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d30:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     d34:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     d36:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     d38:	f3bf 8f5f 	dmb	sy
     d3c:	4770      	bx	lr

00000d3e <atomic_leave_critical>:
     d3e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     d42:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     d44:	f383 8810 	msr	PRIMASK, r3
     d48:	4770      	bx	lr
	...

00000d4c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     d4c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     d4e:	4b04      	ldr	r3, [pc, #16]	; (d60 <delay_ms+0x14>)
     d50:	681c      	ldr	r4, [r3, #0]
     d52:	4b04      	ldr	r3, [pc, #16]	; (d64 <delay_ms+0x18>)
     d54:	4798      	blx	r3
     d56:	4601      	mov	r1, r0
     d58:	4620      	mov	r0, r4
     d5a:	4b03      	ldr	r3, [pc, #12]	; (d68 <delay_ms+0x1c>)
     d5c:	4798      	blx	r3
     d5e:	bd10      	pop	{r4, pc}
     d60:	20000084 	.word	0x20000084
     d64:	000013ad 	.word	0x000013ad
     d68:	000013c9 	.word	0x000013c9

00000d6c <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     d6c:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     d6e:	6943      	ldr	r3, [r0, #20]
     d70:	b103      	cbz	r3, d74 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     d72:	4798      	blx	r3
     d74:	bd08      	pop	{r3, pc}

00000d76 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     d76:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     d78:	6983      	ldr	r3, [r0, #24]
     d7a:	b103      	cbz	r3, d7e <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     d7c:	4798      	blx	r3
     d7e:	bd08      	pop	{r3, pc}

00000d80 <flash_init>:
{
     d80:	b538      	push	{r3, r4, r5, lr}
     d82:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     d84:	4604      	mov	r4, r0
     d86:	b190      	cbz	r0, dae <flash_init+0x2e>
     d88:	1c08      	adds	r0, r1, #0
     d8a:	bf18      	it	ne
     d8c:	2001      	movne	r0, #1
     d8e:	2238      	movs	r2, #56	; 0x38
     d90:	4908      	ldr	r1, [pc, #32]	; (db4 <flash_init+0x34>)
     d92:	4b09      	ldr	r3, [pc, #36]	; (db8 <flash_init+0x38>)
     d94:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     d96:	4629      	mov	r1, r5
     d98:	4620      	mov	r0, r4
     d9a:	4b08      	ldr	r3, [pc, #32]	; (dbc <flash_init+0x3c>)
     d9c:	4798      	blx	r3
	if (rc) {
     d9e:	4603      	mov	r3, r0
     da0:	b918      	cbnz	r0, daa <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     da2:	4a07      	ldr	r2, [pc, #28]	; (dc0 <flash_init+0x40>)
     da4:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     da6:	4a07      	ldr	r2, [pc, #28]	; (dc4 <flash_init+0x44>)
     da8:	6062      	str	r2, [r4, #4]
}
     daa:	4618      	mov	r0, r3
     dac:	bd38      	pop	{r3, r4, r5, pc}
     dae:	2000      	movs	r0, #0
     db0:	e7ed      	b.n	d8e <flash_init+0xe>
     db2:	bf00      	nop
     db4:	000025d4 	.word	0x000025d4
     db8:	000012fd 	.word	0x000012fd
     dbc:	00001469 	.word	0x00001469
     dc0:	00000d6d 	.word	0x00000d6d
     dc4:	00000d77 	.word	0x00000d77

00000dc8 <i2c_s_sync_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_sync_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     dcc:	460f      	mov	r7, r1
     dce:	4690      	mov	r8, r2
	uint16_t                      offset = 0;
	struct i2c_s_sync_descriptor *descr  = CONTAINER_OF(io, struct i2c_s_sync_descriptor, io);

	ASSERT(io && buf && length);
     dd0:	4604      	mov	r4, r0
     dd2:	b320      	cbz	r0, e1e <i2c_s_sync_write+0x56>
     dd4:	b329      	cbz	r1, e22 <i2c_s_sync_write+0x5a>
     dd6:	1c10      	adds	r0, r2, #0
     dd8:	bf18      	it	ne
     dda:	2001      	movne	r0, #1
     ddc:	22b6      	movs	r2, #182	; 0xb6
     dde:	4912      	ldr	r1, [pc, #72]	; (e28 <i2c_s_sync_write+0x60>)
     de0:	4b12      	ldr	r3, [pc, #72]	; (e2c <i2c_s_sync_write+0x64>)
     de2:	4798      	blx	r3

	while (!_i2c_s_sync_is_byte_sent(&descr->device))
     de4:	3c04      	subs	r4, #4
     de6:	4d12      	ldr	r5, [pc, #72]	; (e30 <i2c_s_sync_write+0x68>)
     de8:	4620      	mov	r0, r4
     dea:	47a8      	blx	r5
     dec:	2800      	cmp	r0, #0
     dee:	d0fb      	beq.n	de8 <i2c_s_sync_write+0x20>
     df0:	3f01      	subs	r7, #1
     df2:	2600      	movs	r6, #0
		;
	do {
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     df4:	f8df 9040 	ldr.w	r9, [pc, #64]	; e38 <i2c_s_sync_write+0x70>
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     df8:	4d0d      	ldr	r5, [pc, #52]	; (e30 <i2c_s_sync_write+0x68>)
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     dfa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     dfe:	4620      	mov	r0, r4
     e00:	47c8      	blx	r9
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     e02:	4620      	mov	r0, r4
     e04:	47a8      	blx	r5
     e06:	2800      	cmp	r0, #0
     e08:	d0fb      	beq.n	e02 <i2c_s_sync_write+0x3a>
			;
	} while (++offset < length);
     e0a:	3601      	adds	r6, #1
     e0c:	b2b6      	uxth	r6, r6
     e0e:	45b0      	cmp	r8, r6
     e10:	d8f3      	bhi.n	dfa <i2c_s_sync_write+0x32>

	/* To ensure no more data needs to be sent */
	_i2c_s_sync_clear_data_ready_flag(&descr->device);
     e12:	4620      	mov	r0, r4
     e14:	4b07      	ldr	r3, [pc, #28]	; (e34 <i2c_s_sync_write+0x6c>)
     e16:	4798      	blx	r3

	return (int32_t)offset;
}
     e18:	4630      	mov	r0, r6
     e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     e1e:	2000      	movs	r0, #0
     e20:	e7dc      	b.n	ddc <i2c_s_sync_write+0x14>
     e22:	2000      	movs	r0, #0
     e24:	e7da      	b.n	ddc <i2c_s_sync_write+0x14>
     e26:	bf00      	nop
     e28:	000025ec 	.word	0x000025ec
     e2c:	000012fd 	.word	0x000012fd
     e30:	00001957 	.word	0x00001957
     e34:	0000196b 	.word	0x0000196b
     e38:	00001949 	.word	0x00001949

00000e3c <i2c_s_sync_read>:
{
     e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e40:	460f      	mov	r7, r1
     e42:	4690      	mov	r8, r2
	ASSERT(io && buf && length);
     e44:	4604      	mov	r4, r0
     e46:	b1e0      	cbz	r0, e82 <i2c_s_sync_read+0x46>
     e48:	b1e9      	cbz	r1, e86 <i2c_s_sync_read+0x4a>
     e4a:	1c10      	adds	r0, r2, #0
     e4c:	bf18      	it	ne
     e4e:	2001      	movne	r0, #1
     e50:	229c      	movs	r2, #156	; 0x9c
     e52:	490e      	ldr	r1, [pc, #56]	; (e8c <i2c_s_sync_read+0x50>)
     e54:	4b0e      	ldr	r3, [pc, #56]	; (e90 <i2c_s_sync_read+0x54>)
     e56:	4798      	blx	r3
     e58:	3f01      	subs	r7, #1
	uint16_t                      offset = 0;
     e5a:	2600      	movs	r6, #0
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     e5c:	3c04      	subs	r4, #4
     e5e:	4d0d      	ldr	r5, [pc, #52]	; (e94 <i2c_s_sync_read+0x58>)
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     e60:	f8df 9034 	ldr.w	r9, [pc, #52]	; e98 <i2c_s_sync_read+0x5c>
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     e64:	4620      	mov	r0, r4
     e66:	47a8      	blx	r5
     e68:	2800      	cmp	r0, #0
     e6a:	d0fb      	beq.n	e64 <i2c_s_sync_read+0x28>
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     e6c:	4620      	mov	r0, r4
     e6e:	47c8      	blx	r9
     e70:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     e74:	3601      	adds	r6, #1
     e76:	b2b6      	uxth	r6, r6
     e78:	45b0      	cmp	r8, r6
     e7a:	d8f3      	bhi.n	e64 <i2c_s_sync_read+0x28>
}
     e7c:	4630      	mov	r0, r6
     e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     e82:	2000      	movs	r0, #0
     e84:	e7e4      	b.n	e50 <i2c_s_sync_read+0x14>
     e86:	2000      	movs	r0, #0
     e88:	e7e2      	b.n	e50 <i2c_s_sync_read+0x14>
     e8a:	bf00      	nop
     e8c:	000025ec 	.word	0x000025ec
     e90:	000012fd 	.word	0x000012fd
     e94:	00001961 	.word	0x00001961
     e98:	0000194f 	.word	0x0000194f

00000e9c <i2c_s_sync_init>:
{
     e9c:	b538      	push	{r3, r4, r5, lr}
     e9e:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     ea0:	4604      	mov	r4, r0
     ea2:	b190      	cbz	r0, eca <i2c_s_sync_init+0x2e>
     ea4:	1c08      	adds	r0, r1, #0
     ea6:	bf18      	it	ne
     ea8:	2001      	movne	r0, #1
     eaa:	2235      	movs	r2, #53	; 0x35
     eac:	4908      	ldr	r1, [pc, #32]	; (ed0 <i2c_s_sync_init+0x34>)
     eae:	4b09      	ldr	r3, [pc, #36]	; (ed4 <i2c_s_sync_init+0x38>)
     eb0:	4798      	blx	r3
	init_status = _i2c_s_sync_init(&descr->device, hw);
     eb2:	4629      	mov	r1, r5
     eb4:	4620      	mov	r0, r4
     eb6:	4b08      	ldr	r3, [pc, #32]	; (ed8 <i2c_s_sync_init+0x3c>)
     eb8:	4798      	blx	r3
	if (init_status) {
     eba:	4603      	mov	r3, r0
     ebc:	b918      	cbnz	r0, ec6 <i2c_s_sync_init+0x2a>
	descr->io.read  = i2c_s_sync_read;
     ebe:	4a07      	ldr	r2, [pc, #28]	; (edc <i2c_s_sync_init+0x40>)
     ec0:	60a2      	str	r2, [r4, #8]
	descr->io.write = i2c_s_sync_write;
     ec2:	4a07      	ldr	r2, [pc, #28]	; (ee0 <i2c_s_sync_init+0x44>)
     ec4:	6062      	str	r2, [r4, #4]
}
     ec6:	4618      	mov	r0, r3
     ec8:	bd38      	pop	{r3, r4, r5, pc}
     eca:	2000      	movs	r0, #0
     ecc:	e7ed      	b.n	eaa <i2c_s_sync_init+0xe>
     ece:	bf00      	nop
     ed0:	000025ec 	.word	0x000025ec
     ed4:	000012fd 	.word	0x000012fd
     ed8:	000018e5 	.word	0x000018e5
     edc:	00000e3d 	.word	0x00000e3d
     ee0:	00000dc9 	.word	0x00000dc9

00000ee4 <i2c_s_sync_set_addr>:
{
     ee4:	b538      	push	{r3, r4, r5, lr}
     ee6:	460d      	mov	r5, r1
	ASSERT(descr);
     ee8:	4604      	mov	r4, r0
     eea:	2251      	movs	r2, #81	; 0x51
     eec:	490a      	ldr	r1, [pc, #40]	; (f18 <i2c_s_sync_set_addr+0x34>)
     eee:	3000      	adds	r0, #0
     ef0:	bf18      	it	ne
     ef2:	2001      	movne	r0, #1
     ef4:	4b09      	ldr	r3, [pc, #36]	; (f1c <i2c_s_sync_set_addr+0x38>)
     ef6:	4798      	blx	r3
	if (!_i2c_s_sync_is_10bit_addressing_on(&descr->device)) {
     ef8:	4620      	mov	r0, r4
     efa:	4b09      	ldr	r3, [pc, #36]	; (f20 <i2c_s_sync_set_addr+0x3c>)
     efc:	4798      	blx	r3
     efe:	b120      	cbz	r0, f0a <i2c_s_sync_set_addr+0x26>
	return _i2c_s_sync_set_address(&descr->device, address);
     f00:	4629      	mov	r1, r5
     f02:	4620      	mov	r0, r4
     f04:	4b07      	ldr	r3, [pc, #28]	; (f24 <i2c_s_sync_set_addr+0x40>)
     f06:	4798      	blx	r3
}
     f08:	bd38      	pop	{r3, r4, r5, pc}
		return _i2c_s_sync_set_address(&descr->device, address & 0x7F);
     f0a:	f005 017f 	and.w	r1, r5, #127	; 0x7f
     f0e:	4620      	mov	r0, r4
     f10:	4b04      	ldr	r3, [pc, #16]	; (f24 <i2c_s_sync_set_addr+0x40>)
     f12:	4798      	blx	r3
     f14:	bd38      	pop	{r3, r4, r5, pc}
     f16:	bf00      	nop
     f18:	000025ec 	.word	0x000025ec
     f1c:	000012fd 	.word	0x000012fd
     f20:	0000192f 	.word	0x0000192f
     f24:	00001939 	.word	0x00001939

00000f28 <i2c_s_sync_enable>:
{
     f28:	b510      	push	{r4, lr}
	ASSERT(descr);
     f2a:	4604      	mov	r4, r0
     f2c:	225f      	movs	r2, #95	; 0x5f
     f2e:	4905      	ldr	r1, [pc, #20]	; (f44 <i2c_s_sync_enable+0x1c>)
     f30:	3000      	adds	r0, #0
     f32:	bf18      	it	ne
     f34:	2001      	movne	r0, #1
     f36:	4b04      	ldr	r3, [pc, #16]	; (f48 <i2c_s_sync_enable+0x20>)
     f38:	4798      	blx	r3
	return _i2c_s_sync_enable(&descr->device);
     f3a:	4620      	mov	r0, r4
     f3c:	4b03      	ldr	r3, [pc, #12]	; (f4c <i2c_s_sync_enable+0x24>)
     f3e:	4798      	blx	r3
}
     f40:	bd10      	pop	{r4, pc}
     f42:	bf00      	nop
     f44:	000025ec 	.word	0x000025ec
     f48:	000012fd 	.word	0x000012fd
     f4c:	00001919 	.word	0x00001919

00000f50 <i2c_s_sync_get_io_descriptor>:
{
     f50:	b538      	push	{r3, r4, r5, lr}
     f52:	460d      	mov	r5, r1
	ASSERT(descr && io);
     f54:	4604      	mov	r4, r0
     f56:	b150      	cbz	r0, f6e <i2c_s_sync_get_io_descriptor+0x1e>
     f58:	1c08      	adds	r0, r1, #0
     f5a:	bf18      	it	ne
     f5c:	2001      	movne	r0, #1
     f5e:	2273      	movs	r2, #115	; 0x73
     f60:	4904      	ldr	r1, [pc, #16]	; (f74 <i2c_s_sync_get_io_descriptor+0x24>)
     f62:	4b05      	ldr	r3, [pc, #20]	; (f78 <i2c_s_sync_get_io_descriptor+0x28>)
     f64:	4798      	blx	r3
	*io = &descr->io;
     f66:	3404      	adds	r4, #4
     f68:	602c      	str	r4, [r5, #0]
}
     f6a:	2000      	movs	r0, #0
     f6c:	bd38      	pop	{r3, r4, r5, pc}
     f6e:	2000      	movs	r0, #0
     f70:	e7f5      	b.n	f5e <i2c_s_sync_get_io_descriptor+0xe>
     f72:	bf00      	nop
     f74:	000025ec 	.word	0x000025ec
     f78:	000012fd 	.word	0x000012fd

00000f7c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     f7c:	b570      	push	{r4, r5, r6, lr}
     f7e:	460d      	mov	r5, r1
     f80:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     f82:	4604      	mov	r4, r0
     f84:	b160      	cbz	r0, fa0 <io_write+0x24>
     f86:	1c08      	adds	r0, r1, #0
     f88:	bf18      	it	ne
     f8a:	2001      	movne	r0, #1
     f8c:	2234      	movs	r2, #52	; 0x34
     f8e:	4905      	ldr	r1, [pc, #20]	; (fa4 <io_write+0x28>)
     f90:	4b05      	ldr	r3, [pc, #20]	; (fa8 <io_write+0x2c>)
     f92:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     f94:	6823      	ldr	r3, [r4, #0]
     f96:	4632      	mov	r2, r6
     f98:	4629      	mov	r1, r5
     f9a:	4620      	mov	r0, r4
     f9c:	4798      	blx	r3
}
     f9e:	bd70      	pop	{r4, r5, r6, pc}
     fa0:	2000      	movs	r0, #0
     fa2:	e7f3      	b.n	f8c <io_write+0x10>
     fa4:	00002608 	.word	0x00002608
     fa8:	000012fd 	.word	0x000012fd

00000fac <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     fac:	b570      	push	{r4, r5, r6, lr}
     fae:	460d      	mov	r5, r1
     fb0:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     fb2:	4604      	mov	r4, r0
     fb4:	b160      	cbz	r0, fd0 <io_read+0x24>
     fb6:	1c08      	adds	r0, r1, #0
     fb8:	bf18      	it	ne
     fba:	2001      	movne	r0, #1
     fbc:	223d      	movs	r2, #61	; 0x3d
     fbe:	4905      	ldr	r1, [pc, #20]	; (fd4 <io_read+0x28>)
     fc0:	4b05      	ldr	r3, [pc, #20]	; (fd8 <io_read+0x2c>)
     fc2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     fc4:	6863      	ldr	r3, [r4, #4]
     fc6:	4632      	mov	r2, r6
     fc8:	4629      	mov	r1, r5
     fca:	4620      	mov	r0, r4
     fcc:	4798      	blx	r3
}
     fce:	bd70      	pop	{r4, r5, r6, pc}
     fd0:	2000      	movs	r0, #0
     fd2:	e7f3      	b.n	fbc <io_read+0x10>
     fd4:	00002608 	.word	0x00002608
     fd8:	000012fd 	.word	0x000012fd

00000fdc <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
     fdc:	b538      	push	{r3, r4, r5, lr}
     fde:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
     fe0:	4605      	mov	r5, r0
     fe2:	b158      	cbz	r0, ffc <qspi_sync_init+0x20>
     fe4:	1c08      	adds	r0, r1, #0
     fe6:	bf18      	it	ne
     fe8:	2001      	movne	r0, #1
     fea:	2231      	movs	r2, #49	; 0x31
     fec:	4904      	ldr	r1, [pc, #16]	; (1000 <qspi_sync_init+0x24>)
     fee:	4b05      	ldr	r3, [pc, #20]	; (1004 <qspi_sync_init+0x28>)
     ff0:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
     ff2:	4621      	mov	r1, r4
     ff4:	4628      	mov	r0, r5
     ff6:	4b04      	ldr	r3, [pc, #16]	; (1008 <qspi_sync_init+0x2c>)
     ff8:	4798      	blx	r3
}
     ffa:	bd38      	pop	{r3, r4, r5, pc}
     ffc:	2000      	movs	r0, #0
     ffe:	e7f4      	b.n	fea <qspi_sync_init+0xe>
    1000:	0000261c 	.word	0x0000261c
    1004:	000012fd 	.word	0x000012fd
    1008:	00001591 	.word	0x00001591

0000100c <qspi_sync_deinit>:

int32_t qspi_sync_deinit(struct qspi_sync_descriptor *qspi)
{
    100c:	b510      	push	{r4, lr}
	ASSERT(qspi);
    100e:	4604      	mov	r4, r0
    1010:	2238      	movs	r2, #56	; 0x38
    1012:	4905      	ldr	r1, [pc, #20]	; (1028 <qspi_sync_deinit+0x1c>)
    1014:	3000      	adds	r0, #0
    1016:	bf18      	it	ne
    1018:	2001      	movne	r0, #1
    101a:	4b04      	ldr	r3, [pc, #16]	; (102c <qspi_sync_deinit+0x20>)
    101c:	4798      	blx	r3

	return _qspi_sync_deinit(&qspi->dev);
    101e:	4620      	mov	r0, r4
    1020:	4b03      	ldr	r3, [pc, #12]	; (1030 <qspi_sync_deinit+0x24>)
    1022:	4798      	blx	r3
}
    1024:	bd10      	pop	{r4, pc}
    1026:	bf00      	nop
    1028:	0000261c 	.word	0x0000261c
    102c:	000012fd 	.word	0x000012fd
    1030:	000015c9 	.word	0x000015c9

00001034 <qspi_sync_enable>:

int32_t qspi_sync_enable(struct qspi_sync_descriptor *qspi)
{
    1034:	b510      	push	{r4, lr}
	ASSERT(qspi);
    1036:	4604      	mov	r4, r0
    1038:	223f      	movs	r2, #63	; 0x3f
    103a:	4905      	ldr	r1, [pc, #20]	; (1050 <qspi_sync_enable+0x1c>)
    103c:	3000      	adds	r0, #0
    103e:	bf18      	it	ne
    1040:	2001      	movne	r0, #1
    1042:	4b04      	ldr	r3, [pc, #16]	; (1054 <qspi_sync_enable+0x20>)
    1044:	4798      	blx	r3

	return _qspi_sync_enable(&qspi->dev);
    1046:	4620      	mov	r0, r4
    1048:	4b03      	ldr	r3, [pc, #12]	; (1058 <qspi_sync_enable+0x24>)
    104a:	4798      	blx	r3
}
    104c:	bd10      	pop	{r4, pc}
    104e:	bf00      	nop
    1050:	0000261c 	.word	0x0000261c
    1054:	000012fd 	.word	0x000012fd
    1058:	000015d3 	.word	0x000015d3

0000105c <qspi_sync_serial_run_command>:

	return _qspi_sync_disable(&qspi->dev);
}

int32_t qspi_sync_serial_run_command(struct qspi_sync_descriptor *qspi, const struct _qspi_command *cmd)
{
    105c:	b538      	push	{r3, r4, r5, lr}
    105e:	460c      	mov	r4, r1
	ASSERT(qspi && cmd);
    1060:	4605      	mov	r5, r0
    1062:	b158      	cbz	r0, 107c <qspi_sync_serial_run_command+0x20>
    1064:	1c08      	adds	r0, r1, #0
    1066:	bf18      	it	ne
    1068:	2001      	movne	r0, #1
    106a:	224d      	movs	r2, #77	; 0x4d
    106c:	4904      	ldr	r1, [pc, #16]	; (1080 <qspi_sync_serial_run_command+0x24>)
    106e:	4b05      	ldr	r3, [pc, #20]	; (1084 <qspi_sync_serial_run_command+0x28>)
    1070:	4798      	blx	r3

	return _qspi_sync_serial_run_command(&qspi->dev, cmd);
    1072:	4621      	mov	r1, r4
    1074:	4628      	mov	r0, r5
    1076:	4b04      	ldr	r3, [pc, #16]	; (1088 <qspi_sync_serial_run_command+0x2c>)
    1078:	4798      	blx	r3
}
    107a:	bd38      	pop	{r3, r4, r5, pc}
    107c:	2000      	movs	r0, #0
    107e:	e7f4      	b.n	106a <qspi_sync_serial_run_command+0xe>
    1080:	0000261c 	.word	0x0000261c
    1084:	000012fd 	.word	0x000012fd
    1088:	000015dd 	.word	0x000015dd

0000108c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
    108c:	b538      	push	{r3, r4, r5, lr}
    108e:	460d      	mov	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
    1090:	4604      	mov	r4, r0
    1092:	b1b8      	cbz	r0, 10c4 <spi_m_sync_init+0x38>
    1094:	1c08      	adds	r0, r1, #0
    1096:	bf18      	it	ne
    1098:	2001      	movne	r0, #1
    109a:	2240      	movs	r2, #64	; 0x40
    109c:	490a      	ldr	r1, [pc, #40]	; (10c8 <spi_m_sync_init+0x3c>)
    109e:	4b0b      	ldr	r3, [pc, #44]	; (10cc <spi_m_sync_init+0x40>)
    10a0:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
    10a2:	4620      	mov	r0, r4
    10a4:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
    10a8:	4629      	mov	r1, r5
    10aa:	4b09      	ldr	r3, [pc, #36]	; (10d0 <spi_m_sync_init+0x44>)
    10ac:	4798      	blx	r3

	if (rc < 0) {
    10ae:	2800      	cmp	r0, #0
    10b0:	db07      	blt.n	10c2 <spi_m_sync_init+0x36>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
    10b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    10b6:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
    10b8:	4b06      	ldr	r3, [pc, #24]	; (10d4 <spi_m_sync_init+0x48>)
    10ba:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
    10bc:	4b06      	ldr	r3, [pc, #24]	; (10d8 <spi_m_sync_init+0x4c>)
    10be:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
    10c0:	2000      	movs	r0, #0
}
    10c2:	bd38      	pop	{r3, r4, r5, pc}
    10c4:	2000      	movs	r0, #0
    10c6:	e7e8      	b.n	109a <spi_m_sync_init+0xe>
    10c8:	00002638 	.word	0x00002638
    10cc:	000012fd 	.word	0x000012fd
    10d0:	00001975 	.word	0x00001975
    10d4:	00001181 	.word	0x00001181
    10d8:	00001145 	.word	0x00001145

000010dc <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
    10dc:	b510      	push	{r4, lr}
	ASSERT(spi);
    10de:	4604      	mov	r4, r0
    10e0:	2257      	movs	r2, #87	; 0x57
    10e2:	4905      	ldr	r1, [pc, #20]	; (10f8 <spi_m_sync_enable+0x1c>)
    10e4:	3000      	adds	r0, #0
    10e6:	bf18      	it	ne
    10e8:	2001      	movne	r0, #1
    10ea:	4b04      	ldr	r3, [pc, #16]	; (10fc <spi_m_sync_enable+0x20>)
    10ec:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
    10ee:	1d20      	adds	r0, r4, #4
    10f0:	4b03      	ldr	r3, [pc, #12]	; (1100 <spi_m_sync_enable+0x24>)
    10f2:	4798      	blx	r3
    10f4:	bd10      	pop	{r4, pc}
    10f6:	bf00      	nop
    10f8:	00002638 	.word	0x00002638
    10fc:	000012fd 	.word	0x000012fd
    1100:	00001a69 	.word	0x00001a69

00001104 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
    1104:	b530      	push	{r4, r5, lr}
    1106:	b085      	sub	sp, #20
    1108:	460c      	mov	r4, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
    110a:	4605      	mov	r5, r0
    110c:	b190      	cbz	r0, 1134 <spi_m_sync_transfer+0x30>
    110e:	1c08      	adds	r0, r1, #0
    1110:	bf18      	it	ne
    1112:	2001      	movne	r0, #1
    1114:	22b3      	movs	r2, #179	; 0xb3
    1116:	4908      	ldr	r1, [pc, #32]	; (1138 <spi_m_sync_transfer+0x34>)
    1118:	4b08      	ldr	r3, [pc, #32]	; (113c <spi_m_sync_transfer+0x38>)
    111a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
    1120:	6863      	ldr	r3, [r4, #4]
    1122:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
    1124:	68a3      	ldr	r3, [r4, #8]
    1126:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
    1128:	a901      	add	r1, sp, #4
    112a:	1d28      	adds	r0, r5, #4
    112c:	4b04      	ldr	r3, [pc, #16]	; (1140 <spi_m_sync_transfer+0x3c>)
    112e:	4798      	blx	r3
}
    1130:	b005      	add	sp, #20
    1132:	bd30      	pop	{r4, r5, pc}
    1134:	2000      	movs	r0, #0
    1136:	e7ed      	b.n	1114 <spi_m_sync_transfer+0x10>
    1138:	00002638 	.word	0x00002638
    113c:	000012fd 	.word	0x000012fd
    1140:	00001a99 	.word	0x00001a99

00001144 <_spi_m_sync_io_write>:
{
    1144:	b570      	push	{r4, r5, r6, lr}
    1146:	b084      	sub	sp, #16
    1148:	460e      	mov	r6, r1
    114a:	4615      	mov	r5, r2
	ASSERT(io);
    114c:	4604      	mov	r4, r0
    114e:	22a3      	movs	r2, #163	; 0xa3
    1150:	4908      	ldr	r1, [pc, #32]	; (1174 <_spi_m_sync_io_write+0x30>)
    1152:	3000      	adds	r0, #0
    1154:	bf18      	it	ne
    1156:	2001      	movne	r0, #1
    1158:	4b07      	ldr	r3, [pc, #28]	; (1178 <_spi_m_sync_io_write+0x34>)
    115a:	4798      	blx	r3
	xfer.rxbuf = 0;
    115c:	2300      	movs	r3, #0
    115e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
    1160:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
    1162:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    1164:	a901      	add	r1, sp, #4
    1166:	f1a4 000c 	sub.w	r0, r4, #12
    116a:	4b04      	ldr	r3, [pc, #16]	; (117c <_spi_m_sync_io_write+0x38>)
    116c:	4798      	blx	r3
}
    116e:	b004      	add	sp, #16
    1170:	bd70      	pop	{r4, r5, r6, pc}
    1172:	bf00      	nop
    1174:	00002638 	.word	0x00002638
    1178:	000012fd 	.word	0x000012fd
    117c:	00001105 	.word	0x00001105

00001180 <_spi_m_sync_io_read>:
{
    1180:	b570      	push	{r4, r5, r6, lr}
    1182:	b084      	sub	sp, #16
    1184:	460e      	mov	r6, r1
    1186:	4615      	mov	r5, r2
	ASSERT(io);
    1188:	4604      	mov	r4, r0
    118a:	2287      	movs	r2, #135	; 0x87
    118c:	4908      	ldr	r1, [pc, #32]	; (11b0 <_spi_m_sync_io_read+0x30>)
    118e:	3000      	adds	r0, #0
    1190:	bf18      	it	ne
    1192:	2001      	movne	r0, #1
    1194:	4b07      	ldr	r3, [pc, #28]	; (11b4 <_spi_m_sync_io_read+0x34>)
    1196:	4798      	blx	r3
	xfer.rxbuf = buf;
    1198:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
    119a:	2300      	movs	r3, #0
    119c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
    119e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
    11a0:	a901      	add	r1, sp, #4
    11a2:	f1a4 000c 	sub.w	r0, r4, #12
    11a6:	4b04      	ldr	r3, [pc, #16]	; (11b8 <_spi_m_sync_io_read+0x38>)
    11a8:	4798      	blx	r3
}
    11aa:	b004      	add	sp, #16
    11ac:	bd70      	pop	{r4, r5, r6, pc}
    11ae:	bf00      	nop
    11b0:	00002638 	.word	0x00002638
    11b4:	000012fd 	.word	0x000012fd
    11b8:	00001105 	.word	0x00001105

000011bc <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
    11bc:	b538      	push	{r3, r4, r5, lr}
    11be:	460d      	mov	r5, r1
	ASSERT(spi && io);
    11c0:	4604      	mov	r4, r0
    11c2:	b150      	cbz	r0, 11da <spi_m_sync_get_io_descriptor+0x1e>
    11c4:	1c08      	adds	r0, r1, #0
    11c6:	bf18      	it	ne
    11c8:	2001      	movne	r0, #1
    11ca:	22bd      	movs	r2, #189	; 0xbd
    11cc:	4904      	ldr	r1, [pc, #16]	; (11e0 <spi_m_sync_get_io_descriptor+0x24>)
    11ce:	4b05      	ldr	r3, [pc, #20]	; (11e4 <spi_m_sync_get_io_descriptor+0x28>)
    11d0:	4798      	blx	r3
	*io = &spi->io;
    11d2:	340c      	adds	r4, #12
    11d4:	602c      	str	r4, [r5, #0]
	return 0;
}
    11d6:	2000      	movs	r0, #0
    11d8:	bd38      	pop	{r3, r4, r5, pc}
    11da:	2000      	movs	r0, #0
    11dc:	e7f5      	b.n	11ca <spi_m_sync_get_io_descriptor+0xe>
    11de:	bf00      	nop
    11e0:	00002638 	.word	0x00002638
    11e4:	000012fd 	.word	0x000012fd

000011e8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    11e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ea:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    11ec:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    11ee:	b12f      	cbz	r7, 11fc <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    11f0:	688d      	ldr	r5, [r1, #8]
    11f2:	463c      	mov	r4, r7
    11f4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    11f6:	f1c2 0e01 	rsb	lr, r2, #1
    11fa:	e00b      	b.n	1214 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    11fc:	4b0e      	ldr	r3, [pc, #56]	; (1238 <timer_add_timer_task+0x50>)
    11fe:	4798      	blx	r3
		return;
    1200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1202:	4473      	add	r3, lr
    1204:	68a0      	ldr	r0, [r4, #8]
    1206:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1208:	42ab      	cmp	r3, r5
    120a:	d20a      	bcs.n	1222 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    120c:	6823      	ldr	r3, [r4, #0]
    120e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1210:	b153      	cbz	r3, 1228 <timer_add_timer_task+0x40>
    1212:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1214:	6863      	ldr	r3, [r4, #4]
    1216:	4293      	cmp	r3, r2
    1218:	d8f3      	bhi.n	1202 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    121a:	68a0      	ldr	r0, [r4, #8]
    121c:	4403      	add	r3, r0
    121e:	1a9b      	subs	r3, r3, r2
    1220:	e7f2      	b.n	1208 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1222:	42a7      	cmp	r7, r4
    1224:	d004      	beq.n	1230 <timer_add_timer_task+0x48>
    1226:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1228:	4620      	mov	r0, r4
    122a:	4b04      	ldr	r3, [pc, #16]	; (123c <timer_add_timer_task+0x54>)
    122c:	4798      	blx	r3
    122e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1230:	4660      	mov	r0, ip
    1232:	4b01      	ldr	r3, [pc, #4]	; (1238 <timer_add_timer_task+0x50>)
    1234:	4798      	blx	r3
    1236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1238:	00001325 	.word	0x00001325
    123c:	00001351 	.word	0x00001351

00001240 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1244:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1246:	6907      	ldr	r7, [r0, #16]
    1248:	3701      	adds	r7, #1
    124a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    124c:	7e03      	ldrb	r3, [r0, #24]
    124e:	f013 0f01 	tst.w	r3, #1
    1252:	d113      	bne.n	127c <timer_process_counted+0x3c>
    1254:	7e03      	ldrb	r3, [r0, #24]
    1256:	f013 0f02 	tst.w	r3, #2
    125a:	d10f      	bne.n	127c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    125c:	b354      	cbz	r4, 12b4 <timer_process_counted+0x74>
    125e:	6863      	ldr	r3, [r4, #4]
    1260:	1afb      	subs	r3, r7, r3
    1262:	68a2      	ldr	r2, [r4, #8]
    1264:	4293      	cmp	r3, r2
    1266:	d307      	bcc.n	1278 <timer_process_counted+0x38>
    1268:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    126a:	f100 0814 	add.w	r8, r0, #20
    126e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 12b8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1272:	f8df a048 	ldr.w	sl, [pc, #72]	; 12bc <timer_process_counted+0x7c>
    1276:	e012      	b.n	129e <timer_process_counted+0x5e>
    1278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    127c:	7e03      	ldrb	r3, [r0, #24]
    127e:	f043 0302 	orr.w	r3, r3, #2
    1282:	7603      	strb	r3, [r0, #24]
		return;
    1284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1288:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    128a:	68e3      	ldr	r3, [r4, #12]
    128c:	4620      	mov	r0, r4
    128e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1290:	b185      	cbz	r5, 12b4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1292:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1294:	686b      	ldr	r3, [r5, #4]
    1296:	1afb      	subs	r3, r7, r3
    1298:	68aa      	ldr	r2, [r5, #8]
    129a:	4293      	cmp	r3, r2
    129c:	d30a      	bcc.n	12b4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    129e:	4640      	mov	r0, r8
    12a0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    12a2:	7c23      	ldrb	r3, [r4, #16]
    12a4:	2b01      	cmp	r3, #1
    12a6:	d1ef      	bne.n	1288 <timer_process_counted+0x48>
			tmp->time_label = time;
    12a8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    12aa:	463a      	mov	r2, r7
    12ac:	4621      	mov	r1, r4
    12ae:	4640      	mov	r0, r8
    12b0:	47d0      	blx	sl
    12b2:	e7e9      	b.n	1288 <timer_process_counted+0x48>
    12b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12b8:	00001359 	.word	0x00001359
    12bc:	000011e9 	.word	0x000011e9

000012c0 <timer_init>:
{
    12c0:	b538      	push	{r3, r4, r5, lr}
    12c2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    12c4:	4604      	mov	r4, r0
    12c6:	b178      	cbz	r0, 12e8 <timer_init+0x28>
    12c8:	1c08      	adds	r0, r1, #0
    12ca:	bf18      	it	ne
    12cc:	2001      	movne	r0, #1
    12ce:	223b      	movs	r2, #59	; 0x3b
    12d0:	4906      	ldr	r1, [pc, #24]	; (12ec <timer_init+0x2c>)
    12d2:	4b07      	ldr	r3, [pc, #28]	; (12f0 <timer_init+0x30>)
    12d4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
    12d6:	4629      	mov	r1, r5
    12d8:	4620      	mov	r0, r4
    12da:	4b06      	ldr	r3, [pc, #24]	; (12f4 <timer_init+0x34>)
    12dc:	4798      	blx	r3
	descr->time                           = 0;
    12de:	2000      	movs	r0, #0
    12e0:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <timer_init+0x38>)
    12e4:	6023      	str	r3, [r4, #0]
}
    12e6:	bd38      	pop	{r3, r4, r5, pc}
    12e8:	2000      	movs	r0, #0
    12ea:	e7f0      	b.n	12ce <timer_init+0xe>
    12ec:	00002654 	.word	0x00002654
    12f0:	000012fd 	.word	0x000012fd
    12f4:	000016f9 	.word	0x000016f9
    12f8:	00001241 	.word	0x00001241

000012fc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    12fc:	b900      	cbnz	r0, 1300 <assert+0x4>
		__asm("BKPT #0");
    12fe:	be00      	bkpt	0x0000
    1300:	4770      	bx	lr

00001302 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1302:	6803      	ldr	r3, [r0, #0]
    1304:	b14b      	cbz	r3, 131a <is_list_element+0x18>
		if (it == element) {
    1306:	428b      	cmp	r3, r1
    1308:	d009      	beq.n	131e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    130a:	681b      	ldr	r3, [r3, #0]
    130c:	b11b      	cbz	r3, 1316 <is_list_element+0x14>
		if (it == element) {
    130e:	4299      	cmp	r1, r3
    1310:	d1fb      	bne.n	130a <is_list_element+0x8>
			return true;
    1312:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1314:	4770      	bx	lr
	return false;
    1316:	2000      	movs	r0, #0
    1318:	4770      	bx	lr
    131a:	2000      	movs	r0, #0
    131c:	4770      	bx	lr
			return true;
    131e:	2001      	movs	r0, #1
    1320:	4770      	bx	lr
	...

00001324 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1324:	b538      	push	{r3, r4, r5, lr}
    1326:	4604      	mov	r4, r0
    1328:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    132a:	4b06      	ldr	r3, [pc, #24]	; (1344 <list_insert_as_head+0x20>)
    132c:	4798      	blx	r3
    132e:	f080 0001 	eor.w	r0, r0, #1
    1332:	2239      	movs	r2, #57	; 0x39
    1334:	4904      	ldr	r1, [pc, #16]	; (1348 <list_insert_as_head+0x24>)
    1336:	b2c0      	uxtb	r0, r0
    1338:	4b04      	ldr	r3, [pc, #16]	; (134c <list_insert_as_head+0x28>)
    133a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    133c:	6823      	ldr	r3, [r4, #0]
    133e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1340:	6025      	str	r5, [r4, #0]
    1342:	bd38      	pop	{r3, r4, r5, pc}
    1344:	00001303 	.word	0x00001303
    1348:	0000266c 	.word	0x0000266c
    134c:	000012fd 	.word	0x000012fd

00001350 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1350:	6803      	ldr	r3, [r0, #0]
    1352:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1354:	6001      	str	r1, [r0, #0]
    1356:	4770      	bx	lr

00001358 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1358:	6803      	ldr	r3, [r0, #0]
    135a:	b10b      	cbz	r3, 1360 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    135c:	681a      	ldr	r2, [r3, #0]
    135e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1360:	4618      	mov	r0, r3
    1362:	4770      	bx	lr

00001364 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1364:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1366:	4a06      	ldr	r2, [pc, #24]	; (1380 <_sbrk+0x1c>)
    1368:	6812      	ldr	r2, [r2, #0]
    136a:	b122      	cbz	r2, 1376 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    136c:	4a04      	ldr	r2, [pc, #16]	; (1380 <_sbrk+0x1c>)
    136e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1370:	4403      	add	r3, r0
    1372:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1374:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1376:	4903      	ldr	r1, [pc, #12]	; (1384 <_sbrk+0x20>)
    1378:	4a01      	ldr	r2, [pc, #4]	; (1380 <_sbrk+0x1c>)
    137a:	6011      	str	r1, [r2, #0]
    137c:	e7f6      	b.n	136c <_sbrk+0x8>
    137e:	bf00      	nop
    1380:	20000088 	.word	0x20000088
    1384:	2000c138 	.word	0x2000c138

00001388 <_go_to_sleep>:
  __ASM volatile ("dsb 0xF":::"memory");
    1388:	f3bf 8f4f 	dsb	sy
 * \brief Put MCU to sleep
 */
void _go_to_sleep(void)
{
	__DSB();
	__WFI();
    138c:	bf30      	wfi
    138e:	4770      	bx	lr

00001390 <_irq_clear>:
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1390:	0943      	lsrs	r3, r0, #5
    1392:	f000 001f 	and.w	r0, r0, #31
    1396:	2201      	movs	r2, #1
    1398:	fa02 f000 	lsl.w	r0, r2, r0
    139c:	3360      	adds	r3, #96	; 0x60
    139e:	4a02      	ldr	r2, [pc, #8]	; (13a8 <_irq_clear+0x18>)
    13a0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop
    13a8:	e000e100 	.word	0xe000e100

000013ac <_get_cycles_for_ms>:
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000) + 2) / 3 * 1000;
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
    13ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    13b0:	00c3      	lsls	r3, r0, #3
    13b2:	3302      	adds	r3, #2
    13b4:	4803      	ldr	r0, [pc, #12]	; (13c4 <_get_cycles_for_ms+0x18>)
    13b6:	fba0 2303 	umull	r2, r3, r0, r3
    13ba:	085b      	lsrs	r3, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    13bc:	2064      	movs	r0, #100	; 0x64
    13be:	fb00 f003 	mul.w	r0, r0, r3
    13c2:	4770      	bx	lr
    13c4:	aaaaaaab 	.word	0xaaaaaaab

000013c8 <_delay_cycles>:
	__asm(".align 3 \n"
	      "__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#elif defined __GNUC__
	__asm(".syntax unified\n"
    13c8:	3901      	subs	r1, #1
    13ca:	d8fd      	bhi.n	13c8 <_delay_cycles>
    13cc:	4770      	bx	lr
    13ce:	bf00      	nop

000013d0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    13d0:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    13d2:	4a08      	ldr	r2, [pc, #32]	; (13f4 <_init_chip+0x24>)
    13d4:	8813      	ldrh	r3, [r2, #0]
    13d6:	b29b      	uxth	r3, r3
    13d8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    13da:	4b07      	ldr	r3, [pc, #28]	; (13f8 <_init_chip+0x28>)
    13dc:	4798      	blx	r3
	_oscctrl_init_sources();
    13de:	4b07      	ldr	r3, [pc, #28]	; (13fc <_init_chip+0x2c>)
    13e0:	4798      	blx	r3
	_mclk_init();
    13e2:	4b07      	ldr	r3, [pc, #28]	; (1400 <_init_chip+0x30>)
    13e4:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
    13e6:	4b07      	ldr	r3, [pc, #28]	; (1404 <_init_chip+0x34>)
    13e8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    13ea:	f640 70ff 	movw	r0, #4095	; 0xfff
    13ee:	4b06      	ldr	r3, [pc, #24]	; (1408 <_init_chip+0x38>)
    13f0:	4798      	blx	r3
    13f2:	bd08      	pop	{r3, pc}
    13f4:	41004000 	.word	0x41004000
    13f8:	00001509 	.word	0x00001509
    13fc:	0000151d 	.word	0x0000151d
    1400:	00001431 	.word	0x00001431
    1404:	00001539 	.word	0x00001539
    1408:	0000140d 	.word	0x0000140d

0000140c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    140c:	f010 0f01 	tst.w	r0, #1
    1410:	d008      	beq.n	1424 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1412:	4a05      	ldr	r2, [pc, #20]	; (1428 <_gclk_init_generators_by_fref+0x1c>)
    1414:	4b05      	ldr	r3, [pc, #20]	; (142c <_gclk_init_generators_by_fref+0x20>)
    1416:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1418:	4619      	mov	r1, r3
    141a:	f643 72fd 	movw	r2, #16381	; 0x3ffd
    141e:	684b      	ldr	r3, [r1, #4]
    1420:	4213      	tst	r3, r2
    1422:	d1fc      	bne.n	141e <_gclk_init_generators_by_fref+0x12>
    1424:	4770      	bx	lr
    1426:	bf00      	nop
    1428:	00010108 	.word	0x00010108
    142c:	40001c00 	.word	0x40001c00

00001430 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1430:	2201      	movs	r2, #1
    1432:	4b01      	ldr	r3, [pc, #4]	; (1438 <_mclk_init+0x8>)
    1434:	715a      	strb	r2, [r3, #5]
    1436:	4770      	bx	lr
    1438:	40000800 	.word	0x40000800

0000143c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    143c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    143e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1440:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1442:	f012 0f01 	tst.w	r2, #1
    1446:	d005      	beq.n	1454 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1448:	2201      	movs	r2, #1
    144a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    144c:	6803      	ldr	r3, [r0, #0]
    144e:	b153      	cbz	r3, 1466 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1450:	4798      	blx	r3
    1452:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1454:	8a1a      	ldrh	r2, [r3, #16]
    1456:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1458:	b12a      	cbz	r2, 1466 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    145a:	f240 225e 	movw	r2, #606	; 0x25e
    145e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1460:	6843      	ldr	r3, [r0, #4]
    1462:	b103      	cbz	r3, 1466 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1464:	4798      	blx	r3
    1466:	bd08      	pop	{r3, pc}

00001468 <_flash_init>:
{
    1468:	b538      	push	{r3, r4, r5, lr}
    146a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    146c:	4605      	mov	r5, r0
    146e:	b350      	cbz	r0, 14c6 <_flash_init+0x5e>
    1470:	4816      	ldr	r0, [pc, #88]	; (14cc <_flash_init+0x64>)
    1472:	4281      	cmp	r1, r0
    1474:	bf14      	ite	ne
    1476:	2000      	movne	r0, #0
    1478:	2001      	moveq	r0, #1
    147a:	224b      	movs	r2, #75	; 0x4b
    147c:	4914      	ldr	r1, [pc, #80]	; (14d0 <_flash_init+0x68>)
    147e:	4b15      	ldr	r3, [pc, #84]	; (14d4 <_flash_init+0x6c>)
    1480:	4798      	blx	r3
	device->hw = hw;
    1482:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    1484:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    1486:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    148a:	049b      	lsls	r3, r3, #18
    148c:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    148e:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    1490:	4b11      	ldr	r3, [pc, #68]	; (14d8 <_flash_init+0x70>)
    1492:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1494:	4b11      	ldr	r3, [pc, #68]	; (14dc <_flash_init+0x74>)
    1496:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    149a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    149e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14a2:	f3bf 8f6f 	isb	sy
    14a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    14aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    14ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14b2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14b6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    14ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14be:	6019      	str	r1, [r3, #0]
    14c0:	601a      	str	r2, [r3, #0]
}
    14c2:	2000      	movs	r0, #0
    14c4:	bd38      	pop	{r3, r4, r5, pc}
    14c6:	2000      	movs	r0, #0
    14c8:	e7d7      	b.n	147a <_flash_init+0x12>
    14ca:	bf00      	nop
    14cc:	41004000 	.word	0x41004000
    14d0:	0000268c 	.word	0x0000268c
    14d4:	000012fd 	.word	0x000012fd
    14d8:	2000008c 	.word	0x2000008c
    14dc:	e000e100 	.word	0xe000e100

000014e0 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    14e0:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    14e2:	4b02      	ldr	r3, [pc, #8]	; (14ec <NVMCTRL_0_Handler+0xc>)
    14e4:	6818      	ldr	r0, [r3, #0]
    14e6:	4b02      	ldr	r3, [pc, #8]	; (14f0 <NVMCTRL_0_Handler+0x10>)
    14e8:	4798      	blx	r3
    14ea:	bd08      	pop	{r3, pc}
    14ec:	2000008c 	.word	0x2000008c
    14f0:	0000143d 	.word	0x0000143d

000014f4 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    14f4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    14f6:	4b02      	ldr	r3, [pc, #8]	; (1500 <NVMCTRL_1_Handler+0xc>)
    14f8:	6818      	ldr	r0, [r3, #0]
    14fa:	4b02      	ldr	r3, [pc, #8]	; (1504 <NVMCTRL_1_Handler+0x10>)
    14fc:	4798      	blx	r3
    14fe:	bd08      	pop	{r3, pc}
    1500:	2000008c 	.word	0x2000008c
    1504:	0000143d 	.word	0x0000143d

00001508 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1508:	4b03      	ldr	r3, [pc, #12]	; (1518 <_osc32kctrl_init_sources+0x10>)
    150a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    150c:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1510:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1512:	2201      	movs	r2, #1
    1514:	741a      	strb	r2, [r3, #16]
    1516:	4770      	bx	lr
    1518:	40001400 	.word	0x40001400

0000151c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    151c:	4a04      	ldr	r2, [pc, #16]	; (1530 <_oscctrl_init_sources+0x14>)
    151e:	4b05      	ldr	r3, [pc, #20]	; (1534 <_oscctrl_init_sources+0x18>)
    1520:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    1522:	461a      	mov	r2, r3
    1524:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    1526:	f013 0f02 	tst.w	r3, #2
    152a:	d0fb      	beq.n	1524 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    152c:	4770      	bx	lr
    152e:	bf00      	nop
    1530:	03002606 	.word	0x03002606
    1534:	40001000 	.word	0x40001000

00001538 <_oscctrl_init_referenced_generators>:
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1538:	f240 123f 	movw	r2, #319	; 0x13f
    153c:	4b13      	ldr	r3, [pc, #76]	; (158c <_oscctrl_init_referenced_generators+0x54>)
    153e:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1540:	461a      	mov	r2, r3
    1542:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1544:	f013 0f06 	tst.w	r3, #6
    1548:	d1fb      	bne.n	1542 <_oscctrl_init_referenced_generators+0xa>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    154a:	4b10      	ldr	r3, [pc, #64]	; (158c <_oscctrl_init_referenced_generators+0x54>)
    154c:	2230      	movs	r2, #48	; 0x30
    154e:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    1550:	2202      	movs	r2, #2
    1552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1556:	461a      	mov	r2, r3
    1558:	6d13      	ldr	r3, [r2, #80]	; 0x50
    155a:	f013 0f02 	tst.w	r3, #2
    155e:	d1fb      	bne.n	1558 <_oscctrl_init_referenced_generators+0x20>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1560:	4b0a      	ldr	r3, [pc, #40]	; (158c <_oscctrl_init_referenced_generators+0x54>)
    1562:	6d5a      	ldr	r2, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1564:	f012 0f01 	tst.w	r2, #1
    1568:	d103      	bne.n	1572 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    156a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    156c:	f012 0f02 	tst.w	r2, #2
    1570:	d0f7      	beq.n	1562 <_oscctrl_init_referenced_generators+0x2a>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ONDEMAND;
    1572:	4a06      	ldr	r2, [pc, #24]	; (158c <_oscctrl_init_referenced_generators+0x54>)
    1574:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
    1578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    157c:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1580:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1582:	f013 0f06 	tst.w	r3, #6
    1586:	d1fb      	bne.n	1580 <_oscctrl_init_referenced_generators+0x48>
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    1588:	4770      	bx	lr
    158a:	bf00      	nop
    158c:	40001000 	.word	0x40001000

00001590 <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
    1590:	b538      	push	{r3, r4, r5, lr}
    1592:	460c      	mov	r4, r1
	ASSERT(dev && hw);
    1594:	4605      	mov	r5, r0
    1596:	b180      	cbz	r0, 15ba <_qspi_sync_init+0x2a>
    1598:	1c08      	adds	r0, r1, #0
    159a:	bf18      	it	ne
    159c:	2001      	movne	r0, #1
    159e:	2240      	movs	r2, #64	; 0x40
    15a0:	4907      	ldr	r1, [pc, #28]	; (15c0 <_qspi_sync_init+0x30>)
    15a2:	4b08      	ldr	r3, [pc, #32]	; (15c4 <_qspi_sync_init+0x34>)
    15a4:	4798      	blx	r3
	dev->prvt = hw;
    15a6:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
    15a8:	2301      	movs	r3, #1
    15aa:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
    15ac:	2311      	movs	r3, #17
    15ae:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
    15b0:	f44f 7300 	mov.w	r3, #512	; 0x200
    15b4:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
    15b6:	2000      	movs	r0, #0
    15b8:	bd38      	pop	{r3, r4, r5, pc}
    15ba:	2000      	movs	r0, #0
    15bc:	e7ef      	b.n	159e <_qspi_sync_init+0xe>
    15be:	bf00      	nop
    15c0:	000026ac 	.word	0x000026ac
    15c4:	000012fd 	.word	0x000012fd

000015c8 <_qspi_sync_deinit>:

int32_t _qspi_sync_deinit(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_SWRST);
    15c8:	6803      	ldr	r3, [r0, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    15ca:	2201      	movs	r2, #1
    15cc:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    15ce:	2000      	movs	r0, #0
    15d0:	4770      	bx	lr

000015d2 <_qspi_sync_enable>:

int32_t _qspi_sync_enable(struct _qspi_sync_dev *dev)
{
	hri_qspi_write_CTRLA_reg(dev->prvt, QSPI_CTRLA_ENABLE);
    15d2:	6803      	ldr	r3, [r0, #0]
    15d4:	2202      	movs	r2, #2
    15d6:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
}
    15d8:	2000      	movs	r0, #0
    15da:	4770      	bx	lr

000015dc <_qspi_sync_serial_run_command>:
	__DSB();
	__ISB();
}

int32_t _qspi_sync_serial_run_command(struct _qspi_sync_dev *dev, const struct _qspi_command *cmd)
{
    15dc:	b570      	push	{r4, r5, r6, lr}
    15de:	4605      	mov	r5, r0
    15e0:	460c      	mov	r4, r1
	void *hw = dev->prvt;
    15e2:	6803      	ldr	r3, [r0, #0]
	if (cmd->inst_frame.bits.addr_en) {
    15e4:	780a      	ldrb	r2, [r1, #0]
    15e6:	f012 0f20 	tst.w	r2, #32
		hri_qspi_write_INSTRADDR_reg(hw, cmd->address);
    15ea:	bf1c      	itt	ne
    15ec:	688a      	ldrne	r2, [r1, #8]
}

static inline void hri_qspi_write_INSTRADDR_reg(const void *const hw, hri_qspi_instraddr_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRADDR.reg = data;
    15ee:	631a      	strne	r2, [r3, #48]	; 0x30
	if (cmd->inst_frame.bits.inst_en) {
    15f0:	780a      	ldrb	r2, [r1, #0]
    15f2:	f012 0f10 	tst.w	r2, #16
    15f6:	d005      	beq.n	1604 <_qspi_sync_serial_run_command+0x28>

static inline void hri_qspi_write_INSTRCTRL_INSTR_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    15f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_INSTR_Msk;
    15fa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
		hri_qspi_write_INSTRCTRL_INSTR_bf(hw, cmd->instruction);
    15fe:	7922      	ldrb	r2, [r4, #4]
	tmp |= QSPI_INSTRCTRL_INSTR(data);
    1600:	430a      	orrs	r2, r1
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    1602:	635a      	str	r2, [r3, #52]	; 0x34
	if (cmd->inst_frame.bits.opt_en) {
    1604:	7822      	ldrb	r2, [r4, #0]
    1606:	f012 0f40 	tst.w	r2, #64	; 0x40
    160a:	d006      	beq.n	161a <_qspi_sync_serial_run_command+0x3e>

static inline void hri_qspi_write_INSTRCTRL_OPTCODE_bf(const void *const hw, hri_qspi_instrctrl_reg_t data)
{
	uint32_t tmp;
	QSPI_CRITICAL_SECTION_ENTER();
	tmp = ((Qspi *)hw)->INSTRCTRL.reg;
    160c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	tmp &= ~QSPI_INSTRCTRL_OPTCODE_Msk;
    160e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
		hri_qspi_write_INSTRCTRL_OPTCODE_bf(hw, cmd->option);
    1612:	7961      	ldrb	r1, [r4, #5]
	tmp |= QSPI_INSTRCTRL_OPTCODE(data);
    1614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	((Qspi *)hw)->INSTRCTRL.reg = tmp;
    1618:	635a      	str	r2, [r3, #52]	; 0x34
	hri_qspi_write_INSTRFRAME_reg(hw, cmd->inst_frame.word);
    161a:	6822      	ldr	r2, [r4, #0]
}

static inline void hri_qspi_write_INSTRFRAME_reg(const void *const hw, hri_qspi_instrframe_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->INSTRFRAME.reg = data;
    161c:	639a      	str	r2, [r3, #56]	; 0x38
	_qspi_sync_command_set_ifr(dev, cmd);

	if (cmd->inst_frame.bits.data_en) {
    161e:	7823      	ldrb	r3, [r4, #0]
    1620:	f013 0f80 	tst.w	r3, #128	; 0x80
    1624:	d10c      	bne.n	1640 <_qspi_sync_serial_run_command+0x64>
		_qspi_sync_run_transfer(dev, cmd);
	}

	_qspi_end_transfer(dev->prvt);
    1626:	682b      	ldr	r3, [r5, #0]
	((Qspi *)hw)->CTRLA.reg = data;
    1628:	4a1f      	ldr	r2, [pc, #124]	; (16a8 <_qspi_sync_serial_run_command+0xcc>)
    162a:	601a      	str	r2, [r3, #0]

	while (!hri_qspi_get_INTFLAG_INSTREND_bit(dev->prvt))
    162c:	682a      	ldr	r2, [r5, #0]
	return (((Qspi *)hw)->INTFLAG.reg & QSPI_INTFLAG_INSTREND) >> QSPI_INTFLAG_INSTREND_Pos;
    162e:	69d3      	ldr	r3, [r2, #28]
    1630:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1634:	d0fb      	beq.n	162e <_qspi_sync_serial_run_command+0x52>
	((Qspi *)hw)->INTFLAG.reg = QSPI_INTFLAG_INSTREND;
    1636:	f44f 6380 	mov.w	r3, #1024	; 0x400
    163a:	61d3      	str	r3, [r2, #28]
		;
	hri_qspi_clear_INTFLAG_INSTREND_bit(dev->prvt);
	return ERR_NONE;
}
    163c:	2000      	movs	r0, #0
    163e:	bd70      	pop	{r4, r5, r6, pc}
	void *   hw       = dev->prvt;
    1640:	6829      	ldr	r1, [r5, #0]
	if (cmd->inst_frame.bits.addr_en)
    1642:	f013 0f20 	tst.w	r3, #32
		qspi_mem += cmd->address;
    1646:	bf1a      	itte	ne
    1648:	68a2      	ldrne	r2, [r4, #8]
    164a:	f102 6680 	addne.w	r6, r2, #67108864	; 0x4000000
	uint8_t *qspi_mem = (uint8_t *)QSPI_AHB;
    164e:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
	QSPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_qspi_instrframe_reg_t hri_qspi_read_INSTRFRAME_reg(const void *const hw)
{
	return ((Qspi *)hw)->INSTRFRAME.reg;
    1652:	6b8b      	ldr	r3, [r1, #56]	; 0x38
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    1654:	6923      	ldr	r3, [r4, #16]
    1656:	b1ab      	cbz	r3, 1684 <_qspi_sync_serial_run_command+0xa8>
    1658:	2001      	movs	r0, #1
    165a:	2282      	movs	r2, #130	; 0x82
    165c:	4913      	ldr	r1, [pc, #76]	; (16ac <_qspi_sync_serial_run_command+0xd0>)
    165e:	4b14      	ldr	r3, [pc, #80]	; (16b0 <_qspi_sync_serial_run_command+0xd4>)
    1660:	4798      	blx	r3
	if (cmd->tx_buf) {
    1662:	6923      	ldr	r3, [r4, #16]
    1664:	b19b      	cbz	r3, 168e <_qspi_sync_serial_run_command+0xb2>
		_qspi_memcpy((uint8_t *)qspi_mem, (uint8_t *)cmd->tx_buf, cmd->buf_len);
    1666:	68e0      	ldr	r0, [r4, #12]
	while (count--) {
    1668:	b138      	cbz	r0, 167a <_qspi_sync_serial_run_command+0x9e>
    166a:	1e72      	subs	r2, r6, #1
    166c:	4418      	add	r0, r3
		*dst++ = *src++;
    166e:	f813 1b01 	ldrb.w	r1, [r3], #1
    1672:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (count--) {
    1676:	4283      	cmp	r3, r0
    1678:	d1f9      	bne.n	166e <_qspi_sync_serial_run_command+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
    167a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    167e:	f3bf 8f6f 	isb	sy
    1682:	e7d0      	b.n	1626 <_qspi_sync_serial_run_command+0x4a>
	ASSERT(cmd->tx_buf || cmd->rx_buf);
    1684:	6960      	ldr	r0, [r4, #20]
    1686:	3000      	adds	r0, #0
    1688:	bf18      	it	ne
    168a:	2001      	movne	r0, #1
    168c:	e7e5      	b.n	165a <_qspi_sync_serial_run_command+0x7e>
		_qspi_memcpy((uint8_t *)cmd->rx_buf, (uint8_t *)qspi_mem, cmd->buf_len);
    168e:	6963      	ldr	r3, [r4, #20]
    1690:	68e1      	ldr	r1, [r4, #12]
	while (count--) {
    1692:	2900      	cmp	r1, #0
    1694:	d0f1      	beq.n	167a <_qspi_sync_serial_run_command+0x9e>
    1696:	3b01      	subs	r3, #1
    1698:	4431      	add	r1, r6
		*dst++ = *src++;
    169a:	f816 2b01 	ldrb.w	r2, [r6], #1
    169e:	f803 2f01 	strb.w	r2, [r3, #1]!
	while (count--) {
    16a2:	42b1      	cmp	r1, r6
    16a4:	d1f9      	bne.n	169a <_qspi_sync_serial_run_command+0xbe>
    16a6:	e7e8      	b.n	167a <_qspi_sync_serial_run_command+0x9e>
    16a8:	01000002 	.word	0x01000002
    16ac:	000026ac 	.word	0x000026ac
    16b0:	000012fd 	.word	0x000012fd

000016b4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    16b4:	b500      	push	{lr}
    16b6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    16b8:	4b0d      	ldr	r3, [pc, #52]	; (16f0 <RAMECC_Handler+0x3c>)
    16ba:	789b      	ldrb	r3, [r3, #2]
    16bc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    16be:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    16c0:	9b01      	ldr	r3, [sp, #4]
    16c2:	f013 0f02 	tst.w	r3, #2
    16c6:	d006      	beq.n	16d6 <RAMECC_Handler+0x22>
    16c8:	4b0a      	ldr	r3, [pc, #40]	; (16f4 <RAMECC_Handler+0x40>)
    16ca:	681b      	ldr	r3, [r3, #0]
    16cc:	b11b      	cbz	r3, 16d6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    16ce:	4a08      	ldr	r2, [pc, #32]	; (16f0 <RAMECC_Handler+0x3c>)
    16d0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    16d2:	4798      	blx	r3
    16d4:	e009      	b.n	16ea <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    16d6:	9b01      	ldr	r3, [sp, #4]
    16d8:	f013 0f01 	tst.w	r3, #1
    16dc:	d005      	beq.n	16ea <RAMECC_Handler+0x36>
    16de:	4b05      	ldr	r3, [pc, #20]	; (16f4 <RAMECC_Handler+0x40>)
    16e0:	685b      	ldr	r3, [r3, #4]
    16e2:	b113      	cbz	r3, 16ea <RAMECC_Handler+0x36>
    16e4:	4a02      	ldr	r2, [pc, #8]	; (16f0 <RAMECC_Handler+0x3c>)
    16e6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    16e8:	4798      	blx	r3
	} else {
		return;
	}
}
    16ea:	b003      	add	sp, #12
    16ec:	f85d fb04 	ldr.w	pc, [sp], #4
    16f0:	41020000 	.word	0x41020000
    16f4:	2000010c 	.word	0x2000010c

000016f8 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    16f8:	b538      	push	{r3, r4, r5, lr}
    16fa:	460c      	mov	r4, r1
	ASSERT(dev);
    16fc:	4605      	mov	r5, r0
    16fe:	2230      	movs	r2, #48	; 0x30
    1700:	4914      	ldr	r1, [pc, #80]	; (1754 <_timer_init+0x5c>)
    1702:	3000      	adds	r0, #0
    1704:	bf18      	it	ne
    1706:	2001      	movne	r0, #1
    1708:	4b13      	ldr	r3, [pc, #76]	; (1758 <_timer_init+0x60>)
    170a:	4798      	blx	r3

	dev->hw = hw;
    170c:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    170e:	2301      	movs	r3, #1
    1710:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1712:	f248 0203 	movw	r2, #32771	; 0x8003
    1716:	6923      	ldr	r3, [r4, #16]
    1718:	4213      	tst	r3, r2
    171a:	d1fc      	bne.n	1716 <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    171c:	68eb      	ldr	r3, [r5, #12]
    171e:	691a      	ldr	r2, [r3, #16]
    1720:	f012 0f01 	tst.w	r2, #1
    1724:	d1fb      	bne.n	171e <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1726:	f248 0280 	movw	r2, #32896	; 0x8080
    172a:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    172c:	f248 0103 	movw	r1, #32771	; 0x8003
    1730:	691a      	ldr	r2, [r3, #16]
    1732:	420a      	tst	r2, r1
    1734:	d1fc      	bne.n	1730 <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    1736:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    1738:	2320      	movs	r3, #32
    173a:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    173c:	6913      	ldr	r3, [r2, #16]
    173e:	f013 0f60 	tst.w	r3, #96	; 0x60
    1742:	d1fb      	bne.n	173c <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1744:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    1746:	f44f 7280 	mov.w	r2, #256	; 0x100
    174a:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    174c:	4b03      	ldr	r3, [pc, #12]	; (175c <_timer_init+0x64>)
    174e:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    1750:	2000      	movs	r0, #0
    1752:	bd38      	pop	{r3, r4, r5, pc}
    1754:	000026c4 	.word	0x000026c4
    1758:	000012fd 	.word	0x000012fd
    175c:	20000090 	.word	0x20000090

00001760 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1760:	2000      	movs	r0, #0
    1762:	4770      	bx	lr

00001764 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1764:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    1766:	4b08      	ldr	r3, [pc, #32]	; (1788 <RTC_Handler+0x24>)
    1768:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    176a:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    176c:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    176e:	f413 7f80 	tst.w	r3, #256	; 0x100
    1772:	d007      	beq.n	1784 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    1774:	6823      	ldr	r3, [r4, #0]
    1776:	b10b      	cbz	r3, 177c <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    1778:	4620      	mov	r0, r4
    177a:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    177c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    177e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1782:	819a      	strh	r2, [r3, #12]
    1784:	bd10      	pop	{r4, pc}
    1786:	bf00      	nop
    1788:	20000090 	.word	0x20000090

0000178c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    178c:	b470      	push	{r4, r5, r6}
    178e:	b087      	sub	sp, #28
    1790:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1792:	466c      	mov	r4, sp
    1794:	4d0c      	ldr	r5, [pc, #48]	; (17c8 <_sercom_get_hardware_index+0x3c>)
    1796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    179a:	e895 0003 	ldmia.w	r5, {r0, r1}
    179e:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    17a2:	9b00      	ldr	r3, [sp, #0]
    17a4:	42b3      	cmp	r3, r6
    17a6:	d00c      	beq.n	17c2 <_sercom_get_hardware_index+0x36>
    17a8:	4632      	mov	r2, r6
    17aa:	2001      	movs	r0, #1
    17ac:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    17b0:	4293      	cmp	r3, r2
    17b2:	d007      	beq.n	17c4 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17b4:	3001      	adds	r0, #1
    17b6:	2806      	cmp	r0, #6
    17b8:	d1f8      	bne.n	17ac <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    17ba:	2000      	movs	r0, #0
}
    17bc:	b007      	add	sp, #28
    17be:	bc70      	pop	{r4, r5, r6}
    17c0:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17c2:	2000      	movs	r0, #0
			return i;
    17c4:	b2c0      	uxtb	r0, r0
    17c6:	e7f9      	b.n	17bc <_sercom_get_hardware_index+0x30>
    17c8:	000026dc 	.word	0x000026dc

000017cc <_spi_sync_enable>:
	};
}

static inline bool hri_sercomspi_is_syncing(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    17cc:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    17ce:	f013 0f01 	tst.w	r3, #1
    17d2:	d109      	bne.n	17e8 <_spi_sync_enable+0x1c>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    17d4:	6803      	ldr	r3, [r0, #0]
    17d6:	f043 0302 	orr.w	r3, r3, #2
    17da:	6003      	str	r3, [r0, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    17dc:	69c3      	ldr	r3, [r0, #28]
    17de:	f013 0f03 	tst.w	r3, #3
    17e2:	d1fb      	bne.n	17dc <_spi_sync_enable+0x10>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    17e4:	2000      	movs	r0, #0
    17e6:	4770      	bx	lr
		return ERR_BUSY;
    17e8:	f06f 0003 	mvn.w	r0, #3
}
    17ec:	4770      	bx	lr
	...

000017f0 <_i2c_s_init>:
{
    17f0:	b510      	push	{r4, lr}
    17f2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    17f4:	4b1d      	ldr	r3, [pc, #116]	; (186c <_i2c_s_init+0x7c>)
    17f6:	4798      	blx	r3
		if (_i2css[i].number == sercom_offset) {
    17f8:	2803      	cmp	r0, #3
    17fa:	d008      	beq.n	180e <_i2c_s_init+0x1e>
	ASSERT(false);
    17fc:	f240 72b7 	movw	r2, #1975	; 0x7b7
    1800:	491b      	ldr	r1, [pc, #108]	; (1870 <_i2c_s_init+0x80>)
    1802:	2000      	movs	r0, #0
    1804:	4b1b      	ldr	r3, [pc, #108]	; (1874 <_i2c_s_init+0x84>)
    1806:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1808:	f06f 000c 	mvn.w	r0, #12
}
    180c:	bd10      	pop	{r4, pc}
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    180e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    1810:	f013 0f01 	tst.w	r3, #1
    1814:	d119      	bne.n	184a <_i2c_s_init+0x5a>
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1816:	69e3      	ldr	r3, [r4, #28]
    1818:	f013 0f03 	tst.w	r3, #3
    181c:	d1fb      	bne.n	1816 <_i2c_s_init+0x26>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    181e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    1820:	f013 0f02 	tst.w	r3, #2
    1824:	d00b      	beq.n	183e <_i2c_s_init+0x4e>
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1826:	6823      	ldr	r3, [r4, #0]
    1828:	f023 0302 	bic.w	r3, r3, #2
    182c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    182e:	69e3      	ldr	r3, [r4, #28]
    1830:	f013 0f03 	tst.w	r3, #3
    1834:	d1fb      	bne.n	182e <_i2c_s_init+0x3e>
    1836:	69e3      	ldr	r3, [r4, #28]
    1838:	f013 0f02 	tst.w	r3, #2
    183c:	d1fb      	bne.n	1836 <_i2c_s_init+0x46>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    183e:	2311      	movs	r3, #17
    1840:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1842:	69e3      	ldr	r3, [r4, #28]
    1844:	f013 0f03 	tst.w	r3, #3
    1848:	d1fb      	bne.n	1842 <_i2c_s_init+0x52>
    184a:	69e3      	ldr	r3, [r4, #28]
    184c:	f013 0f01 	tst.w	r3, #1
    1850:	d1fb      	bne.n	184a <_i2c_s_init+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    1852:	4b09      	ldr	r3, [pc, #36]	; (1878 <_i2c_s_init+0x88>)
    1854:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1856:	69e3      	ldr	r3, [r4, #28]
    1858:	f013 0f03 	tst.w	r3, #3
    185c:	d1fb      	bne.n	1856 <_i2c_s_init+0x66>
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    185e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    1862:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    1864:	2320      	movs	r3, #32
    1866:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    1868:	2000      	movs	r0, #0
    186a:	bd10      	pop	{r4, pc}
    186c:	0000178d 	.word	0x0000178d
    1870:	0000270c 	.word	0x0000270c
    1874:	000012fd 	.word	0x000012fd
    1878:	00200090 	.word	0x00200090

0000187c <_i2c_s_set_address>:
{
    187c:	b570      	push	{r4, r5, r6, lr}
    187e:	b082      	sub	sp, #8
    1880:	4604      	mov	r4, r0
    1882:	460e      	mov	r6, r1
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1884:	69e3      	ldr	r3, [r4, #28]
    1886:	f013 0f03 	tst.w	r3, #3
    188a:	d1fb      	bne.n	1884 <_i2c_s_set_address+0x8>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    188c:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_I2CS_CTRLA_ENABLE) >> SERCOM_I2CS_CTRLA_ENABLE_Pos;
    188e:	f3c5 0540 	ubfx	r5, r5, #1, #1
	CRITICAL_SECTION_ENTER()
    1892:	a801      	add	r0, sp, #4
    1894:	4b11      	ldr	r3, [pc, #68]	; (18dc <_i2c_s_set_address+0x60>)
    1896:	4798      	blx	r3
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1898:	6823      	ldr	r3, [r4, #0]
    189a:	f023 0302 	bic.w	r3, r3, #2
    189e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    18a0:	69e3      	ldr	r3, [r4, #28]
    18a2:	f013 0f03 	tst.w	r3, #3
    18a6:	d1fb      	bne.n	18a0 <_i2c_s_set_address+0x24>
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    18a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CS_ADDR_ADDR_Msk;
    18aa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    18ae:	f023 0306 	bic.w	r3, r3, #6
	tmp |= SERCOM_I2CS_ADDR_ADDR(data);
    18b2:	f240 71fe 	movw	r1, #2046	; 0x7fe
    18b6:	ea01 0146 	and.w	r1, r1, r6, lsl #1
    18ba:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CS.ADDR.reg = tmp;
    18bc:	6261      	str	r1, [r4, #36]	; 0x24
	CRITICAL_SECTION_LEAVE()
    18be:	a801      	add	r0, sp, #4
    18c0:	4b07      	ldr	r3, [pc, #28]	; (18e0 <_i2c_s_set_address+0x64>)
    18c2:	4798      	blx	r3
	if (enabled) {
    18c4:	b13d      	cbz	r5, 18d6 <_i2c_s_set_address+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    18c6:	6823      	ldr	r3, [r4, #0]
    18c8:	f043 0302 	orr.w	r3, r3, #2
    18cc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    18ce:	69e3      	ldr	r3, [r4, #28]
    18d0:	f013 0f03 	tst.w	r3, #3
    18d4:	d1fb      	bne.n	18ce <_i2c_s_set_address+0x52>
}
    18d6:	2000      	movs	r0, #0
    18d8:	b002      	add	sp, #8
    18da:	bd70      	pop	{r4, r5, r6, pc}
    18dc:	00000d31 	.word	0x00000d31
    18e0:	00000d3f 	.word	0x00000d3f

000018e4 <_i2c_s_sync_init>:
{
    18e4:	b538      	push	{r3, r4, r5, lr}
    18e6:	460c      	mov	r4, r1
	ASSERT(device);
    18e8:	4605      	mov	r5, r0
    18ea:	f240 62a6 	movw	r2, #1702	; 0x6a6
    18ee:	4907      	ldr	r1, [pc, #28]	; (190c <_i2c_s_sync_init+0x28>)
    18f0:	3000      	adds	r0, #0
    18f2:	bf18      	it	ne
    18f4:	2001      	movne	r0, #1
    18f6:	4b06      	ldr	r3, [pc, #24]	; (1910 <_i2c_s_sync_init+0x2c>)
    18f8:	4798      	blx	r3
	status = _i2c_s_init(hw);
    18fa:	4620      	mov	r0, r4
    18fc:	4b05      	ldr	r3, [pc, #20]	; (1914 <_i2c_s_sync_init+0x30>)
    18fe:	4798      	blx	r3
	if (status) {
    1900:	4603      	mov	r3, r0
    1902:	b900      	cbnz	r0, 1906 <_i2c_s_sync_init+0x22>
	device->hw = hw;
    1904:	602c      	str	r4, [r5, #0]
}
    1906:	4618      	mov	r0, r3
    1908:	bd38      	pop	{r3, r4, r5, pc}
    190a:	bf00      	nop
    190c:	0000270c 	.word	0x0000270c
    1910:	000012fd 	.word	0x000012fd
    1914:	000017f1 	.word	0x000017f1

00001918 <_i2c_s_sync_enable>:
	hri_sercomi2cs_set_CTRLA_ENABLE_bit(device->hw);
    1918:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    191a:	6813      	ldr	r3, [r2, #0]
    191c:	f043 0302 	orr.w	r3, r3, #2
    1920:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1922:	69d3      	ldr	r3, [r2, #28]
    1924:	f013 0f03 	tst.w	r3, #3
    1928:	d1fb      	bne.n	1922 <_i2c_s_sync_enable+0xa>
}
    192a:	2000      	movs	r0, #0
    192c:	4770      	bx	lr

0000192e <_i2c_s_sync_is_10bit_addressing_on>:
	return hri_sercomi2cs_get_ADDR_TENBITEN_bit(device->hw);
    192e:	6803      	ldr	r3, [r0, #0]
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1930:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1932:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    1936:	4770      	bx	lr

00001938 <_i2c_s_sync_set_address>:
{
    1938:	b508      	push	{r3, lr}
	return _i2c_s_set_address(device->hw, address);
    193a:	6800      	ldr	r0, [r0, #0]
    193c:	4b01      	ldr	r3, [pc, #4]	; (1944 <_i2c_s_sync_set_address+0xc>)
    193e:	4798      	blx	r3
}
    1940:	bd08      	pop	{r3, pc}
    1942:	bf00      	nop
    1944:	0000187d 	.word	0x0000187d

00001948 <_i2c_s_sync_write_byte>:
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    1948:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    194a:	6299      	str	r1, [r3, #40]	; 0x28
    194c:	4770      	bx	lr

0000194e <_i2c_s_sync_read_byte>:
	return hri_sercomi2cs_read_DATA_reg(device->hw);
    194e:	6803      	ldr	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->I2CS.DATA.reg;
    1950:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1952:	b2c0      	uxtb	r0, r0
    1954:	4770      	bx	lr

00001956 <_i2c_s_sync_is_byte_sent>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1956:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) >> SERCOM_I2CS_INTFLAG_DRDY_Pos;
    1958:	7e18      	ldrb	r0, [r3, #24]
}
    195a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    195e:	4770      	bx	lr

00001960 <_i2c_s_sync_is_byte_received>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1960:	6803      	ldr	r3, [r0, #0]
    1962:	7e18      	ldrb	r0, [r3, #24]
}
    1964:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1968:	4770      	bx	lr

0000196a <_i2c_s_sync_clear_data_ready_flag>:
	hri_sercomi2cs_clear_INTFLAG_DRDY_bit(device->hw);
    196a:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_DRDY;
    196c:	2204      	movs	r2, #4
    196e:	761a      	strb	r2, [r3, #24]
}
    1970:	2000      	movs	r0, #0
    1972:	4770      	bx	lr

00001974 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1974:	b538      	push	{r3, r4, r5, lr}
    1976:	4605      	mov	r5, r0
    1978:	460c      	mov	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    197a:	4608      	mov	r0, r1
    197c:	4b36      	ldr	r3, [pc, #216]	; (1a58 <_spi_m_sync_init+0xe4>)
    197e:	4798      	blx	r3
		if (sercomspi_regs[i].n == n) {
    1980:	b160      	cbz	r0, 199c <_spi_m_sync_init+0x28>
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1982:	2d00      	cmp	r5, #0
    1984:	d055      	beq.n	1a32 <_spi_m_sync_init+0xbe>
    1986:	f640 123c 	movw	r2, #2364	; 0x93c
    198a:	4934      	ldr	r1, [pc, #208]	; (1a5c <_spi_m_sync_init+0xe8>)
    198c:	1c20      	adds	r0, r4, #0
    198e:	bf18      	it	ne
    1990:	2001      	movne	r0, #1
    1992:	4b33      	ldr	r3, [pc, #204]	; (1a60 <_spi_m_sync_init+0xec>)
    1994:	4798      	blx	r3

	if (regs == NULL) {
		return ERR_INVALID_ARG;
    1996:	f06f 000c 	mvn.w	r0, #12
    199a:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    199c:	2d00      	cmp	r5, #0
    199e:	d151      	bne.n	1a44 <_spi_m_sync_init+0xd0>
    19a0:	f640 123c 	movw	r2, #2364	; 0x93c
    19a4:	492d      	ldr	r1, [pc, #180]	; (1a5c <_spi_m_sync_init+0xe8>)
    19a6:	2000      	movs	r0, #0
    19a8:	4b2d      	ldr	r3, [pc, #180]	; (1a60 <_spi_m_sync_init+0xec>)
    19aa:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    19ac:	69e3      	ldr	r3, [r4, #28]
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    19ae:	f013 0f01 	tst.w	r3, #1
    19b2:	d119      	bne.n	19e8 <_spi_m_sync_init+0x74>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19b4:	69e3      	ldr	r3, [r4, #28]
    19b6:	f013 0f03 	tst.w	r3, #3
    19ba:	d1fb      	bne.n	19b4 <_spi_m_sync_init+0x40>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    19bc:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    19be:	f013 0f02 	tst.w	r3, #2
    19c2:	d00b      	beq.n	19dc <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    19c4:	6823      	ldr	r3, [r4, #0]
    19c6:	f023 0302 	bic.w	r3, r3, #2
    19ca:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19cc:	69e3      	ldr	r3, [r4, #28]
    19ce:	f013 0f03 	tst.w	r3, #3
    19d2:	d1fb      	bne.n	19cc <_spi_m_sync_init+0x58>
    19d4:	69e3      	ldr	r3, [r4, #28]
    19d6:	f013 0f02 	tst.w	r3, #2
    19da:	d1fb      	bne.n	19d4 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    19dc:	230d      	movs	r3, #13
    19de:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    19e0:	69e3      	ldr	r3, [r4, #28]
    19e2:	f013 0f03 	tst.w	r3, #3
    19e6:	d1fb      	bne.n	19e0 <_spi_m_sync_init+0x6c>
    19e8:	69e3      	ldr	r3, [r4, #28]
    19ea:	f013 0f01 	tst.w	r3, #1
    19ee:	d1fb      	bne.n	19e8 <_spi_m_sync_init+0x74>
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;
    19f0:	602c      	str	r4, [r5, #0]
	ASSERT(hw && regs);
    19f2:	f640 1206 	movw	r2, #2310	; 0x906
    19f6:	4919      	ldr	r1, [pc, #100]	; (1a5c <_spi_m_sync_init+0xe8>)
    19f8:	1c20      	adds	r0, r4, #0
    19fa:	bf18      	it	ne
    19fc:	2001      	movne	r0, #1
    19fe:	4b18      	ldr	r3, [pc, #96]	; (1a60 <_spi_m_sync_init+0xec>)
    1a00:	4798      	blx	r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1a02:	4b18      	ldr	r3, [pc, #96]	; (1a64 <_spi_m_sync_init+0xf0>)
    1a04:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a06:	69e3      	ldr	r3, [r4, #28]
    1a08:	f013 0f03 	tst.w	r3, #3
    1a0c:	d1fb      	bne.n	1a06 <_spi_m_sync_init+0x92>
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1a0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1a12:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1a14:	69e3      	ldr	r3, [r4, #28]
    1a16:	f013 0f17 	tst.w	r3, #23
    1a1a:	d1fb      	bne.n	1a14 <_spi_m_sync_init+0xa0>
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1a1c:	230e      	movs	r3, #14
    1a1e:	7323      	strb	r3, [r4, #12]
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1a20:	2000      	movs	r0, #0
    1a22:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1a26:	2301      	movs	r3, #1
    1a28:	712b      	strb	r3, [r5, #4]

	dev->dummy_byte = regs->dummy_byte;
    1a2a:	f240 13ff 	movw	r3, #511	; 0x1ff
    1a2e:	80eb      	strh	r3, [r5, #6]

	return ERR_NONE;
    1a30:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1a32:	f640 123c 	movw	r2, #2364	; 0x93c
    1a36:	4909      	ldr	r1, [pc, #36]	; (1a5c <_spi_m_sync_init+0xe8>)
    1a38:	2000      	movs	r0, #0
    1a3a:	4b09      	ldr	r3, [pc, #36]	; (1a60 <_spi_m_sync_init+0xec>)
    1a3c:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1a3e:	f06f 000c 	mvn.w	r0, #12
    1a42:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(dev && hw);
    1a44:	f640 123c 	movw	r2, #2364	; 0x93c
    1a48:	4904      	ldr	r1, [pc, #16]	; (1a5c <_spi_m_sync_init+0xe8>)
    1a4a:	1c20      	adds	r0, r4, #0
    1a4c:	bf18      	it	ne
    1a4e:	2001      	movne	r0, #1
    1a50:	4b03      	ldr	r3, [pc, #12]	; (1a60 <_spi_m_sync_init+0xec>)
    1a52:	4798      	blx	r3
    1a54:	e7aa      	b.n	19ac <_spi_m_sync_init+0x38>
    1a56:	bf00      	nop
    1a58:	0000178d 	.word	0x0000178d
    1a5c:	0000270c 	.word	0x0000270c
    1a60:	000012fd 	.word	0x000012fd
    1a64:	4020000c 	.word	0x4020000c

00001a68 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1a68:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
    1a6a:	4604      	mov	r4, r0
    1a6c:	b160      	cbz	r0, 1a88 <_spi_m_sync_enable+0x20>
    1a6e:	6800      	ldr	r0, [r0, #0]
    1a70:	3000      	adds	r0, #0
    1a72:	bf18      	it	ne
    1a74:	2001      	movne	r0, #1
    1a76:	f640 129b 	movw	r2, #2459	; 0x99b
    1a7a:	4904      	ldr	r1, [pc, #16]	; (1a8c <_spi_m_sync_enable+0x24>)
    1a7c:	4b04      	ldr	r3, [pc, #16]	; (1a90 <_spi_m_sync_enable+0x28>)
    1a7e:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1a80:	6820      	ldr	r0, [r4, #0]
    1a82:	4b04      	ldr	r3, [pc, #16]	; (1a94 <_spi_m_sync_enable+0x2c>)
    1a84:	4798      	blx	r3
}
    1a86:	bd10      	pop	{r4, pc}
    1a88:	2000      	movs	r0, #0
    1a8a:	e7f4      	b.n	1a76 <_spi_m_sync_enable+0xe>
    1a8c:	0000270c 	.word	0x0000270c
    1a90:	000012fd 	.word	0x000012fd
    1a94:	000017cd 	.word	0x000017cd

00001a98 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1a9c:	4681      	mov	r9, r0
    1a9e:	460e      	mov	r6, r1
	void *                 hw   = dev->prvt;
    1aa0:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1aa2:	f8d1 8000 	ldr.w	r8, [r1]
    1aa6:	684d      	ldr	r5, [r1, #4]
    1aa8:	7907      	ldrb	r7, [r0, #4]

	ASSERT(dev && hw);
    1aaa:	b1a8      	cbz	r0, 1ad8 <_spi_m_sync_trans+0x40>
    1aac:	1c20      	adds	r0, r4, #0
    1aae:	bf18      	it	ne
    1ab0:	2001      	movne	r0, #1
    1ab2:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
    1ab6:	492e      	ldr	r1, [pc, #184]	; (1b70 <_spi_m_sync_trans+0xd8>)
    1ab8:	4b2e      	ldr	r3, [pc, #184]	; (1b74 <_spi_m_sync_trans+0xdc>)
    1aba:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1abc:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1abe:	f013 0f07 	tst.w	r3, #7
    1ac2:	d134      	bne.n	1b2e <_spi_m_sync_trans+0x96>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1ac4:	69e0      	ldr	r0, [r4, #28]
    1ac6:	f010 0003 	ands.w	r0, r0, #3
    1aca:	d1fb      	bne.n	1ac4 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1acc:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1ace:	f013 0f02 	tst.w	r3, #2
    1ad2:	d030      	beq.n	1b36 <_spi_m_sync_trans+0x9e>
    1ad4:	4602      	mov	r2, r0
    1ad6:	e008      	b.n	1aea <_spi_m_sync_trans+0x52>
    1ad8:	2000      	movs	r0, #0
    1ada:	e7ea      	b.n	1ab2 <_spi_m_sync_trans+0x1a>
	ctrl->rxcnt++;
    1adc:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    1ade:	f013 0f80 	tst.w	r3, #128	; 0x80
    1ae2:	d112      	bne.n	1b0a <_spi_m_sync_trans+0x72>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1ae4:	68b3      	ldr	r3, [r6, #8]
    1ae6:	4283      	cmp	r3, r0
    1ae8:	d91e      	bls.n	1b28 <_spi_m_sync_trans+0x90>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1aea:	7e23      	ldrb	r3, [r4, #24]
    1aec:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1aee:	f013 0f04 	tst.w	r3, #4
    1af2:	d024      	beq.n	1b3e <_spi_m_sync_trans+0xa6>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1af4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    1af6:	2d00      	cmp	r5, #0
    1af8:	d0f0      	beq.n	1adc <_spi_m_sync_trans+0x44>
		*ctrl->rxbuf++ = (uint8_t)data;
    1afa:	7029      	strb	r1, [r5, #0]
		if (ctrl->char_size > 1) {
    1afc:	2f01      	cmp	r7, #1
		*ctrl->rxbuf++ = (uint8_t)data;
    1afe:	bf91      	iteee	ls
    1b00:	3501      	addls	r5, #1
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1b02:	0a09      	lsrhi	r1, r1, #8
    1b04:	7069      	strbhi	r1, [r5, #1]
    1b06:	3502      	addhi	r5, #2
    1b08:	e7e8      	b.n	1adc <_spi_m_sync_trans+0x44>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    1b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1b0e:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1b10:	2380      	movs	r3, #128	; 0x80
    1b12:	7623      	strb	r3, [r4, #24]
		return ERR_OVERFLOW;
    1b14:	f06f 0012 	mvn.w	r0, #18
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1b18:	7e23      	ldrb	r3, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1b1a:	f013 0f03 	tst.w	r3, #3
    1b1e:	d0fb      	beq.n	1b18 <_spi_m_sync_trans+0x80>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1b20:	2303      	movs	r3, #3
    1b22:	7623      	strb	r3, [r4, #24]
		}
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
    1b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1b28:	4293      	cmp	r3, r2
    1b2a:	d8de      	bhi.n	1aea <_spi_m_sync_trans+0x52>
    1b2c:	e7f4      	b.n	1b18 <_spi_m_sync_trans+0x80>
		return ERR_BUSY;
    1b2e:	f06f 0003 	mvn.w	r0, #3
    1b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ERR_NOT_INITIALIZED;
    1b36:	f06f 0013 	mvn.w	r0, #19
    1b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1b3e:	4290      	cmp	r0, r2
    1b40:	d8cd      	bhi.n	1ade <_spi_m_sync_trans+0x46>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1b42:	f013 0f01 	tst.w	r3, #1
    1b46:	d0ca      	beq.n	1ade <_spi_m_sync_trans+0x46>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1b48:	f8b9 1006 	ldrh.w	r1, [r9, #6]
	if (ctrl->txbuf) {
    1b4c:	f1b8 0f00 	cmp.w	r8, #0
    1b50:	d00b      	beq.n	1b6a <_spi_m_sync_trans+0xd2>
		data = *ctrl->txbuf++;
    1b52:	f898 1000 	ldrb.w	r1, [r8]
		if (ctrl->char_size > 1) {
    1b56:	2f01      	cmp	r7, #1
		data = *ctrl->txbuf++;
    1b58:	bf91      	iteee	ls
    1b5a:	f108 0801 	addls.w	r8, r8, #1
			data |= (*ctrl->txbuf) << 8;
    1b5e:	f898 e001 	ldrbhi.w	lr, [r8, #1]
    1b62:	ea41 210e 	orrhi.w	r1, r1, lr, lsl #8
			ctrl->txbuf++;
    1b66:	f108 0802 	addhi.w	r8, r8, #2
	ctrl->txcnt++;
    1b6a:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1b6c:	62a1      	str	r1, [r4, #40]	; 0x28
    1b6e:	e7b6      	b.n	1ade <_spi_m_sync_trans+0x46>
    1b70:	0000270c 	.word	0x0000270c
    1b74:	000012fd 	.word	0x000012fd

00001b78 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    1b78:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1b7a:	4604      	mov	r4, r0
    1b7c:	b330      	cbz	r0, 1bcc <_wdt_init+0x54>
    1b7e:	6800      	ldr	r0, [r0, #0]
    1b80:	3000      	adds	r0, #0
    1b82:	bf18      	it	ne
    1b84:	2001      	movne	r0, #1
    1b86:	2250      	movs	r2, #80	; 0x50
    1b88:	4914      	ldr	r1, [pc, #80]	; (1bdc <_wdt_init+0x64>)
    1b8a:	4b15      	ldr	r3, [pc, #84]	; (1be0 <_wdt_init+0x68>)
    1b8c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    1b8e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1b90:	689a      	ldr	r2, [r3, #8]
    1b92:	f012 0f0e 	tst.w	r2, #14
    1b96:	d1fb      	bne.n	1b90 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1b98:	781a      	ldrb	r2, [r3, #0]
    1b9a:	09d2      	lsrs	r2, r2, #7
    1b9c:	d118      	bne.n	1bd0 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1b9e:	689a      	ldr	r2, [r3, #8]
    1ba0:	f012 0f0e 	tst.w	r2, #14
    1ba4:	d1fb      	bne.n	1b9e <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    1ba6:	781a      	ldrb	r2, [r3, #0]
    1ba8:	f012 0f02 	tst.w	r2, #2
    1bac:	d113      	bne.n	1bd6 <_wdt_init+0x5e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    1bae:	781a      	ldrb	r2, [r3, #0]
    1bb0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    1bb4:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    1bb6:	689a      	ldr	r2, [r3, #8]
    1bb8:	f012 0f0e 	tst.w	r2, #14
    1bbc:	d1fb      	bne.n	1bb6 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    1bbe:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    1bc0:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    1bc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    1bc6:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    1bc8:	2000      	movs	r0, #0
    1bca:	bd10      	pop	{r4, pc}
    1bcc:	2000      	movs	r0, #0
    1bce:	e7da      	b.n	1b86 <_wdt_init+0xe>
		return ERR_DENIED;
    1bd0:	f06f 0010 	mvn.w	r0, #16
    1bd4:	bd10      	pop	{r4, pc}
    1bd6:	f06f 0010 	mvn.w	r0, #16
}
    1bda:	bd10      	pop	{r4, pc}
    1bdc:	00002728 	.word	0x00002728
    1be0:	000012fd 	.word	0x000012fd

00001be4 <system_off>:
	while(PM->SLEEPCFG.bit.SLEEPMODE != PM_SLEEPCFG_SLEEPMODE_HIBERNATE);
	_go_to_sleep();
}

void system_off(void) // < 1mA draw
{
    1be4:	b508      	push	{r3, lr}
	PM->SLEEPCFG.bit.SLEEPMODE = PM_SLEEPCFG_SLEEPMODE_OFF;
    1be6:	4a06      	ldr	r2, [pc, #24]	; (1c00 <system_off+0x1c>)
    1be8:	7853      	ldrb	r3, [r2, #1]
    1bea:	f043 0307 	orr.w	r3, r3, #7
    1bee:	7053      	strb	r3, [r2, #1]
	while(PM->SLEEPCFG.bit.SLEEPMODE != PM_SLEEPCFG_SLEEPMODE_OFF);
    1bf0:	7853      	ldrb	r3, [r2, #1]
    1bf2:	f003 0307 	and.w	r3, r3, #7
    1bf6:	2b07      	cmp	r3, #7
    1bf8:	d1fa      	bne.n	1bf0 <system_off+0xc>
	_go_to_sleep();	
    1bfa:	4b02      	ldr	r3, [pc, #8]	; (1c04 <system_off+0x20>)
    1bfc:	4798      	blx	r3
    1bfe:	bd08      	pop	{r3, pc}
    1c00:	40000400 	.word	0x40000400
    1c04:	00001389 	.word	0x00001389

00001c08 <main>:
}

int main(void)
{	
    1c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c0c:	b082      	sub	sp, #8
	uint32_t ret; 
	atmel_start_init();
    1c0e:	4b28      	ldr	r3, [pc, #160]	; (1cb0 <main+0xa8>)
    1c10:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1c12:	a801      	add	r0, sp, #4
    1c14:	4b27      	ldr	r3, [pc, #156]	; (1cb4 <main+0xac>)
    1c16:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    1c18:	4b27      	ldr	r3, [pc, #156]	; (1cb8 <main+0xb0>)
    1c1a:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1c1c:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1c1e:	691c      	ldr	r4, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    1c20:	4054      	eors	r4, r2
    1c22:	400c      	ands	r4, r1
    1c24:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    1c26:	a801      	add	r0, sp, #4
    1c28:	4b24      	ldr	r3, [pc, #144]	; (1cbc <main+0xb4>)
    1c2a:	4798      	blx	r3

	
	 //nordic resets atmel, holds BOOT_PIN high to boot
	if(!gpio_get_pin_level(BOOT_PIN)) //pin low
    1c2c:	f414 5f80 	tst.w	r4, #4096	; 0x1000
    1c30:	d03b      	beq.n	1caa <main+0xa2>
	}

	
	while (1) 
	{
		I2C_read(i2c_buf, RX_LENGTH);
    1c32:	4c23      	ldr	r4, [pc, #140]	; (1cc0 <main+0xb8>)
    1c34:	4d23      	ldr	r5, [pc, #140]	; (1cc4 <main+0xbc>)
				uint32_t data_addr = i2c_buf[2] << 24 | i2c_buf[3] << 16 | i2c_buf[4] << 8 | i2c_buf[5];
				uint32_t data_len = i2c_buf[6] << 24 | i2c_buf[7] << 16 | i2c_buf[8] << 8 | i2c_buf[9];
				uint32_t start_address = i2c_buf[10] << 24 | i2c_buf[11] << 16 | i2c_buf[12] << 8 | i2c_buf[13]; //flash start address
				uint32_t chip_type = i2c_buf[14] << 24 | i2c_buf[15] << 16 | i2c_buf[16] << 8 | i2c_buf[17];
				
				ret = flash_target(data_addr, data_len, chip_type, start_address);
    1c36:	4e24      	ldr	r6, [pc, #144]	; (1cc8 <main+0xc0>)
		I2C_read(i2c_buf, RX_LENGTH);
    1c38:	2112      	movs	r1, #18
    1c3a:	4620      	mov	r0, r4
    1c3c:	47a8      	blx	r5
		if(i2c_buf[0] == start_byte) //start byte CC 
    1c3e:	7823      	ldrb	r3, [r4, #0]
    1c40:	2bcc      	cmp	r3, #204	; 0xcc
    1c42:	d1f9      	bne.n	1c38 <main+0x30>
			if(i2c_buf[1] == target_cmd) //target cmd BB (data address, data length, target flash address, and SOC type to follow, atmel begins programming)
    1c44:	7863      	ldrb	r3, [r4, #1]
    1c46:	2bbb      	cmp	r3, #187	; 0xbb
    1c48:	d1f6      	bne.n	1c38 <main+0x30>
				uint32_t start_address = i2c_buf[10] << 24 | i2c_buf[11] << 16 | i2c_buf[12] << 8 | i2c_buf[13]; //flash start address
    1c4a:	7aa2      	ldrb	r2, [r4, #10]
    1c4c:	7ae3      	ldrb	r3, [r4, #11]
    1c4e:	041b      	lsls	r3, r3, #16
    1c50:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    1c54:	7b62      	ldrb	r2, [r4, #13]
    1c56:	4313      	orrs	r3, r2
    1c58:	f894 c00c 	ldrb.w	ip, [r4, #12]
				uint32_t chip_type = i2c_buf[14] << 24 | i2c_buf[15] << 16 | i2c_buf[16] << 8 | i2c_buf[17];
    1c5c:	7ba1      	ldrb	r1, [r4, #14]
    1c5e:	7be2      	ldrb	r2, [r4, #15]
    1c60:	0412      	lsls	r2, r2, #16
    1c62:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    1c66:	7c61      	ldrb	r1, [r4, #17]
    1c68:	430a      	orrs	r2, r1
    1c6a:	f894 e010 	ldrb.w	lr, [r4, #16]
				uint32_t data_len = i2c_buf[6] << 24 | i2c_buf[7] << 16 | i2c_buf[8] << 8 | i2c_buf[9];
    1c6e:	79a0      	ldrb	r0, [r4, #6]
    1c70:	79e1      	ldrb	r1, [r4, #7]
    1c72:	0409      	lsls	r1, r1, #16
    1c74:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
    1c78:	7a60      	ldrb	r0, [r4, #9]
    1c7a:	4301      	orrs	r1, r0
    1c7c:	7a27      	ldrb	r7, [r4, #8]
				uint32_t data_addr = i2c_buf[2] << 24 | i2c_buf[3] << 16 | i2c_buf[4] << 8 | i2c_buf[5];
    1c7e:	f894 8002 	ldrb.w	r8, [r4, #2]
    1c82:	78e0      	ldrb	r0, [r4, #3]
    1c84:	0400      	lsls	r0, r0, #16
    1c86:	ea40 6008 	orr.w	r0, r0, r8, lsl #24
    1c8a:	f894 8005 	ldrb.w	r8, [r4, #5]
    1c8e:	ea40 0008 	orr.w	r0, r0, r8
    1c92:	f894 8004 	ldrb.w	r8, [r4, #4]
				ret = flash_target(data_addr, data_len, chip_type, start_address);
    1c96:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    1c9a:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
    1c9e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
    1ca2:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    1ca6:	47b0      	blx	r6
    1ca8:	e7c6      	b.n	1c38 <main+0x30>
		system_off();
    1caa:	4b08      	ldr	r3, [pc, #32]	; (1ccc <main+0xc4>)
    1cac:	4798      	blx	r3
    1cae:	e7c0      	b.n	1c32 <main+0x2a>
    1cb0:	000002d1 	.word	0x000002d1
    1cb4:	00000d31 	.word	0x00000d31
    1cb8:	41008000 	.word	0x41008000
    1cbc:	00000d3f 	.word	0x00000d3f
    1cc0:	2000011c 	.word	0x2000011c
    1cc4:	00000979 	.word	0x00000979
    1cc8:	00000c99 	.word	0x00000c99
    1ccc:	00001be5 	.word	0x00001be5

00001cd0 <s25fl116k_read_reg>:
	cmd.instruction = S25FL1_SOFT_RESET;
	qspi_sync_serial_run_command(descr, &cmd);
}

static uint8_t s25fl116k_read_reg(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst)
{
    1cd0:	b500      	push	{lr}
    1cd2:	b089      	sub	sp, #36	; 0x24
	uint32_t status;
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 1 */
	struct _qspi_command cmd = {
    1cd4:	2300      	movs	r3, #0
    1cd6:	9301      	str	r3, [sp, #4]
    1cd8:	9302      	str	r3, [sp, #8]
    1cda:	9303      	str	r3, [sp, #12]
    1cdc:	9305      	str	r3, [sp, #20]
    1cde:	f001 0107 	and.w	r1, r1, #7
    1ce2:	f041 0190 	orr.w	r1, r1, #144	; 0x90
    1ce6:	f88d 1004 	strb.w	r1, [sp, #4]
    1cea:	f88d 2008 	strb.w	r2, [sp, #8]
    1cee:	2304      	movs	r3, #4
    1cf0:	9304      	str	r3, [sp, #16]
    1cf2:	ab07      	add	r3, sp, #28
    1cf4:	9306      	str	r3, [sp, #24]
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .rx_buf                   = &status,
	};

	qspi_sync_serial_run_command(descr, &cmd);
    1cf6:	a901      	add	r1, sp, #4
    1cf8:	4b03      	ldr	r3, [pc, #12]	; (1d08 <s25fl116k_read_reg+0x38>)
    1cfa:	4798      	blx	r3
	return (uint8_t)status;
}
    1cfc:	f89d 001c 	ldrb.w	r0, [sp, #28]
    1d00:	b009      	add	sp, #36	; 0x24
    1d02:	f85d fb04 	ldr.w	pc, [sp], #4
    1d06:	bf00      	nop
    1d08:	0000105d 	.word	0x0000105d

00001d0c <s25fl116k_wait_memory_access_ready>:

static void s25fl116k_wait_memory_access_ready(struct qspi_sync_descriptor *descr)
{
    1d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d0e:	4607      	mov	r7, r0
	while (s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1) & S25FL1_STATUS_RDYBSY)
    1d10:	2605      	movs	r6, #5
    1d12:	2500      	movs	r5, #0
    1d14:	4c04      	ldr	r4, [pc, #16]	; (1d28 <s25fl116k_wait_memory_access_ready+0x1c>)
    1d16:	4632      	mov	r2, r6
    1d18:	4629      	mov	r1, r5
    1d1a:	4638      	mov	r0, r7
    1d1c:	47a0      	blx	r4
    1d1e:	f010 0f01 	tst.w	r0, #1
    1d22:	d1f8      	bne.n	1d16 <s25fl116k_wait_memory_access_ready+0xa>
		;
}
    1d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d26:	bf00      	nop
    1d28:	00001cd1 	.word	0x00001cd1

00001d2c <s25fl116k_write_enable>:

static void s25fl116k_write_enable(struct qspi_sync_descriptor *descr, uint8_t width, bool en)
{
    1d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d2e:	b087      	sub	sp, #28
    1d30:	4604      	mov	r4, r0
	uint8_t              inst   = (en == true ? S25FL1_WRITE_ENABLE : S25FL1_WRITE_DISABLE);
    1d32:	4616      	mov	r6, r2
    1d34:	2a00      	cmp	r2, #0
    1d36:	bf14      	ite	ne
    1d38:	2206      	movne	r2, #6
    1d3a:	2204      	moveq	r2, #4
	uint8_t              status = 0;
	struct _qspi_command cmd    = {
    1d3c:	2300      	movs	r3, #0
    1d3e:	9300      	str	r3, [sp, #0]
    1d40:	9301      	str	r3, [sp, #4]
    1d42:	9302      	str	r3, [sp, #8]
    1d44:	9303      	str	r3, [sp, #12]
    1d46:	9304      	str	r3, [sp, #16]
    1d48:	9305      	str	r3, [sp, #20]
    1d4a:	f001 0107 	and.w	r1, r1, #7
    1d4e:	f041 0110 	orr.w	r1, r1, #16
    1d52:	f88d 1000 	strb.w	r1, [sp]
    1d56:	f88d 2004 	strb.w	r2, [sp, #4]
        .inst_frame.bits.width   = width,
        .inst_frame.bits.inst_en = 1,
        .instruction             = inst,
    };

	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1d5a:	2205      	movs	r2, #5
    1d5c:	4619      	mov	r1, r3
    1d5e:	4b0b      	ldr	r3, [pc, #44]	; (1d8c <s25fl116k_write_enable+0x60>)
    1d60:	4798      	blx	r3
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    1d62:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1d66:	42b0      	cmp	r0, r6
    1d68:	d00d      	beq.n	1d86 <s25fl116k_write_enable+0x5a>
    1d6a:	4635      	mov	r5, r6
		qspi_sync_serial_run_command(descr, &cmd);
    1d6c:	4f08      	ldr	r7, [pc, #32]	; (1d90 <s25fl116k_write_enable+0x64>)
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1d6e:	4e07      	ldr	r6, [pc, #28]	; (1d8c <s25fl116k_write_enable+0x60>)
		qspi_sync_serial_run_command(descr, &cmd);
    1d70:	4669      	mov	r1, sp
    1d72:	4620      	mov	r0, r4
    1d74:	47b8      	blx	r7
		status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1d76:	2205      	movs	r2, #5
    1d78:	2100      	movs	r1, #0
    1d7a:	4620      	mov	r0, r4
    1d7c:	47b0      	blx	r6
	while ((status & S25FL1_STATUS_WEL) >> S25FL1_STATUS_WEL_Pos != en) {
    1d7e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1d82:	42a8      	cmp	r0, r5
    1d84:	d1f4      	bne.n	1d70 <s25fl116k_write_enable+0x44>
	}
}
    1d86:	b007      	add	sp, #28
    1d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d8a:	bf00      	nop
    1d8c:	00001cd1 	.word	0x00001cd1
    1d90:	0000105d 	.word	0x0000105d

00001d94 <s25fl116k_write_status>:

static void s25fl116k_write_status(struct qspi_sync_descriptor *descr, uint8_t width, uint8_t inst, uint8_t *data)
{
    1d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d96:	b087      	sub	sp, #28
    1d98:	4606      	mov	r6, r0
    1d9a:	460f      	mov	r7, r1
	/** To prevent unaligned access. Set "buf_len" to 4 instead of 3 */
	struct _qspi_command cmd = {
    1d9c:	2400      	movs	r4, #0
    1d9e:	9400      	str	r4, [sp, #0]
    1da0:	9401      	str	r4, [sp, #4]
    1da2:	9402      	str	r4, [sp, #8]
    1da4:	9405      	str	r4, [sp, #20]
    1da6:	f001 0507 	and.w	r5, r1, #7
    1daa:	f045 0590 	orr.w	r5, r5, #144	; 0x90
    1dae:	f88d 5000 	strb.w	r5, [sp]
    1db2:	f04f 0500 	mov.w	r5, #0
    1db6:	f04f 0e02 	mov.w	lr, #2
    1dba:	f36e 1505 	bfi	r5, lr, #4, #2
    1dbe:	f88d 5001 	strb.w	r5, [sp, #1]
    1dc2:	f88d 2004 	strb.w	r2, [sp, #4]
    1dc6:	2204      	movs	r2, #4
    1dc8:	9203      	str	r2, [sp, #12]
    1dca:	9304      	str	r3, [sp, #16]
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	    .instruction              = inst,
	    .buf_len                  = 4,
	    .tx_buf                   = data,
	};
	s25fl116k_write_enable(descr, width, true);
    1dcc:	2201      	movs	r2, #1
    1dce:	4d06      	ldr	r5, [pc, #24]	; (1de8 <s25fl116k_write_status+0x54>)
    1dd0:	47a8      	blx	r5
	qspi_sync_serial_run_command(descr, &cmd);
    1dd2:	4669      	mov	r1, sp
    1dd4:	4630      	mov	r0, r6
    1dd6:	4b05      	ldr	r3, [pc, #20]	; (1dec <s25fl116k_write_status+0x58>)
    1dd8:	4798      	blx	r3
	s25fl116k_write_enable(descr, width, false);
    1dda:	4622      	mov	r2, r4
    1ddc:	4639      	mov	r1, r7
    1dde:	4630      	mov	r0, r6
    1de0:	47a8      	blx	r5
}
    1de2:	b007      	add	sp, #28
    1de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1de6:	bf00      	nop
    1de8:	00001d2d 	.word	0x00001d2d
    1dec:	0000105d 	.word	0x0000105d

00001df0 <s25fl116k_read>:
	}
	return me;
}

int32_t s25fl116k_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1df0:	b570      	push	{r4, r5, r6, lr}
    1df2:	b086      	sub	sp, #24
	struct s25fl116k *           s25fl1 = (struct s25fl116k *)me;
	struct qspi_sync_descriptor *descr  = (struct qspi_sync_descriptor *)(me->io);
    1df4:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    1df6:	2400      	movs	r4, #0
    1df8:	9400      	str	r4, [sp, #0]
    1dfa:	9401      	str	r4, [sp, #4]
    1dfc:	9404      	str	r4, [sp, #16]
    1dfe:	24b0      	movs	r4, #176	; 0xb0
    1e00:	f88d 4000 	strb.w	r4, [sp]
    1e04:	f04f 0400 	mov.w	r4, #0
    1e08:	2601      	movs	r6, #1
    1e0a:	f366 1405 	bfi	r4, r6, #4, #2
    1e0e:	f88d 4001 	strb.w	r4, [sp, #1]
    1e12:	2408      	movs	r4, #8
    1e14:	f88d 4002 	strb.w	r4, [sp, #2]
    1e18:	240b      	movs	r4, #11
    1e1a:	f88d 4004 	strb.w	r4, [sp, #4]
    1e1e:	9202      	str	r2, [sp, #8]
    1e20:	9303      	str	r3, [sp, #12]
    1e22:	9105      	str	r1, [sp, #20]
	    .address                      = address,
	    .buf_len                      = length,
	    .rx_buf                       = buf,
	};

	if (s25fl1->quad_mode) {
    1e24:	7a03      	ldrb	r3, [r0, #8]
    1e26:	b14b      	cbz	r3, 1e3c <s25fl116k_read+0x4c>
		cmd.instruction           = S25FL1_READ_ARRAY_QUAD;
    1e28:	236b      	movs	r3, #107	; 0x6b
    1e2a:	f88d 3004 	strb.w	r3, [sp, #4]
		cmd.inst_frame.bits.width = QSPI_INST1_ADDR1_DATA4;
    1e2e:	f89d 3000 	ldrb.w	r3, [sp]
    1e32:	2202      	movs	r2, #2
    1e34:	f362 0302 	bfi	r3, r2, #0, #3
    1e38:	f88d 3000 	strb.w	r3, [sp]
	}
	qspi_sync_serial_run_command(descr, &cmd);
    1e3c:	4669      	mov	r1, sp
    1e3e:	4628      	mov	r0, r5
    1e40:	4b02      	ldr	r3, [pc, #8]	; (1e4c <s25fl116k_read+0x5c>)
    1e42:	4798      	blx	r3
	return ERR_NONE;
}
    1e44:	2000      	movs	r0, #0
    1e46:	b006      	add	sp, #24
    1e48:	bd70      	pop	{r4, r5, r6, pc}
    1e4a:	bf00      	nop
    1e4c:	0000105d 	.word	0x0000105d

00001e50 <s25fl116k_page_program>:
{
    1e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e52:	4604      	mov	r4, r0
    1e54:	460f      	mov	r7, r1
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    1e56:	2201      	movs	r2, #1
    1e58:	2100      	movs	r1, #0
    1e5a:	4d08      	ldr	r5, [pc, #32]	; (1e7c <s25fl116k_page_program+0x2c>)
    1e5c:	47a8      	blx	r5
	s25fl116k_wait_memory_access_ready(descr);
    1e5e:	4620      	mov	r0, r4
    1e60:	4e07      	ldr	r6, [pc, #28]	; (1e80 <s25fl116k_page_program+0x30>)
    1e62:	47b0      	blx	r6
	qspi_sync_serial_run_command(descr, cmd);
    1e64:	4639      	mov	r1, r7
    1e66:	4620      	mov	r0, r4
    1e68:	4b06      	ldr	r3, [pc, #24]	; (1e84 <s25fl116k_page_program+0x34>)
    1e6a:	4798      	blx	r3
	s25fl116k_wait_memory_access_ready(descr);
    1e6c:	4620      	mov	r0, r4
    1e6e:	47b0      	blx	r6
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    1e70:	2200      	movs	r2, #0
    1e72:	4611      	mov	r1, r2
    1e74:	4620      	mov	r0, r4
    1e76:	47a8      	blx	r5
    1e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e7a:	bf00      	nop
    1e7c:	00001d2d 	.word	0x00001d2d
    1e80:	00001d0d 	.word	0x00001d0d
    1e84:	0000105d 	.word	0x0000105d

00001e88 <s25fl116k_write>:

int32_t s25fl116k_write(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    1e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e8c:	b089      	sub	sp, #36	; 0x24
    1e8e:	9201      	str	r2, [sp, #4]
    1e90:	461e      	mov	r6, r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1e92:	6803      	ldr	r3, [r0, #0]
    1e94:	9300      	str	r3, [sp, #0]
	uint32_t i = 0;

	/** Size / page_size */
	uint32_t number_of_writes = (length >> 8);

	struct _qspi_command cmd = {
    1e96:	2300      	movs	r3, #0
    1e98:	9302      	str	r3, [sp, #8]
    1e9a:	9303      	str	r3, [sp, #12]
    1e9c:	9307      	str	r3, [sp, #28]
    1e9e:	23b0      	movs	r3, #176	; 0xb0
    1ea0:	f88d 3008 	strb.w	r3, [sp, #8]
    1ea4:	2330      	movs	r3, #48	; 0x30
    1ea6:	f88d 3009 	strb.w	r3, [sp, #9]
    1eaa:	2302      	movs	r3, #2
    1eac:	f88d 300c 	strb.w	r3, [sp, #12]
    1eb0:	9204      	str	r2, [sp, #16]
    1eb2:	9605      	str	r6, [sp, #20]
    1eb4:	9106      	str	r1, [sp, #24]
	    .buf_len                  = length,
	    .tx_buf                   = buf,
	};

	/** If less than page size */
	if (number_of_writes == 0) {
    1eb6:	0a37      	lsrs	r7, r6, #8
    1eb8:	d023      	beq.n	1f02 <s25fl116k_write+0x7a>
    1eba:	468b      	mov	fp, r1
    1ebc:	460c      	mov	r4, r1
    1ebe:	2500      	movs	r5, #0
		s25fl116k_page_program(descr, &cmd);
	} else {
		/** Multiple page */
		for (i = 0; i < number_of_writes; i++) {
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1ec0:	f44f 7a80 	mov.w	sl, #256	; 0x100
			cmd.address = address;
    1ec4:	9b01      	ldr	r3, [sp, #4]
    1ec6:	eba3 0901 	sub.w	r9, r3, r1
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1eca:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1f1c <s25fl116k_write+0x94>
			cmd.buf_len = S25FL1_PAGE_SIZE;
    1ece:	f8cd a014 	str.w	sl, [sp, #20]
			cmd.address = address;
    1ed2:	eb04 0309 	add.w	r3, r4, r9
    1ed6:	9304      	str	r3, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1ed8:	9406      	str	r4, [sp, #24]
    1eda:	a902      	add	r1, sp, #8
    1edc:	9800      	ldr	r0, [sp, #0]
    1ede:	47c0      	blx	r8
			buf += S25FL1_PAGE_SIZE;
    1ee0:	f504 7480 	add.w	r4, r4, #256	; 0x100
		for (i = 0; i < number_of_writes; i++) {
    1ee4:	3501      	adds	r5, #1
    1ee6:	42af      	cmp	r7, r5
    1ee8:	d1f1      	bne.n	1ece <s25fl116k_write+0x46>
    1eea:	022d      	lsls	r5, r5, #8
    1eec:	eb0b 0205 	add.w	r2, fp, r5
    1ef0:	9b01      	ldr	r3, [sp, #4]
    1ef2:	441d      	add	r5, r3
			address += S25FL1_PAGE_SIZE;
		}
		if (length % S25FL1_PAGE_SIZE) {
    1ef4:	f016 03ff 	ands.w	r3, r6, #255	; 0xff
    1ef8:	d108      	bne.n	1f0c <s25fl116k_write+0x84>
			cmd.address = address;
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
		}
	}
	return ERR_NONE;
}
    1efa:	2000      	movs	r0, #0
    1efc:	b009      	add	sp, #36	; 0x24
    1efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		s25fl116k_page_program(descr, &cmd);
    1f02:	a902      	add	r1, sp, #8
    1f04:	9800      	ldr	r0, [sp, #0]
    1f06:	4b05      	ldr	r3, [pc, #20]	; (1f1c <s25fl116k_write+0x94>)
    1f08:	4798      	blx	r3
    1f0a:	e7f6      	b.n	1efa <s25fl116k_write+0x72>
			cmd.buf_len = length % S25FL1_PAGE_SIZE;
    1f0c:	9305      	str	r3, [sp, #20]
			cmd.address = address;
    1f0e:	9504      	str	r5, [sp, #16]
			cmd.tx_buf  = buf, s25fl116k_page_program(descr, &cmd);
    1f10:	9206      	str	r2, [sp, #24]
    1f12:	a902      	add	r1, sp, #8
    1f14:	9800      	ldr	r0, [sp, #0]
    1f16:	4b01      	ldr	r3, [pc, #4]	; (1f1c <s25fl116k_write+0x94>)
    1f18:	4798      	blx	r3
    1f1a:	e7ee      	b.n	1efa <s25fl116k_write+0x72>
    1f1c:	00001e51 	.word	0x00001e51

00001f20 <s25fl116k_erase>:

int32_t s25fl116k_erase(const struct spi_nor_flash *const me, uint32_t address, uint32_t length)
{
    1f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1f24:	b087      	sub	sp, #28
    1f26:	4615      	mov	r5, r2
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    1f28:	6806      	ldr	r6, [r0, #0]

	uint32_t temp_addr = address;
	uint32_t temp_len  = length;
	uint8_t  status;

	struct _qspi_command cmd = {
    1f2a:	2300      	movs	r3, #0
    1f2c:	9300      	str	r3, [sp, #0]
    1f2e:	9301      	str	r3, [sp, #4]
    1f30:	9302      	str	r3, [sp, #8]
    1f32:	9303      	str	r3, [sp, #12]
    1f34:	9304      	str	r3, [sp, #16]
    1f36:	9305      	str	r3, [sp, #20]
    1f38:	2330      	movs	r3, #48	; 0x30
    1f3a:	f88d 3000 	strb.w	r3, [sp]
    1f3e:	f04f 0300 	mov.w	r3, #0
    1f42:	2202      	movs	r2, #2
    1f44:	f362 1305 	bfi	r3, r2, #4, #2
    1f48:	f88d 3001 	strb.w	r3, [sp, #1]
	    .inst_frame.bits.inst_en  = 1,
	    .inst_frame.bits.addr_en  = 1,
	    .inst_frame.bits.tfr_type = QSPI_WRITE_ACCESS,
	};

	if ((length % S25FL1_SECTOR_SIZE) || (address % S25FL1_SECTOR_SIZE)) {
    1f4c:	ea41 0305 	orr.w	r3, r1, r5
    1f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
    1f54:	2b00      	cmp	r3, #0
    1f56:	d15e      	bne.n	2016 <s25fl116k_erase+0xf6>
    1f58:	460c      	mov	r4, r1
		return ERR_INVALID_ARG;
	}
	status = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    1f5a:	2205      	movs	r2, #5
    1f5c:	2100      	movs	r1, #0
    1f5e:	4630      	mov	r0, r6
    1f60:	4b31      	ldr	r3, [pc, #196]	; (2028 <s25fl116k_erase+0x108>)
    1f62:	4798      	blx	r3
	if ((status & S25FL1_STATUS_RDYBSY) != S25FL1_STATUS_RDYBSY_READY)
    1f64:	f010 0f01 	tst.w	r0, #1
    1f68:	d003      	beq.n	1f72 <s25fl116k_erase+0x52>
		return S25FL1_ERROR_BUSY;
    1f6a:	2002      	movs	r0, #2
			return ERR_INVALID_ARG;
		}
	}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
	return ERR_NONE;
}
    1f6c:	b007      	add	sp, #28
    1f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, true);
    1f72:	2201      	movs	r2, #1
    1f74:	2100      	movs	r1, #0
    1f76:	4630      	mov	r0, r6
    1f78:	4b2c      	ldr	r3, [pc, #176]	; (202c <s25fl116k_erase+0x10c>)
    1f7a:	4798      	blx	r3
	if (address == 0 && length >= S25FL1_FLASH_SIZE) {
    1f7c:	b914      	cbnz	r4, 1f84 <s25fl116k_erase+0x64>
    1f7e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
    1f82:	d207      	bcs.n	1f94 <s25fl116k_erase+0x74>
	while (temp_len > 0) {
    1f84:	2d00      	cmp	r5, #0
    1f86:	d03f      	beq.n	2008 <s25fl116k_erase+0xe8>
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    1f88:	f04f 09d8 	mov.w	r9, #216	; 0xd8
			qspi_sync_serial_run_command(descr, &cmd);
    1f8c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2034 <s25fl116k_erase+0x114>
			s25fl116k_wait_memory_access_ready(descr);
    1f90:	4f27      	ldr	r7, [pc, #156]	; (2030 <s25fl116k_erase+0x110>)
    1f92:	e026      	b.n	1fe2 <s25fl116k_erase+0xc2>
		cmd.inst_frame.bits.addr_en = 0;
    1f94:	f89d 3000 	ldrb.w	r3, [sp]
    1f98:	f36f 1345 	bfc	r3, #5, #1
    1f9c:	f88d 3000 	strb.w	r3, [sp]
		cmd.instruction             = S25FL1_CHIP_ERASE_2;
    1fa0:	23c7      	movs	r3, #199	; 0xc7
    1fa2:	f88d 3004 	strb.w	r3, [sp, #4]
		qspi_sync_serial_run_command(descr, &cmd);
    1fa6:	4669      	mov	r1, sp
    1fa8:	4630      	mov	r0, r6
    1faa:	4b22      	ldr	r3, [pc, #136]	; (2034 <s25fl116k_erase+0x114>)
    1fac:	4798      	blx	r3
		temp_len -= S25FL1_FLASH_SIZE;
    1fae:	f5a5 1500 	sub.w	r5, r5, #2097152	; 0x200000
		s25fl116k_wait_memory_access_ready(descr);
    1fb2:	4630      	mov	r0, r6
    1fb4:	4b1e      	ldr	r3, [pc, #120]	; (2030 <s25fl116k_erase+0x110>)
    1fb6:	4798      	blx	r3
    1fb8:	e7e4      	b.n	1f84 <s25fl116k_erase+0x64>
		} else if ((temp_addr % S25FL1_SECTOR_SIZE == 0) && (temp_len >= S25FL1_SECTOR_SIZE)) {
    1fba:	f3c4 030b 	ubfx	r3, r4, #0, #12
    1fbe:	bb6b      	cbnz	r3, 201c <s25fl116k_erase+0xfc>
    1fc0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    1fc4:	d32d      	bcc.n	2022 <s25fl116k_erase+0x102>
			cmd.address     = temp_addr;
    1fc6:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_4K;
    1fc8:	2320      	movs	r3, #32
    1fca:	f88d 3004 	strb.w	r3, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1fce:	4669      	mov	r1, sp
    1fd0:	4630      	mov	r0, r6
    1fd2:	47c0      	blx	r8
			temp_addr += S25FL1_SECTOR_SIZE;
    1fd4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
			temp_len -= S25FL1_SECTOR_SIZE;
    1fd8:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
			s25fl116k_wait_memory_access_ready(descr);
    1fdc:	4630      	mov	r0, r6
    1fde:	47b8      	blx	r7
	while (temp_len > 0) {
    1fe0:	b195      	cbz	r5, 2008 <s25fl116k_erase+0xe8>
		if ((temp_addr % S25FL1_BLOCK_SIZE == 0) && (temp_len >= S25FL1_BLOCK_SIZE)) {
    1fe2:	b2a3      	uxth	r3, r4
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d1e8      	bne.n	1fba <s25fl116k_erase+0x9a>
    1fe8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    1fec:	d3e5      	bcc.n	1fba <s25fl116k_erase+0x9a>
			cmd.address     = temp_addr;
    1fee:	9402      	str	r4, [sp, #8]
			cmd.instruction = S25FL1_BLOCK_ERASE_64K;
    1ff0:	f88d 9004 	strb.w	r9, [sp, #4]
			qspi_sync_serial_run_command(descr, &cmd);
    1ff4:	4669      	mov	r1, sp
    1ff6:	4630      	mov	r0, r6
    1ff8:	47c0      	blx	r8
			temp_addr += S25FL1_BLOCK_SIZE;
    1ffa:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
			temp_len -= S25FL1_BLOCK_SIZE;
    1ffe:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
			s25fl116k_wait_memory_access_ready(descr);
    2002:	4630      	mov	r0, r6
    2004:	47b8      	blx	r7
    2006:	e7eb      	b.n	1fe0 <s25fl116k_erase+0xc0>
	s25fl116k_write_enable(descr, QSPI_INST1_ADDR1_DATA1, false);
    2008:	2200      	movs	r2, #0
    200a:	4611      	mov	r1, r2
    200c:	4630      	mov	r0, r6
    200e:	4b07      	ldr	r3, [pc, #28]	; (202c <s25fl116k_erase+0x10c>)
    2010:	4798      	blx	r3
	return ERR_NONE;
    2012:	2000      	movs	r0, #0
    2014:	e7aa      	b.n	1f6c <s25fl116k_erase+0x4c>
		return ERR_INVALID_ARG;
    2016:	f06f 000c 	mvn.w	r0, #12
    201a:	e7a7      	b.n	1f6c <s25fl116k_erase+0x4c>
			return ERR_INVALID_ARG;
    201c:	f06f 000c 	mvn.w	r0, #12
    2020:	e7a4      	b.n	1f6c <s25fl116k_erase+0x4c>
    2022:	f06f 000c 	mvn.w	r0, #12
    2026:	e7a1      	b.n	1f6c <s25fl116k_erase+0x4c>
    2028:	00001cd1 	.word	0x00001cd1
    202c:	00001d2d 	.word	0x00001d2d
    2030:	00001d0d 	.word	0x00001d0d
    2034:	0000105d 	.word	0x0000105d

00002038 <s25fl116k_enable_xip>:

int32_t s25fl116k_enable_xip(const struct spi_nor_flash *const me)
{
    2038:	b5f0      	push	{r4, r5, r6, r7, lr}
    203a:	b089      	sub	sp, #36	; 0x24
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    203c:	6804      	ldr	r4, [r0, #0]

	uint8_t dummy_read, status[3];

	struct _qspi_command cmd = {
    203e:	2500      	movs	r5, #0
    2040:	9501      	str	r5, [sp, #4]
    2042:	9502      	str	r5, [sp, #8]
    2044:	9503      	str	r5, [sp, #12]
    2046:	9505      	str	r5, [sp, #20]
    2048:	23f4      	movs	r3, #244	; 0xf4
    204a:	f88d 3004 	strb.w	r3, [sp, #4]
    204e:	2302      	movs	r3, #2
    2050:	f043 0250 	orr.w	r2, r3, #80	; 0x50
    2054:	f88d 2005 	strb.w	r2, [sp, #5]
    2058:	2205      	movs	r2, #5
    205a:	f88d 2006 	strb.w	r2, [sp, #6]
    205e:	21eb      	movs	r1, #235	; 0xeb
    2060:	f88d 1008 	strb.w	r1, [sp, #8]
    2064:	f88d 3009 	strb.w	r3, [sp, #9]
    2068:	2301      	movs	r3, #1
    206a:	9304      	str	r3, [sp, #16]
    206c:	f10d 031f 	add.w	r3, sp, #31
    2070:	9306      	str	r3, [sp, #24]
	    .address                        = 0,
	    .buf_len                        = 1,
	    .rx_buf                         = &dummy_read,
	};

	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    2072:	4629      	mov	r1, r5
    2074:	4620      	mov	r0, r4
    2076:	4e17      	ldr	r6, [pc, #92]	; (20d4 <s25fl116k_enable_xip+0x9c>)
    2078:	47b0      	blx	r6
    207a:	f88d 001c 	strb.w	r0, [sp, #28]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    207e:	2235      	movs	r2, #53	; 0x35
    2080:	4629      	mov	r1, r5
    2082:	4620      	mov	r0, r4
    2084:	47b0      	blx	r6
    2086:	f88d 001d 	strb.w	r0, [sp, #29]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    208a:	2233      	movs	r2, #51	; 0x33
    208c:	4629      	mov	r1, r5
    208e:	4620      	mov	r0, r4
    2090:	47b0      	blx	r6
    2092:	f88d 001e 	strb.w	r0, [sp, #30]

	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    2096:	f89d 001d 	ldrb.w	r0, [sp, #29]
    209a:	f010 0f02 	tst.w	r0, #2
    209e:	d112      	bne.n	20c6 <s25fl116k_enable_xip+0x8e>
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    20a0:	4f0d      	ldr	r7, [pc, #52]	; (20d8 <s25fl116k_enable_xip+0xa0>)
		status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    20a2:	f040 0002 	orr.w	r0, r0, #2
    20a6:	f88d 001d 	strb.w	r0, [sp, #29]
		s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    20aa:	ab07      	add	r3, sp, #28
    20ac:	2201      	movs	r2, #1
    20ae:	4629      	mov	r1, r5
    20b0:	4620      	mov	r0, r4
    20b2:	47b8      	blx	r7
		status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    20b4:	2235      	movs	r2, #53	; 0x35
    20b6:	4629      	mov	r1, r5
    20b8:	4620      	mov	r0, r4
    20ba:	47b0      	blx	r6
    20bc:	f88d 001d 	strb.w	r0, [sp, #29]
	while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    20c0:	f010 0f02 	tst.w	r0, #2
    20c4:	d0ed      	beq.n	20a2 <s25fl116k_enable_xip+0x6a>
	}

	qspi_sync_serial_run_command(descr, &cmd);
    20c6:	a901      	add	r1, sp, #4
    20c8:	4620      	mov	r0, r4
    20ca:	4b04      	ldr	r3, [pc, #16]	; (20dc <s25fl116k_enable_xip+0xa4>)
    20cc:	4798      	blx	r3
	return ERR_NONE;
}
    20ce:	2000      	movs	r0, #0
    20d0:	b009      	add	sp, #36	; 0x24
    20d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20d4:	00001cd1 	.word	0x00001cd1
    20d8:	00001d95 	.word	0x00001d95
    20dc:	0000105d 	.word	0x0000105d

000020e0 <s25fl116k_disable_xip>:

int32_t s25fl116k_disable_xip(const struct spi_nor_flash *const me)
{
    20e0:	b530      	push	{r4, r5, lr}
    20e2:	b087      	sub	sp, #28
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    20e4:	6805      	ldr	r5, [r0, #0]

	struct _qspi_command cmd = {
    20e6:	2400      	movs	r4, #0
    20e8:	9400      	str	r4, [sp, #0]
    20ea:	9401      	str	r4, [sp, #4]
    20ec:	9402      	str	r4, [sp, #8]
    20ee:	9403      	str	r4, [sp, #12]
    20f0:	9404      	str	r4, [sp, #16]
    20f2:	9405      	str	r4, [sp, #20]
    20f4:	2310      	movs	r3, #16
    20f6:	f88d 3000 	strb.w	r3, [sp]
    20fa:	23ff      	movs	r3, #255	; 0xff
    20fc:	f88d 3004 	strb.w	r3, [sp, #4]
	    .inst_frame.bits.width   = QSPI_INST1_ADDR1_DATA1,
	    .inst_frame.bits.inst_en = 1,
	    .instruction             = S25FL1_CONT_MODE_RESET,
	};

	qspi_sync_init(descr, QSPI);
    2100:	4906      	ldr	r1, [pc, #24]	; (211c <s25fl116k_disable_xip+0x3c>)
    2102:	4628      	mov	r0, r5
    2104:	4b06      	ldr	r3, [pc, #24]	; (2120 <s25fl116k_disable_xip+0x40>)
    2106:	4798      	blx	r3
	qspi_sync_enable(descr);
    2108:	4628      	mov	r0, r5
    210a:	4b06      	ldr	r3, [pc, #24]	; (2124 <s25fl116k_disable_xip+0x44>)
    210c:	4798      	blx	r3

	qspi_sync_serial_run_command(descr, &cmd);
    210e:	4669      	mov	r1, sp
    2110:	4628      	mov	r0, r5
    2112:	4b05      	ldr	r3, [pc, #20]	; (2128 <s25fl116k_disable_xip+0x48>)
    2114:	4798      	blx	r3
	return ERR_NONE;
}
    2116:	4620      	mov	r0, r4
    2118:	b007      	add	sp, #28
    211a:	bd30      	pop	{r4, r5, pc}
    211c:	42003400 	.word	0x42003400
    2120:	00000fdd 	.word	0x00000fdd
    2124:	00001035 	.word	0x00001035
    2128:	0000105d 	.word	0x0000105d

0000212c <s25fl116k_construct>:
{
    212c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2130:	b082      	sub	sp, #8
    2132:	4606      	mov	r6, r0
    2134:	4617      	mov	r7, r2
	spi_nor_flash_construct(me, io, &s25fl116k_interface);
    2136:	4a28      	ldr	r2, [pc, #160]	; (21d8 <s25fl116k_construct+0xac>)
    2138:	4b28      	ldr	r3, [pc, #160]	; (21dc <s25fl116k_construct+0xb0>)
    213a:	4798      	blx	r3
	struct qspi_sync_descriptor *descr = (struct qspi_sync_descriptor *)(me->io);
    213c:	6834      	ldr	r4, [r6, #0]
	status[0] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_1);
    213e:	2205      	movs	r2, #5
    2140:	2100      	movs	r1, #0
    2142:	4620      	mov	r0, r4
    2144:	4d26      	ldr	r5, [pc, #152]	; (21e0 <s25fl116k_construct+0xb4>)
    2146:	47a8      	blx	r5
    2148:	f88d 0004 	strb.w	r0, [sp, #4]
	status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    214c:	2235      	movs	r2, #53	; 0x35
    214e:	2100      	movs	r1, #0
    2150:	4620      	mov	r0, r4
    2152:	47a8      	blx	r5
    2154:	f88d 0005 	strb.w	r0, [sp, #5]
	status[2] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_3);
    2158:	2233      	movs	r2, #51	; 0x33
    215a:	2100      	movs	r1, #0
    215c:	4620      	mov	r0, r4
    215e:	47a8      	blx	r5
    2160:	f88d 0006 	strb.w	r0, [sp, #6]
	s25fl1->quad_mode = quad_mode;
    2164:	7237      	strb	r7, [r6, #8]
	if (quad_mode) {
    2166:	b9cf      	cbnz	r7, 219c <s25fl116k_construct+0x70>
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    2168:	f89d 0005 	ldrb.w	r0, [sp, #5]
    216c:	f010 0f02 	tst.w	r0, #2
    2170:	d02d      	beq.n	21ce <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    2172:	2500      	movs	r5, #0
    2174:	f8df 806c 	ldr.w	r8, [pc, #108]	; 21e4 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    2178:	4f19      	ldr	r7, [pc, #100]	; (21e0 <s25fl116k_construct+0xb4>)
			status[1] &= (~S25FL1_STATUS_QUAD_ENABLE);
    217a:	f020 0002 	bic.w	r0, r0, #2
    217e:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    2182:	ab01      	add	r3, sp, #4
    2184:	2201      	movs	r2, #1
    2186:	4629      	mov	r1, r5
    2188:	4620      	mov	r0, r4
    218a:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    218c:	2235      	movs	r2, #53	; 0x35
    218e:	4629      	mov	r1, r5
    2190:	4620      	mov	r0, r4
    2192:	47b8      	blx	r7
		while (status[1] & S25FL1_STATUS_QUAD_ENABLE) {
    2194:	f010 0f02 	tst.w	r0, #2
    2198:	d1ef      	bne.n	217a <s25fl116k_construct+0x4e>
    219a:	e018      	b.n	21ce <s25fl116k_construct+0xa2>
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    219c:	f89d 0005 	ldrb.w	r0, [sp, #5]
    21a0:	f010 0f02 	tst.w	r0, #2
    21a4:	d113      	bne.n	21ce <s25fl116k_construct+0xa2>
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    21a6:	2500      	movs	r5, #0
    21a8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 21e4 <s25fl116k_construct+0xb8>
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    21ac:	4f0c      	ldr	r7, [pc, #48]	; (21e0 <s25fl116k_construct+0xb4>)
			status[1] |= S25FL1_STATUS_QUAD_ENABLE;
    21ae:	f040 0002 	orr.w	r0, r0, #2
    21b2:	f88d 0005 	strb.w	r0, [sp, #5]
			s25fl116k_write_status(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_WRITE_STATUS, status);
    21b6:	ab01      	add	r3, sp, #4
    21b8:	2201      	movs	r2, #1
    21ba:	4629      	mov	r1, r5
    21bc:	4620      	mov	r0, r4
    21be:	47c0      	blx	r8
			status[1] = s25fl116k_read_reg(descr, QSPI_INST1_ADDR1_DATA1, S25FL1_READ_STATUS_2);
    21c0:	2235      	movs	r2, #53	; 0x35
    21c2:	4629      	mov	r1, r5
    21c4:	4620      	mov	r0, r4
    21c6:	47b8      	blx	r7
		while (!(status[1] & S25FL1_STATUS_QUAD_ENABLE)) {
    21c8:	f010 0f02 	tst.w	r0, #2
    21cc:	d0ef      	beq.n	21ae <s25fl116k_construct+0x82>
}
    21ce:	4630      	mov	r0, r6
    21d0:	b002      	add	sp, #8
    21d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21d6:	bf00      	nop
    21d8:	00002740 	.word	0x00002740
    21dc:	000021e9 	.word	0x000021e9
    21e0:	00001cd1 	.word	0x00001cd1
    21e4:	00001d95 	.word	0x00001d95

000021e8 <spi_nor_flash_construct>:
#include <spi_nor_flash.h>

struct spi_nor_flash *spi_nor_flash_construct(struct spi_nor_flash *const me, void *const io,
                                              const struct spi_nor_flash_interface *const interface)
{
	me->io        = io;
    21e8:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    21ea:	6042      	str	r2, [r0, #4]

	return me;
}
    21ec:	4770      	bx	lr

000021ee <spi_nor_flash_read>:

int32_t spi_nor_flash_read(const struct spi_nor_flash *const me, uint8_t *buf, uint32_t address, uint32_t length)
{
    21ee:	b510      	push	{r4, lr}
	return me->interface->read(me, buf, address, length);
    21f0:	6844      	ldr	r4, [r0, #4]
    21f2:	6824      	ldr	r4, [r4, #0]
    21f4:	47a0      	blx	r4
}
    21f6:	bd10      	pop	{r4, pc}

000021f8 <spi_nor_flash_init>:

/**
 * \brief Initialize Temperature Sensors
 */
void spi_nor_flash_init(void)
{
    21f8:	b510      	push	{r4, lr}

	qspi_sync_enable(&QUAD_SPI_0);
    21fa:	4c06      	ldr	r4, [pc, #24]	; (2214 <spi_nor_flash_init+0x1c>)
    21fc:	4620      	mov	r0, r4
    21fe:	4b06      	ldr	r3, [pc, #24]	; (2218 <spi_nor_flash_init+0x20>)
    2200:	4798      	blx	r3
	SPI_NOR_FLASH_0 = s25fl116k_construct(&SPI_NOR_FLASH_0_descr.parent, &QUAD_SPI_0, CONF_SPI_NOR_FLASH_0_QUAD_MODE);
    2202:	2200      	movs	r2, #0
    2204:	4621      	mov	r1, r4
    2206:	4805      	ldr	r0, [pc, #20]	; (221c <spi_nor_flash_init+0x24>)
    2208:	4b05      	ldr	r3, [pc, #20]	; (2220 <spi_nor_flash_init+0x28>)
    220a:	4798      	blx	r3
    220c:	4b05      	ldr	r3, [pc, #20]	; (2224 <spi_nor_flash_init+0x2c>)
    220e:	6018      	str	r0, [r3, #0]
    2210:	bd10      	pop	{r4, pc}
    2212:	bf00      	nop
    2214:	200000e0 	.word	0x200000e0
    2218:	00001035 	.word	0x00001035
    221c:	20000094 	.word	0x20000094
    2220:	0000212d 	.word	0x0000212d
    2224:	20000130 	.word	0x20000130

00002228 <swd_clear_abort_reg>:
#include "atmel_start_pins.h"
#include <hal_delay.h>
#include <stdbool.h>

void swd_clear_abort_reg(void)
{
    2228:	b500      	push	{lr}
    222a:	b083      	sub	sp, #12
	uint8_t clear_err_buf[8] ={0x00, 0x81, 0xd3, 0x03, 0x00, 0x00, 0x00, 0x00}; // includes request byte, ignores ack response for byte alignment
    222c:	4a05      	ldr	r2, [pc, #20]	; (2244 <swd_clear_abort_reg+0x1c>)
    222e:	e892 0003 	ldmia.w	r2, {r0, r1}
    2232:	e88d 0003 	stmia.w	sp, {r0, r1}
	SWD_tx(clear_err_buf, 8);
    2236:	2108      	movs	r1, #8
    2238:	4668      	mov	r0, sp
    223a:	4b03      	ldr	r3, [pc, #12]	; (2248 <swd_clear_abort_reg+0x20>)
    223c:	4798      	blx	r3
}
    223e:	b003      	add	sp, #12
    2240:	f85d fb04 	ldr.w	pc, [sp], #4
    2244:	00002754 	.word	0x00002754
    2248:	000008f1 	.word	0x000008f1

0000224c <jtag_to_swd>:

void jtag_to_swd(void) //JTAG-to-SWD switch with 16bit value, MSB = 0x79E7, LSB = 0xE79E, then min 5 clock cycles with swdio high 
{
    224c:	b530      	push	{r4, r5, lr}
    224e:	b087      	sub	sp, #28
	uint8_t swd_seq_jtag_to_swd[] = {
    2250:	ac01      	add	r4, sp, #4
    2252:	4d05      	ldr	r5, [pc, #20]	; (2268 <jtag_to_swd+0x1c>)
    2254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2258:	682b      	ldr	r3, [r5, #0]
    225a:	7023      	strb	r3, [r4, #0]
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		/* At least 2 idle (low) cycles */
		0x00,
	};
	
	SWD_tx(swd_seq_jtag_to_swd, 17);
    225c:	2111      	movs	r1, #17
    225e:	a801      	add	r0, sp, #4
    2260:	4b02      	ldr	r3, [pc, #8]	; (226c <jtag_to_swd+0x20>)
    2262:	4798      	blx	r3
}
    2264:	b007      	add	sp, #28
    2266:	bd30      	pop	{r4, r5, pc}
    2268:	0000275c 	.word	0x0000275c
    226c:	000008f1 	.word	0x000008f1

00002270 <swd_idcode_throwaway>:

void swd_idcode_throwaway(void)
{
    2270:	b500      	push	{lr}
    2272:	b083      	sub	sp, #12
	/// SWD Sequence to Read Register 0 (IDCODE), pre-padded with 2 null bits bits to fill up 6 bytes. Byte-aligned, will not cause overrun error.
	/// A transaction must be followed by another transaction or at least 8 idle cycles to ensure that data is clocked through the AP.
	/// After clocking out the data parity bit, continue to clock the SW-DP serial interface until it has clocked out at least 8 more clock rising edges, before stopping the clock.
	uint8_t swd_read_idcode_prepadded[]   = { 0x00, 0x94, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 };  //  With null byte (8 cycles idle) before and after
    2274:	4a05      	ldr	r2, [pc, #20]	; (228c <swd_idcode_throwaway+0x1c>)
    2276:	e892 0003 	ldmia.w	r2, {r0, r1}
    227a:	e88d 0003 	stmia.w	sp, {r0, r1}
	SWD_tx(swd_read_idcode_prepadded, 8);
    227e:	2108      	movs	r1, #8
    2280:	4668      	mov	r0, sp
    2282:	4b03      	ldr	r3, [pc, #12]	; (2290 <swd_idcode_throwaway+0x20>)
    2284:	4798      	blx	r3

}
    2286:	b003      	add	sp, #12
    2288:	f85d fb04 	ldr.w	pc, [sp], #4
    228c:	00002770 	.word	0x00002770
    2290:	000008f1 	.word	0x000008f1

00002294 <swd_calc_parity>:

bool swd_calc_parity(uint32_t n)
{
	
	uint8_t count = 0; 
    while (n) 
    2294:	4603      	mov	r3, r0
    2296:	b148      	cbz	r0, 22ac <swd_calc_parity+0x18>
    2298:	2000      	movs	r0, #0
	{ 
        count += n & 1; 
    229a:	f003 0201 	and.w	r2, r3, #1
    229e:	4410      	add	r0, r2
    22a0:	b2c0      	uxtb	r0, r0
    while (n) 
    22a2:	085b      	lsrs	r3, r3, #1
    22a4:	d1f9      	bne.n	229a <swd_calc_parity+0x6>
	}
	else
	{
		return false; //even 
	}
}
    22a6:	f000 0001 	and.w	r0, r0, #1
    22aa:	4770      	bx	lr
	uint8_t count = 0; 
    22ac:	2000      	movs	r0, #0
    22ae:	e7fa      	b.n	22a6 <swd_calc_parity+0x12>

000022b0 <swd_write>:

void swd_write(uint8_t cmd, uint32_t payload)
{
    22b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22b2:	b083      	sub	sp, #12
    22b4:	4606      	mov	r6, r0
    22b6:	460c      	mov	r4, r1
	//uint8_t clear_err_buf[8] ={0x00, 0x81, 0xd3, 0x03, 0x00, 0x00, 0x00, 0x00}; // for test
	//SWD_tx(clear_err_buf, 8);
	
	uint8_t payload_lsbs = (payload & 0x00000007); //take three lsbs of payload 
	uint8_t ack_plus_lsbs = (payload_lsbs<<5) + 0x13; //value needed to fake ack read 
    22b8:	014d      	lsls	r5, r1, #5
    22ba:	3513      	adds	r5, #19
    22bc:	b2ed      	uxtb	r5, r5
	
	bool parity = swd_calc_parity(payload); 
    22be:	4608      	mov	r0, r1
    22c0:	4b11      	ldr	r3, [pc, #68]	; (2308 <swd_write+0x58>)
    22c2:	4798      	blx	r3
	payload >>= 3; //shift payload over by 3 bytes to compensate for lsbs already used
	uint8_t data_buf[4];                              
    data_buf[0] = (payload >> 24) & 0xFF; //bit shift 32bit address into 8bit array 
    22c4:	0ee3      	lsrs	r3, r4, #27
    data_buf[1] = (payload >> 16) & 0xFF;
    22c6:	f3c4 41c7 	ubfx	r1, r4, #19, #8
    data_buf[2] = (payload >> 8) & 0xFF;
    22ca:	f3c4 27c7 	ubfx	r7, r4, #11, #8
    data_buf[3] = (payload) & 0xFF; // 3 msbs of this byte include parity bit and trailing bits
    22ce:	f3c4 04c7 	ubfx	r4, r4, #3, #8
	
	if(parity)	//NOTE: sixth bit of data_buf[0] holds parity
    22d2:	b9b0      	cbnz	r0, 2302 <swd_write+0x52>
	else
	{
		data_buf[0] &= 0b11011111; //even number of 1's, set parity to 0
	}
	
	uint8_t swd_write_buf[8] ={0x00, cmd, ack_plus_lsbs, data_buf[3], data_buf[2], data_buf[1], data_buf[0], 0x00}; //3 lsbs of payload become msbs of byte after cmd
    22d4:	2200      	movs	r2, #0
    22d6:	f88d 2000 	strb.w	r2, [sp]
    22da:	f88d 6001 	strb.w	r6, [sp, #1]
    22de:	f88d 5002 	strb.w	r5, [sp, #2]
    22e2:	f88d 4003 	strb.w	r4, [sp, #3]
    22e6:	f88d 7004 	strb.w	r7, [sp, #4]
    22ea:	f88d 1005 	strb.w	r1, [sp, #5]
    22ee:	f88d 3006 	strb.w	r3, [sp, #6]
    22f2:	f88d 2007 	strb.w	r2, [sp, #7]
	SWD_tx(swd_write_buf, 8);
    22f6:	2108      	movs	r1, #8
    22f8:	4668      	mov	r0, sp
    22fa:	4b04      	ldr	r3, [pc, #16]	; (230c <swd_write+0x5c>)
    22fc:	4798      	blx	r3
}
    22fe:	b003      	add	sp, #12
    2300:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_buf[0] |= 0b00100000; //odd number of 1's, set parity to 1
    2302:	f043 0320 	orr.w	r3, r3, #32
    2306:	e7e5      	b.n	22d4 <swd_write+0x24>
    2308:	00002295 	.word	0x00002295
    230c:	000008f1 	.word	0x000008f1

00002310 <swd_read>:
/*
NOTE: if sync lost (ex: no stop bit) target leaves line un-driven and waits for host to retry 
(after some clk cycles w/ line low), or signals a reset by not driving line 
*/
uint32_t swd_read(uint8_t cmd)
{
    2310:	b530      	push	{r4, r5, lr}
    2312:	b085      	sub	sp, #20
    2314:	ab04      	add	r3, sp, #16
    2316:	f803 0d09 	strb.w	r0, [r3, #-9]!
	uint32_t Wdata = 0;	
	uint8_t swd_rx_buf[5];
	
	//hri_sercomspi_write_CTRLA_CPHA_bit(SERCOM0, false); //no effect/not needed
		
	SWD_tx(&cmd, 1);	
    231a:	2101      	movs	r1, #1
    231c:	4618      	mov	r0, r3
    231e:	4b1e      	ldr	r3, [pc, #120]	; (2398 <swd_read+0x88>)
    2320:	4798      	blx	r3
	SWD_rx(swd_rx_buf, 5);
    2322:	2105      	movs	r1, #5
    2324:	a802      	add	r0, sp, #8
    2326:	4b1d      	ldr	r3, [pc, #116]	; (239c <swd_read+0x8c>)
    2328:	4798      	blx	r3
					
	if(swd_rx_buf[0] & ACK_MASK) // check ACK
    232a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    232e:	f012 0f02 	tst.w	r2, #2
    2332:	d02e      	beq.n	2392 <swd_read+0x82>
	{				
		swd_rx_buf[4] = (swd_rx_buf[4]  << 4 ) | (swd_rx_buf[3] >> 4); //first byte
    2334:	f89d 100b 	ldrb.w	r1, [sp, #11]
    2338:	f89d 300c 	ldrb.w	r3, [sp, #12]
    233c:	090c      	lsrs	r4, r1, #4
    233e:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    2342:	b2e4      	uxtb	r4, r4
    2344:	f88d 400c 	strb.w	r4, [sp, #12]
		swd_rx_buf[3] = (swd_rx_buf[3]  << 4 ) | (swd_rx_buf[2] >> 4); //second
    2348:	f89d 500a 	ldrb.w	r5, [sp, #10]
    234c:	092b      	lsrs	r3, r5, #4
    234e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
    2352:	b2db      	uxtb	r3, r3
    2354:	f88d 300b 	strb.w	r3, [sp, #11]
		swd_rx_buf[2] = (swd_rx_buf[2]  << 4 ) | (swd_rx_buf[1] >> 4); //third
    2358:	f89d 0009 	ldrb.w	r0, [sp, #9]
    235c:	0901      	lsrs	r1, r0, #4
    235e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    2362:	b2c9      	uxtb	r1, r1
    2364:	f88d 100a 	strb.w	r1, [sp, #10]
		swd_rx_buf[1] = (swd_rx_buf[1]  << 4 ) | (swd_rx_buf[0] >> 4); //fourth
    2368:	0912      	lsrs	r2, r2, #4
    236a:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
    236e:	b2d2      	uxtb	r2, r2
    2370:	f88d 2009 	strb.w	r2, [sp, #9]
					
		Wdata = swd_rx_buf[4] << 24 | swd_rx_buf[3] << 16 | swd_rx_buf[2] << 8 | swd_rx_buf[1];
    2374:	041b      	lsls	r3, r3, #16
    2376:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
    237a:	4314      	orrs	r4, r2
    237c:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
		//else confirm even 1's				
	}
	//else ACK WAIT or FAULT was received
	
	//NOTE: this sequence must be repeated after every read to correct for bit alignment errors
	swd_clear_abort_reg(); //error flagged due to misaligned bit during previous read
    2380:	4b07      	ldr	r3, [pc, #28]	; (23a0 <swd_read+0x90>)
    2382:	4798      	blx	r3
	jtag_to_swd();
    2384:	4b07      	ldr	r3, [pc, #28]	; (23a4 <swd_read+0x94>)
    2386:	4798      	blx	r3
	swd_idcode_throwaway(); //fakes a byte-aligned read of idcode, as is required by the arm spec after reset
    2388:	4b07      	ldr	r3, [pc, #28]	; (23a8 <swd_read+0x98>)
    238a:	4798      	blx	r3
	
	return Wdata; 
}
    238c:	4620      	mov	r0, r4
    238e:	b005      	add	sp, #20
    2390:	bd30      	pop	{r4, r5, pc}
	uint32_t Wdata = 0;	
    2392:	2400      	movs	r4, #0
    2394:	e7f4      	b.n	2380 <swd_read+0x70>
    2396:	bf00      	nop
    2398:	000008f1 	.word	0x000008f1
    239c:	00000935 	.word	0x00000935
    23a0:	00002229 	.word	0x00002229
    23a4:	0000224d 	.word	0x0000224d
    23a8:	00002271 	.word	0x00002271

000023ac <i2c_send_error>:


void i2c_send_error(uint8_t err_id) //TODO: use gpio to signal i2c master to read
{
    23ac:	b500      	push	{lr}
    23ae:	b083      	sub	sp, #12
	uint8_t error_packet[3] = {start_byte, error_cmd, err_id};
    23b0:	23cc      	movs	r3, #204	; 0xcc
    23b2:	f88d 3004 	strb.w	r3, [sp, #4]
    23b6:	23ee      	movs	r3, #238	; 0xee
    23b8:	f88d 3005 	strb.w	r3, [sp, #5]
    23bc:	f88d 0006 	strb.w	r0, [sp, #6]
	I2C_write(error_packet, 3); //use gpio to signal master read (new boards)
    23c0:	2103      	movs	r1, #3
    23c2:	a801      	add	r0, sp, #4
    23c4:	4b02      	ldr	r3, [pc, #8]	; (23d0 <i2c_send_error+0x24>)
    23c6:	4798      	blx	r3
}
    23c8:	b003      	add	sp, #12
    23ca:	f85d fb04 	ldr.w	pc, [sp], #4
    23ce:	bf00      	nop
    23d0:	000009bd 	.word	0x000009bd

000023d4 <__libc_init_array>:
    23d4:	b570      	push	{r4, r5, r6, lr}
    23d6:	4e0d      	ldr	r6, [pc, #52]	; (240c <__libc_init_array+0x38>)
    23d8:	4c0d      	ldr	r4, [pc, #52]	; (2410 <__libc_init_array+0x3c>)
    23da:	1ba4      	subs	r4, r4, r6
    23dc:	10a4      	asrs	r4, r4, #2
    23de:	2500      	movs	r5, #0
    23e0:	42a5      	cmp	r5, r4
    23e2:	d109      	bne.n	23f8 <__libc_init_array+0x24>
    23e4:	4e0b      	ldr	r6, [pc, #44]	; (2414 <__libc_init_array+0x40>)
    23e6:	4c0c      	ldr	r4, [pc, #48]	; (2418 <__libc_init_array+0x44>)
    23e8:	f000 f9fa 	bl	27e0 <_init>
    23ec:	1ba4      	subs	r4, r4, r6
    23ee:	10a4      	asrs	r4, r4, #2
    23f0:	2500      	movs	r5, #0
    23f2:	42a5      	cmp	r5, r4
    23f4:	d105      	bne.n	2402 <__libc_init_array+0x2e>
    23f6:	bd70      	pop	{r4, r5, r6, pc}
    23f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    23fc:	4798      	blx	r3
    23fe:	3501      	adds	r5, #1
    2400:	e7ee      	b.n	23e0 <__libc_init_array+0xc>
    2402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2406:	4798      	blx	r3
    2408:	3501      	adds	r5, #1
    240a:	e7f2      	b.n	23f2 <__libc_init_array+0x1e>
    240c:	000027ec 	.word	0x000027ec
    2410:	000027ec 	.word	0x000027ec
    2414:	000027ec 	.word	0x000027ec
    2418:	000027f0 	.word	0x000027f0

0000241c <malloc>:
    241c:	4b02      	ldr	r3, [pc, #8]	; (2428 <malloc+0xc>)
    241e:	4601      	mov	r1, r0
    2420:	6818      	ldr	r0, [r3, #0]
    2422:	f000 b859 	b.w	24d8 <_malloc_r>
    2426:	bf00      	nop
    2428:	20000000 	.word	0x20000000

0000242c <free>:
    242c:	4b02      	ldr	r3, [pc, #8]	; (2438 <free+0xc>)
    242e:	4601      	mov	r1, r0
    2430:	6818      	ldr	r0, [r3, #0]
    2432:	f000 b803 	b.w	243c <_free_r>
    2436:	bf00      	nop
    2438:	20000000 	.word	0x20000000

0000243c <_free_r>:
    243c:	b538      	push	{r3, r4, r5, lr}
    243e:	4605      	mov	r5, r0
    2440:	2900      	cmp	r1, #0
    2442:	d045      	beq.n	24d0 <_free_r+0x94>
    2444:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2448:	1f0c      	subs	r4, r1, #4
    244a:	2b00      	cmp	r3, #0
    244c:	bfb8      	it	lt
    244e:	18e4      	addlt	r4, r4, r3
    2450:	f000 f8b0 	bl	25b4 <__malloc_lock>
    2454:	4a1f      	ldr	r2, [pc, #124]	; (24d4 <_free_r+0x98>)
    2456:	6813      	ldr	r3, [r2, #0]
    2458:	4610      	mov	r0, r2
    245a:	b933      	cbnz	r3, 246a <_free_r+0x2e>
    245c:	6063      	str	r3, [r4, #4]
    245e:	6014      	str	r4, [r2, #0]
    2460:	4628      	mov	r0, r5
    2462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2466:	f000 b8a6 	b.w	25b6 <__malloc_unlock>
    246a:	42a3      	cmp	r3, r4
    246c:	d90c      	bls.n	2488 <_free_r+0x4c>
    246e:	6821      	ldr	r1, [r4, #0]
    2470:	1862      	adds	r2, r4, r1
    2472:	4293      	cmp	r3, r2
    2474:	bf04      	itt	eq
    2476:	681a      	ldreq	r2, [r3, #0]
    2478:	685b      	ldreq	r3, [r3, #4]
    247a:	6063      	str	r3, [r4, #4]
    247c:	bf04      	itt	eq
    247e:	1852      	addeq	r2, r2, r1
    2480:	6022      	streq	r2, [r4, #0]
    2482:	6004      	str	r4, [r0, #0]
    2484:	e7ec      	b.n	2460 <_free_r+0x24>
    2486:	4613      	mov	r3, r2
    2488:	685a      	ldr	r2, [r3, #4]
    248a:	b10a      	cbz	r2, 2490 <_free_r+0x54>
    248c:	42a2      	cmp	r2, r4
    248e:	d9fa      	bls.n	2486 <_free_r+0x4a>
    2490:	6819      	ldr	r1, [r3, #0]
    2492:	1858      	adds	r0, r3, r1
    2494:	42a0      	cmp	r0, r4
    2496:	d10b      	bne.n	24b0 <_free_r+0x74>
    2498:	6820      	ldr	r0, [r4, #0]
    249a:	4401      	add	r1, r0
    249c:	1858      	adds	r0, r3, r1
    249e:	4282      	cmp	r2, r0
    24a0:	6019      	str	r1, [r3, #0]
    24a2:	d1dd      	bne.n	2460 <_free_r+0x24>
    24a4:	6810      	ldr	r0, [r2, #0]
    24a6:	6852      	ldr	r2, [r2, #4]
    24a8:	605a      	str	r2, [r3, #4]
    24aa:	4401      	add	r1, r0
    24ac:	6019      	str	r1, [r3, #0]
    24ae:	e7d7      	b.n	2460 <_free_r+0x24>
    24b0:	d902      	bls.n	24b8 <_free_r+0x7c>
    24b2:	230c      	movs	r3, #12
    24b4:	602b      	str	r3, [r5, #0]
    24b6:	e7d3      	b.n	2460 <_free_r+0x24>
    24b8:	6820      	ldr	r0, [r4, #0]
    24ba:	1821      	adds	r1, r4, r0
    24bc:	428a      	cmp	r2, r1
    24be:	bf04      	itt	eq
    24c0:	6811      	ldreq	r1, [r2, #0]
    24c2:	6852      	ldreq	r2, [r2, #4]
    24c4:	6062      	str	r2, [r4, #4]
    24c6:	bf04      	itt	eq
    24c8:	1809      	addeq	r1, r1, r0
    24ca:	6021      	streq	r1, [r4, #0]
    24cc:	605c      	str	r4, [r3, #4]
    24ce:	e7c7      	b.n	2460 <_free_r+0x24>
    24d0:	bd38      	pop	{r3, r4, r5, pc}
    24d2:	bf00      	nop
    24d4:	200000a0 	.word	0x200000a0

000024d8 <_malloc_r>:
    24d8:	b570      	push	{r4, r5, r6, lr}
    24da:	1ccd      	adds	r5, r1, #3
    24dc:	f025 0503 	bic.w	r5, r5, #3
    24e0:	3508      	adds	r5, #8
    24e2:	2d0c      	cmp	r5, #12
    24e4:	bf38      	it	cc
    24e6:	250c      	movcc	r5, #12
    24e8:	2d00      	cmp	r5, #0
    24ea:	4606      	mov	r6, r0
    24ec:	db01      	blt.n	24f2 <_malloc_r+0x1a>
    24ee:	42a9      	cmp	r1, r5
    24f0:	d903      	bls.n	24fa <_malloc_r+0x22>
    24f2:	230c      	movs	r3, #12
    24f4:	6033      	str	r3, [r6, #0]
    24f6:	2000      	movs	r0, #0
    24f8:	bd70      	pop	{r4, r5, r6, pc}
    24fa:	f000 f85b 	bl	25b4 <__malloc_lock>
    24fe:	4a23      	ldr	r2, [pc, #140]	; (258c <_malloc_r+0xb4>)
    2500:	6814      	ldr	r4, [r2, #0]
    2502:	4621      	mov	r1, r4
    2504:	b991      	cbnz	r1, 252c <_malloc_r+0x54>
    2506:	4c22      	ldr	r4, [pc, #136]	; (2590 <_malloc_r+0xb8>)
    2508:	6823      	ldr	r3, [r4, #0]
    250a:	b91b      	cbnz	r3, 2514 <_malloc_r+0x3c>
    250c:	4630      	mov	r0, r6
    250e:	f000 f841 	bl	2594 <_sbrk_r>
    2512:	6020      	str	r0, [r4, #0]
    2514:	4629      	mov	r1, r5
    2516:	4630      	mov	r0, r6
    2518:	f000 f83c 	bl	2594 <_sbrk_r>
    251c:	1c43      	adds	r3, r0, #1
    251e:	d126      	bne.n	256e <_malloc_r+0x96>
    2520:	230c      	movs	r3, #12
    2522:	6033      	str	r3, [r6, #0]
    2524:	4630      	mov	r0, r6
    2526:	f000 f846 	bl	25b6 <__malloc_unlock>
    252a:	e7e4      	b.n	24f6 <_malloc_r+0x1e>
    252c:	680b      	ldr	r3, [r1, #0]
    252e:	1b5b      	subs	r3, r3, r5
    2530:	d41a      	bmi.n	2568 <_malloc_r+0x90>
    2532:	2b0b      	cmp	r3, #11
    2534:	d90f      	bls.n	2556 <_malloc_r+0x7e>
    2536:	600b      	str	r3, [r1, #0]
    2538:	50cd      	str	r5, [r1, r3]
    253a:	18cc      	adds	r4, r1, r3
    253c:	4630      	mov	r0, r6
    253e:	f000 f83a 	bl	25b6 <__malloc_unlock>
    2542:	f104 000b 	add.w	r0, r4, #11
    2546:	1d23      	adds	r3, r4, #4
    2548:	f020 0007 	bic.w	r0, r0, #7
    254c:	1ac3      	subs	r3, r0, r3
    254e:	d01b      	beq.n	2588 <_malloc_r+0xb0>
    2550:	425a      	negs	r2, r3
    2552:	50e2      	str	r2, [r4, r3]
    2554:	bd70      	pop	{r4, r5, r6, pc}
    2556:	428c      	cmp	r4, r1
    2558:	bf0d      	iteet	eq
    255a:	6863      	ldreq	r3, [r4, #4]
    255c:	684b      	ldrne	r3, [r1, #4]
    255e:	6063      	strne	r3, [r4, #4]
    2560:	6013      	streq	r3, [r2, #0]
    2562:	bf18      	it	ne
    2564:	460c      	movne	r4, r1
    2566:	e7e9      	b.n	253c <_malloc_r+0x64>
    2568:	460c      	mov	r4, r1
    256a:	6849      	ldr	r1, [r1, #4]
    256c:	e7ca      	b.n	2504 <_malloc_r+0x2c>
    256e:	1cc4      	adds	r4, r0, #3
    2570:	f024 0403 	bic.w	r4, r4, #3
    2574:	42a0      	cmp	r0, r4
    2576:	d005      	beq.n	2584 <_malloc_r+0xac>
    2578:	1a21      	subs	r1, r4, r0
    257a:	4630      	mov	r0, r6
    257c:	f000 f80a 	bl	2594 <_sbrk_r>
    2580:	3001      	adds	r0, #1
    2582:	d0cd      	beq.n	2520 <_malloc_r+0x48>
    2584:	6025      	str	r5, [r4, #0]
    2586:	e7d9      	b.n	253c <_malloc_r+0x64>
    2588:	bd70      	pop	{r4, r5, r6, pc}
    258a:	bf00      	nop
    258c:	200000a0 	.word	0x200000a0
    2590:	200000a4 	.word	0x200000a4

00002594 <_sbrk_r>:
    2594:	b538      	push	{r3, r4, r5, lr}
    2596:	4c06      	ldr	r4, [pc, #24]	; (25b0 <_sbrk_r+0x1c>)
    2598:	2300      	movs	r3, #0
    259a:	4605      	mov	r5, r0
    259c:	4608      	mov	r0, r1
    259e:	6023      	str	r3, [r4, #0]
    25a0:	f7fe fee0 	bl	1364 <_sbrk>
    25a4:	1c43      	adds	r3, r0, #1
    25a6:	d102      	bne.n	25ae <_sbrk_r+0x1a>
    25a8:	6823      	ldr	r3, [r4, #0]
    25aa:	b103      	cbz	r3, 25ae <_sbrk_r+0x1a>
    25ac:	602b      	str	r3, [r5, #0]
    25ae:	bd38      	pop	{r3, r4, r5, pc}
    25b0:	20000134 	.word	0x20000134

000025b4 <__malloc_lock>:
    25b4:	4770      	bx	lr

000025b6 <__malloc_unlock>:
    25b6:	4770      	bx	lr
    25b8:	682f2e2e 	.word	0x682f2e2e
    25bc:	692f6c61 	.word	0x692f6c61
    25c0:	756c636e 	.word	0x756c636e
    25c4:	682f6564 	.word	0x682f6564
    25c8:	775f6c61 	.word	0x775f6c61
    25cc:	682e7464 	.word	0x682e7464
    25d0:	00000000 	.word	0x00000000
    25d4:	682f2e2e 	.word	0x682f2e2e
    25d8:	732f6c61 	.word	0x732f6c61
    25dc:	682f6372 	.word	0x682f6372
    25e0:	665f6c61 	.word	0x665f6c61
    25e4:	6873616c 	.word	0x6873616c
    25e8:	0000632e 	.word	0x0000632e
    25ec:	682f2e2e 	.word	0x682f2e2e
    25f0:	732f6c61 	.word	0x732f6c61
    25f4:	682f6372 	.word	0x682f6372
    25f8:	695f6c61 	.word	0x695f6c61
    25fc:	735f6332 	.word	0x735f6332
    2600:	6e79735f 	.word	0x6e79735f
    2604:	00632e63 	.word	0x00632e63
    2608:	682f2e2e 	.word	0x682f2e2e
    260c:	732f6c61 	.word	0x732f6c61
    2610:	682f6372 	.word	0x682f6372
    2614:	695f6c61 	.word	0x695f6c61
    2618:	00632e6f 	.word	0x00632e6f
    261c:	682f2e2e 	.word	0x682f2e2e
    2620:	732f6c61 	.word	0x732f6c61
    2624:	682f6372 	.word	0x682f6372
    2628:	715f6c61 	.word	0x715f6c61
    262c:	5f697073 	.word	0x5f697073
    2630:	636e7973 	.word	0x636e7973
    2634:	0000632e 	.word	0x0000632e
    2638:	682f2e2e 	.word	0x682f2e2e
    263c:	732f6c61 	.word	0x732f6c61
    2640:	682f6372 	.word	0x682f6372
    2644:	735f6c61 	.word	0x735f6c61
    2648:	6d5f6970 	.word	0x6d5f6970
    264c:	6e79735f 	.word	0x6e79735f
    2650:	00632e63 	.word	0x00632e63
    2654:	682f2e2e 	.word	0x682f2e2e
    2658:	732f6c61 	.word	0x732f6c61
    265c:	682f6372 	.word	0x682f6372
    2660:	745f6c61 	.word	0x745f6c61
    2664:	72656d69 	.word	0x72656d69
    2668:	0000632e 	.word	0x0000632e
    266c:	682f2e2e 	.word	0x682f2e2e
    2670:	752f6c61 	.word	0x752f6c61
    2674:	736c6974 	.word	0x736c6974
    2678:	6372732f 	.word	0x6372732f
    267c:	6974752f 	.word	0x6974752f
    2680:	6c5f736c 	.word	0x6c5f736c
    2684:	2e747369 	.word	0x2e747369
    2688:	00000063 	.word	0x00000063
    268c:	682f2e2e 	.word	0x682f2e2e
    2690:	6e2f6c70 	.word	0x6e2f6c70
    2694:	74636d76 	.word	0x74636d76
    2698:	682f6c72 	.word	0x682f6c72
    269c:	6e5f6c70 	.word	0x6e5f6c70
    26a0:	74636d76 	.word	0x74636d76
    26a4:	632e6c72 	.word	0x632e6c72
    26a8:	00000000 	.word	0x00000000
    26ac:	682f2e2e 	.word	0x682f2e2e
    26b0:	712f6c70 	.word	0x712f6c70
    26b4:	2f697073 	.word	0x2f697073
    26b8:	5f6c7068 	.word	0x5f6c7068
    26bc:	69707371 	.word	0x69707371
    26c0:	0000632e 	.word	0x0000632e
    26c4:	682f2e2e 	.word	0x682f2e2e
    26c8:	722f6c70 	.word	0x722f6c70
    26cc:	682f6374 	.word	0x682f6374
    26d0:	725f6c70 	.word	0x725f6c70
    26d4:	632e6374 	.word	0x632e6374
    26d8:	00000000 	.word	0x00000000
    26dc:	40003000 	.word	0x40003000
    26e0:	40003400 	.word	0x40003400
    26e4:	41012000 	.word	0x41012000
    26e8:	41014000 	.word	0x41014000
    26ec:	43000000 	.word	0x43000000
    26f0:	43000400 	.word	0x43000400

000026f4 <_i2cms>:
	...
    270c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    271c:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    272c:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    273c:	00000000                                ....

00002740 <s25fl116k_interface>:
    2740:	00001df1 00001e89 00001f21 00002039     ........!...9 ..
    2750:	000020e1 03d38100 00000000 ffffffff     . ..............
    2760:	9effffff ffffffe7 ffffffff 00000000     ................
    2770:	00029400 00000000 ffffffff 00ffffff     ................

00002780 <__sf_fake_stderr>:
	...

000027a0 <__sf_fake_stdin>:
	...

000027c0 <__sf_fake_stdout>:
	...

000027e0 <_init>:
    27e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27e2:	bf00      	nop
    27e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27e6:	bc08      	pop	{r3}
    27e8:	469e      	mov	lr, r3
    27ea:	4770      	bx	lr

000027ec <__init_array_start>:
    27ec:	00000289 	.word	0x00000289

000027f0 <_fini>:
    27f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27f2:	bf00      	nop
    27f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    27f6:	bc08      	pop	{r3}
    27f8:	469e      	mov	lr, r3
    27fa:	4770      	bx	lr

000027fc <__fini_array_start>:
    27fc:	00000265 	.word	0x00000265
